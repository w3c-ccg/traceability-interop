{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "d06fd8db-1d6c-4650-90e5-ef45536cf881",
        "name": "Clear Cache",
        "item": [
          {
            "id": "7caf1416-8017-485a-b69e-e1a04055505e",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cf58d89e-6db1-4de7-904a-788339ad1525",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "67bab336-54ad-4651-91d2-c02556b0c4ef"
                }
              }
            ]
          },
          {
            "id": "e8f3a390-070b-4215-b4c0-f7b056dd9509",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7eb8405e-6c9f-4fdc-937f-9eff0b1de1f5",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "5c680e2b-0fc5-4394-93d1-9eef0009a156"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "cbcdfb3d-7b30-45e8-a9c6-fc59ad697007",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "28268d6d-4cf9-4e70-8503-d7572b0849d7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9a546cc0-1e40-4910-a04f-1bf00830d9ef",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d3ec4e5d-ecc4-4b10-b282-8648c4b20ce9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4209fa5b-0b80-44e7-89dd-fd8709962ba1"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "abb86683-f5e5-44a5-bfc8-aa2a32249628",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cb63a6f8-5fbd-4fb2-b1e6-6d35bc632019"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f404842e-1545-47c7-b89f-90cd8759e5cd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bdd45701-328e-4faf-9378-baad4f48e309"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c967c959-22c9-4985-b2db-e407d042535e",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "1c8545f4-459c-4fa1-9436-fb750c00c34b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5ddb97c4-e58e-4ef3-9303-244c58c8349a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "eee2895e-0093-4319-b375-74436e465139"
            }
          }
        ]
      },
      {
        "id": "40230b6d-8378-4783-99ae-3ef465d4e1d6",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "115a2ad9-c92c-425f-ac53-c6176e462d1d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "40472bf0-8707-4f53-8deb-c507613694bb",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "46cd5a85-22d4-482c-99c6-c97cb3668e49",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55a31a54-474a-4243-b1f3-39cc0800156a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "803da40b-3600-4dfa-883e-de194f051c87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf0b1d1c-ae0a-4e87-afc7-02bd2682cfbb",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e29dc84-70e4-42d3-b9d2-2c418b59ec51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "08ebb97e-5749-4ce4-b115-7bf72ab48f09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e36e1ab-7768-4c31-81cb-77c871ab07a6",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "236789ea-59ca-4ca4-9806-36131f3b4b4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0292bd09-1e29-427b-ae2d-2715ac395c4b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "124b871e-3f8d-429e-8363-a222819449bc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "70e8abf5-0f20-4de4-b7ce-2e5ef0fba4fd",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32827f0a-db57-4830-867b-713bdd0179d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c50962ee-acaa-4237-88fd-e7c0045f962d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "764bec5d-1f33-486f-ba3d-53a183dd6c97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "357abaf8-a271-48f1-b62a-b88f22e639c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2644539-634a-4f1a-9954-f167a29f8384",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b20ec300-8aeb-4780-a5c5-90c49c66bedc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "28d50c07-4f8d-4305-9695-94972531b2dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35b49bec-8a74-483a-bf9e-a1b974ee21b9",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "19db1ac8-3a90-41b2-82d6-939a7fbf79c1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ed434347-373c-4a09-8f91-c89bce2da8d0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "098d84e9-00e5-45f0-ac94-36f06b582875",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b89e0a3c-a707-4f5d-8766-de857041599f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "5899987a-784a-461b-b7ad-3096be39b48f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c8648d75-97be-4abc-bac8-44f7560a4e74",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "3f225300-5c21-42bb-8951-4c2ec1d8a645"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6efa3e8d-da18-4be4-9026-520fa9245491",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "951cb5f9-f62d-40ec-8e52-21eea468a668"
            }
          }
        ]
      },
      {
        "id": "d6a32ad6-77e5-4506-8901-dad8944e6fe0",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "62d16548-3eba-4870-b256-a1792af5a974",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ff374189-c450-4c6c-af03-bc18202fb509",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "4d62f49c-a1da-4f2b-b6ef-b714f83a3ebe",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "261a9f50-8435-47f8-a1d4-49651040d55e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4215d5db-2fb7-4a26-97ee-40f27727cc3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d488dc6-e7aa-47e6-9151-a2332a0a01d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c9da46e7-668f-4098-b77c-dda1f6860dd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82b3a74d-3c29-4616-9009-ab50b1861c84",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca81b467-da1c-4dab-a164-174aa019e2d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bada0de1-e823-4021-b934-4b2e0e0a3374"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ef86300-fba6-4da9-88ff-ecbdc4ff59cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6fb94fe0-80a4-4739-8720-5d92b2f7218b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55e63336-25fe-4051-86e6-43de6d9b80e6",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "326c62d4-7747-4273-bfa1-d337133bfba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fcb47a2-162d-4a7e-bce5-f62e288cf27b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "302f34cb-f37b-43b5-b632-8b8c2676f1fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4c9cd21e-8d08-42eb-bcf7-4c698eef7ed1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e442ec4c-4138-4494-9015-d1220b77971e",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28e790a1-c1c8-43ce-8b42-1108dda5ffa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d6e0c91-7f3c-4aef-8f82-6b52f713ff12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82520b50-6916-46ca-8c4d-1e59374ba924",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ff65677d-279a-4ab7-8cdb-5de64d9537ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fa1d3f5-d386-4493-91ef-cd7aae56e90e",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98fe00bb-afc8-474d-b0d3-92e7f0cf5336",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e34b455-412d-4303-8417-85e2c6844b09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca665f26-f51e-4f98-9be8-c86908232483",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8744b2a8-d3cb-477b-b1bc-7329f0b4ce9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13c48626-d064-49e9-8247-7fd6414bc87a",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "547d97ef-c126-4e8b-96cd-74fd99802f82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a22c7b8d-4fd7-4361-b6aa-d0a6850ce6bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0676f206-5a0a-4532-8048-73f2363ff93a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "44bb61a1-7390-4974-9a04-8956bc05f47f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6263638e-7a9d-4a9c-b7ef-6b8ae1e0ddbc",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cfe999d-eab7-4676-8888-29bd236a753d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6b372a0-0975-4a02-a7cd-745633574259"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e339e68f-7c1a-415c-85ff-88c8af2c0fdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "450cb4ef-2811-43ac-885e-b5c1bf157982"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcc856dd-ae3f-4bd7-8840-1e647313ad69",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4de3e05-2284-4073-94c7-6a4393f12fe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "831e80a7-6b14-4fd3-8220-eab21fa74910"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c0f4f10-650a-4332-823f-67afd0cc9f57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "09deeea3-ef49-40d9-a140-bb3a6eb60556"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34be42be-0700-4e65-870a-26f5627ce473",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e9c89c2-c05d-46f0-8033-66716ed61121",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a892643-fda4-44e1-9ab3-6eb7a95138f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef7a273d-fcfc-4aa4-8b11-3e0dec0f36bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e8a56ab0-93c8-4adb-8414-138f141e0479"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80eaa514-5a08-4faa-b579-c6780c6a58de",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ad1f90a-3891-4012-90dc-28bebc010b99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a91d4830-fd14-4e19-99db-0cc8d68ca41a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e5c352a-c981-4535-9bdc-a1c536bc7d1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "522d1d7e-9f73-4cc5-aa12-475036ec7f24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9c89a9d-ea42-4c24-9f73-6c5a03220407",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2193d064-3e5d-4f03-9031-a1513a2bf2ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bb442fb-782d-409b-be48-ea979dda40e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57a13cb4-a2da-41fb-9bff-9669553f84aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d0ea1618-dfce-4c7c-bf2e-b6d931953639"
                        }
                      }
                    ]
                  },
                  {
                    "id": "414b209d-f950-4072-8196-664da4af4742",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddf429e0-f516-4249-8ef1-c8679cff85d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "187680d6-3e1b-43e7-a87d-f82ca714043e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ddb7f10-37cc-48b5-9ab1-4e401cef6e14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8d4abe08-a6bb-498c-b244-d5780bd7e18e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "323dbaca-cfb6-4217-8639-bc808a874afe",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9132ef1a-d4de-47f3-a8fb-c4e931373bf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08c6e0ff-ce14-4acb-a5f1-6facd19acf97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb65e778-3374-4432-92b9-0a29edbafd3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9207294f-05d4-4e6d-bd5b-a496a119e1b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4c9a5c9-11b8-44b1-8af4-5cd4916b95ae",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed664bc7-68ec-40aa-a0ca-1a91650cb03f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31353ac4-089e-4b17-b4d2-94ea7474ee8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a51532b1-36af-475e-aa7d-1f93ee07ebff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "b20be947-527a-4ac4-8002-c71fab3d7e55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a55a5698-c117-496a-b52f-f0c2c8bbbac2",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d22e871-de03-41e3-9ac4-add8ca2bd0ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca3efa7b-5a42-4f91-9826-7427ab101ed1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba631696-0f4a-4663-acd6-340fe4cae25e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "62147264-aa4c-48b5-8c17-fb696a0b138d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d4773ae-ab06-43cc-ae6d-1cc8268bb86a",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8f9ff52-6d8c-4103-bdf8-6a471fe8f805",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb3e8816-1b15-4bc6-9d28-9cbf35e25579"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6480316a-184e-4ec4-9952-fde7f73d4783",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5daa38c7-8b93-4213-9d47-b9dad9fb4bb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88c01cdb-bf3f-4566-945b-a0830c7bf843",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c00ea5c-47e9-4fb0-9218-2a1bc26effa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46a943cd-5219-4ecd-aa68-3d332ebb8342"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aed1d04-2283-4d98-bd79-93ebbf4344a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4436d744-c11f-433e-8399-ab34edd091fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e68360d-b8fb-44e6-aab3-b1446e7da05a",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdad9333-97f0-475e-bb16-5c10904eb8cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "410cb66f-d589-4e78-899b-3119427823bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb75fa02-de81-466c-815b-b383e652a1ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8829898f-e3c8-4232-88a4-78f6de18de7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91e3e97e-e058-45b2-b85b-b57218c69aea",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "739a2956-f35e-477d-81ad-43552108ec8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26ec4b38-ea9c-4468-8c3f-4489a4ae0e28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "024aab9e-e6cf-4d01-a4b8-455eabe0338d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "da177599-537b-4aef-8c89-9c68bf6f54df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99a23bec-f2b2-4952-8c61-f00756787dd1",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bf9f346-4165-4dfb-9ebc-674325eb1f2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d5ccc87-55ca-45c0-b42d-1aae0aad7cba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e27e240c-31e6-45b1-ba68-d7d1b5cd4435",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "293b596a-a7af-41c7-8f4b-5ec56168c8eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5d3681c-3881-4d2d-b174-b3693c31d4f9",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b320458-a9b1-41fa-8e91-f16b6821b2f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c6b6d71-dd96-4408-b5d9-408694fafae2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99d9240c-86d9-4f97-b68c-a349c1551467",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4bdfd992-bb03-491c-a330-537529df8db6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e761c19-28dd-4b37-9f45-14640c1e8e6f",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86cfc13a-4b44-4f8f-8578-2fb3b978fa6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db21e33e-e02e-4f00-b567-fb6239d9ad5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a680b1de-59d6-47a3-a406-c737ba018d6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca72b8e9-2128-4358-8f45-649e2bc505b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe522e3e-604a-4795-aa54-764f4cd066cf",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f1a07be-fc6d-4554-97a1-4a8b3e27a16d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3969f9ea-ecbd-4dc3-9876-ec295b38fcfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "764c59b8-fbfe-4140-9a57-e58f7b7e1c79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "77bce4df-3f1c-472d-9bb8-59b8ce7d5ea8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caafac68-6584-4bc5-aa3e-89b6a2d7f5e6",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e6aa8b6-c5fd-4cbf-b0ba-fc681e5c8c50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b126443-d1a9-43b1-a360-cd68c019e087"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb78f90e-d7d9-44b1-80fa-b1bd27f28266",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6cfab7d6-4b38-47c0-bcae-1aa2f219fe9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "655c8fb8-8cb3-4b92-b974-21f6df8c0ba8",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dd7555c-fb85-4478-88f2-642efc0a7ff7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62d0608b-3aa1-4572-9652-50ecb99c1a6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dc1d8e7-3dc7-4528-b57a-8d5d9d3cd7ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "922278d8-9746-4508-840d-0e311b813b34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb73d8b2-21d7-49d8-951a-08150ef7c4aa",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8d43cb8-cb57-4a54-be8e-737530003ab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "328e8ae6-48aa-45f7-968e-a4351f246116"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "920fe006-984a-4394-8f5c-8029aa7b1f64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1b0f887-4671-4c83-b892-71d112c3f717"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30d8a7bf-6d27-48bb-9061-54a82e8a9303",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78f3b8f5-8360-420d-8a2b-a2f65ab9e3bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "159f2ec2-8503-4cbf-8c65-973861fb117c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b16fe08-acba-4103-b380-177b67f5ebf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf70007f-3478-411f-89b1-8c062d32c6bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2927d2c-b23d-41ea-aabd-d5746b332513",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47987e3e-2c15-45e0-9602-f126285e3b5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0e74c68-db5f-4668-b213-ed906c7d358a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "999d1020-fd0f-4d05-a0c4-e8656c080f26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce6ac786-63e0-4581-a7de-9bcd3e6890bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34066b1a-07f9-45c2-a5c8-333b01eb3765",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12109427-ba4c-4916-bf9d-511c00d7c28a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb68a8e9-e5cf-455f-9eb4-2cd15e6b81c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86e6a90a-ed9d-406a-acef-dac2d60afc0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf8eff79-0596-417f-9582-2e5e85fc2098"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e58da2fd-5ffe-4b7a-97f2-b4cf10921612",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58094c0c-9e99-46ba-b8db-e2ea0fb1ccb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "010db021-ccbb-46ba-9a46-9b55007953dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d289ae70-6aa6-4cb9-a8b3-25575f142c73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "34b86899-3ecd-4d9c-a818-9e0182b0a9bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88c64f62-9fac-4f34-8f80-3ecb2ba8752f",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01d34c13-7647-4b27-8442-7edca8c4602b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fe11249-fabd-4e1c-9d16-cbb6f29ab8c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35da5bd3-d3c2-400a-82e1-5f33e10ee964",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9985919e-ebdc-4106-958e-ebc4420a8642"
                        }
                      }
                    ]
                  },
                  {
                    "id": "491995dc-8a51-465b-876a-0b9ad8275325",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb33cc9a-0bc0-4c16-954e-9dc7be48dfc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f121e11d-bca2-4dd8-a5fb-b66c7e234f0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6019f55-ab0e-4b05-87f9-09ffcced73dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "09dce6c4-69ac-4ede-8b7e-632fa9cf6046"
                        }
                      }
                    ]
                  },
                  {
                    "id": "124227d8-441f-4de8-bf48-2b2e30c2d8d8",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aba6cc41-ad85-4a41-92ed-566602f4d355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "848855f0-99ca-416c-a9aa-66a6ba98667c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c13ea6c9-9524-4e87-a318-6a2d9febca3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e781694d-6f55-43c3-b81e-cf9b9b40903b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62484207-a63e-40fa-b1ad-6ade97b4ec35",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e23421f8-4e0a-4ae5-a7f6-0780013494e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3262d90-cf1f-47e0-9e7e-a71d7cb8a6ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0487ca7c-791b-4934-a805-7ac866e3b29f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5f2d38f-2c5a-4943-8335-b674d5fceeb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c175ac1-dc60-4d00-a6bf-1f0560de4f06",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93f3418d-2c3a-46a3-8bda-07f47c479439",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1048578-76d6-4464-9f87-b0660a75e1fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba7e1a5c-9eb1-4d1c-8cf1-de63bcf58cd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bee1a294-9968-4479-9313-52bbdeb6620c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3452d82-c150-4157-8fda-56e14067a609",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "302c0286-973f-4db0-a4c1-62dd32ea3473",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28c7bb6c-53ab-4672-b46f-6db661080d32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4fa375e-6ae1-4da0-b3fd-1bc089a0b288",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3104ed9-27b9-4cef-89f2-8e1890d4062b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceb9c4fd-1fb6-435b-af42-0c345390b0d6",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d74819f6-9396-4e78-9bae-545e00b4a86d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68e0d80c-9236-4674-945f-a34bc204cacb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab0e5651-a328-419f-8ef0-b9832dbe63fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "617842e7-b1f2-4e64-b35a-0e41ac782378"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12c638d2-95ad-4234-a5b4-3182f6d144ed",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d86a169a-8cd3-441a-8fb9-d32d678dcdb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "abf2d013-f0ea-448c-a154-0c33ec141db9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c43444f9-3ba3-45d4-b26e-17e1f6fbb79f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "31b8870a-f4e7-4afb-92e8-4d7c0ae905c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e99010a-e615-4995-8264-a8a2b146dbe7",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eabbfe7-1a1b-4a87-989c-ca9433aeed2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96bfb214-9117-4b65-ac72-5bab8562a3c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b2d5a8b-0203-4412-9e31-8cae598f2e89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0167cdbd-76fe-4396-b200-5634e6f38d63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96898f8f-f90c-4a66-a728-4c69ba67d85e",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b167b1e-d970-4c3a-bb98-c3c5c7b46cc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b21a213d-4cf0-4904-be9d-3b922a1b5afd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94baa7c8-87fc-4212-8a6a-f7bef62f29aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d3d49a38-1cab-4f43-9412-ac1394c05567"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08df7d2d-21cb-4ebb-9c2e-330485aa3ab2",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d15d0e4-9912-43b9-898e-3307cd3b0a5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e263885-5216-4f32-b021-5d4dd8880613"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f87f948f-6227-4b23-8116-0308826114c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a64ae6b5-7c69-4585-bdd9-715d7650605a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0021fbe-bde7-4e36-86a8-650971fd2c1e",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "819af01c-f726-4f91-a58c-1fcab2d71d97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2310213-3ace-43f2-abc8-658a54cb0072"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29d4672e-cca3-4f02-9b03-35b25d97c01a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "03226f07-dbac-4ac0-a378-a45896e2cf23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e77c8c4-9aea-4812-ba3f-4bf853407db9",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0770c242-279d-4c74-8e03-091c42bb4891",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42e6be83-60f9-4169-be96-0a553280ddb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09c8244a-1211-4627-83de-80e18d1d7ffd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7c745351-7769-44d7-ba5d-d60c88f7dce5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71b7538a-d9bb-4586-b3de-4dc2fe2013dc",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19e29e12-bad1-437b-86c8-da4506c18ae0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4c15fe3-ece1-4258-b080-8c53be61645e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d222849f-fe54-49a3-b85f-c3c1c16738a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "34530f1e-255b-4d46-8f99-9a5c01f07c0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d67040fd-47fe-4173-8228-0c6e45b7fa85",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af37a491-0ab2-4505-a7ca-ffd77718b46d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "618b36cb-4488-4b72-a567-344dd3672eef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afbbff86-d5cb-4ed8-ac72-8d265a8612ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "1ad53501-ea03-4632-a37e-5ae78b93dae8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "549d58d7-d532-4bfe-940d-9ea8ccefbe1c",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6019e929-0508-4214-bfdf-4b8a088c275c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "924ce42b-5fe4-4914-a7a8-6fe5a8129c03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af86673c-1f40-4ab3-a0ba-992c9c4155b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "75aee934-56b7-4722-b0cc-238f4766832f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "965fb91a-d18d-4507-945c-0ac1e673534a",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9241a06-1e86-4a15-aaac-7845a48614b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03ce0c25-f2b6-40f3-ba76-8b5c7e3a3c1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45537c5f-fcdc-45f4-9430-90a133a4d898",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3edc3f0-9997-41e4-944f-6e37cf437097"
                        }
                      }
                    ]
                  },
                  {
                    "id": "008915c8-408f-47a9-ae1a-887348fb9336",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "809ff50c-fb99-49f9-8b4a-f995bc747373",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "654511eb-36eb-4b45-a2d0-c55e02519f2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "041e3075-b6a5-4dfc-9dd8-acff3ff5b616",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1421c04e-c0a8-49bb-91f3-d2e07a6ffc37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc1f7ffa-e2e3-4ee8-8067-9e6e2f75dc8e",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a7765c4-7303-48fc-b81d-4cd71e4c5d45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69fe67d5-bd54-41b7-abfa-a03ebdcc0e86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "339c82df-3f28-44d8-abd8-3260f97c5930",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "aad35d6d-324a-45ec-a550-a65b1837cf51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3e487e3-e739-4a23-a6c4-2c62a101168e",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35a3ebfe-8a2f-4299-8cb2-61678a766675",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8781a58d-95a5-4f48-8955-63ffafd7b390"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2781ab6-34d4-4786-ae0b-86684e3fdc30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b80591c9-2476-422d-b6c1-c5663d5747fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba915229-127e-4e85-89d0-927d94a488d5",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9429b715-0ec1-4f31-a0f6-bb618aacd6bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60ed0a97-614b-4b85-b89d-c46a3fdea2d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22a92364-aa01-43e0-9898-4cd986edd7bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "37eebe5e-f1e4-4672-8ba3-0c60b78e0b6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98dbd734-51f6-4d25-be1b-ad5f0adb1a8e",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f342fc0-d12a-43d8-97d4-963982a5b467",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a0290ff-712c-4c6f-8912-d8bc3b0eec98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "954ba27d-f530-468f-b0d6-9d150393b26e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5c5473bc-889c-4c8b-9868-8f8c768716a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "172c8aff-a292-4c5c-8947-22b17b35cb7a",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef294871-899d-4fc8-b0e5-72ac1a5bab6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "286c269b-c571-4128-9476-89535552766d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61d23178-130a-4071-8701-126930c3721f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "d0ea6719-46af-4df2-89f0-9f3a22b17bbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bb5cf36-701b-4dcf-af33-2b0b993633be",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6788a6c5-f57f-4162-a812-40b5383bed8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b04478d6-4f17-4b29-b1ad-a753118c29d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "784e8a12-10cd-44a0-9290-95047a733c2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a39ee21-b559-4a6f-97f0-6bb3366d8dc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d976fa6a-69ab-4479-9655-9efbb88aaf5a",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "def2a183-95fa-41e3-8671-92c285f5b232",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6862b452-b074-4de3-a351-8c9261e29b9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "547a641f-8f5e-4d30-9c22-c69da3461f8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b45dcaac-1621-4bac-b9c5-2f1e90e18a77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be3ab177-5591-47f0-98df-b7685663bfd8",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd208de3-65a2-460d-99c3-0443ce4d58ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71799885-3155-45a8-9e95-26adfc5ec20c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "606b13f6-88b2-4203-bab1-307c307ec29c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c247853-ac62-415d-b6cf-d74254b021e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d8ee56e-1b68-4e7b-a196-8e82ae59a12f",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17edce9d-204b-4c0b-b1c4-839d5d755829",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68f8e180-8654-4d82-94f4-e43fb3013f99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23a45150-9b10-41a7-a90c-ddc47dcaeb2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "670ce521-720e-451d-8bbc-b437758fc3d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbcaaa42-2961-4d9d-881a-3a2b39a285d5",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a655bd4-dbfd-4711-a990-ce8fa232d3d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8004c170-89d7-4885-9c74-74770554ada2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ec54430-069a-4b64-85d3-14baedd5f875",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "8c01ce76-101b-446d-82a4-596c1a307906"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af99ae24-973c-443b-ac5d-b21377977a15",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32d6ac01-bea8-48cc-ab36-58a256bfdc7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26d85fd6-c792-4c8d-b2bd-5796ad9e626f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07db3c58-6c4b-4225-a575-7ee05baca0fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a547f26b-1219-4fd5-8ace-186298e4e431"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25bffe55-e003-4bc3-8c08-1cdec08fde05",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bccd4bf2-0358-458f-8025-428b1b164a72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0be72134-734d-4103-9206-1304711ab2d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30c883f5-6e17-45c8-bc4b-498ce2cb9bf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "fbe6828c-0d5e-49d4-8118-30a307190f6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e51f41e1-85cf-49cc-8f4c-a6f4bfd445a7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c771c7c3-379a-480c-931e-3d299165a0ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "455c6795-3395-4560-b87e-ce25887c2119"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "233db8a7-8263-45cb-8f4f-b7d1693b6dc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "4dbc6b3d-f3b4-4da0-af03-71f2e941762c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7ecdfbd-e3f5-452d-895e-91cbdab4ba34",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb50a92b-660f-40ac-99f9-c9f20603a6aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "caaf2484-fca6-4bdb-ada0-70f8cffc881b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "060b5ad8-35f3-464a-a4b4-72454aefc0ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f5b5aade-6ec0-46ed-b4b3-927c21c0f92b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4111e2b3-f3b4-4065-9393-bea55914ef30",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fe00875-23fd-48e7-b609-59dfc8fb2b9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb090ae1-e72e-4a93-beaa-5a7d07089626"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f34857fa-62ba-4027-bf8f-24d228e44faa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "a0e7e609-4786-4a0c-a9b2-017b46717cb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c0bae74-5e75-44c1-be7b-f2087ffe4a7c",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53a6dc84-1007-4f13-8bfe-4c71609b88b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab73b2fb-8cec-4338-9df7-eac0dbb76dab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99f0e770-f50e-43f0-82e1-22ce04175e69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "40cf791d-6b5b-490f-9178-4933856bced6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1f4ac42-ca60-4d19-90c2-b5b845068584",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e20189a-13a1-4af8-963a-6faefe953d06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "898dd19f-1a1a-4f9a-afdc-60211c79cb62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9707d57-43bc-43c4-ad26-1205e73c83ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "69dfe8c7-f8b3-4d8d-8c39-3eeae4e859ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30b29add-09a0-45f6-9d6a-750e11825ca9",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c760c34-44cb-490d-895f-c0ddb31a9cfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c08dc652-10a3-406b-b2ad-6aaa9d8388ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "014ce2d2-d51a-4f66-9077-c5103eb38302",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d142e28-5a22-427a-acee-95c6d4aa40bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cd47cbf-ea75-49d8-a32c-1b91b0e72e14",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30aea9f8-c9a4-4e80-a362-be0f1ab3f602",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8e6bfc8-7e7d-486a-a7d8-a8bb6dae543a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "909fe4eb-5979-4bf5-9af9-033ee787e640",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5c6af750-5942-4768-b5d9-7c6e5c1cc9e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94ab02e0-f5a8-4d2a-bc05-5a335e3d7c20",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f421f71-fc59-4fb5-afa4-54f1b2fddb4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51969f90-1427-45e2-bbed-09891db257b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37d81255-9108-42af-b0fa-f51411e3d20e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "21b78a28-8865-4ee7-9f92-b9f0993a10d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11feefd2-0a0a-43bf-8efd-0aea0524855e",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14fe1bec-c708-4007-9fc8-ad777811417a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cccaf9ad-5301-40c3-9912-18976208cf41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d009e52f-7765-43c8-b86e-b13efabc6809",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f1f57132-8bfc-4d4b-b1e2-1af24e634d05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e7c7a69-e572-43f4-b4de-f4eee7302454",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3828132-f839-4716-ba68-b9f94650e705",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5ddfc07-8462-40e5-964b-c6f74cd22974"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fc253d3-8825-4525-9c26-8ccc8947c871",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "74b63fed-f151-4dff-b43a-0e7f2e78578f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b55d416-6bd2-4b1d-8b8d-df42614ff48b",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85a39925-26a4-4e58-88cb-e4cf5960964d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fedfa618-ae3b-4fa9-a945-653acbc341ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6d57a88-721a-4d2a-97c8-96c512298741",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "50a954e7-b31a-40c9-9a28-cfcbeeef780e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "239f365b-a3fb-48fd-b774-b6e8e0430b40",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "137a19ec-cee0-4a3f-b232-119f37d74f56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb1261ba-f68a-46a0-95b9-82b3459c07ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f8a79e6-ff3b-4e38-b488-3793f0f658ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9d1ff86-39c9-43b0-a244-cbd6f45ff6a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e68e664d-23c2-4527-988a-075e69a08e46",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b65f2778-5b51-428e-966c-626d0c002e41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "256006a0-f02f-412c-9054-a0a911000a34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "948f483e-3256-491b-b40b-43a27650eae3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b7a0292-b96d-4114-bac1-b12933107314"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a16d5101-b14d-488b-b95c-f35aa028572a",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f000166-3373-441f-85d8-eb25a785ff11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cef62afe-a568-4342-833a-bb8e1e70a5f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11bd712c-5cd1-4096-a1f4-41955e7465dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "05b84cea-9263-4ba1-bbf0-e5c90578d871"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc5d8680-37f1-43ea-80b1-9a3a69fb2f8d",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ac80912-e6ac-46a2-8088-4bc2b7ca2c9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f43f77f2-4110-48ea-993a-628372074534"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16db58bb-3ab1-427a-a7ef-b3de22d9a5b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a730a028-ba04-44d5-a38c-2ff79f99391d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb86c131-daa1-49de-bd24-0923201904c9",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "043280eb-4a38-4b80-8420-509ba8035b6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e5d59e4-f257-4e30-aabc-96c7c066d64e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b819fc0b-0c57-4b58-a150-d1f18ed74306",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f88a9027-f0ea-4255-93fb-6ecd318b5854"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72e3edcb-791d-4004-863f-b644147acb65",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a93f8fa5-30df-42fe-b562-f318afa9033b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e38a333f-5cbf-4b62-94d1-02ec58d1813f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7df0f48-d4b9-4002-ad20-f70b7e52c7d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4c1e109-bf53-4874-a756-5764a56a8e3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5984d3c-205e-44c3-b0ae-bb55ef5f0086",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c56d7d2a-5ebf-4b15-90d8-c3fee1f60051",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0954e53-1004-466c-a5bc-3ab186aaed26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb560840-b76a-44dc-9c9d-e7e6ec591f90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4669827f-0efe-470b-a417-43b70553dc79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fa0d1c9-fb6b-4af0-8fbd-d73a85f33d15",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6405feef-e904-4ab7-bf45-75d94bfec7b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa456941-b19a-48d2-801f-7cd836f9e17d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16c0bf66-2b0c-4604-86ed-8fe90ece3748",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "99f93323-404a-48e9-8f75-639db241a4e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "021c0d17-f195-4805-b08b-5f6faf5a3112",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95e3b2d4-6cb1-4811-bc91-3348b3bc16f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b464d19-bdce-4b79-9e20-efd903ea22c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "358274e5-0415-4588-91d1-c0e3163a9c73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b83c4539-4e3e-4efa-a653-bc2a3ff18bef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ad890c3-b6a5-45e1-987f-cf6efd98b1d4",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16210954-e124-42c3-a44b-df0cf1725efd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3becc02b-3615-4286-8b51-11aa331cffcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16db8884-2d5b-41a4-8cb8-4e3f655b64cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ae7cb697-9155-4289-8b66-bef3f9d067a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "121a168b-c4ea-42ea-8ac4-e49d2d2a1c3a",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89b7cad9-5913-4b26-8c6f-3407d31f5ca4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "878cdbaa-39cc-4ab3-a13c-82c3d37bde3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44767148-30e2-401f-8096-e8f04496c788",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "34d373fa-3a07-453f-b42f-5e242010cbb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7514bd5-fa45-4e4e-84a6-3339b85336ee",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf623531-d8b6-4cd0-ab99-f616cde3d2cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2deeb75-7391-4a9b-b49b-e6404f16028d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9957d9cf-3865-46a9-a5fe-fc1829efcdab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "21ffac9a-8d39-4c04-93fe-1172a56b7eca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d3cce76-dc9b-48d0-80e4-0ffe872e62e8",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "851443c8-e0cb-4061-9d79-4ccee81d727f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "696932da-0bfc-42a1-92a0-164c6f75fc1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34db6511-40a1-4bd8-baf6-13a79d98a9ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "79b793ff-b832-4f89-869e-5b062ecbc284"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa381de7-5d84-4f6a-8f33-a6608f1d875e",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c608b201-992e-4e81-ab43-f7a7f10deb95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb1e5c38-dfef-44c6-a13c-31a73e34d25d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f070711-d475-4c98-a095-d5e0d7294faa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5370a409-fa49-498b-93de-2ed139f1a20f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ee9493b-6ffd-499b-8f63-570a52b8f758",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "800a049c-0eea-4f2f-b69d-23572289a883",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "039766de-0749-4302-8480-92f427ea7ac5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce9f8da9-1d0e-4517-81dd-52cdc5b0f1d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb6a2be7-7f38-4106-805c-6e39a2abe187"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29956d32-25c6-4c23-bfdd-88a08dc825cc",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "421db987-aca1-4d2f-8425-0c28ab3b5982",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5bd0ed1-ac8b-425d-907a-f0b16084458b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fb24261-4b68-400f-8b5c-3d2d59b49c30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ff0eca49-6d81-4235-b208-e7f29c509be6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbbb90e6-fb32-4d06-b0bd-f89bf07c7d92",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f9b543b-f991-4570-83c0-22358d120795",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3bf5832-4f7b-4f51-acab-91dd694a0bd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e17e2e4b-a37f-4cfc-9286-5b4582c1de23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "983e1271-7753-4bcc-bd2a-41f3dbf51e7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1566a84e-28af-4525-ab92-a18209ed5b86",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2899c32b-a06f-4a26-b4fd-86d9fa75c3c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96393762-8607-412f-955b-1dce275d8a62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d09be8b4-3e03-4a09-a566-5eb7dac8d98f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "cd9f772a-feb5-471c-8f62-5552da0253e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa515408-4398-471a-ba9b-b68d02f58463",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ab354a7-5714-471d-8230-1ef01c1a1af1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c956ae8-c03d-4f94-b324-9e748ac8f490"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40c992a8-948f-4b2b-9b21-b55c40cf49cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a89e3e4c-b394-4060-ae71-ac2531a21a8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57f7b961-4649-46b6-9032-767ebbbde6a1",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02c9d6c6-98aa-48a8-a3d0-4fef45b544b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db0955d6-3a1c-4551-b4e4-457f4fa5f9fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "522e13e1-5828-4c20-9aa7-fe8395c636e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f068feaa-536c-49e1-8c8a-69231a0ce848"
                        }
                      }
                    ]
                  },
                  {
                    "id": "997d609f-3f5d-4eb1-95e2-b67e336d992a",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98f11832-2a34-4ddf-a7a3-1968b649b431",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbfa0971-7fa9-4a13-b18d-cd50961c7a90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "498e7314-3329-4fea-aea3-4acfe45d108a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b8676c97-2fbc-4cd2-886a-facc0092cb33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16f80219-6d14-41e5-84fc-e1ab77797b23",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10fbf997-bbcf-4064-8c49-5af89e8b64a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af27a45e-b970-46ad-8153-f10a8e6bd625"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "205716e0-13e6-4179-b2b6-7064a871eb6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "8ebfe733-7a37-4379-ba78-47aa58d3e31c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b15ae7c-003f-4207-b50f-e47b4ff5a048",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87310da8-a322-49ee-8b00-1ab8f90dc552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "5a6b78e8-19ed-40f4-8a29-5c8737fcc081"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24ed2264-6abd-4ed9-875e-7d1455f95b36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "3f3bad52-dfd6-4939-82ff-e300dbaa1054"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "95475919-7a03-477e-9fdc-1850cbb7cda3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ade17c84-201a-4840-a73b-c4f77e78d98e",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c6df8b2-1d02-4310-a838-340dbe5e2625",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "39ec268c-b844-49cb-98b0-a8b80651da16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68b5e52a-d802-4141-90a9-a18be261c80e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "6ec0c41d-850f-43a7-9ea2-4460f2d44acd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "085cabf8-2c6f-4168-8063-d0e2829f995c",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1c5fbb8-97fd-447b-a9e0-92e3eec47103",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e530704f-8d03-4950-bdc1-e0ceb47f02d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed29a273-96fd-4849-a7e1-0eb23b9a3048",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "a1458ca6-c919-49ab-9c9f-b26d4aa40815"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fc1aaa5d-6c3a-4516-a02f-7860e6e54d46",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3adba3fe-6d84-4f70-904a-8cf3b4cc9cb5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "25ba551e-efaf-40b9-8bbd-7ddfb03233e9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "573278aa-1811-4ed5-98ab-0f6f11752a4c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "963e84a0-a1c1-40dd-8c7d-c497ce49e459",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "95bfd9f8-8e6f-4be9-a13c-194cd852ff58"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a897a100-afba-443b-b7a8-42a6869fb12f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4a966d5b-b113-4137-aeb2-6266fdca30b5"
                }
              }
            ]
          },
          {
            "id": "8e4ae415-3f8d-4b82-9cc8-f39d5bfded81",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c8a3a07c-8099-4d21-b2b2-d72e23f462d8",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "15dfe942-ecf0-4cce-82fe-a7567830ecef",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "eca3a8c6-ec75-47b1-907d-54a56ad45f49"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "81b1c50f-11e5-4493-86c3-51b4bbbfe983",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e658cc49-bbc3-469c-810e-33dfdd6d83ff"
                    }
                  }
                ]
              },
              {
                "id": "74d5ee95-cda7-4f86-94d1-c564d20d1740",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "78811403-8918-4e44-aa85-8f7a785583ef",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bc4e979e-f0ad-4c2a-9ef0-85942fa4bf0d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "49368b4f-b4bf-4365-a40a-f6eff457022d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "368855c5-db2a-4660-9ec1-faee1972b608"
                    }
                  }
                ]
              },
              {
                "id": "a7019dd3-27d4-4a25-860d-3caabae97c11",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4e70d761-6ec7-47d4-8806-0e9c60509c01",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "009ee2cf-8c37-41a8-b640-b2bb3ca150ab"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9fe40342-2ed8-494a-85f7-0dd92f712f21",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "93d5157c-4c27-4c83-902c-4e42ee63be6c"
                    }
                  }
                ]
              },
              {
                "id": "bc665910-bb99-4e7c-90e0-185c02b5554e",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "46b9036e-3bb0-4b0f-8cc5-be6c41d13d92",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8560d2dc-c794-42da-bb89-cd5540e8bcee"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "503b084f-bc97-4afc-bc94-9560fb7cd12b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "574a32cb-0cf2-4cbf-ab74-7d0662710d7a"
                    }
                  }
                ]
              },
              {
                "id": "e6d4c714-ab0a-4e82-90ac-e13bd9d5157a",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d47192a2-52a1-48aa-b68f-81ac357cc3f0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5f34b569-509a-4657-9b00-0ccdd8f070ba"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e420b224-0e81-4599-814b-656a926f0a1d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9dd98185-263b-4937-b666-e624a95cc805"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "15f91a05-db8b-4950-b83c-accc37184d54",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e1e4a47c-0abb-4dfb-9fbc-298c4a8bf034"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "55748a26-5d9f-41f4-a5bd-55f1bc408a75",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e2da073b-4772-4b24-b216-0c0bb04222b9"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "51943641-9b74-423f-b3e2-fef0d19c1532",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "d94cd524-30a1-44fc-ac01-b973f295b2ec"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "669e8867-7af2-4642-aeb1-31f4dbacbc69",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d04fae26-0233-474f-8ae9-4f60439b04af"
            }
          }
        ]
      },
      {
        "id": "11105cc9-d924-43ff-bbb0-8ec2271cd4d8",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "423d7ef0-249a-4010-85a9-a23a14899abb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9b56294c-af1f-4998-81b9-3238d6025d66",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6af7cc86-1cbc-4e84-a1a3-30b9bc49ff0c",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "145d428f-e6c9-460f-b808-ddad45e2f7ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "304e6de4-c0c5-46e8-8e23-7312907bcda1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4b1a166-5281-47bb-8815-66cc9bd58e65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "98338408-a765-41a5-84f3-07dd13eb92e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0eae392-5cb1-404f-ad69-ab344c829838",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54ac6dbb-93ae-4509-8a9b-ef1de1891a43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5715ecf9-a31c-4aa7-8ead-c294b8d13f89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bae0074-4d7c-4bf3-9720-85b7caf49aeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3daa3f99-6440-4987-8685-878335056930"
                        }
                      }
                    ]
                  },
                  {
                    "id": "730f09f6-5e0b-4861-bb98-d7fdabfb7482",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c41eb88e-b4d3-45a6-b6b7-b8c00166ab99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88739c47-094f-4ce1-abc6-88c29880dddd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "733b9909-30ec-4782-a04e-d97d45541fc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b4b01a5-5a5c-4807-b760-b53af28c165c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "643d2c78-e16b-4086-953f-b1da8e2f9b10",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2f36411-ed43-463d-b6e7-2adcd3e579b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d30b681-6e9d-4f86-ab1b-989908addd18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "702184b7-dd51-4deb-84d3-d298dc0ebf14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d780f2d6-84f0-413e-91de-cf43fae1f6d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "444c8887-14ed-4ffb-86ec-250e091af54b",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f70d345-0886-422e-83f3-35a8d062476e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07b8724e-11d5-4b19-ae9c-bca59a2dc68b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "307b9776-8350-4aaf-87d0-d966796b5fa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f2f60d9-6659-4004-8de0-a22952f3da56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52635965-832f-46a0-a0ba-96e8b0e25542",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c3f92fd-efbe-4ab2-8db4-623fa51d00bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "306ef7e5-bb6c-4104-bd5b-abc087f137b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aade5e0b-071f-4603-9a43-c2c3083e2a34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4c424382-e410-474e-b14a-d91c59334441"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ebd5cd2-e63f-412e-a2d4-8556501c49e0",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7a9141c-d968-4f64-b72c-21229b7ee0a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd932795-cc75-413a-883b-cda117dbf5bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d709dd2a-ae0b-4fbf-be01-03fe11daed79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "264b4713-3a65-4a5b-97f6-8a53560e4b33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80362425-622f-4ede-bd48-fe7076f4f81a",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b290eb8b-7c22-444b-922b-07315ecf9c74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a90a5f5-566a-448c-8fe8-cde2d2d23931"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1837f79-b4c3-405e-ae13-504952d4ab7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "947db41c-a58b-460a-8883-ca06bfab52f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5701e1f6-c830-447e-be84-ea24a2a9114a",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9296e37-a4c1-4adc-af6d-a517bfea80f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06785364-44ad-4b63-ada3-8dfcb7105b52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c623e5b4-2a5e-4dbd-9bf4-16061bff2300",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "883dd9f0-1b7b-407f-9f11-bc9df08f00d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ead5db7a-6d4e-426e-8599-36eced079bcc",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84402188-5dd0-40ee-a15f-4cb20a85e42b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3efa8a6-dac3-456c-982f-547d44c0413e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ac84413-4d7c-4891-8577-38be0bb25c78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "afa477e8-a2a0-4323-b5c3-733279c220f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e02170d2-867a-44a1-8476-3c15af6bc842",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19729887-1839-42a6-bf7f-2ebee294aacf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd282dfc-5a92-49b3-b059-51cebaf94498"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40543d5f-185e-468c-b40c-0e4e886ba226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "5ade30d6-a934-45a2-91e7-761f2ac07593"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf761631-5219-4962-a794-2c48c72d22e0",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fbf6cb0-634c-46da-bb57-d602dc9ca35a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a280e2e0-e154-476a-9a89-06fdee4b3516"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd9489f7-a423-420d-a18b-d59b08cc4220",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "526f55a8-99e2-40a0-8306-eb577ee8bcd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee180d73-cede-4f01-8bcd-50f21b8a3da3",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "767c0740-bb30-4d2a-8292-dd1bdb9c4867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0471e663-eaca-473a-9e86-1133c42a2822"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36c5eaa2-dbaa-4c19-8181-37d7050b6a99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3f31767-f25f-4cd5-b19f-cada77877970"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bce52f6-2c41-4c30-bb04-ef582c2b94b3",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f962c32b-4d6a-4023-9b8f-4e560674346e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "361318d4-df8e-4587-9d00-a6e67646889b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c4253d3-082f-4b20-b341-80712f3ea81c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad90335c-e7a1-4eca-b819-337df3c8f999"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d815c42-76bc-42af-abee-8770767557b7",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "085db68c-31b3-4290-8ab3-12e0f92c0015",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a234759b-fad0-4ab5-b0e2-72b19ccd90d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "940e31a4-3a28-4d53-8732-3ed06b2a89ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "f59733ac-e99e-495a-b49b-e13f2d549966"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18d10c6c-d37d-42c0-a0c2-25c2e826d754",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cbd872d-0c09-43ac-a253-ed0503fd56bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e9c79bb-7b15-4e45-af28-edecf3730e86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08a991ae-c1d0-40e4-865e-59652d648c5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b30f7c7-ff04-4473-ac5c-140fde6fb500"
                        }
                      }
                    ]
                  },
                  {
                    "id": "618a7902-c73f-41b1-9def-453feaadef38",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3d6c43c-2d5a-4a52-bce7-eb27ed3992d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "884c40e6-2bce-48c4-9201-390fe26edeb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9af5df03-185a-46fa-9ed0-dd3ee4289c6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0e53109-5ff9-4813-a7d7-9444779bb127"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32b7bb1a-a2f7-4589-b061-d98f6fbddd54",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ea83d71-312b-4106-b41c-9315d4a4c38e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a43532b5-01f8-4f9d-a668-04fc7c314769"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3b8ce5f-bcf7-43c2-ade8-6e305211c320",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "fee3521d-7aea-4e69-8a66-ae8c54b0476d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca39d67b-b82f-4980-b911-19790a1dfcab",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a120ce2-ea65-4ddc-a7dd-dbbb0e5e269e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ece56a6e-03a9-4f22-8f07-fdbf45d5ef2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09957e8b-b3f7-464e-9841-532221e43eb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c56be665-6d2c-4ba8-b990-59d0fccf8a24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "645b6d28-f954-48c9-b37c-a1c11172af67",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c9a4f7d-39f6-4c6a-9b20-dc381e650fe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "450e66e7-240f-44f2-be68-1f80f9dce847"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f47f70ef-9a09-415c-b74e-9558798da9fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e4e9279-44de-4d3b-bb0d-1e9d4e5c8765"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebd84625-f6ba-432b-a0b7-74b278418d17",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3e58d01-a5ed-4060-ae7b-f50095800e47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65e4e800-317c-4ab7-839c-086beeba1740"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00d88601-4172-4ab9-829c-c71d311271c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "343d9765-3ebe-4e5e-a6b5-ad3e63501347"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05de4dd3-3214-46c5-9fbb-3fee687f9dc5",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4d86f3e-ae22-4473-b86b-84f57d0630e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c402b66a-f4be-4015-b6da-2409853efa34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09319106-dff8-4c1b-90e6-2c73a15e9235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe373544-5505-43db-bd42-d9dd49df64d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "284075c7-69ea-4059-9295-a872b27786f5",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2590028-c5d6-4a09-b04b-3373fdde9512",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdbd9ff5-fb63-4f8e-8eff-481441372b90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aba611aa-6c80-4c94-a395-bbf779baf072",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9cdacc4-d757-4ee4-834a-1acab9f4040b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3796712e-da2e-4361-9c86-4dec3d65e8e5",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dce0016a-cc9d-44a4-90ec-27b3908f7a4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "291172c4-2b7a-48fc-87ad-bc371ca92c39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d8c4696-f613-4dd4-a676-c567a5e15c51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "db940494-a0a6-476d-8ef4-213d8bc67404"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8280defb-913f-4266-bc54-0892a66ee5dd",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9567931-df1d-4ed8-9c4f-0a0c890457ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "795ba165-f5fe-4dbb-a66f-3d460e1ef8ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b50ae0dc-8e5f-4434-bd94-efcda381e044",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a769707-1f7f-4ebc-b4c5-4898a8607ef7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a62a3ad3-4265-49b9-8b21-9f2c428ac607",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfd046fa-9a16-4441-8a9e-0e2377a68adb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c0348aa-28c1-4189-9a3c-c9c88c11b9b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31e8a8d3-7b75-464d-bea9-bba51947ef4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a89505a-c94c-4669-9fe1-b1db0f76ac37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e0c04f8-2489-4906-9a6d-3ffaadd05a1c",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f31547d-7644-490f-9cef-659ac5c2ce18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3abad9cc-22fc-4bac-a7b7-235c4064654b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df3bc086-df51-4afe-b1e5-4b6003fc0031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "56dbd60a-78c8-4b8f-8de2-deedc662c1e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6139d799-c6cc-436e-9249-fa7b78e1573d",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0f9c671-e5e6-498c-95ac-c01eb0ae82d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eee289c6-d643-4485-bf9c-c1ab084aa5dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9374b0f1-56ce-414a-b99f-823455d40297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9105aa60-838e-48fa-98b4-dc19e88641e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd57f357-cf4d-43f9-b6ed-7c3f66f3e5dc",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58d04d72-6c58-4b9f-b99d-96568926807d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08f2a860-2ee2-4a5a-bf29-fae9fa494e49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "393b0214-1909-4f8e-b991-a65fc3326fe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "adec7a23-a978-433c-b606-d7990a02f1d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6431b1e3-10a0-458b-97dd-1f6290eebe94",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d237edaf-9e92-43c7-85d0-7a6e4efeede6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c9a9c65-4229-4fe7-9b65-fbcae89349e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a2feb76-f156-43d0-b485-1895acb26a36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab81526f-d483-4267-bf1e-038c610ca12e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d67ad053-f1d2-4d64-bdbd-00be6c7cf148",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f81e5677-9b5d-492d-a49e-1300e3bb943a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bca41bf-d384-425f-9333-38bba41a2e7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "391b4ae7-29ef-482c-972d-bf0d78075465",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fed1fab2-7110-44cd-b259-6c07269115dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8d51cf7-5a19-4d7c-8ee5-31af4d662d4e",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b04e5d2e-9cc4-42da-b470-bd0bbb7b5a41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d7e5d53-60a9-4878-a605-304919fce5b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b16f79f4-fa5a-4b9a-a17c-0bc8b1454cc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c64130c-497d-4e20-966f-509ba5c757f6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d0a85141-6a4d-4ffa-ac41-a87666b0390b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cf4e6bde-fa0c-48b8-912c-bfccdf3dfa8e",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7513c60-f164-4a28-b068-31b9aec003cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b65ac5da-ccac-4eea-b9d9-e1acff32dac6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af5c9ef5-2a87-49e0-8801-3614785859f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9bc7d1a0-c851-448f-8a5a-8289ccffd2eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e936c8f-d5df-4338-997a-ac586abed289",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16158213-fdcc-4a1d-9ba1-f7d2220fd067",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "90210e49-02c1-4673-974d-2171f435b5fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f600296-bbba-4f77-b3c8-7e2aa21efab2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d167ad58-e946-43c6-89a2-35ce89c6c19c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "51226610-4c92-4ad6-9d06-e6b51fa28f56",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "180d7af3-f0c5-43ea-bfc0-2b2eaa6fa2f4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "15610b4b-7659-4a6e-baeb-d9fb0248ed88",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "492192f0-cb67-4bf9-9825-3397b0765bd0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6f6aeae4-a3bf-4eac-92cb-82ce93ef6075",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ae81d243-beb3-4912-9a71-449109c617c2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6ac93d35-b17c-4028-8fd5-eeb217062776",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7cbc65f8-46a4-4757-94f0-2ca145f0fe48"
            }
          }
        ]
      },
      {
        "id": "79eccf11-d870-430a-ad8c-755b1a0a1b5a",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "7b36b08d-78ae-45ec-9994-0bfdde5e3685",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d04cd327-9e04-417c-933d-02ec7ce0280b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "95be7370-d5c9-45be-ad0a-b669e19bfad8",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66c271ed-7130-4039-b88f-d4700bd97632",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c21aa101-6686-49d4-b13b-7acccd2b70b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88db675b-b4a7-4471-af04-2f1632abfb73",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "176e22e3-b469-4350-a1f4-b876c8eb0c8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed33faa2-b94b-4863-991a-09e44f6c3c96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e958f0b2-b94e-4897-9181-743c6dddd193",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "204c769f-c395-4acf-817f-0f7316e208a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b0baab7-9a36-487a-b8de-41d3455c144e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f46347a-5bc5-4b2c-a66e-b9c7adb7386b",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9d6ec41-6ff1-4d42-a3e4-480613e9d820",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44ed5950-edb5-479a-9849-fed24304742c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78784961-60c6-4788-81e0-0ac3bcfaea84",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e97fb8e-3fa1-4455-adb4-e71c23ba35af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef0198f4-5429-4862-839f-aaf65e1b5d50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50dfcff4-f481-4cd8-9c1c-09370e545334",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61663284-925c-4f84-ba37-802380224475",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf9bc211-3a3f-40d9-b91e-ba7f594c0568"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ef41561-e877-4ecf-8208-74998d58769f",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68272380-acaf-4a7d-abad-cafe450c5fc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23ca876b-1076-4ed5-b4e1-d33c1640f8a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "884b8ff8-99c6-4625-a8a6-4074b46bac3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52a04b28-8022-41c7-a41b-353e6d7e96c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33a2a1f5-2025-4384-903c-cc0b52eeec45",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2db603c5-f8bc-4a0d-8ec1-fa7e4e01aa1f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b29e3cf1-09ef-4d45-86db-3b7e80b2cb8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d8d2ced-8a6c-4fc1-b1b3-37fd8ec1f421",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "774c2f74-e4d5-49bb-84f9-6eb117325e51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "566eecb9-9370-4a00-a730-5382515a2753",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "526c7dc1-928e-4d8c-ae9c-2f8cb92502b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b69614ff-ec23-43bd-acbf-aec412af6714"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aae7c1a3-db26-4daa-a17d-b788ecd65621",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75bf4f28-bbdd-4f0f-ae57-bf6255719095"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e796a56-3f30-4470-b46d-86d8a9a5ccd6",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7f5806a-a9f7-4ac5-bf01-1db9692b3b4a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "524591a5-918a-4252-8481-524221761dfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d971937-9266-44e2-980b-0bf3a548e709",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7421bc34-8b76-4d66-a136-5261db0e691d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bad0dddc-8001-48de-96ff-716ae3a0ead0",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4705b8ee-bea0-4a35-95fd-2c58eb2efa3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b2bcca7-b06c-4c1c-9183-b6ecd5e37765"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64f978bd-9e0d-48d4-bf19-f1d2bd2c412b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc164557-26a0-40e0-86da-915869af68b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06e9dacb-e2ad-4f39-a07e-8277f0815d2d",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8930c9d3-9ee9-47b2-bbad-86ac8acd6544",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4406eec4-491a-4197-bdcc-6baa2a1c3f36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fd6dd3d-c530-40cd-9c65-0691e08e2c45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "325e25b9-0e2b-4702-8f45-408da7dcf7eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fee641be-77e8-4abd-b474-2321facfac98",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d99b27d2-5016-4a41-920d-5e7120883168",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b780d76c-0244-48a9-b490-e78927a3c769"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88a43afb-8de5-4622-9dc0-7976c97f1b49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "942d513b-1e0b-4b59-ad88-aeb85e3bd79a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db9a15cd-9c80-4b44-91c2-52bf37743066",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83555896-7af6-4e47-9809-b3c206228490",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2dab3338-8d4e-4cca-81a2-e39a89f02f09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f642f847-3624-4467-82e9-69b9f786ab40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a97c40c-1e7e-4ac2-9fa6-c83f6e0c599c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb0e5b55-4e6a-4c2c-8b87-b9387f5d3965",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68e17f0c-302d-4403-a673-c6a69dc79866",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63db13ed-7d7b-41cb-9bf3-298fcabb8724"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43e7ae62-f5e5-48f1-ac76-4aff068110e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90f1b8c1-28a5-47e9-a2e5-420de838a334"
                        }
                      }
                    ]
                  },
                  {
                    "id": "917d6b33-2990-4777-901d-a513d81a73c7",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95a0fde0-e9f8-4c54-a7d4-9c2c8cced147",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "787bafed-a04a-4b9c-b947-ff00fa9b1070"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b55b9a6a-93ee-40a0-95b0-804586e9d3e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38f3c723-c062-4dab-b26a-a6a15db639b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aae01ab5-b13b-483d-9d77-d33885fe85d9",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69958ac8-2622-491a-9843-11158765561f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b10def7-b613-442c-957c-8b1295b17a70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2258e30c-af03-49ed-a479-1fa0fd19cd7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6affbf98-40d5-4ba0-96f0-1c3be8479aa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db65460b-6345-44e0-8ca0-b683c5e26bc6",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4882c8de-68a7-45d9-994c-465787610907",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35d78bbf-3fff-462c-bb27-9bf72a769e4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0bc3389-9ef7-485c-b364-83b0926b311d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb0ea128-9a50-47bd-953c-72329f4c56d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b62e774-3a55-4cee-b2b8-ab2524b0030f",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ee65d17-b149-4bb3-a79a-f5d4d3223263",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37d4b209-3f1e-41b5-a939-23f4473d5cc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b311f8e-5f14-4107-bce3-654eb8807abd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90a02aa3-12a8-4dab-a0df-aa54146a52e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ca539bf-b0ec-4028-99f5-be11889aa635",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f44e951e-e2c7-4d84-963e-0f01d04d3f99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b237bd44-e194-42dd-bccb-17e2e79c0d0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "562cece5-3522-4c0d-94c0-64b75f4ec816",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c21c7ad-d2e3-4fdd-8717-33cea1315d70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39e8e107-26fb-4232-9edc-e1fd02ff18a7",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c47984e9-6881-449d-aebe-a324050245a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "833ecadc-e150-47de-89da-0227762818be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce3a9cf6-e319-41c8-b459-65b7dd267200",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "494e365c-b8dc-42ee-9fbc-fb86d22cbe46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "466c0a16-b4d8-427d-b417-fa360c18ca86",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4055857d-9910-45c7-8496-e82e12a8437b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ce05654-74d5-42f6-bde5-000675d327a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "379934a5-95c0-4632-8d53-8b93313beeb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03a48067-068d-4483-9052-a78c1b969867"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d36dddb-6862-4349-b905-5c2df06324ac",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96e0b703-ebfc-42f6-979f-7c94ed08237e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8fd846e-5b2d-42cb-af90-177710588b7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0ce3b2e-1bfe-410e-823e-04b2c98040d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17c40771-abe5-4d2d-8262-563718eda631"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dccd4150-f01a-44f9-9853-ac25ee457a1b",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd05cf87-aa58-45b9-9146-cf62cb3b56f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35b848c4-fc61-44ea-9c35-6d1555472946"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5af96b3b-4fac-4868-a2c3-0892d93c843b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ef91b19-0535-4639-8073-4fc322c41c1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1860272-05c9-4b35-96ba-5eb55bcd7392",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2013c6a9-b420-4184-8b73-f177accf0428",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7adef3b4-fe5d-415a-8f12-f103258c6ce6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0be94ece-e78f-4625-8cab-8155ca32dc6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "829e032d-2d46-468d-be2e-b105f48f33c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c667251e-9e86-42ff-b865-bed00b2805e3",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5a83962-d65c-4ab6-821a-af099bd7498a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a31a896-4f0b-4371-ae1c-0aaea36590cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d02a7ac4-595d-4dfd-960f-f3f406f603e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23ab18b4-af60-49b3-84cb-ded0ada0446a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b95e9a65-1c7a-4697-bf0d-7e226a36efd9",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6a93bbf-cfbd-41b4-94b0-71256575c477",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bcea78d7-8410-4fa9-a779-b28e37ec9e5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c464f6ce-4c17-43d1-959b-9c172a0d78c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81cbd48c-401d-455b-a954-460958f44e52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5971f960-5895-4a79-a641-de75813f35b2",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d6ed4b9-db2d-4ffa-991d-c3357714c10c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71448cd9-5b2e-4e81-8531-81c7ecf44c8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83c7d871-2c08-49e5-a310-2cb2effd0af4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db1787b7-41cf-476e-ba08-58db93bf6a3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f91916f3-344e-4475-8213-26c2756ba515",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46452c9b-868d-45b8-906b-327214637865",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48b14512-091d-4ec2-b32c-7d53890d568b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f48d5685-a2fc-471c-8ce1-cc1a2281ca77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5647fcd5-7a15-4004-b5f9-5847bf431a99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "685e21d8-b7ae-4372-8f1e-da9d3a636a2d",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4206ba2-1775-4820-9f22-0fe9aa0efbe3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6336c0cd-7ed7-4dc2-97b0-9a84ecfe7b1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "639ad0c1-dcd5-474c-bfd3-53fae6ad9b2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3318cea0-c3a0-425f-8846-dfb9b35b91f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cfd07e7-5c27-42eb-8105-e2fc9a2eae46",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11457399-396a-47cf-b934-9f3ef6af5c81",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68903520-4741-4e22-aa8f-a3966bf46b87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "063e3dc1-aeb6-4851-9ad5-1debc501a64a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f185084-4344-48e5-a6ba-7692c235f61f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51449ff9-fae1-4359-8287-24f8a2973b37",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58a5c54b-af1d-4b8f-a8e3-940f8e19f7d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54d90b40-3aee-4f3c-b012-313a44fa7d59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bfc9972-d747-4349-9390-26b9b39d821c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e142548-0576-4a3e-9ffa-310fcb2e34df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1691cfa-8035-4822-a550-873346f83e77",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2b585b8-99de-4230-bd94-b22fcbbd114d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20005c14-f8a0-4295-95c5-6346ad725894"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ca440b4-fac4-4507-a816-f8787ebf9fc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec454d57-2ddd-4e8d-b41c-fda84dce53c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bd42d6b-38b6-4264-bc7c-2b93050ac177",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4234579a-206f-4bcb-803e-284956eb790c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2fc596df-47a6-44fc-94e9-f34d5251ca1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbe54b9c-6d65-4d2f-b70c-e98b59d918a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d277fc0-4dfc-41e1-a950-a21a264f9b3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35d4d10a-a406-4bc5-9538-245794a3d412",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a001052-f414-4a46-b9d2-a5be1b1a7430",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6df876f7-602e-4592-9b18-912e71b13937"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ebfefbb-2ee0-4d60-abc6-76c8f959d6bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08dfa62f-bcb1-48ba-b38f-169c77be63da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba01ccd6-1580-4a85-abb9-7900d14c8d8a",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03b84f49-df5d-49ca-ba53-7b0b1649f764",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "085a3514-3c85-45e9-88d7-b49fd2efc091"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2818959e-d1ad-4a2d-9c7c-262698714193",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e13f589-7a92-4953-89ad-9672009ca1f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7617251b-6224-4529-9138-5dc74fed9594",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12d6fa60-1418-4cbf-b552-b0131464abf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55cae01f-ad20-4a80-bf03-471a002fe286"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aa073f9-cbae-432e-9a21-ca299fa470d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcaf68f7-c915-415b-b67a-7491e6eff529"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcc8a31d-4ac9-4ace-8b81-b1ae61f699fb",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdefb45c-d79b-4e30-90bf-5f977aba7c7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a4ae45b-6a23-4efc-bf27-61b989ff3192"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddd8db08-b044-4c96-97d9-4bddbb802975",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59abe0ba-b800-440d-80ec-0c7e7e472fcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eec5b81-ec36-4562-ad9b-d8586f26fb2c",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a38cfb93-8d78-4586-a37d-762e0e16a785",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58ff4cfb-b346-4be3-88b2-e89dd7b4496b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cc16ac7-e83a-42af-b638-7d69c21f4602",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbecc997-d9ee-4a19-8899-3bf5d584dbe0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c792fa17-f8c1-4035-b48c-113e300359c8",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a3d19e9-ae10-406b-a1ef-cc7f6f16c7de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c731d715-a36f-4bf7-b351-d7cd1ccb5ab5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9ad5bfb-49c6-4260-ae4f-571db8f98ae3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fb7506a-d7c9-4ff6-be6a-8f28e5177030"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bbbef75-c63a-439b-b647-34478c74de9f",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "437056f5-a224-4f8c-b255-4ac129bdfc8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1bc6859-1bc2-4138-851b-ea249b3e0441"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ea49775-413b-4781-8e27-b685bd655b07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24f4b5d5-c111-4af1-a968-f5ac381ad8d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89634886-4c7e-4f8c-84b3-59f8d4ed56f7",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fab7b493-cfa6-457c-b8b7-3ed890ab6396",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4518dbd-6bf8-4fff-a8a9-3db8d281aec0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d84abad1-4f0f-42c1-81b7-73f3a807bfcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcfbbbca-3bca-4f89-b830-dcd14eb20801"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34640bcc-c6be-402d-ad28-3c39db5a9556",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecbcdb13-d140-402b-87e3-30fe8e332531",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfb2f3e9-3cac-4e49-91d3-4f4023c0b936"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce198a62-715a-4164-b2ad-8a040ce35bab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dd7dc5e-0a23-4d62-9c03-148985df7d54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12c859a8-3dad-4b6b-8703-c8598e244f09",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78207eb7-01ab-4b9a-bc82-af3184d0e5d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ffb1f98-1cba-46f9-a065-21eae78eb9c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e016f78-8e34-4f4e-a64d-32511d1a01c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df46c2a0-24c9-42e2-8d62-76066f94cb6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6beb0758-6445-46e7-85cd-f6f302d7d541",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7905b4ae-6c41-410e-8e68-1305a23d8409",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a47418d8-9453-457b-890b-7aa5df6694c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a177214-f6ef-435e-b584-f522dfe2f2b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "816ae822-142f-44ba-912c-a3d8f0ea632b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32d58e50-a295-43a0-bcd7-493b99809c47",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88789650-a4aa-442a-ab18-e3d74223d6cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c752b17c-6498-4651-a0de-245407b320ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d626f18b-b930-463d-8dd7-57803063fbe8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be2eea37-b8cd-4bdd-8548-67e55d3fe57c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d7940da-a923-4f3a-8bb4-df3efbf69318",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "774a3132-71f7-4cf8-a1c5-e4d5ec7aadac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11f33964-c465-471f-aeb1-c00e0b7ca113"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2a65583-17f2-4e02-b0de-e40a24675b21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff343ee0-ba68-47de-a4d5-2f54ad606384"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a69c0e4-fbc2-481f-83c7-786acd0c5cef",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e836ef9e-58ea-4a9e-9377-e0d6221f65cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "657671f3-6f17-4052-895e-04e1c074bc8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e866cded-6ca7-4d4e-9500-51c5de78d8be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bb6d0d9-cc5d-4ee1-ad92-236053563602"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06d80e5d-c7e7-4a9f-a453-c99b685fd984",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb250cbd-d8e6-423d-b37f-42c67a382534",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e47057c-42e6-4003-9d64-5993b01915f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dd0f60d-52b0-4008-a198-8135b4feec14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d507d49-1a67-4d0f-a638-5299b01bdfdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3478ef85-cc25-445c-9c77-bffb12f933f5",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccca9fd5-93b6-44cc-ba89-d0c71a2f670e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11d6fbbf-ea53-4e4a-9227-69acd3eb5273"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ab97335-3771-4774-8985-03312a1c8307",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9810060-84ca-43cf-a68e-f3ee1877f39e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6540f43-bd35-4126-bf7f-ecba3f45d078",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9354a412-ab4e-4030-9246-6e8d2eaa6b2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "432b807f-a77d-43df-af9b-be302722e969"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a7d6bd2-931e-475c-9c8b-91f30d425dcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3030a319-2703-4cd6-963c-ef25712ab8a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3e5bc1b-6f6c-434a-878f-654b9ad4df4d",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea6908ab-37d2-437e-b8a0-5c021905a98a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a8bade4-de87-44c9-90ad-66673b13568f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d22550b5-8955-481b-8aa0-e3a96a81f56f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ff186b5-8f80-4777-a224-1ecddc56d7d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fefe610-7128-42fa-bce8-2e9806b3e156",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9176a615-f4c7-4d0a-8a4c-48ad83b1b151",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c87df06-fd76-4a20-a474-b84a35387f78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07f892e4-2deb-4568-b194-b9904a778655",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6148173-4970-4ee4-8eac-8919582a8581"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da1c886a-d5ac-4fda-888c-ddc4ce2f381a",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "887de636-988c-46a8-8a0b-031302ef31ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f524f11-d8cd-406f-ace8-bea0e466017f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc8af8cb-7cfe-4624-afdb-8dff3f54c9d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9eb918bc-dc6b-4a4e-bed0-38d58852584d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70108822-745f-4cc4-9292-5c3deaadc94c",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdff114e-9748-4262-9771-28ec996f458e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52331f84-6c6c-4536-915c-4e641fd0ad96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "038b0860-4553-4fdd-b53d-3712b779b8ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c5ea489-eeff-476d-b1a7-bf2dba894348"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7a7504c-df76-45ee-a3d1-7af3aa5c5235",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b0d451d-f38a-42c3-8861-557d8d967fc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b1eff00-58e1-4d0c-bc12-293d5d92fa6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2099d5bf-cb94-438b-8ac2-1817db167797",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9337497-b8e7-4184-aa95-d077615a567b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "300cc06c-ff40-4e80-a489-2f9c099f8a44",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1a93df6-0155-412d-a429-d499833df082",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8005cab-3cec-4826-a59d-93b19da9ea8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1daac5b-2e45-4e89-a5b8-ea1c4ebe1e4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8665ff79-6b68-4400-beb9-71af6ffd0e29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92e40091-4adb-4a2a-96f7-b536b7951591",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8ce0011-3c99-4fef-ab3b-0820f0f486ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a41b93c8-edfc-4cff-80e3-85f1f12e0cb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "682b829d-8cf8-4985-8096-dbd9a42025f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "734708f7-f85b-46d7-b4cb-8d93ee6849e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33d09e3c-dfd2-495f-8ca0-2f54db229077",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a93d0a68-0267-4f92-a96e-0a0d534b4f73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4636d1b-a9fa-40b0-913a-725da796a786"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0494059-f224-4d03-88d5-db68f9dfad66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9524bc4d-2818-4dc2-bbcf-c47ac5746731"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb33c330-0f0f-4280-9164-185387a2c0df",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5725091-6657-4db8-aaa0-b4a940eca690",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fe96281-411b-41f7-8d43-a4c570ce62ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38efb0e0-4404-41e9-a4cf-cfba871ab32e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "389e213e-a385-4645-833b-3ba6ddfd93b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fc1f5b7-9630-4bb5-b58f-566dcf5224cd",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82021227-75dd-4b3a-b440-39b7ca2af25d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "274ead03-e6ce-4b6a-b5a9-13b99f8506e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9588eb93-3faf-4d94-bee0-8cfcb942f217",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb9e4a4b-d11f-41c6-84d7-7f344f9cf471"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd822d48-92e2-43bd-b8d7-9649e89a8375",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89c23bb0-3892-4207-b306-db3a588a206d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75236145-8108-4895-9f83-92a9e25f2173"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68b0034b-0f0b-4127-8c3f-80ffad03ab09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1f1b8bb-192c-4f0a-84ef-c7d084c85086"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b614bef4-0b4b-43be-97c9-e3f3a9f59970",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de77415a-0b5f-47ce-89a2-87941255999c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f20a5624-40fb-44e4-a6d6-f88d5edbb17b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dd8bd69-3c2f-45d1-97c4-c29b259c5d46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c14b272-5ac3-4015-b358-6796ca95cfab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4ebd72b-c129-4f8a-94a0-32b804ed8e37",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5525f1e-a1e4-4c19-a154-11005cfb864a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7b27952-9f54-4cd1-87b8-24d29b1144bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76aafd2d-a39f-44d9-b534-748e5f8229c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01d02bbb-7227-4724-9c72-620f18558465"
                        }
                      }
                    ]
                  },
                  {
                    "id": "affcdd5f-6009-4b97-aabd-5d77bf7261c7",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28b719c2-a708-48f0-a11d-2d5e889624f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f532beb5-503b-45cf-8bda-d432fcd9114a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acb9d037-1413-419a-94d1-b5924d8425f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dd62c5a-9d51-4154-9d9c-4e13a5cc13c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a568512-fb48-49b3-9567-814af6cf2f54",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97ebf817-936d-4d66-8af1-7e14d07436b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5529453f-1530-421c-b195-6a27020f828e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ec683cb-614a-48f2-92d4-dfa4730b067e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68cac870-2bed-4b37-9454-2fdf28a11b19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b469e9e4-cff7-4ecd-99de-10db920212f7",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b282557b-f604-4450-9c95-e57cc06a216d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "977ac3ff-f819-49af-8252-a103482ba92d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d534ccbd-249e-4dfe-acca-991b12ec3096",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68ed8b22-d74d-49a6-b2eb-2d4895270a84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41aeb745-85e1-428d-926f-779e75a739c1",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90a16662-40ef-4610-9cb5-29db17c21e77",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1af3aa8e-737f-4dcd-8e50-d2f72926b7b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ace7987-acfe-492e-ac3c-c35a42ff8a73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bf2de60-bb0e-4fde-b2d4-baa8d3ef35d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "263ec7bb-9d87-4c28-8d4d-f92cc988b562",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed299c21-1e58-4bd7-aa7a-d3b1919360f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39a144bb-78cc-4397-8e44-cbba0ffc7b3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04769321-4a59-4ff3-8d02-bc30d382920e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb408afd-3fab-46d8-a649-b73161120898"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0f12537-5e85-4636-ab6d-cb45982dacb9",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13e3b985-88ae-42e7-bb6f-d83235f89091",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "351ab757-6390-48f0-ad5d-4eaa88eb2916"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a96ca2c2-73da-4aa1-b1a1-b05bef4bac7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bba9f30-9d3d-431c-aa76-d3bd9d738bc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82968be9-f650-4dc6-b57c-64da25e98124",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "690bdb49-939d-421a-b55d-9400b65870de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0538c3f-94cd-4287-8c89-e79c1f7a44c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a37e52c0-48ab-4ab4-abf9-6dec4abb50f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3ae5e5a-190c-4db6-b84a-988034d23e18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "280fefd0-ca01-4548-ada7-6db6ef84780d",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cb8d876-0f31-409d-ad9d-03ed486ea90d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50bb2ab8-3551-4cd5-bf8a-a94743d87b26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "baaedc58-966e-4149-ba2a-808e386c9f60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9d1adbf-4ab1-4760-ad04-910bf586683e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b56be809-8aff-4269-8992-c427d1827751",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2759ac1-9211-4da7-9411-01e34daa38a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32140bc1-e4b9-417c-ab50-3df8e4f64924"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1e56140-5f6f-4c86-acaa-56684db08df1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "730b6f24-6b81-46fa-a412-7685adff538a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88f59d63-62a8-46f9-ba5a-90ae49f026aa",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f9d962d-9d29-49c9-aa64-308d2b88b66d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "747fb818-1e8d-45d2-9ac6-9a5ac8435ebf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df2717ae-5fe3-4dbc-bf86-088dbd35406b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f045eace-76dd-4cf9-bc4f-ba3561d64532"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99c8cc8f-e917-495e-a35b-57fd319b81e8",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c44d4d79-4690-45f4-9ec6-97e5a1967f72",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88deadd8-4382-45e3-8d9b-61d412af6f78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49fddc27-e7ea-4f3b-9567-f76ed8b7e22b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8c7dac2-5a2a-4b70-85a1-88838936d449"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4c976c2-3664-486c-b2e7-55f379b0d26e",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "675d42b6-31d0-4b08-bdf7-d88074696437",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0fc44a8-e508-47ef-a7ec-e24f6179e0fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c91c12d-f6dd-465f-bba4-c45aad559374",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df02f523-0e7e-4682-9ad7-5055ee3ec1d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aea8baaf-65d4-45a8-9024-fa6589323094",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a179b42-dc6d-4eb0-adc8-0273f5ebe579",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e231f283-eef9-4701-9f16-a847c7c00584"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83f75da7-59b6-45c1-be98-4efc9c790d63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a3373b7-c5d6-44a8-bc50-8ecb011328f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4df2dd7a-87f3-4866-babd-9d4d0012049c",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bf72b74-6897-4a43-bf4f-3ad4a8aa8128",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b59a766-c762-4432-b69c-4abbabe115c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07efda6f-547a-49d3-9ad4-3e579a1f9249",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c818bb7b-e435-4d4e-88f6-d6250ddf3691"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7a7557f-a0ff-4181-8a2f-239595c6ea5b",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c6f3c10-10ec-4439-92ea-35612e0cb0ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b4e1732-7349-4b7e-923e-48ff1c307094"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e94a819b-35a0-4c36-b082-e52a46254744",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edacd0b4-4a63-445e-a487-b199aa887405"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4a4510a-297f-4f30-abc9-ceb4bb5822c5",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a158ee73-a965-479e-ad23-f4430e8a4133",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95c69d30-9667-4a06-b72d-25954d18166c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fe90eb9-9c09-408b-be1a-a757a0622a41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "196c3ca8-616b-4de2-a2c3-18a19a37b041"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efa8e3d9-0fa6-4b93-ae66-04ad62c182cd",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30a649db-bee7-491d-8ac3-38fa8df84ac4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb93cfd7-f65a-42b0-91e6-5363cc109bc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56cbe5b9-967c-4f32-aca5-bb84c2612bd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac26cae4-391c-4e3a-ab89-c9351acde2a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95a488d9-90f8-401f-9c18-f1a1b981fb4e",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9904448-c011-4ee9-b48f-819f5eef1014",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77a7716e-515a-482c-8688-ebb2bfa83191"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a02c26c0-c377-442a-b9ee-ba613764457d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6aab3488-4b9f-4e55-973d-6449e802f150"
                        }
                      }
                    ]
                  },
                  {
                    "id": "835b0739-b5a5-4aae-8ca4-b62c355d5b89",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23333638-2a5b-4fc1-8456-6f5abe6a7a48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9277ff24-3068-4f27-89cc-aaa93aee2300"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "339432e1-70e3-477b-af31-6704b64f7b7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bf2b72f-1bff-46b6-a677-9a5134c3ae1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "186f3c56-29fd-4e23-996a-1f59121d7995",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e33171b9-0c64-4aff-ad9b-c7d5e3f38104",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "038437bb-c0e4-44ca-8e28-dcfae60a9a83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10c71ef2-7106-4f76-97a2-106470be5f08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d9ff4e6-c79b-4fd0-801b-b6beaa738ee9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5baec6e0-c99c-41f6-b8ab-3bd3c6a96d4d",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8565590-e236-4e8a-b270-2e05e830e197",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9be3eff8-f8e5-4a0a-a7b3-8abf8495d54b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31b2a88d-276f-4452-8abc-dc1ab56f56b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6c49029-a1a8-4e4c-af1e-c223b8a22490"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67d72b2e-2a62-4baf-b539-2ba76570c361",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57af011e-a6ba-43fd-872d-fe95071e8849",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d5a5011-ca46-4e60-9779-f476abdd8c98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "054cfeca-f55c-46c4-91e4-b6f0f932af5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82afa90e-f3e5-45d6-bb83-20604a31af40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2833b90-e50c-409e-b20e-55f49ba2cab1",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f671c7f3-000d-4dde-8638-a78ab784e728",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "179483e7-1965-4a08-a2b1-3b03ef2870af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "489e2321-7193-4f5c-a8e2-cebac5f87649",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b66a839e-cf51-4de8-8f1e-7b568e7da3b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d2f948d-4c99-4b32-9123-6f96af33ab3d",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a98cab61-2613-4824-8ba9-4aa0c9ce8c5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c50afea-41d0-4536-bf1c-efe5a1471735"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f7c98bd-8d50-439f-8baf-0acdcf76b99d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f59ae89d-0ec7-4a11-953d-6e1eab084594"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47e43cea-e175-4eb2-bfea-34a24e6e5391",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddd57c98-e454-43cf-b842-cd6aa2919d66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc1055ff-b907-4e4a-9a48-1ce7b2d21e22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2459a60b-62bc-422a-aa8d-6d6bae25d703",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48956aff-df71-47cd-9c9f-8fe6e4934ac2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fc54d23-b028-44f3-a59d-52f4a46686f9",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79fac78a-34e2-4d5f-b659-437fefb77a8d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f3e69d2-b524-478b-865f-327fc5244079"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55fc33bc-ef50-4bd2-948d-5425609dccbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9beb94de-16a2-4e9e-a094-9f61e2ad8a18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d123a8ce-6ac3-4076-910f-e1e8f721721c",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da4dcd72-217f-4313-9d9e-03caa9ddd437",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b8ba11f-1c83-48cc-bd38-f553ac06b520"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "737c3a2c-eca1-4566-a0b6-81394c16dde5",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03cb4bee-8515-4437-bcaf-937c11195410"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db40b5f1-ed8b-4016-8615-c6c58ee34043",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ff65033-652f-45d9-87cf-aac2a62c304c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80c620c8-4f18-4bc2-8e54-3f1737024f0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "720cc9b7-7dff-469e-aa1f-c63fb1ee7611",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09f18565-c63b-49eb-98cc-5745a8a4d969"
                        }
                      }
                    ]
                  },
                  {
                    "id": "157a5c5a-77f5-42d3-ab73-529c8087a652",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c73f153-a950-4957-89f5-7b41cf52b1f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "497f42a2-7879-4c3a-922b-a44a18e24301"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80931877-42bf-4591-8ef8-e76b12eef9bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a9e1eb1-5d6d-4bc6-b8e2-7567bc893df2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecaf90d0-a3f5-425e-84b8-e5bf62d50a87",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f52b060-9f74-44f4-80d7-221c08444a9f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe18cb19-0572-4d88-ae8e-e02a4954b015"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa9c255e-1d36-4d72-9d7a-ab5ccb91ea4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72766c89-bf7d-45bd-bcb9-55a3198994d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f304fd5-f522-46bf-b88f-5077ac74a3c8",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a7168be-4da6-459d-b2d6-bd33c43a2c9b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "323eaf78-06a7-4644-a9b6-b726b815ac4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "222dad46-a141-4cce-b9eb-6331250bc43f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "579e6e42-9531-495d-82f8-e54bc36a4dc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea226624-5007-46fb-a452-1cb456f4327a",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bbe066f-b23b-4588-bc6c-31cda6085a83",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98dc1d4a-416a-494f-b5e4-de31134b7aad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d64ab91-46e2-4489-9e5c-0278618559e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f78b8741-ca59-4aab-aa5c-8fe5415fd05d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6bb73d2-0a5e-47f4-99dd-acb2254e5aef",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1dcf6a3-af8b-4ae3-886b-637fb9f5e948",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38a1f081-bafe-4dee-9e1b-caa6e94421a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c20629fa-6bd8-4ccc-8545-9477eaee446c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f728fb77-7fa9-4c05-a649-661cb23b667c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98be5739-f132-4bf1-b2fa-26eb2f7d9f34",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82ed4308-b590-46d9-80ba-ff0bae854ba5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9095484-10a4-47ed-8d24-97f63b96c2ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33118578-14a8-428f-bf68-17a6adeeffb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5c9fa6f-1ada-4140-a12a-8b3cc9a2bb50"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cbd11c64-9bb5-4add-878f-0f3b96527325",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6dcc58a3-77d8-4841-b583-6fd712cc12cf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2fe6b13f-9619-48d6-ad66-b8038bd2b23e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "86c9cbac-4dbf-438b-b56f-9a487af6a5b9"
                    }
                  }
                ]
              },
              {
                "id": "dd7b9da8-1542-4134-89fb-2cc43cede0a5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d59b32e0-dfe6-491c-8cf5-9fe05edf2f8a",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbf39ed7-3370-410f-8906-a4e67560b6f3",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "80672022-2345-4daf-b08c-93a2e597e44e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91694fcc-0181-4ad8-9591-2783628f4a66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ff696523-72cb-437d-872e-9122be06fb29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9164b75e-c697-4b42-8f45-8ca72618a679",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e5d7b75-2e3c-4215-9f48-2767b0766d73",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "d29801f9-50e7-4686-a268-c4535b8d83ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d59c5f22-9d36-402b-a679-5deb87b25526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9f03f7c7-bbbf-4e71-a48d-50146ab065a7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "08f61b62-abfc-4129-90a2-a370bea215e3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "42a58807-e306-42c4-8ced-8df837d918b2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "56f3b483-c58f-4b66-8b4c-0b20cbb1a431",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3ea98f0e-f952-4e03-8845-c54bb44acb8e"
                    }
                  }
                ]
              },
              {
                "id": "0addfae0-42d1-480b-92ae-fcd78de01c66",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "432fda22-449e-480f-93a0-8aef146b5114",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c460707-2c78-46e3-b093-f9511787c9fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "06b7b328-393a-464f-8159-f2ccb6d88aa5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6226688c-18b0-4a83-a170-664ec1fe8ef4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b894451b-d78c-424b-86c8-4ace62d53f20"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "7e35ad87-2015-4614-942e-47395a852296",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b50d4812-01bd-4396-9444-c8f33a8fe45d",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f76da8b6-feed-4bd8-88d9-fb68d78e3fe4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ca9129ab-b163-4a3a-8da5-09102664252f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "172e98a6-42e0-44a7-ac81-041afb7c7d49",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8a9ce674-8761-4cf7-af89-f576f4e6307b"
                    }
                  }
                ]
              },
              {
                "id": "ec92a3a2-bffd-4583-9232-038d3382c488",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e5770203-af86-4384-ac84-c6535ba59979",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "27d37776-8321-461f-9332-10fa558cf58c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "90e3d5d5-92b5-4db2-9ea8-f83d31ef1f59",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c4c2aeec-509f-464f-a1bb-47b0355324be"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "229cf92b-6daf-49da-904b-3be9d3d6e3e1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "0050ace0-6884-408a-adf9-4da1488ea5ed"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "232154c4-126a-4b7e-b677-d3603680e5ee",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "622fa4be-284d-42ec-804b-5a673c907908"
            }
          }
        ]
      },
      {
        "id": "196df9e5-f83e-498b-a651-7dda47e650c2",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "ea68dfc9-9f35-4e87-aa39-9e3b4cfa969c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c87083d9-f7d9-47e8-8062-64391dadf56a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "64e19b50-2588-4b4d-bd19-3697d9ea54d0",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c10824e-53fe-4936-a259-e630053d8ad0",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "de094794-f758-4095-ad01-ea88d019b98f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "829b55f4-0be1-4233-92c2-d92edbd0f2e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8dd07f88-d2b8-4435-9d2b-b21270754f88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32d16d77-c896-41f0-afcf-4499ad8f9143",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e1a04db-e926-40a1-85ac-bd03d5473c41",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "af24c25f-d0f4-4190-ba4f-3cca37bb81e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "021d43e7-d77d-4920-91d6-04bbf9f646a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "83acac66-6d6f-4061-9fae-5e0f74c1ef3f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ebd222f0-cb02-4a85-ad3f-d9e2d29d28f3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d15b3c5a-302c-441d-aca9-1009cf0614f6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7e024497-d05b-4174-a12c-8241a690635f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "13c6c6b3-ce4f-4ca8-a40a-8daf1aaa9ab2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e35c2e50-faeb-4d95-b924-017ee9c17c5e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "8680aff4-b7e6-4395-9f46-60509d19757d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cf7cbd21-03ac-4dd4-a2ee-b5d6610c44c1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "83e2592a-3112-4040-a346-f8a4179dec5e"
            }
          }
        ]
      },
      {
        "id": "c0c60596-c585-4baa-bb20-33d8e10f51be",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "82510b16-2713-4684-abb7-9c7a8c6cefe7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "10e469ff-2cd6-4b1d-8dac-ea6d76178cd2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "288cd026-a08e-4ec0-88ac-15e6016f4bde",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1e8f6d3-a574-43c6-9039-5d836d326a80",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "2409a3e4-03ab-4d74-90b9-621926640b0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e0532c5-48de-486a-bdb5-133637cdbe37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "427580bd-b3e0-4c8a-b028-a6489ddbf5a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcd4b81f-88c6-498e-ab8c-e842b0229bed",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4db931c2-d57c-4e9d-bfb3-07d5ef93cf95",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "8dc2ed6a-72e4-4339-be9b-c5b04d26ae40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d204cd7-d265-4f39-a14f-162595848fc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7e98f6af-4ac7-4b16-a822-d264b438fee9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "67a3025b-74a9-4b76-9247-17cc3c59b78c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fc283b52-05d2-4611-b6f0-033d03676250"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0d7b2323-c134-4b19-ac93-b37eec0cecd8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c1096cc0-fafb-46e8-b569-ec5c42b6c55c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bffb78db-313a-4a98-a6a7-652d8c94f4ff",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "a9c053aa-cb08-4471-9896-20938f96cb1e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c8ea195e-3c07-46ba-92f2-62a9f0419186",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c8a39baa-af1e-432c-aac3-fc51110090a1"
            }
          }
        ]
      },
      {
        "id": "77eb2540-e2eb-4d5e-9a37-6a1afb008ef1",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "647c765b-e8cb-4f34-b8ea-13828e2ea114",
            "name": "Negative Testing",
            "item": [
              {
                "id": "97449f67-851b-42dd-b381-2211bd1262a8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c0c9e41d-c23e-49ce-841e-ddb51722470d",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1541735b-cf35-46ac-8399-68a449336bc2",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "00594554-f3f0-4ebb-9b9e-4f3caddcc113"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a605467-ce83-466d-a92c-bfbabda09372",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7296470c-c676-498a-8102-adca0c8f2dd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "365d6e31-b464-47c8-9ab0-59246080a081",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66fa476b-3548-4a63-9c7c-ea12883cb82c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "30c261cf-61a7-4993-b719-7789a9014ba3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cb9775e-dd26-405c-8856-b9563fc4e7b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2011ec19-561d-4113-9d04-ba104b88de1e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4a5b0f51-23fd-48f0-9aab-f32c4695e0eb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bb0dd625-96a2-41b6-a7d1-b42711a96fdc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "57145327-c412-4440-b8d9-fd1c2f7ecfcf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "376a2915-507c-4bbc-9369-3d7e5a8f0acf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0a0682a0-ae51-4685-a3e0-788591fef3b6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "3e916ab6-a5b6-4ebd-a128-af483049d101"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "823f5d66-b2bc-48c0-93f4-cd1f2ec04dfa",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ba34effb-653e-40eb-980d-e29a3fcaf66b"
            }
          }
        ]
      },
      {
        "id": "557a67d1-89fa-46a9-8bbb-3228ccd8eeff",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d96eb5bb-97c9-4354-bb34-5996dae77660",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3c7fe48a-7ccd-45b3-b00c-dfd6da8479b7",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "1eb9b53e-9f8c-4477-9db4-f625931a04f2",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ad8c98b5-26b3-4ef6-8299-63aa2b062161",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "073977a1-ab93-4fdd-830c-976c29fc725b",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 39
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 72.50763358778632,
      "responseMin": 8,
      "responseMax": 434,
      "responseSd": 37.358357676605955,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1676075738327,
      "completed": 1676075772438
    },
    "executions": [
      {
        "id": "7caf1416-8017-485a-b69e-e1a04055505e",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "0f60664c-3010-44c9-95b9-54ea42622641",
          "httpRequestId": "59abb560-dc59-4671-88da-e92fef966852"
        },
        "item": {
          "id": "7caf1416-8017-485a-b69e-e1a04055505e",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "a6122f3b-1fed-4d66-b19c-de752411d470",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 0
        }
      },
      {
        "id": "e8f3a390-070b-4215-b4c0-f7b056dd9509",
        "cursor": {
          "ref": "50976c4b-38bb-4163-8f8a-e10ec10c7806",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "0493c505-53db-4c00-a0ff-2b8611bb7f24"
        },
        "item": {
          "id": "e8f3a390-070b-4215-b4c0-f7b056dd9509",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "0bc866c6-0377-478b-8880-9b24e02695fa",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 0
        }
      },
      {
        "id": "9a546cc0-1e40-4910-a04f-1bf00830d9ef",
        "cursor": {
          "ref": "3ae436ba-8c1e-4620-bbe3-61ce82cca24a",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "7aa9bee7-51e5-4cc5-b0a0-3b5d4c3ae82b"
        },
        "item": {
          "id": "9a546cc0-1e40-4910-a04f-1bf00830d9ef",
          "name": "did_json"
        },
        "response": {
          "id": "12e377c0-e93d-4a2f-9e5a-7123442cadc9",
          "status": "OK",
          "code": 200,
          "responseTime": 210,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46cd5a85-22d4-482c-99c6-c97cb3668e49",
        "cursor": {
          "ref": "a5fb0468-eef3-4342-89f6-6952ec1180e0",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "6cfa1b59-aa81-4fdf-9572-8ea63435bfa4"
        },
        "item": {
          "id": "46cd5a85-22d4-482c-99c6-c97cb3668e49",
          "name": "did:invalid"
        },
        "response": {
          "id": "031c1665-92d6-4126-9c4a-d54dc72eaa9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "46cd5a85-22d4-482c-99c6-c97cb3668e49",
        "cursor": {
          "ref": "a5fb0468-eef3-4342-89f6-6952ec1180e0",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "6cfa1b59-aa81-4fdf-9572-8ea63435bfa4"
        },
        "item": {
          "id": "46cd5a85-22d4-482c-99c6-c97cb3668e49",
          "name": "did:invalid"
        },
        "response": {
          "id": "031c1665-92d6-4126-9c4a-d54dc72eaa9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "bf0b1d1c-ae0a-4e87-afc7-02bd2682cfbb",
        "cursor": {
          "ref": "c15eca27-4420-4836-9ae2-811b2a64abac",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "9588bb94-4b27-4e28-b51a-5e31a7a85cb6"
        },
        "item": {
          "id": "bf0b1d1c-ae0a-4e87-afc7-02bd2682cfbb",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "52ab7014-a10b-43aa-b8b1-8a77ee061881",
          "status": "Not Found",
          "code": 404,
          "responseTime": 110,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e36e1ab-7768-4c31-81cb-77c871ab07a6",
        "cursor": {
          "ref": "ec67b4bc-9a50-4a7b-b1f1-22ff57fc8e2d",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "1bb54425-297f-47a4-b953-e0302d29cd2a"
        },
        "item": {
          "id": "9e36e1ab-7768-4c31-81cb-77c871ab07a6",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "a6b84abf-7d07-45f4-a1f1-541a715b44bb",
          "status": "Not Found",
          "code": 404,
          "responseTime": 65,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70e8abf5-0f20-4de4-b7ce-2e5ef0fba4fd",
        "cursor": {
          "ref": "303b25ab-d999-4dbd-b609-d7144f944404",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "6dd39001-7902-4e12-9de4-ca21d84fb527"
        },
        "item": {
          "id": "70e8abf5-0f20-4de4-b7ce-2e5ef0fba4fd",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "64a23009-a372-4cac-b6f0-1d995d71e515",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2644539-634a-4f1a-9954-f167a29f8384",
        "cursor": {
          "ref": "c9d84afb-f3e0-4501-ab5f-d14dcfdcb493",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "ff237289-271a-47d3-9708-b586d8ec9deb"
        },
        "item": {
          "id": "f2644539-634a-4f1a-9954-f167a29f8384",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "1118914f-1b7f-414d-9d24-ae781e7baa68",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2644539-634a-4f1a-9954-f167a29f8384",
        "cursor": {
          "ref": "c9d84afb-f3e0-4501-ab5f-d14dcfdcb493",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "ff237289-271a-47d3-9708-b586d8ec9deb"
        },
        "item": {
          "id": "f2644539-634a-4f1a-9954-f167a29f8384",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "1118914f-1b7f-414d-9d24-ae781e7baa68",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "098d84e9-00e5-45f0-ac94-36f06b582875",
        "cursor": {
          "ref": "575eecd2-9624-4a11-a7d7-840c43da8b5b",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "638e0e87-89cd-4593-b0d0-7c9dc10770af"
        },
        "item": {
          "id": "098d84e9-00e5-45f0-ac94-36f06b582875",
          "name": "identifiers"
        },
        "response": {
          "id": "dda5b2e3-1fb5-496a-969b-f4a76c929f74",
          "status": "OK",
          "code": 200,
          "responseTime": 107,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d62f49c-a1da-4f2b-b6ef-b714f83a3ebe",
        "cursor": {
          "ref": "117898c6-51c3-48a6-8be9-04881319f9d2",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "d072c4cc-1589-4e31-b39d-9f5e0faf35a6"
        },
        "item": {
          "id": "4d62f49c-a1da-4f2b-b6ef-b714f83a3ebe",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "9c5ebd80-e263-41fa-9944-e2f5cc21007b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d62f49c-a1da-4f2b-b6ef-b714f83a3ebe",
        "cursor": {
          "ref": "117898c6-51c3-48a6-8be9-04881319f9d2",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "d072c4cc-1589-4e31-b39d-9f5e0faf35a6"
        },
        "item": {
          "id": "4d62f49c-a1da-4f2b-b6ef-b714f83a3ebe",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "9c5ebd80-e263-41fa-9944-e2f5cc21007b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82b3a74d-3c29-4616-9009-ab50b1861c84",
        "cursor": {
          "ref": "7e3d2847-27eb-45ee-8d2e-3c2bd9ee0d33",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "4350d556-bcdd-47d9-a10b-adf39286a516"
        },
        "item": {
          "id": "82b3a74d-3c29-4616-9009-ab50b1861c84",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "a2317c15-804c-4143-a4b6-60cbd896ed72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55e63336-25fe-4051-86e6-43de6d9b80e6",
        "cursor": {
          "ref": "4f97e278-a459-4558-a9f4-d5eff6745ddf",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "30de49a8-c6e7-4b0b-a1e7-d33b134504ab"
        },
        "item": {
          "id": "55e63336-25fe-4051-86e6-43de6d9b80e6",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "912591ca-5422-4bdb-a510-d7d9aab166ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e442ec4c-4138-4494-9015-d1220b77971e",
        "cursor": {
          "ref": "57426c0f-01d3-454f-9b79-1c69d40dc9d5",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "a232f76a-0a59-4a17-9bc0-73fb18a349f5"
        },
        "item": {
          "id": "e442ec4c-4138-4494-9015-d1220b77971e",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "a889b851-dd5b-4290-9299-9396b5fd4996",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fa1d3f5-d386-4493-91ef-cd7aae56e90e",
        "cursor": {
          "ref": "ffd37910-113a-4503-99ec-7205f119125e",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "537d2762-2518-4565-aabd-537620614f5e"
        },
        "item": {
          "id": "0fa1d3f5-d386-4493-91ef-cd7aae56e90e",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "1b3c9112-51c6-4d0b-a75f-357bad7d38bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13c48626-d064-49e9-8247-7fd6414bc87a",
        "cursor": {
          "ref": "8dc2aa0d-7ae2-4ea1-b34b-2952d836f0ab",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "700c175b-6b8e-4edf-90d1-c211691640a9"
        },
        "item": {
          "id": "13c48626-d064-49e9-8247-7fd6414bc87a",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "c614453d-036d-4c2e-aabc-c317dd8abd75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6263638e-7a9d-4a9c-b7ef-6b8ae1e0ddbc",
        "cursor": {
          "ref": "a284d659-0a81-41b3-ad9a-39e2e4b59927",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "bf056e5a-7103-417d-b19b-0185671b21d1"
        },
        "item": {
          "id": "6263638e-7a9d-4a9c-b7ef-6b8ae1e0ddbc",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "82be089a-01af-4a0c-aa15-279e3c946fa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcc856dd-ae3f-4bd7-8840-1e647313ad69",
        "cursor": {
          "ref": "0a7d7968-e831-451c-a3e4-8ae60a438adf",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "cbfeac00-99c4-4864-8237-02ec93fe7b23"
        },
        "item": {
          "id": "dcc856dd-ae3f-4bd7-8840-1e647313ad69",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "4020330e-65f1-417c-b045-2aa7adba2c98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34be42be-0700-4e65-870a-26f5627ce473",
        "cursor": {
          "ref": "e6f630b9-04f6-4c81-aadd-32a2c1917574",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "99d821e3-f3da-4770-94fb-40c02a00f358"
        },
        "item": {
          "id": "34be42be-0700-4e65-870a-26f5627ce473",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "d462693b-040e-4ff0-92f0-f4c6bd1c8dab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80eaa514-5a08-4faa-b579-c6780c6a58de",
        "cursor": {
          "ref": "762fc58f-cfc0-40b5-be6c-e4af88c10add",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "9c292168-976a-4701-91d4-3c5e5c3d20d8"
        },
        "item": {
          "id": "80eaa514-5a08-4faa-b579-c6780c6a58de",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "53ec02d4-3391-4106-adad-6f451b4e01ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9c89a9d-ea42-4c24-9f73-6c5a03220407",
        "cursor": {
          "ref": "e79097a6-172b-41ea-9b90-e20eedf2f94c",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "605d6703-37cd-4b5f-aad5-703aa394b67d"
        },
        "item": {
          "id": "d9c89a9d-ea42-4c24-9f73-6c5a03220407",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "7db3fb70-c3ba-4dc0-8f5d-f503ebb35e5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "414b209d-f950-4072-8196-664da4af4742",
        "cursor": {
          "ref": "d181e668-33a9-43eb-96e4-1f8819559759",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "d528931d-2ea5-4d55-b03a-b918d61a2907"
        },
        "item": {
          "id": "414b209d-f950-4072-8196-664da4af4742",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "4c694b78-8130-4a51-8d2b-30a5934a18ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "323dbaca-cfb6-4217-8639-bc808a874afe",
        "cursor": {
          "ref": "2cf0871c-14c2-45c0-a99b-2bf5260ea830",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "19a701c6-d414-43fb-a0ba-e79d6f6d2c7b"
        },
        "item": {
          "id": "323dbaca-cfb6-4217-8639-bc808a874afe",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "f4cdb23e-e5ef-4777-a409-e210ac6968a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4c9a5c9-11b8-44b1-8af4-5cd4916b95ae",
        "cursor": {
          "ref": "fb3684e3-c75c-401a-9f9f-e77e52bd4dd7",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "b927df0a-fb23-4d5f-84cd-7cc301851ed2"
        },
        "item": {
          "id": "b4c9a5c9-11b8-44b1-8af4-5cd4916b95ae",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "7216594c-6d10-413d-bb5b-b6d2c58e0824",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a55a5698-c117-496a-b52f-f0c2c8bbbac2",
        "cursor": {
          "ref": "ff49952f-d256-49c7-a64d-eaac3c150392",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "2f3ea27c-8a20-4bf7-a72a-27e0ea3d93a5"
        },
        "item": {
          "id": "a55a5698-c117-496a-b52f-f0c2c8bbbac2",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "68be7669-6b12-41e3-9ebc-8c69f272e37d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d4773ae-ab06-43cc-ae6d-1cc8268bb86a",
        "cursor": {
          "ref": "b6f3cc4a-12a7-4e11-b2f5-05ed6421c63d",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "188d4e41-bc21-4ef7-a2d2-af196a5ef5eb"
        },
        "item": {
          "id": "2d4773ae-ab06-43cc-ae6d-1cc8268bb86a",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "bb097904-3826-4fd4-b55b-f7a94db66538",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88c01cdb-bf3f-4566-945b-a0830c7bf843",
        "cursor": {
          "ref": "2b287458-d982-450b-84ee-7526fdefcfaf",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "17615fd6-6ba8-43ba-812e-d0c2001bf962"
        },
        "item": {
          "id": "88c01cdb-bf3f-4566-945b-a0830c7bf843",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "d8589f26-cdfb-4c7e-b756-c2abecd57eae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e68360d-b8fb-44e6-aab3-b1446e7da05a",
        "cursor": {
          "ref": "2f105d1a-a79d-4a61-9752-5ece4219b102",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "8fd19df2-08bf-4ad0-b6e3-1f19d74d9ff7"
        },
        "item": {
          "id": "7e68360d-b8fb-44e6-aab3-b1446e7da05a",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "dabd94ed-37b2-46c4-aa00-7237a13d3133",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91e3e97e-e058-45b2-b85b-b57218c69aea",
        "cursor": {
          "ref": "672bb4d8-5b6d-41d0-94e5-45159b0f14b5",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "070e3702-627d-4d40-a757-b8631fd55ec3"
        },
        "item": {
          "id": "91e3e97e-e058-45b2-b85b-b57218c69aea",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "2041b0d1-af67-46e3-830a-42db187fd1e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99a23bec-f2b2-4952-8c61-f00756787dd1",
        "cursor": {
          "ref": "02cc1ab6-edfc-4fda-840f-5eb01503177b",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "1b0acf04-dd73-4d63-93f6-7dfa12a087b6"
        },
        "item": {
          "id": "99a23bec-f2b2-4952-8c61-f00756787dd1",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "4dcdd360-df2d-40ab-a776-1609e9bf8ab6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5d3681c-3881-4d2d-b174-b3693c31d4f9",
        "cursor": {
          "ref": "7330a40d-8525-4525-9eab-a670f96c756d",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "ba29a8b1-17cd-4899-9acc-f544096b80cf"
        },
        "item": {
          "id": "c5d3681c-3881-4d2d-b174-b3693c31d4f9",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "a78cf445-5c8a-4100-8a01-0068fa8f33e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e761c19-28dd-4b37-9f45-14640c1e8e6f",
        "cursor": {
          "ref": "bd15b806-8f3c-4339-98cb-cdb24b0371de",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "0480e7b7-1665-46b9-a39d-05dd41a86ee6"
        },
        "item": {
          "id": "0e761c19-28dd-4b37-9f45-14640c1e8e6f",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "56412e3a-45bc-4b3a-9f32-f0aee3ed36f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe522e3e-604a-4795-aa54-764f4cd066cf",
        "cursor": {
          "ref": "d211afae-90d5-4c22-bcd8-f71808dd7815",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "a829e646-c8d4-4f16-af62-79c47a44f897"
        },
        "item": {
          "id": "fe522e3e-604a-4795-aa54-764f4cd066cf",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "da89859b-4850-429d-9edc-4332346fb4a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caafac68-6584-4bc5-aa3e-89b6a2d7f5e6",
        "cursor": {
          "ref": "5071f79c-3a5a-4b2c-a2c0-d0d387d68204",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "4f68283c-0911-4153-b583-54f8f47eec18"
        },
        "item": {
          "id": "caafac68-6584-4bc5-aa3e-89b6a2d7f5e6",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "74f74741-0e18-4fc8-a9eb-309e3156c490",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "655c8fb8-8cb3-4b92-b974-21f6df8c0ba8",
        "cursor": {
          "ref": "9ff08247-4343-4253-b7cd-8a1a9475cba6",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "2550aaf6-b8c3-4894-a101-59259684e54f"
        },
        "item": {
          "id": "655c8fb8-8cb3-4b92-b974-21f6df8c0ba8",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "80041b3f-6492-431f-aa41-099b8efbad49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb73d8b2-21d7-49d8-951a-08150ef7c4aa",
        "cursor": {
          "ref": "e52708b5-eb70-4b21-8d82-0b7d2f7e3cc3",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "59c7334b-d0b7-406c-94be-9ba92b1e042e"
        },
        "item": {
          "id": "fb73d8b2-21d7-49d8-951a-08150ef7c4aa",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "f5cadc74-56c9-43f0-9c9d-890d84eef69e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30d8a7bf-6d27-48bb-9061-54a82e8a9303",
        "cursor": {
          "ref": "93655ac9-e21f-450a-8d70-294f13db0cae",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "57e340fa-2ed4-40ba-ba07-bc91f6bf3652"
        },
        "item": {
          "id": "30d8a7bf-6d27-48bb-9061-54a82e8a9303",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "f0c5dc65-96e9-4783-938d-fd474127f17c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2927d2c-b23d-41ea-aabd-d5746b332513",
        "cursor": {
          "ref": "8aba4962-2b2f-4d1c-af4b-ff52b8eb7800",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "0a35ed0a-3c7d-4085-9ca2-de5859608879"
        },
        "item": {
          "id": "b2927d2c-b23d-41ea-aabd-d5746b332513",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "3d6177eb-2fd1-409f-b0b2-73e952b50e6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34066b1a-07f9-45c2-a5c8-333b01eb3765",
        "cursor": {
          "ref": "82d56f35-7649-4ce3-bce0-896447a8241f",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "a9d51c3b-8ccd-454d-876c-17c8cdc44a44"
        },
        "item": {
          "id": "34066b1a-07f9-45c2-a5c8-333b01eb3765",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "184083ef-b9a4-412c-92f4-f5bb301f04a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e58da2fd-5ffe-4b7a-97f2-b4cf10921612",
        "cursor": {
          "ref": "b9d0c997-ab86-4d32-bb5b-07a18b5c8fab",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "23d4816f-fe23-426e-aa99-6ac851f935d3"
        },
        "item": {
          "id": "e58da2fd-5ffe-4b7a-97f2-b4cf10921612",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "103592c1-3bdd-44dd-9a47-ec3d2bf6a13c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88c64f62-9fac-4f34-8f80-3ecb2ba8752f",
        "cursor": {
          "ref": "c177fac4-1f88-46b5-9fb5-c32ac9eb132a",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "6de42aca-0633-495a-8afd-2aa02d07cd02"
        },
        "item": {
          "id": "88c64f62-9fac-4f34-8f80-3ecb2ba8752f",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "659c59f3-dcbb-4393-acca-80d4fc58a534",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "491995dc-8a51-465b-876a-0b9ad8275325",
        "cursor": {
          "ref": "e5e94340-5a53-462f-b691-bde79528f0bf",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "9bcf6199-d0d3-466a-a937-379073617585"
        },
        "item": {
          "id": "491995dc-8a51-465b-876a-0b9ad8275325",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "f86d5f8d-bbc4-47ae-bd8f-3fbc0de38e69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "124227d8-441f-4de8-bf48-2b2e30c2d8d8",
        "cursor": {
          "ref": "101d5a6b-9ca4-45be-a319-d1ae5a3538e3",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "1937049f-8b9c-4f3c-9e76-ba5b5f6f2e26"
        },
        "item": {
          "id": "124227d8-441f-4de8-bf48-2b2e30c2d8d8",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "0a7e50bc-7e57-4bd8-ac6f-24287c459050",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62484207-a63e-40fa-b1ad-6ade97b4ec35",
        "cursor": {
          "ref": "4175ff35-994d-4569-b4b2-3dfd5ab0e5aa",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "e90ade13-89c4-4fff-b0e8-cead9d73c840"
        },
        "item": {
          "id": "62484207-a63e-40fa-b1ad-6ade97b4ec35",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "1001bc56-800e-42f1-8a72-a77c7ef6a942",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c175ac1-dc60-4d00-a6bf-1f0560de4f06",
        "cursor": {
          "ref": "d045e25e-1365-4feb-a0c0-000dc001747c",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "a6a019cf-454b-4620-98fd-909101c9529b"
        },
        "item": {
          "id": "4c175ac1-dc60-4d00-a6bf-1f0560de4f06",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "f537d4f4-6655-4bf2-ba25-54f06f249277",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3452d82-c150-4157-8fda-56e14067a609",
        "cursor": {
          "ref": "3b43bfc9-770d-4daa-89e6-366e7b9b9989",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "aa4dedab-727c-4b06-9c33-2d803252b0ed"
        },
        "item": {
          "id": "b3452d82-c150-4157-8fda-56e14067a609",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "2372cace-faef-4150-b214-a0ca05987177",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ceb9c4fd-1fb6-435b-af42-0c345390b0d6",
        "cursor": {
          "ref": "00508421-b3f7-4da6-b3cd-4de121085f9d",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "29ebb119-4767-4801-a5ee-f6d3b8988a64"
        },
        "item": {
          "id": "ceb9c4fd-1fb6-435b-af42-0c345390b0d6",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "06a266ee-1efd-4c6d-9c58-ef57518afbe7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12c638d2-95ad-4234-a5b4-3182f6d144ed",
        "cursor": {
          "ref": "940f825a-d99d-4d50-a4fb-585e60cacbd0",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "ed0b3018-e5f0-48b4-9f15-7e2ee80575f6"
        },
        "item": {
          "id": "12c638d2-95ad-4234-a5b4-3182f6d144ed",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "2387c25b-b161-4d72-9664-14694cf0c27c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "3e99010a-e615-4995-8264-a8a2b146dbe7",
        "cursor": {
          "ref": "8c6301e8-d39f-4e32-8e1d-c0732548caef",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "d3238875-2549-4e41-b596-0c54f368bd44"
        },
        "item": {
          "id": "3e99010a-e615-4995-8264-a8a2b146dbe7",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "364b3663-31f1-42a1-833e-9e8bfe3bff9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96898f8f-f90c-4a66-a728-4c69ba67d85e",
        "cursor": {
          "ref": "a3240a3f-546e-44c4-be60-6425192bcbf1",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "a6f15bcb-9999-4541-ae78-7f80a7ab9958"
        },
        "item": {
          "id": "96898f8f-f90c-4a66-a728-4c69ba67d85e",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "389785f2-6988-47ed-89af-58edda636894",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08df7d2d-21cb-4ebb-9c2e-330485aa3ab2",
        "cursor": {
          "ref": "dc88ba95-d1e5-4059-b257-285a26edab6c",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "6b4c3791-3828-4930-9da1-7628ebf82737"
        },
        "item": {
          "id": "08df7d2d-21cb-4ebb-9c2e-330485aa3ab2",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "3b4e72cc-1620-43b1-8960-35d3fa427293",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0021fbe-bde7-4e36-86a8-650971fd2c1e",
        "cursor": {
          "ref": "77ebe6c7-1ebd-475e-96b0-126ea384bd07",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "0e3ff9f0-2eb8-416e-b427-32d35605ec32"
        },
        "item": {
          "id": "b0021fbe-bde7-4e36-86a8-650971fd2c1e",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "13aede56-3be8-4940-b653-7302648cf2de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e77c8c4-9aea-4812-ba3f-4bf853407db9",
        "cursor": {
          "ref": "e1e4f5a3-e9d3-403b-a286-9ad6fa9c52fc",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "d0c3b009-6844-48c4-8516-69de7ef4406e"
        },
        "item": {
          "id": "7e77c8c4-9aea-4812-ba3f-4bf853407db9",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "fa55c250-bbb0-49ec-9bfa-871703e01aba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71b7538a-d9bb-4586-b3de-4dc2fe2013dc",
        "cursor": {
          "ref": "a073cad7-207b-400f-bdfd-f6cc6571dc50",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "46888fb1-5cc7-479a-b73a-bacd71c81195"
        },
        "item": {
          "id": "71b7538a-d9bb-4586-b3de-4dc2fe2013dc",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "210b8871-00a9-4403-b22f-2914240413e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d67040fd-47fe-4173-8228-0c6e45b7fa85",
        "cursor": {
          "ref": "9b3eb288-7f95-45d4-b181-9c12c222c1e8",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "d1ca49bf-aebf-4caf-af2a-83b9b4b6ea50"
        },
        "item": {
          "id": "d67040fd-47fe-4173-8228-0c6e45b7fa85",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "191b6f76-f19d-49cc-92aa-b689016692d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "549d58d7-d532-4bfe-940d-9ea8ccefbe1c",
        "cursor": {
          "ref": "f5c3e981-0995-49d2-859a-ce49357958e4",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "ef0be9cb-8e5d-4a64-a6bf-9c8d43bc8b32"
        },
        "item": {
          "id": "549d58d7-d532-4bfe-940d-9ea8ccefbe1c",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "99ecf2dc-0ad9-42e2-b641-9ca08eb7eea7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "965fb91a-d18d-4507-945c-0ac1e673534a",
        "cursor": {
          "ref": "0a8575e7-9269-4850-8a91-422a2185cfe7",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "011d0a59-2d95-44a5-8ab7-a6623fab6d6f"
        },
        "item": {
          "id": "965fb91a-d18d-4507-945c-0ac1e673534a",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "7d1af31b-e16d-4b97-b71c-870eca7a86b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "008915c8-408f-47a9-ae1a-887348fb9336",
        "cursor": {
          "ref": "47f8f8e1-851d-40b0-af15-d3309d00c530",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "0681564f-0649-45f3-a59f-3a01b130adc0"
        },
        "item": {
          "id": "008915c8-408f-47a9-ae1a-887348fb9336",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "22853337-17ed-48e0-9943-e17a7cfda0f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc1f7ffa-e2e3-4ee8-8067-9e6e2f75dc8e",
        "cursor": {
          "ref": "a5f8a3d7-6db1-4fc9-8317-90a4a65705d0",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "eea01444-816e-435c-9d3a-90a76af9f68a"
        },
        "item": {
          "id": "dc1f7ffa-e2e3-4ee8-8067-9e6e2f75dc8e",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "e51e7364-1efb-46e9-8cec-e4b650e4e79f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3e487e3-e739-4a23-a6c4-2c62a101168e",
        "cursor": {
          "ref": "48c8182b-8af7-4d60-ac8a-3122b3e16678",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "7e6747ac-54c7-4293-9593-23f5060c411e"
        },
        "item": {
          "id": "b3e487e3-e739-4a23-a6c4-2c62a101168e",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "f4dee22d-9972-4995-8492-c2297b8f1903",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba915229-127e-4e85-89d0-927d94a488d5",
        "cursor": {
          "ref": "99c3fcc1-117c-4625-a822-99202f296437",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "8cad1978-902d-47e0-af89-7137903c4b4a"
        },
        "item": {
          "id": "ba915229-127e-4e85-89d0-927d94a488d5",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "fef7e564-e158-4df9-bff5-cef39fe3ad47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98dbd734-51f6-4d25-be1b-ad5f0adb1a8e",
        "cursor": {
          "ref": "3d748df9-bab4-48b6-82b0-59b5b6525fd0",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "2851a077-9e09-4268-94a0-b5d6697e9085"
        },
        "item": {
          "id": "98dbd734-51f6-4d25-be1b-ad5f0adb1a8e",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "3c6fce43-b976-4266-ba16-80361f59d61a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "172c8aff-a292-4c5c-8947-22b17b35cb7a",
        "cursor": {
          "ref": "5bbfcda2-9c83-4bd0-92dc-18cf34e09b94",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "734e75ee-b167-4b91-b305-f2521b70497c"
        },
        "item": {
          "id": "172c8aff-a292-4c5c-8947-22b17b35cb7a",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "16aae9cb-3bde-4385-bfe4-73a09bfa3204",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bb5cf36-701b-4dcf-af33-2b0b993633be",
        "cursor": {
          "ref": "52c57ce0-4c14-4f9d-bc55-1fba493719a2",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "8935931e-47d0-43b6-90a0-fff478cbad95"
        },
        "item": {
          "id": "8bb5cf36-701b-4dcf-af33-2b0b993633be",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "8344dfd0-dad1-4a07-b50e-b10e747ece0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d976fa6a-69ab-4479-9655-9efbb88aaf5a",
        "cursor": {
          "ref": "c0c5a56f-182b-49e1-a521-ca7045c5befe",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "91e307ad-d717-4830-87ac-e53ba3431ab9"
        },
        "item": {
          "id": "d976fa6a-69ab-4479-9655-9efbb88aaf5a",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "1d253279-b72f-4080-ac5f-75ef69088185",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be3ab177-5591-47f0-98df-b7685663bfd8",
        "cursor": {
          "ref": "4f8e1054-fd95-4c95-842f-bb6cf34ce208",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "c5c1b652-5ba3-403c-915a-1266b17f64e8"
        },
        "item": {
          "id": "be3ab177-5591-47f0-98df-b7685663bfd8",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "2511ed57-cea6-4826-9eee-ac367a8ec94e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d8ee56e-1b68-4e7b-a196-8e82ae59a12f",
        "cursor": {
          "ref": "277d06ed-4dec-40ed-8361-2c334e70c7f5",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "567b8b89-c49a-4a1b-80d7-9a05348da5f8"
        },
        "item": {
          "id": "6d8ee56e-1b68-4e7b-a196-8e82ae59a12f",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "327e0d1b-a83c-4c9a-805f-9600b7bfa9fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbcaaa42-2961-4d9d-881a-3a2b39a285d5",
        "cursor": {
          "ref": "27646ce5-7fca-4643-8708-26ac89605b37",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "49be5ba9-c6f5-4056-b20d-8f4acdf85bf2"
        },
        "item": {
          "id": "dbcaaa42-2961-4d9d-881a-3a2b39a285d5",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "819162e0-f554-42d3-8407-d9bcf96291f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af99ae24-973c-443b-ac5d-b21377977a15",
        "cursor": {
          "ref": "71451f4d-b38b-41e9-be75-2f66c88b728f",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "f72e0a6e-c047-42ed-aa27-0f32ee0d40f7"
        },
        "item": {
          "id": "af99ae24-973c-443b-ac5d-b21377977a15",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "82413262-518d-4f37-ad6c-356066aad223",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25bffe55-e003-4bc3-8c08-1cdec08fde05",
        "cursor": {
          "ref": "68bbdeb0-0ce1-46b0-834d-536821ab1cac",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "afbce3a7-414a-4003-bfee-660b3e26461f"
        },
        "item": {
          "id": "25bffe55-e003-4bc3-8c08-1cdec08fde05",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "3f7b20bc-52c5-4949-a0f6-a343bffbe14d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e51f41e1-85cf-49cc-8f4c-a6f4bfd445a7",
        "cursor": {
          "ref": "d0005882-b860-48f0-bae3-ad7a4f054b72",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "b71d17fb-6701-4df1-abd6-507077593419"
        },
        "item": {
          "id": "e51f41e1-85cf-49cc-8f4c-a6f4bfd445a7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "907951a1-0a9e-4da5-8889-b81aa666c26a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7ecdfbd-e3f5-452d-895e-91cbdab4ba34",
        "cursor": {
          "ref": "bba8d14d-9ebf-4ddd-ba22-484a3ae25c27",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "068234cf-1d3e-4450-b3e4-813eae73c18e"
        },
        "item": {
          "id": "e7ecdfbd-e3f5-452d-895e-91cbdab4ba34",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "1323822a-1103-4d52-a575-0d2bb5ee9b01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4111e2b3-f3b4-4065-9393-bea55914ef30",
        "cursor": {
          "ref": "b0352afe-13d3-4890-8d4b-25696769a891",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "4d54fb50-213b-4be6-a434-aab50d93dbf6"
        },
        "item": {
          "id": "4111e2b3-f3b4-4065-9393-bea55914ef30",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "f1d2b6e7-f2d8-47bf-a47b-657a1107c409",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c0bae74-5e75-44c1-be7b-f2087ffe4a7c",
        "cursor": {
          "ref": "25a54f61-c317-4ba3-ac95-8bb3fb8e1735",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "2a97fb2e-9851-4ed8-b5e1-8166789dead5"
        },
        "item": {
          "id": "1c0bae74-5e75-44c1-be7b-f2087ffe4a7c",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "359151b8-f218-42fa-87f0-aebd34bc2e2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1f4ac42-ca60-4d19-90c2-b5b845068584",
        "cursor": {
          "ref": "07633cdb-b594-4c66-bb94-9294189e5e1b",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "79002a94-4627-4c2b-9316-f7440e69e430"
        },
        "item": {
          "id": "d1f4ac42-ca60-4d19-90c2-b5b845068584",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "9567af5e-b5ca-4fb6-b0c7-1add21b4968b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 684
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30b29add-09a0-45f6-9d6a-750e11825ca9",
        "cursor": {
          "ref": "dbf0e2c9-85c1-4685-bb7d-be96ed7c7023",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "ca2cf7e0-809b-4717-9cfb-92cb1b5aeeda"
        },
        "item": {
          "id": "30b29add-09a0-45f6-9d6a-750e11825ca9",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "9a18eca8-04fa-41d8-9e90-dfaa569ea04a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cd47cbf-ea75-49d8-a32c-1b91b0e72e14",
        "cursor": {
          "ref": "99d4c050-58fb-462a-96d2-5d109b0ce8bb",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "3148b699-8c31-48c3-aec7-ef5e4430dd1f"
        },
        "item": {
          "id": "4cd47cbf-ea75-49d8-a32c-1b91b0e72e14",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "c865c9f9-93fc-4440-b6c9-d0a27ed11698",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94ab02e0-f5a8-4d2a-bc05-5a335e3d7c20",
        "cursor": {
          "ref": "11c8f6fb-7d3f-435e-b2b3-d59b38daa29f",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "801ae961-cf2d-45df-a25f-813bc52ff324"
        },
        "item": {
          "id": "94ab02e0-f5a8-4d2a-bc05-5a335e3d7c20",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "edc4ec3b-8a2c-4974-a3ce-a28808137a5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11feefd2-0a0a-43bf-8efd-0aea0524855e",
        "cursor": {
          "ref": "29f9b71a-6dff-44db-9529-bbf968a8c158",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "c906792d-6336-4171-bd19-963f84c797e3"
        },
        "item": {
          "id": "11feefd2-0a0a-43bf-8efd-0aea0524855e",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "b6d78527-0960-4d15-9e45-ac5647c03e9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e7c7a69-e572-43f4-b4de-f4eee7302454",
        "cursor": {
          "ref": "0620bb08-03c7-4c24-acc8-ee14b7829804",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "96661bc7-beba-4947-bbd5-9a6e3325e7e9"
        },
        "item": {
          "id": "6e7c7a69-e572-43f4-b4de-f4eee7302454",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "a166544a-20f2-4bc3-b042-f52b421eb87f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b55d416-6bd2-4b1d-8b8d-df42614ff48b",
        "cursor": {
          "ref": "3d925357-805e-44cc-9eb6-6f864e9f1233",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "7b971414-5bc5-473c-b536-a817291f3c86"
        },
        "item": {
          "id": "4b55d416-6bd2-4b1d-8b8d-df42614ff48b",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "53302f28-b888-4e36-9cb9-e8ba269a88f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "239f365b-a3fb-48fd-b774-b6e8e0430b40",
        "cursor": {
          "ref": "aa0f8569-0907-4311-ac87-0a43ccbb4b40",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "b69e83fe-dba5-4361-9501-67127a1d131b"
        },
        "item": {
          "id": "239f365b-a3fb-48fd-b774-b6e8e0430b40",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "2820a26e-b7ed-4ada-8b10-bc8b75f731ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e68e664d-23c2-4527-988a-075e69a08e46",
        "cursor": {
          "ref": "89d7d651-0540-4ef9-b8b6-a807ec34bd60",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "8595ab70-8dc9-4f94-867e-bf5dba5bd8f6"
        },
        "item": {
          "id": "e68e664d-23c2-4527-988a-075e69a08e46",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "49da98f6-caa1-440e-8acd-fde29d1844a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a16d5101-b14d-488b-b95c-f35aa028572a",
        "cursor": {
          "ref": "732b001a-d0b9-4d31-8bc6-20f2650d6591",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "c897c01f-d10f-4ae3-8370-a2395afd9d3d"
        },
        "item": {
          "id": "a16d5101-b14d-488b-b95c-f35aa028572a",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "1748cdfb-0b07-4589-8f22-5014e0780888",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc5d8680-37f1-43ea-80b1-9a3a69fb2f8d",
        "cursor": {
          "ref": "644cc1a4-78b0-4c12-a316-957371d2d7a6",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "90fa892d-837a-4685-a5ba-6083840b8943"
        },
        "item": {
          "id": "dc5d8680-37f1-43ea-80b1-9a3a69fb2f8d",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "a3ef6376-7bef-470d-9ba2-ac181d5e4d8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb86c131-daa1-49de-bd24-0923201904c9",
        "cursor": {
          "ref": "fc1b0c64-1abc-468f-aa2f-a22ccfc1c194",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "d62dae90-def0-452e-bcbe-4cfd44a1a18a"
        },
        "item": {
          "id": "bb86c131-daa1-49de-bd24-0923201904c9",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "b1e6cb04-74f8-41c0-8871-1a76607aad50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72e3edcb-791d-4004-863f-b644147acb65",
        "cursor": {
          "ref": "295dda4c-a05c-4280-afba-9da03d405131",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "75f3daa5-7d5f-4096-b113-daae6e05d1f1"
        },
        "item": {
          "id": "72e3edcb-791d-4004-863f-b644147acb65",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "50e64f17-e16b-4a46-a668-799cde074c6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5984d3c-205e-44c3-b0ae-bb55ef5f0086",
        "cursor": {
          "ref": "08a2c33d-51ee-4fa5-94df-05d44d77893f",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "71ee9610-1e17-4f8f-898c-cabc10f2506e"
        },
        "item": {
          "id": "c5984d3c-205e-44c3-b0ae-bb55ef5f0086",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "59571ec6-e994-4d61-b86d-873245ed58b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fa0d1c9-fb6b-4af0-8fbd-d73a85f33d15",
        "cursor": {
          "ref": "1fe25c2c-4423-4408-93e0-c8628a6cbee1",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "43e763d7-ebd6-4f19-8c11-ebefdf7893e6"
        },
        "item": {
          "id": "6fa0d1c9-fb6b-4af0-8fbd-d73a85f33d15",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "d0045ce7-a5c5-4e14-b325-8289f25e77bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "021c0d17-f195-4805-b08b-5f6faf5a3112",
        "cursor": {
          "ref": "0355d902-2e17-4c22-97d0-aa92066aea89",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "1dcf4c98-aecb-43bc-8121-a8e0d92e2cea"
        },
        "item": {
          "id": "021c0d17-f195-4805-b08b-5f6faf5a3112",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "a81338a8-5111-464b-a52e-f65e23d4eeb0",
          "status": "Created",
          "code": 201,
          "responseTime": 81,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "1ad890c3-b6a5-45e1-987f-cf6efd98b1d4",
        "cursor": {
          "ref": "13c4b39a-86e9-4206-8e62-70f80aee3685",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "74e6ece6-913f-4c64-8ead-d7665574359d"
        },
        "item": {
          "id": "1ad890c3-b6a5-45e1-987f-cf6efd98b1d4",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "8465bebb-15cc-4e4b-a98d-9f9b4a2afc43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "121a168b-c4ea-42ea-8ac4-e49d2d2a1c3a",
        "cursor": {
          "ref": "12ce0662-3941-435e-a43c-7286c3a0b729",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "5e3d0056-9a8b-4c17-b638-14e87733d9f2"
        },
        "item": {
          "id": "121a168b-c4ea-42ea-8ac4-e49d2d2a1c3a",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "57cffeb2-9ec4-4c2d-8e2b-426bbce2e624",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7514bd5-fa45-4e4e-84a6-3339b85336ee",
        "cursor": {
          "ref": "b7ccdfdc-0355-428e-b67c-c5de4ab8dc4c",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "13055ab3-0cdb-4d85-8512-07d062241c0b"
        },
        "item": {
          "id": "a7514bd5-fa45-4e4e-84a6-3339b85336ee",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "ab35ad80-51f8-4f48-a2cb-840cf2dd0d62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 515
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d3cce76-dc9b-48d0-80e4-0ffe872e62e8",
        "cursor": {
          "ref": "bb35a704-4154-4f5a-9d02-407c3bea60eb",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "f237efbf-a23b-4752-b061-ddd7ebd7e4a8"
        },
        "item": {
          "id": "5d3cce76-dc9b-48d0-80e4-0ffe872e62e8",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "2d9130be-915f-4aba-a30c-2fee0c65a1a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 514
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa381de7-5d84-4f6a-8f33-a6608f1d875e",
        "cursor": {
          "ref": "1cd7c1ee-460e-4ed7-947a-abe2cf469b0b",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "4a233084-8fd8-4302-b367-ec7a5e40d9e6"
        },
        "item": {
          "id": "aa381de7-5d84-4f6a-8f33-a6608f1d875e",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "7dedf3c9-791a-41c1-8ad5-39f584ccac5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ee9493b-6ffd-499b-8f63-570a52b8f758",
        "cursor": {
          "ref": "ccb2f0b6-a2eb-47bf-8d1e-3175ebb4d16b",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "91abdd28-9c2d-4425-99f1-fe7d4eb5b6fe"
        },
        "item": {
          "id": "7ee9493b-6ffd-499b-8f63-570a52b8f758",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "bfda460e-bd64-457e-9941-f73602a15799",
          "status": "Created",
          "code": 201,
          "responseTime": 81,
          "responseSize": 651
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "29956d32-25c6-4c23-bfdd-88a08dc825cc",
        "cursor": {
          "ref": "b9db42c4-e095-4ad7-a6f4-2aefe817dbce",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "7bb3ba23-c92d-4d69-b968-4506c15ef5ea"
        },
        "item": {
          "id": "29956d32-25c6-4c23-bfdd-88a08dc825cc",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "244c897c-53c8-452e-9fa1-f4dee37cb215",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbbb90e6-fb32-4d06-b0bd-f89bf07c7d92",
        "cursor": {
          "ref": "d37db07f-9154-45f5-9d28-1edff4489c16",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "626da9ce-220c-4f22-b99f-186b9cac4e91"
        },
        "item": {
          "id": "cbbb90e6-fb32-4d06-b0bd-f89bf07c7d92",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "8661b388-bac3-46b8-aa1b-c95d93d684fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1566a84e-28af-4525-ab92-a18209ed5b86",
        "cursor": {
          "ref": "14c38c31-ccd3-4232-8e47-5c71fe58579a",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "8f654e7e-9b9e-4b93-b3d2-b961df66d488"
        },
        "item": {
          "id": "1566a84e-28af-4525-ab92-a18209ed5b86",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "510865bd-b9f8-4f3e-8470-e308ef41bae8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa515408-4398-471a-ba9b-b68d02f58463",
        "cursor": {
          "ref": "d3d8e934-6f42-46bd-9b8a-77a3dcf0b271",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "98709372-dafd-40f2-b50a-95ca8ea292c5"
        },
        "item": {
          "id": "aa515408-4398-471a-ba9b-b68d02f58463",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "ba3bd1ec-069b-4658-8805-0f81f43b1f60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57f7b961-4649-46b6-9032-767ebbbde6a1",
        "cursor": {
          "ref": "3ac337a4-0e26-410e-9139-7cf79a4aa174",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "19feda0c-142e-4da6-b4b3-182a66d692e1"
        },
        "item": {
          "id": "57f7b961-4649-46b6-9032-767ebbbde6a1",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "eafba7c9-7d81-4ddd-8024-2da10211c313",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "997d609f-3f5d-4eb1-95e2-b67e336d992a",
        "cursor": {
          "ref": "221a0ab5-d21f-4f8b-91e2-eef7ac349326",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "cafd2dc4-c416-41ab-8ad7-da09ddd22aa6"
        },
        "item": {
          "id": "997d609f-3f5d-4eb1-95e2-b67e336d992a",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "b025f64e-4c52-4a13-8f58-3a9c96dd0651",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16f80219-6d14-41e5-84fc-e1ab77797b23",
        "cursor": {
          "ref": "e3888af7-9081-4496-b06f-03460eeff855",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "7e97621a-7acf-4c6d-8e65-fa0a1c786609"
        },
        "item": {
          "id": "16f80219-6d14-41e5-84fc-e1ab77797b23",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "1cb9e41f-969a-4437-b772-9ba586f02921",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b15ae7c-003f-4207-b50f-e47b4ff5a048",
        "cursor": {
          "ref": "19ed28cf-6bcb-4288-9ccb-866d6f6d9c5d",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "ad887d4f-ca28-4648-b1d7-f59cf30439f1"
        },
        "item": {
          "id": "2b15ae7c-003f-4207-b50f-e47b4ff5a048",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "6c5e0fae-9490-45e4-a90f-82a8a03ed057",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 205,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ade17c84-201a-4840-a73b-c4f77e78d98e",
        "cursor": {
          "ref": "ef635dcf-12e0-4848-911d-cefcee30ed6e",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "a546c216-b9bb-42cf-a3ba-d4ebed289370"
        },
        "item": {
          "id": "ade17c84-201a-4840-a73b-c4f77e78d98e",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "aa38d1fb-98db-401f-924f-b3b0c5757b09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "085cabf8-2c6f-4168-8063-d0e2829f995c",
        "cursor": {
          "ref": "8e3471fe-6d1f-4e5f-b0c6-d0c85c98ed91",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "54e1e2dd-00b9-459e-8a8d-eb2e1ca0e739"
        },
        "item": {
          "id": "085cabf8-2c6f-4168-8063-d0e2829f995c",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "ff5febff-660f-4529-818c-f6e4705590d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "c8a3a07c-8099-4d21-b2b2-d72e23f462d8",
        "cursor": {
          "ref": "41fff67b-8a27-4778-911c-a2e97f5c9cca",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "992cf1ff-eb7d-4441-8cef-81950d8bf3af"
        },
        "item": {
          "id": "c8a3a07c-8099-4d21-b2b2-d72e23f462d8",
          "name": "credentials_issue"
        },
        "response": {
          "id": "c126e86f-4383-405b-96af-a18a39048c2f",
          "status": "Created",
          "code": 201,
          "responseTime": 93,
          "responseSize": 651
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "74d5ee95-cda7-4f86-94d1-c564d20d1740",
        "cursor": {
          "ref": "288839ab-644b-4840-9427-caf7820c534f",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "f4d3d241-4fd0-4873-a410-e5e59068abff"
        },
        "item": {
          "id": "74d5ee95-cda7-4f86-94d1-c564d20d1740",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "b57d9ee5-e1e5-45e6-86f0-6c98b0337e99",
          "status": "Created",
          "code": 201,
          "responseTime": 83,
          "responseSize": 651
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7019dd3-27d4-4a25-860d-3caabae97c11",
        "cursor": {
          "ref": "f7ec3476-2a32-4ac5-8ca4-58f9470977ff",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "1a0748ac-a1b8-419c-bada-0690f0c75a0d"
        },
        "item": {
          "id": "a7019dd3-27d4-4a25-860d-3caabae97c11",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "bcd306a5-503a-49ce-88c3-01f92ca6ddac",
          "status": "Created",
          "code": 201,
          "responseTime": 81,
          "responseSize": 673
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc665910-bb99-4e7c-90e0-185c02b5554e",
        "cursor": {
          "ref": "fbceca3d-cc16-4351-bcd4-c1699d63b851",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "9163927d-5735-4d02-9327-96e9174c6a90"
        },
        "item": {
          "id": "bc665910-bb99-4e7c-90e0-185c02b5554e",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "18e5a3e1-992a-4646-91cf-e950bf4da2f1",
          "status": "Created",
          "code": 201,
          "responseTime": 82,
          "responseSize": 641
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6d4c714-ab0a-4e82-90ac-e13bd9d5157a",
        "cursor": {
          "ref": "2b4a32b3-e5bc-42d5-9556-df18f220302a",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "7372a51b-028a-43b4-aa82-d5ea284f049a"
        },
        "item": {
          "id": "e6d4c714-ab0a-4e82-90ac-e13bd9d5157a",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "e5f8847a-abde-4903-9f08-d6328d325cde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:110)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:110)"
            }
          }
        ]
      },
      {
        "id": "6af7cc86-1cbc-4e84-a1a3-30b9bc49ff0c",
        "cursor": {
          "ref": "f32d28c6-46f2-4440-b420-c30f458f3da5",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "8e572b97-8f4f-4852-99a8-f67f50b10173"
        },
        "item": {
          "id": "6af7cc86-1cbc-4e84-a1a3-30b9bc49ff0c",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "27e9481d-ec69-43cd-adb3-83eddc4f1d78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6af7cc86-1cbc-4e84-a1a3-30b9bc49ff0c",
        "cursor": {
          "ref": "f32d28c6-46f2-4440-b420-c30f458f3da5",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "8e572b97-8f4f-4852-99a8-f67f50b10173"
        },
        "item": {
          "id": "6af7cc86-1cbc-4e84-a1a3-30b9bc49ff0c",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "27e9481d-ec69-43cd-adb3-83eddc4f1d78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0eae392-5cb1-404f-ad69-ab344c829838",
        "cursor": {
          "ref": "17905567-e3a7-4481-8a5d-7b5cd7c98fc1",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "0b172ea1-9300-4d6a-854a-145369879149"
        },
        "item": {
          "id": "e0eae392-5cb1-404f-ad69-ab344c829838",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "38e6201f-d6ef-4937-afb6-3ec1bfff1c94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 307
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "730f09f6-5e0b-4861-bb98-d7fdabfb7482",
        "cursor": {
          "ref": "409ac481-3bf5-4768-b027-6cfc320d390b",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "1cd23893-01dd-4ffb-84c8-c1c7698c56a6"
        },
        "item": {
          "id": "730f09f6-5e0b-4861-bb98-d7fdabfb7482",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "74b598fa-fb34-4b63-8cdb-8c700c84e8da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 306
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "643d2c78-e16b-4086-953f-b1da8e2f9b10",
        "cursor": {
          "ref": "7690b99b-9f76-42e0-b4e9-19f50cd88690",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "4faa8ea4-b7fd-47d2-805d-797d2a832f58"
        },
        "item": {
          "id": "643d2c78-e16b-4086-953f-b1da8e2f9b10",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "a15fff3d-481d-44af-8b60-8c068379f153",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "444c8887-14ed-4ffb-86ec-250e091af54b",
        "cursor": {
          "ref": "116174c7-c98a-4997-bd41-2a776843dafd",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "57587d1a-02fe-414f-8f67-991de7614065"
        },
        "item": {
          "id": "444c8887-14ed-4ffb-86ec-250e091af54b",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "9441cce0-5929-434e-88c4-9c9aca4e31eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52635965-832f-46a0-a0ba-96e8b0e25542",
        "cursor": {
          "ref": "9e8e2331-3db7-4be8-91f3-97c8123e144e",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "14a4dc8b-a741-4cf9-8853-2cd42a61afe1"
        },
        "item": {
          "id": "52635965-832f-46a0-a0ba-96e8b0e25542",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "f270e666-1507-483b-a2b6-10daf491da81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ebd5cd2-e63f-412e-a2d4-8556501c49e0",
        "cursor": {
          "ref": "2196eb51-8e5a-47c5-8c4d-457c4cd27223",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "6564e1fd-3a3e-4b45-8cea-a5336834bf38"
        },
        "item": {
          "id": "5ebd5cd2-e63f-412e-a2d4-8556501c49e0",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "41914c7d-78c3-466f-ae61-fdd428ecb786",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "80362425-622f-4ede-bd48-fe7076f4f81a",
        "cursor": {
          "ref": "3f6a26b6-2673-476d-a853-b7ced51d4cc1",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "b3fbb775-4334-464f-a742-93399c16f5b6"
        },
        "item": {
          "id": "80362425-622f-4ede-bd48-fe7076f4f81a",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "03da5799-b8c7-4660-87a4-ce25d298d344",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5701e1f6-c830-447e-be84-ea24a2a9114a",
        "cursor": {
          "ref": "29486844-badb-4b78-a302-c8a0253a448a",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "2277f881-dc5a-4f4a-8d8e-db017de2ad00"
        },
        "item": {
          "id": "5701e1f6-c830-447e-be84-ea24a2a9114a",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "d8f45372-2cb1-4693-b623-c437ac2a1b5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ead5db7a-6d4e-426e-8599-36eced079bcc",
        "cursor": {
          "ref": "c9d1ddde-244a-4d69-9562-83b563eab9d3",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "763db99d-a6e8-4469-b99b-8a562090fb4d"
        },
        "item": {
          "id": "ead5db7a-6d4e-426e-8599-36eced079bcc",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "0437ab0c-b8d0-46d8-9e31-46eeede5bc3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e02170d2-867a-44a1-8476-3c15af6bc842",
        "cursor": {
          "ref": "94f941b1-6b50-454d-b421-5789d13b139a",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "6331134a-269b-4fc0-b9cf-d9c7ea288dcc"
        },
        "item": {
          "id": "e02170d2-867a-44a1-8476-3c15af6bc842",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "f4235059-3628-4b57-9e76-acc8bd9fa15d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf761631-5219-4962-a794-2c48c72d22e0",
        "cursor": {
          "ref": "9c14dc3d-f19c-4841-a846-cf0da74e978a",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "3cc332a0-3c75-4f32-8402-0d2506e29267"
        },
        "item": {
          "id": "cf761631-5219-4962-a794-2c48c72d22e0",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "50567903-93ed-4e12-964d-37976010fcc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee180d73-cede-4f01-8bcd-50f21b8a3da3",
        "cursor": {
          "ref": "4d747970-c55f-4093-9041-1110db3781d7",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "30c60cf8-6c4d-4d37-8448-4d9dc6e36db2"
        },
        "item": {
          "id": "ee180d73-cede-4f01-8bcd-50f21b8a3da3",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "abfc5346-2cfe-403c-9acf-0a61dc2a5462",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bce52f6-2c41-4c30-bb04-ef582c2b94b3",
        "cursor": {
          "ref": "ec3d3322-3b56-49d2-9144-7e895dc56161",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "66ec08cc-9165-48d9-9bdb-2890ec3cd601"
        },
        "item": {
          "id": "9bce52f6-2c41-4c30-bb04-ef582c2b94b3",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "622dfa77-b586-4205-aba5-69d63d5ed067",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d815c42-76bc-42af-abee-8770767557b7",
        "cursor": {
          "ref": "05448804-091f-4af1-95a7-d2ffc219914a",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "d3ed3f6f-1bf5-4c8f-a3f2-be47239f5f3e"
        },
        "item": {
          "id": "6d815c42-76bc-42af-abee-8770767557b7",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "9cc33efc-7d0d-4748-b2fa-e775fddfa066",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18d10c6c-d37d-42c0-a0c2-25c2e826d754",
        "cursor": {
          "ref": "e17795fb-4720-428f-8d8f-f581f9b5bd80",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "648d5ea2-f73f-472f-8134-9327f5538a53"
        },
        "item": {
          "id": "18d10c6c-d37d-42c0-a0c2-25c2e826d754",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "6d788a6a-f60b-48cf-86f5-7cb2d336e1d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "618a7902-c73f-41b1-9def-453feaadef38",
        "cursor": {
          "ref": "02b9c375-adc1-4d7f-b199-67bfbfee4de6",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "cc2c16e1-f9e1-4094-b93b-5c212cc7947e"
        },
        "item": {
          "id": "618a7902-c73f-41b1-9def-453feaadef38",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "468326a6-b995-487b-8bde-9a3555a3ba23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32b7bb1a-a2f7-4589-b061-d98f6fbddd54",
        "cursor": {
          "ref": "ed467c44-8719-4795-83ad-ca9834417ded",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "343775de-6a6a-4fd5-902f-fc54d11c3979"
        },
        "item": {
          "id": "32b7bb1a-a2f7-4589-b061-d98f6fbddd54",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "cb465aec-7382-4fc9-8dd8-7ec814902db4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca39d67b-b82f-4980-b911-19790a1dfcab",
        "cursor": {
          "ref": "d8fbb4d4-9d5a-4015-9f37-c194988e3696",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "be06db59-6f21-41de-b13f-aa3420e22065"
        },
        "item": {
          "id": "ca39d67b-b82f-4980-b911-19790a1dfcab",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "3afe3014-3059-46ec-af55-e93e4ccf952f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "645b6d28-f954-48c9-b37c-a1c11172af67",
        "cursor": {
          "ref": "683f4ad8-549d-4aab-b298-f81636fe181e",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "bb5cdc82-0aa1-428d-8688-89d6c7eb20b8"
        },
        "item": {
          "id": "645b6d28-f954-48c9-b37c-a1c11172af67",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "a1bb9b7a-7a4b-47fc-aec6-c38bf02c1fec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebd84625-f6ba-432b-a0b7-74b278418d17",
        "cursor": {
          "ref": "5240620e-996c-4eef-aba5-60feb07c31fd",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "483dc8e9-1fb7-4dac-831e-4dcf8f4b1076"
        },
        "item": {
          "id": "ebd84625-f6ba-432b-a0b7-74b278418d17",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "e977a6be-a2dc-483a-af1e-f1b51a258a4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05de4dd3-3214-46c5-9fbb-3fee687f9dc5",
        "cursor": {
          "ref": "df4050ac-467b-44c8-947d-a9379b2ef955",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "c017fede-84ed-4090-97b4-cc29b4ff4d88"
        },
        "item": {
          "id": "05de4dd3-3214-46c5-9fbb-3fee687f9dc5",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "c1972338-399b-4b58-a963-c7551a30283a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "284075c7-69ea-4059-9295-a872b27786f5",
        "cursor": {
          "ref": "af2aa2c4-a341-4c67-a4fa-f5ab21bd620f",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "f3976ec0-a50d-4035-87c7-a7927de7342c"
        },
        "item": {
          "id": "284075c7-69ea-4059-9295-a872b27786f5",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "b3e4fb78-599e-4698-a18d-db90f2f4bc9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3796712e-da2e-4361-9c86-4dec3d65e8e5",
        "cursor": {
          "ref": "440ffce9-3b3a-4645-bd8c-4846a306a18d",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "07520001-fc12-41bc-98b6-4b38a1c7d9a8"
        },
        "item": {
          "id": "3796712e-da2e-4361-9c86-4dec3d65e8e5",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "9af4da75-8650-41bf-aa13-ffda282cb6cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8280defb-913f-4266-bc54-0892a66ee5dd",
        "cursor": {
          "ref": "e7579a25-4004-4f31-a94d-b04039d2845d",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "554da1c2-eb9b-4d93-9918-bc475470c5dd"
        },
        "item": {
          "id": "8280defb-913f-4266-bc54-0892a66ee5dd",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "28fc7b08-656d-4708-97c3-c8e8b168052c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a62a3ad3-4265-49b9-8b21-9f2c428ac607",
        "cursor": {
          "ref": "eb8737c7-f78a-4d7c-99e1-08d3dd41470d",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "164c840e-9a24-4a62-9459-15bb390ff04b"
        },
        "item": {
          "id": "a62a3ad3-4265-49b9-8b21-9f2c428ac607",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "5f662ad4-d695-4adc-8fa4-758b6e0b16b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e0c04f8-2489-4906-9a6d-3ffaadd05a1c",
        "cursor": {
          "ref": "b9278e98-b06d-4ffb-8952-34d4b7da3f95",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "c7bc30af-877e-4e97-acb8-c6f00e803511"
        },
        "item": {
          "id": "9e0c04f8-2489-4906-9a6d-3ffaadd05a1c",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "ef5f90fd-e432-44b3-9cdd-8539230fe2cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6139d799-c6cc-436e-9249-fa7b78e1573d",
        "cursor": {
          "ref": "773c8317-c766-461d-a307-b45fc0fa58d3",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "dda47a6a-2c16-4d46-925f-b0f164491dbd"
        },
        "item": {
          "id": "6139d799-c6cc-436e-9249-fa7b78e1573d",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "896dc83e-8e4a-4efa-a43e-34d01bf88285",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd57f357-cf4d-43f9-b6ed-7c3f66f3e5dc",
        "cursor": {
          "ref": "63084563-b37a-4538-a9ea-40d0410e1e1d",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "c6252f33-e150-4b31-a6d2-79df3cedf010"
        },
        "item": {
          "id": "bd57f357-cf4d-43f9-b6ed-7c3f66f3e5dc",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "eb36a9fa-b2ec-4286-ba85-928ad38a0145",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6431b1e3-10a0-458b-97dd-1f6290eebe94",
        "cursor": {
          "ref": "80083853-51aa-408e-a209-2c1dc7515b41",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "9d5fba4f-bd42-42f0-b66e-8bfb3efc9f59"
        },
        "item": {
          "id": "6431b1e3-10a0-458b-97dd-1f6290eebe94",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "8564f78e-f1bd-4291-9266-f590842bb0fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d67ad053-f1d2-4d64-bdbd-00be6c7cf148",
        "cursor": {
          "ref": "0981b5e2-6cb5-4d07-863b-71d143fc36fb",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "c74b6e09-fe25-4c9f-8d06-0d4e98c452f8"
        },
        "item": {
          "id": "d67ad053-f1d2-4d64-bdbd-00be6c7cf148",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "1c5dc785-8c67-4c8d-abac-2d0cbc132278",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8d51cf7-5a19-4d7c-8ee5-31af4d662d4e",
        "cursor": {
          "ref": "303f1702-ae61-4b68-8dfd-7b5201f5be6f",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "3ba766c4-6f7d-4086-9d97-afd22a2d04b2"
        },
        "item": {
          "id": "d8d51cf7-5a19-4d7c-8ee5-31af4d662d4e",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "e2855ce9-9a4a-4ba9-9603-f72b5296bf78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf4e6bde-fa0c-48b8-912c-bfccdf3dfa8e",
        "cursor": {
          "ref": "dbb1c423-03ac-4e57-a6ca-d5a52b15b967",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "f4c66e38-a3aa-4796-8cfe-6a3142bffc50"
        },
        "item": {
          "id": "cf4e6bde-fa0c-48b8-912c-bfccdf3dfa8e",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "6cfd7aa6-c2bc-4e9d-a94e-000c246146ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "0e936c8f-d5df-4338-997a-ac586abed289",
        "cursor": {
          "ref": "02c4bd6d-3d2b-414f-af05-c0c38a0494b6",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "a71bf974-cd47-4ab3-b327-5588d6612820"
        },
        "item": {
          "id": "0e936c8f-d5df-4338-997a-ac586abed289",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "6e5a7007-7d55-46f6-94e7-3e072c5b5f5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "95be7370-d5c9-45be-ad0a-b669e19bfad8",
        "cursor": {
          "ref": "4220badb-0315-4c0e-87ed-ab772cbbc726",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "0e920d71-3b68-46a4-b15b-21929ee8b651"
        },
        "item": {
          "id": "95be7370-d5c9-45be-ad0a-b669e19bfad8",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "9ef9da56-3e11-4418-bc27-443420b20a1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95be7370-d5c9-45be-ad0a-b669e19bfad8",
        "cursor": {
          "ref": "4220badb-0315-4c0e-87ed-ab772cbbc726",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "0e920d71-3b68-46a4-b15b-21929ee8b651"
        },
        "item": {
          "id": "95be7370-d5c9-45be-ad0a-b669e19bfad8",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "9ef9da56-3e11-4418-bc27-443420b20a1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88db675b-b4a7-4471-af04-2f1632abfb73",
        "cursor": {
          "ref": "3b201c1e-e4fd-4dfa-9ca4-394aec529b3f",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "71027b81-32c3-4c92-8407-e083646ed1b7"
        },
        "item": {
          "id": "88db675b-b4a7-4471-af04-2f1632abfb73",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "833420ef-b3af-4d5f-b221-811f22a2bcad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e958f0b2-b94e-4897-9181-743c6dddd193",
        "cursor": {
          "ref": "472206a0-917f-4493-8511-b1c3904406a0",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "c044107f-df42-43f9-8c45-3c1fb5ae335b"
        },
        "item": {
          "id": "e958f0b2-b94e-4897-9181-743c6dddd193",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "07d92034-81ac-4355-8c98-077697029f87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f46347a-5bc5-4b2c-a66e-b9c7adb7386b",
        "cursor": {
          "ref": "945a992b-72c3-422e-80c0-35802b63340a",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "14843e6c-599a-4e50-8da2-4513151ce647"
        },
        "item": {
          "id": "8f46347a-5bc5-4b2c-a66e-b9c7adb7386b",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "6b7c3ca9-d189-4fdd-8a96-2fc72d131170",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78784961-60c6-4788-81e0-0ac3bcfaea84",
        "cursor": {
          "ref": "0d1a8dd8-8c6a-41d4-89be-139132e19bb8",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "4f97135d-90dc-4a33-9a16-5a4c34c14532"
        },
        "item": {
          "id": "78784961-60c6-4788-81e0-0ac3bcfaea84",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "5e6ab2ab-8f3a-407c-b2bb-25414786a549",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50dfcff4-f481-4cd8-9c1c-09370e545334",
        "cursor": {
          "ref": "07c13e1d-4d6f-402a-b6b2-e77f892347e3",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "5a298033-dc9d-4ad7-a6dc-073b0d44708a"
        },
        "item": {
          "id": "50dfcff4-f481-4cd8-9c1c-09370e545334",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "8953df6a-16db-4e8f-917d-f7aad3a52999",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ef41561-e877-4ecf-8208-74998d58769f",
        "cursor": {
          "ref": "ddd5037e-9705-4379-ac3b-ac16243cb758",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "b8947274-e552-4dd5-a693-cb1bd187e750"
        },
        "item": {
          "id": "4ef41561-e877-4ecf-8208-74998d58769f",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "27c39392-7769-41b9-9ffd-f6c3e9937b7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33a2a1f5-2025-4384-903c-cc0b52eeec45",
        "cursor": {
          "ref": "e3e1d7d2-a02c-4d4c-b13f-1fe508f5ce6a",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "b35d2ed1-be55-4e7a-a16b-83ddcd30bcb8"
        },
        "item": {
          "id": "33a2a1f5-2025-4384-903c-cc0b52eeec45",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "9bb5a542-8ab7-477c-8184-eb9cbef672b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "566eecb9-9370-4a00-a730-5382515a2753",
        "cursor": {
          "ref": "16b7e67d-6c93-494d-bd55-9459525d255b",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "b7e7dbfa-2e83-45ff-97b9-582c4e27a7f3"
        },
        "item": {
          "id": "566eecb9-9370-4a00-a730-5382515a2753",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "4729fa2b-b0c7-4027-b485-477ba1bb3fc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e796a56-3f30-4470-b46d-86d8a9a5ccd6",
        "cursor": {
          "ref": "86b3fbf0-075b-4bfb-9203-e1d5b551da07",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "850b9681-c8cd-450f-9aa8-b7bc71bd30a6"
        },
        "item": {
          "id": "6e796a56-3f30-4470-b46d-86d8a9a5ccd6",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "68f63561-ea45-4b5e-8b85-e1dc64bf60df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bad0dddc-8001-48de-96ff-716ae3a0ead0",
        "cursor": {
          "ref": "d9695c66-7b1e-485b-9274-32101698d6ab",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "41482c70-3285-4d1e-844e-1af7b93f4a80"
        },
        "item": {
          "id": "bad0dddc-8001-48de-96ff-716ae3a0ead0",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "40b8ba44-0794-47de-be6a-7d397f8c4d82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06e9dacb-e2ad-4f39-a07e-8277f0815d2d",
        "cursor": {
          "ref": "81eef735-d315-4c40-85ee-5821f6aaf59c",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "56be76fa-6125-4fcd-97db-8252760de7e2"
        },
        "item": {
          "id": "06e9dacb-e2ad-4f39-a07e-8277f0815d2d",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "378e60bc-b8fa-45d0-b405-34c895ea1dfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fee641be-77e8-4abd-b474-2321facfac98",
        "cursor": {
          "ref": "ef4455cb-7dc8-4c87-a7eb-5006dbe5b441",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "6fab5975-800c-4b5f-90ad-682933086094"
        },
        "item": {
          "id": "fee641be-77e8-4abd-b474-2321facfac98",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "c5c22b5b-acdc-425a-8aaa-6fb8a5080c48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db9a15cd-9c80-4b44-91c2-52bf37743066",
        "cursor": {
          "ref": "6373afe4-dccd-4f80-9047-4f48c82d5080",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "7fd7aa5f-140d-4bb8-9e73-3a47f41136a9"
        },
        "item": {
          "id": "db9a15cd-9c80-4b44-91c2-52bf37743066",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "e9fe1f74-2d42-497e-92f1-f606a7c847e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb0e5b55-4e6a-4c2c-8b87-b9387f5d3965",
        "cursor": {
          "ref": "da77210c-e377-4337-a076-dedd79e2c1f4",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "508e7ce6-1917-45f8-b6f1-4326372973ae"
        },
        "item": {
          "id": "cb0e5b55-4e6a-4c2c-8b87-b9387f5d3965",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "b7fcbc4a-8179-432a-8cd6-7ed5544863e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "917d6b33-2990-4777-901d-a513d81a73c7",
        "cursor": {
          "ref": "84c8ab51-4e3f-4373-a4bf-4fd1f74399c9",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "ff1f7434-c411-4044-9906-7bd35f96ca43"
        },
        "item": {
          "id": "917d6b33-2990-4777-901d-a513d81a73c7",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "49c007a7-dae1-4a47-8d34-4d44264aa0e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aae01ab5-b13b-483d-9d77-d33885fe85d9",
        "cursor": {
          "ref": "a6dc5ec1-5d3d-4882-9299-d9fda65e1b09",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "15ff81fd-0a64-4cff-9e1e-c0d288f9b2e5"
        },
        "item": {
          "id": "aae01ab5-b13b-483d-9d77-d33885fe85d9",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "09aeabfb-ed16-40bb-8fd3-652e44b004b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db65460b-6345-44e0-8ca0-b683c5e26bc6",
        "cursor": {
          "ref": "2778926e-034c-4c4d-9e3a-2b87c6b2b3ce",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "8ee5883a-f7ce-4f63-81b3-6bca902a1106"
        },
        "item": {
          "id": "db65460b-6345-44e0-8ca0-b683c5e26bc6",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "da26bea2-f752-4b44-899a-d7a0d0b44632",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b62e774-3a55-4cee-b2b8-ab2524b0030f",
        "cursor": {
          "ref": "b19d83b3-e4cf-45e9-bac6-8b26ac1430c8",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "0df13e89-ddac-4f1f-bc02-777072ef3d19"
        },
        "item": {
          "id": "1b62e774-3a55-4cee-b2b8-ab2524b0030f",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "5f522a69-bf6f-4c87-b57d-e061a8ce0b8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ca539bf-b0ec-4028-99f5-be11889aa635",
        "cursor": {
          "ref": "18f49521-8437-4b57-9de2-a5bc5a1d7695",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "5c281df8-c039-4996-a112-1ea65fb54c78"
        },
        "item": {
          "id": "7ca539bf-b0ec-4028-99f5-be11889aa635",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "6a0e10eb-1916-46d3-b93b-00c8df1647e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39e8e107-26fb-4232-9edc-e1fd02ff18a7",
        "cursor": {
          "ref": "90393cff-87a2-411e-afd3-c30571b1de66",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "6a3a979c-e52d-4630-8c06-e50c28ae9e78"
        },
        "item": {
          "id": "39e8e107-26fb-4232-9edc-e1fd02ff18a7",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "5db650ac-aa68-45f2-8a50-e3179f597b46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "466c0a16-b4d8-427d-b417-fa360c18ca86",
        "cursor": {
          "ref": "2e301d8e-52f9-4802-8b5f-a7a0c0f3aa89",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "31bbb9d5-f4a6-4073-adae-ecd150a1607b"
        },
        "item": {
          "id": "466c0a16-b4d8-427d-b417-fa360c18ca86",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "26b57366-2466-4a60-83da-8347d3d9b480",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d36dddb-6862-4349-b905-5c2df06324ac",
        "cursor": {
          "ref": "beb7e359-7866-4e2e-8f3c-fc060a681262",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "61d43673-2a03-426e-8bf3-26528a968c96"
        },
        "item": {
          "id": "0d36dddb-6862-4349-b905-5c2df06324ac",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "9e9b3aa4-4bbd-4eb9-8644-82e68670d1e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dccd4150-f01a-44f9-9853-ac25ee457a1b",
        "cursor": {
          "ref": "94b85c8e-6019-459a-826e-abf0e17c0416",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "4c33d605-354d-4a95-9b6d-f00d346da85c"
        },
        "item": {
          "id": "dccd4150-f01a-44f9-9853-ac25ee457a1b",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "32a29202-d032-4b32-a1d0-615048aaca84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1860272-05c9-4b35-96ba-5eb55bcd7392",
        "cursor": {
          "ref": "0e19faaf-b26d-4403-a0bc-ecd3b55a8fff",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "829e6a78-0a2b-4055-8fa3-4f93c5e4509e"
        },
        "item": {
          "id": "a1860272-05c9-4b35-96ba-5eb55bcd7392",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "a01c198d-d1ba-4ab6-be82-1c0fb1db83f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c667251e-9e86-42ff-b865-bed00b2805e3",
        "cursor": {
          "ref": "4d381059-7a3b-4e7d-a522-58ac431c43b6",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "031ede63-8126-419f-8fdf-826feec35968"
        },
        "item": {
          "id": "c667251e-9e86-42ff-b865-bed00b2805e3",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "da64c4dc-2380-4c2e-905e-7ac2d63259c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b95e9a65-1c7a-4697-bf0d-7e226a36efd9",
        "cursor": {
          "ref": "095866c2-30e2-4339-88a6-0ac746613309",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "9aaa0329-6765-45c9-9fd7-990037c0f3b0"
        },
        "item": {
          "id": "b95e9a65-1c7a-4697-bf0d-7e226a36efd9",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "3dbf601e-4210-4ad9-b119-cf1d66ea8dd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5971f960-5895-4a79-a641-de75813f35b2",
        "cursor": {
          "ref": "81409805-1471-436f-9adf-d0316ce802ab",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "af55eacc-fbef-42e3-83e1-90c3057f8594"
        },
        "item": {
          "id": "5971f960-5895-4a79-a641-de75813f35b2",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "15054ae1-29cb-4099-aeb8-fd4f08b8051c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f91916f3-344e-4475-8213-26c2756ba515",
        "cursor": {
          "ref": "0b305e4a-d305-4b58-aaf7-cc3e8b0a4c30",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "f60d995e-34c2-4c8d-adbf-8c1563e8779d"
        },
        "item": {
          "id": "f91916f3-344e-4475-8213-26c2756ba515",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "b2c69fee-8c1e-44d9-aaad-b7e74a4cd39d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "685e21d8-b7ae-4372-8f1e-da9d3a636a2d",
        "cursor": {
          "ref": "21310d0a-7072-4485-94a2-d0224bd37027",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "6afe7215-ffd2-47f4-940e-61cc623e9629"
        },
        "item": {
          "id": "685e21d8-b7ae-4372-8f1e-da9d3a636a2d",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "b8e9591d-c1d6-4d30-8f6e-bd83d8c83e96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cfd07e7-5c27-42eb-8105-e2fc9a2eae46",
        "cursor": {
          "ref": "b6fbc5c1-b2d2-4ca5-b102-610462bf66ad",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "8267fd10-e833-4bcb-bff5-d797faaf0307"
        },
        "item": {
          "id": "3cfd07e7-5c27-42eb-8105-e2fc9a2eae46",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "3b635d44-b6b5-4648-82cb-64cdc1b53381",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51449ff9-fae1-4359-8287-24f8a2973b37",
        "cursor": {
          "ref": "0a75078d-6706-4664-8218-f04394b13551",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "7895935f-c6be-41b9-8689-3f3ac0c5703f"
        },
        "item": {
          "id": "51449ff9-fae1-4359-8287-24f8a2973b37",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "3555573b-4519-438f-b8cd-f55106baaf8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1691cfa-8035-4822-a550-873346f83e77",
        "cursor": {
          "ref": "69287a13-1d63-4181-aec0-4fd245ab5c23",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "b5eb4de4-ae24-4b7e-9547-c950f8551530"
        },
        "item": {
          "id": "d1691cfa-8035-4822-a550-873346f83e77",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "1b91b452-b4ff-4e75-b1ce-e7c1b8c9cd8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bd42d6b-38b6-4264-bc7c-2b93050ac177",
        "cursor": {
          "ref": "174cd3df-2896-4b9f-9160-7ae5957e383b",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "ff483628-f114-4dff-bb65-5887cbe87b7f"
        },
        "item": {
          "id": "9bd42d6b-38b6-4264-bc7c-2b93050ac177",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "08bca9c8-f934-4f9c-a0bb-83951455c4a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35d4d10a-a406-4bc5-9538-245794a3d412",
        "cursor": {
          "ref": "dfc069f7-c326-44f6-b3d4-99285332001c",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "dad6d037-76c1-41db-a25a-c02d0ffbb204"
        },
        "item": {
          "id": "35d4d10a-a406-4bc5-9538-245794a3d412",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "c06e2c5d-c7a3-4790-9a46-005d04d7e73b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba01ccd6-1580-4a85-abb9-7900d14c8d8a",
        "cursor": {
          "ref": "bc92201f-a118-4b49-89e5-8f043436f68f",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "16679be9-ec17-4565-a286-5fa7f3da975d"
        },
        "item": {
          "id": "ba01ccd6-1580-4a85-abb9-7900d14c8d8a",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "f3630ea4-94e5-4716-bca8-66f61aba9b04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7617251b-6224-4529-9138-5dc74fed9594",
        "cursor": {
          "ref": "99c61e48-4e77-4963-87d0-643a65f78fd7",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "0d02b95d-12bc-4adc-87ba-2d50c24f1db7"
        },
        "item": {
          "id": "7617251b-6224-4529-9138-5dc74fed9594",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "81b40712-40d1-411f-84af-478e2bee379a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcc8a31d-4ac9-4ace-8b81-b1ae61f699fb",
        "cursor": {
          "ref": "f8621587-29bf-4db5-bb1e-da4c56082d47",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "d499c311-9066-4829-b4d1-e250507f0d86"
        },
        "item": {
          "id": "bcc8a31d-4ac9-4ace-8b81-b1ae61f699fb",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "03014779-d948-4587-9659-c6ae017df5ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8eec5b81-ec36-4562-ad9b-d8586f26fb2c",
        "cursor": {
          "ref": "73f29bc8-c8bc-4eee-8df2-13c15bd22fdb",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "3a8610c3-59e6-418f-b481-558838cb288f"
        },
        "item": {
          "id": "8eec5b81-ec36-4562-ad9b-d8586f26fb2c",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "da54e765-95d9-45fa-9b8f-99d639670f64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c792fa17-f8c1-4035-b48c-113e300359c8",
        "cursor": {
          "ref": "f572b84e-cb91-4545-8d1d-c97d1ed52cc9",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "3da32115-c596-4ff9-a3c2-107281943033"
        },
        "item": {
          "id": "c792fa17-f8c1-4035-b48c-113e300359c8",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "5921a4b0-8c86-4b34-a468-6f56afb361d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bbbef75-c63a-439b-b647-34478c74de9f",
        "cursor": {
          "ref": "ef5ac8ac-f481-4c77-9a9e-9bb101115aee",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "f76ce56e-0d2c-4ea5-9e72-b4e3afbcd241"
        },
        "item": {
          "id": "9bbbef75-c63a-439b-b647-34478c74de9f",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "e92a48ea-89ec-4d4a-8aff-75cedbbbda76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89634886-4c7e-4f8c-84b3-59f8d4ed56f7",
        "cursor": {
          "ref": "a79e3661-68cb-4179-b335-4d2c71a0d335",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "28a3d58c-6ce4-487e-828a-c7564f82ae81"
        },
        "item": {
          "id": "89634886-4c7e-4f8c-84b3-59f8d4ed56f7",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "2b18634c-8ea0-4a07-a68c-f60a69f5c564",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34640bcc-c6be-402d-ad28-3c39db5a9556",
        "cursor": {
          "ref": "8f2ffc1e-bb0c-475c-9253-10fd243f870f",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "20938d60-da86-409d-a5fe-d5882d641133"
        },
        "item": {
          "id": "34640bcc-c6be-402d-ad28-3c39db5a9556",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "b753b45b-bdcc-4deb-be7b-b4bbff09a749",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12c859a8-3dad-4b6b-8703-c8598e244f09",
        "cursor": {
          "ref": "79a1e779-f2db-43e8-9a30-c948c5ccf584",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "641a4ec8-4f94-4241-8b26-dce9bc710c3e"
        },
        "item": {
          "id": "12c859a8-3dad-4b6b-8703-c8598e244f09",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "53ae4873-244e-4e85-b347-762cf81e6b8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6beb0758-6445-46e7-85cd-f6f302d7d541",
        "cursor": {
          "ref": "2ab967dc-842f-4e41-a940-968ee1b712f8",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "fcd199e0-8350-417f-9263-982c0f580f3f"
        },
        "item": {
          "id": "6beb0758-6445-46e7-85cd-f6f302d7d541",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "2059ec90-a0f3-4ebd-83e4-3300a494681a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32d58e50-a295-43a0-bcd7-493b99809c47",
        "cursor": {
          "ref": "7ae814a8-a49c-49e7-95ac-12e147e4988b",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "7351dcac-bf14-4adf-a13f-e9544ce94c38"
        },
        "item": {
          "id": "32d58e50-a295-43a0-bcd7-493b99809c47",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "6b35e934-879c-42ae-9bea-ff8a8ea461fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d7940da-a923-4f3a-8bb4-df3efbf69318",
        "cursor": {
          "ref": "5167e021-2463-43b2-bfab-588f5f07a3aa",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "76e89f68-1dd6-4a16-81c0-e68114d357aa"
        },
        "item": {
          "id": "8d7940da-a923-4f3a-8bb4-df3efbf69318",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "741228c5-89fa-419a-9372-09e2bf602991",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a69c0e4-fbc2-481f-83c7-786acd0c5cef",
        "cursor": {
          "ref": "6dfc25d8-06c1-4857-8ef5-df5bf47a76b6",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "d80e8eb3-b776-4570-9b93-14b4a94d52e8"
        },
        "item": {
          "id": "5a69c0e4-fbc2-481f-83c7-786acd0c5cef",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "a06ffff0-adce-42ab-9d42-159a41ab4f39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06d80e5d-c7e7-4a9f-a453-c99b685fd984",
        "cursor": {
          "ref": "15abb694-0054-46a2-98c3-6c72ed20f60d",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "55914fea-7682-46c7-962f-091cd0de4a52"
        },
        "item": {
          "id": "06d80e5d-c7e7-4a9f-a453-c99b685fd984",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "431942b6-422a-49f4-b38d-fa9927adda14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3478ef85-cc25-445c-9c77-bffb12f933f5",
        "cursor": {
          "ref": "d4f52e04-6566-4c38-bff9-9aee34e98201",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "6a8c60f9-e2a7-41f2-9694-8a936d93d3ea"
        },
        "item": {
          "id": "3478ef85-cc25-445c-9c77-bffb12f933f5",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "e652c454-f56e-41dc-b4bb-11bfb6c2d328",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6540f43-bd35-4126-bf7f-ecba3f45d078",
        "cursor": {
          "ref": "951aace6-07fe-453b-ae06-3f83fc3093e3",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "e4f7e784-8cad-4ae6-954d-9a1f2240d382"
        },
        "item": {
          "id": "a6540f43-bd35-4126-bf7f-ecba3f45d078",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "97ad55fc-2e41-4712-b2f2-b51024b427dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3e5bc1b-6f6c-434a-878f-654b9ad4df4d",
        "cursor": {
          "ref": "9411c71d-ae20-46c6-bd3a-eb96b8f70cf1",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "bd6bf3c3-47be-4605-816b-cd5bd4797be0"
        },
        "item": {
          "id": "d3e5bc1b-6f6c-434a-878f-654b9ad4df4d",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "2fe08d9a-d855-4b22-9139-a2cffd7f8c20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fefe610-7128-42fa-bce8-2e9806b3e156",
        "cursor": {
          "ref": "589098a8-61b7-46fb-8aa9-f429df557958",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "53195be7-ab08-4114-9934-eb4296e307cf"
        },
        "item": {
          "id": "7fefe610-7128-42fa-bce8-2e9806b3e156",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "d206f693-057f-415f-b81c-16961425e81e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da1c886a-d5ac-4fda-888c-ddc4ce2f381a",
        "cursor": {
          "ref": "3bf78596-aa6f-4f65-9ff1-0355c4bfb6a0",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "4837bdec-ac16-4e21-8431-7d576ac5c8a3"
        },
        "item": {
          "id": "da1c886a-d5ac-4fda-888c-ddc4ce2f381a",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "6a666f7c-a4c2-4f08-8911-c9630bffdb32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70108822-745f-4cc4-9292-5c3deaadc94c",
        "cursor": {
          "ref": "efff72d9-ad7d-4ef4-9218-a416cb6dd45b",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "c76a18b1-4d39-44b4-9262-a27858f4fc4b"
        },
        "item": {
          "id": "70108822-745f-4cc4-9292-5c3deaadc94c",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "a9b23ece-a8c2-4694-92e8-fbdd5a60c8af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7a7504c-df76-45ee-a3d1-7af3aa5c5235",
        "cursor": {
          "ref": "1fd0dbbc-de9a-4ad3-8e24-350fc9a40292",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "4d1499c7-4c0b-4fba-9be3-80cf34b5e67b"
        },
        "item": {
          "id": "e7a7504c-df76-45ee-a3d1-7af3aa5c5235",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "e224791f-82a1-4b1c-aee1-c342b3afec0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "300cc06c-ff40-4e80-a489-2f9c099f8a44",
        "cursor": {
          "ref": "e85e25a8-35dc-45f4-a73f-7e3195d7dea1",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "a6f52b1a-5a90-4d28-a1cf-6452cb28f774"
        },
        "item": {
          "id": "300cc06c-ff40-4e80-a489-2f9c099f8a44",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "7cf3af23-e682-4daf-857c-85d23eb7a3bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92e40091-4adb-4a2a-96f7-b536b7951591",
        "cursor": {
          "ref": "08740b82-58c4-4f1c-a87d-10df18d2da96",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "475c8f83-fc45-4681-b611-1fa090b53676"
        },
        "item": {
          "id": "92e40091-4adb-4a2a-96f7-b536b7951591",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "304a7584-72d1-4295-b09c-b3f8987083b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33d09e3c-dfd2-495f-8ca0-2f54db229077",
        "cursor": {
          "ref": "e74f9f8f-6c16-4af8-85b6-ceaa2df78eb4",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "4c99230b-40d3-45f0-a75e-cfc99e6e3ab7"
        },
        "item": {
          "id": "33d09e3c-dfd2-495f-8ca0-2f54db229077",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "728848f2-fc4e-4805-9561-15d6a993da54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 198,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb33c330-0f0f-4280-9164-185387a2c0df",
        "cursor": {
          "ref": "dc8912a8-a228-429c-86fd-4a46a932b88d",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "05ffe6ba-ec87-427b-9014-b41b3e472d39"
        },
        "item": {
          "id": "bb33c330-0f0f-4280-9164-185387a2c0df",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "35327037-39fe-4dd4-bc26-1f05e4ea674b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fc1f5b7-9630-4bb5-b58f-566dcf5224cd",
        "cursor": {
          "ref": "9dca3b48-be60-4b42-b896-a30696eb0c00",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "b328f014-c918-4172-8962-dc09e971d1b5"
        },
        "item": {
          "id": "0fc1f5b7-9630-4bb5-b58f-566dcf5224cd",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "54241ff5-74c8-4cf1-a858-19c31407cdc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd822d48-92e2-43bd-b8d7-9649e89a8375",
        "cursor": {
          "ref": "7e308afd-72f1-4eb3-ab88-abc04049ce3e",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "43eaa2b4-35bf-4ed7-9a97-53b5040c0fc6"
        },
        "item": {
          "id": "cd822d48-92e2-43bd-b8d7-9649e89a8375",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "3500b501-731a-46a6-a75d-70b422b85662",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b614bef4-0b4b-43be-97c9-e3f3a9f59970",
        "cursor": {
          "ref": "6915f314-3ca6-4cb5-8b01-cb2c22117ac2",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "852bb020-8c0d-42b4-afda-8a9001190e1c"
        },
        "item": {
          "id": "b614bef4-0b4b-43be-97c9-e3f3a9f59970",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "bf0ca350-2224-49e5-92e6-3fe501c9f83a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4ebd72b-c129-4f8a-94a0-32b804ed8e37",
        "cursor": {
          "ref": "e8ad03ca-b3f0-4005-8015-7ba424094bdf",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "d1d8d3e8-36a1-401f-912b-74a6b7a37791"
        },
        "item": {
          "id": "b4ebd72b-c129-4f8a-94a0-32b804ed8e37",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "50933255-8dd1-4c17-9aa7-1f153019e88e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "affcdd5f-6009-4b97-aabd-5d77bf7261c7",
        "cursor": {
          "ref": "c56b23fd-fcbf-4c9d-8107-172a2a95dbea",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "3613ad3b-4bdc-44f2-b153-3a8e6035f94c"
        },
        "item": {
          "id": "affcdd5f-6009-4b97-aabd-5d77bf7261c7",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "8867fe2c-1bd6-436e-85c7-f289f8585b53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a568512-fb48-49b3-9567-814af6cf2f54",
        "cursor": {
          "ref": "0931317e-b088-47b0-b7f5-ca19a96720cc",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "d866a388-7f0b-437f-944f-a3f3c960df04"
        },
        "item": {
          "id": "2a568512-fb48-49b3-9567-814af6cf2f54",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "3e08e465-1d51-4c50-a9b8-5001892434bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b469e9e4-cff7-4ecd-99de-10db920212f7",
        "cursor": {
          "ref": "11a0f4aa-cd57-446f-b6ef-fa940cbadb66",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "c0b791a0-e98e-4cb9-a7cf-6155dcfb75fe"
        },
        "item": {
          "id": "b469e9e4-cff7-4ecd-99de-10db920212f7",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "9e306b46-622e-4767-94cd-95ea4cd245e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41aeb745-85e1-428d-926f-779e75a739c1",
        "cursor": {
          "ref": "b1098720-845a-45fd-8c74-0f171cf45912",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "d6ad5de6-9a30-4682-8d5f-abecd1e377fc"
        },
        "item": {
          "id": "41aeb745-85e1-428d-926f-779e75a739c1",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "66a867be-ab02-432d-b680-77bbdb0a9ed3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "263ec7bb-9d87-4c28-8d4d-f92cc988b562",
        "cursor": {
          "ref": "12cf683c-2b16-484a-a1e8-38bc81e965ab",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "72d783c2-1b00-40f2-a6d7-96321493eb9d"
        },
        "item": {
          "id": "263ec7bb-9d87-4c28-8d4d-f92cc988b562",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "99dd7e84-5404-4ad9-b62b-02c4c6bbda6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0f12537-5e85-4636-ab6d-cb45982dacb9",
        "cursor": {
          "ref": "71ebe688-5e2d-4a46-8762-b71b582aef2d",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "a2d2cae9-c1f8-46b0-b71a-7bc3da4c6c42"
        },
        "item": {
          "id": "d0f12537-5e85-4636-ab6d-cb45982dacb9",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "2b3c183c-c9b4-4c01-a237-40ed4e32b46c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82968be9-f650-4dc6-b57c-64da25e98124",
        "cursor": {
          "ref": "7c46cc3d-2131-4723-9730-9749a2bdfdc2",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "a0180e31-5620-455e-a82f-9e0022aa578c"
        },
        "item": {
          "id": "82968be9-f650-4dc6-b57c-64da25e98124",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "fcf9d2a3-d2e2-4457-ae44-fa7460266841",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "280fefd0-ca01-4548-ada7-6db6ef84780d",
        "cursor": {
          "ref": "0891657d-192d-42ad-b45d-e34d25ae52b7",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "f25ccfda-320d-4585-84ba-d3883e021129"
        },
        "item": {
          "id": "280fefd0-ca01-4548-ada7-6db6ef84780d",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "0a9d91c2-9989-4e22-8a32-62c97e5377d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b56be809-8aff-4269-8992-c427d1827751",
        "cursor": {
          "ref": "f3b52408-6cb8-47e4-8740-86ef81bc75bc",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "563238c3-2dcc-434c-950b-7923c41ad581"
        },
        "item": {
          "id": "b56be809-8aff-4269-8992-c427d1827751",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "988b5a0c-83cb-4770-a83e-07607e4e2006",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88f59d63-62a8-46f9-ba5a-90ae49f026aa",
        "cursor": {
          "ref": "5bc27cb2-d059-4795-b2c5-2fd34191a19c",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "ac8d3d2e-eda9-4ded-ae95-071ae3742aeb"
        },
        "item": {
          "id": "88f59d63-62a8-46f9-ba5a-90ae49f026aa",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "5440dd76-c0f4-4d22-8a13-59ebd164ff19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99c8cc8f-e917-495e-a35b-57fd319b81e8",
        "cursor": {
          "ref": "817ab9ec-f983-4239-8117-e556800db7da",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "171fb8e4-c797-4e6f-9048-e943eaacc5ca"
        },
        "item": {
          "id": "99c8cc8f-e917-495e-a35b-57fd319b81e8",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "4e0f74af-848d-4d53-a7f9-3afbafda22d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4c976c2-3664-486c-b2e7-55f379b0d26e",
        "cursor": {
          "ref": "a499fc87-8e9a-4212-b229-17fbaedad2ff",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "cb964c31-5234-427d-b926-8336070f2ebb"
        },
        "item": {
          "id": "b4c976c2-3664-486c-b2e7-55f379b0d26e",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "726b9195-71f5-49ca-b024-444c6411330e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aea8baaf-65d4-45a8-9024-fa6589323094",
        "cursor": {
          "ref": "14d3b532-3e7d-45a9-90e1-5f91454d0089",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "814131b5-9e58-4ab4-9b8e-acd80c1d877a"
        },
        "item": {
          "id": "aea8baaf-65d4-45a8-9024-fa6589323094",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "6f60b76f-2bac-4583-873f-8baa9355c774",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4df2dd7a-87f3-4866-babd-9d4d0012049c",
        "cursor": {
          "ref": "2d62a6cd-9807-401e-90a3-87b48d849255",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "03fc8b2d-8042-4e97-b365-906ea8a5846b"
        },
        "item": {
          "id": "4df2dd7a-87f3-4866-babd-9d4d0012049c",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "1c147c6b-46e7-4de2-89e4-e65613d157da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7a7557f-a0ff-4181-8a2f-239595c6ea5b",
        "cursor": {
          "ref": "cc68a133-ca66-4d25-9c63-eadcef71c00d",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "f65285ed-c132-4f77-b623-c41730dac4be"
        },
        "item": {
          "id": "f7a7557f-a0ff-4181-8a2f-239595c6ea5b",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "4d43aa8d-9a8f-4959-ab86-f89b009b78cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4a4510a-297f-4f30-abc9-ceb4bb5822c5",
        "cursor": {
          "ref": "e3656967-6bf8-4f64-81ed-9a2b44c302f0",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "a84f1909-b3e1-4577-a0a7-2788c312acb1"
        },
        "item": {
          "id": "c4a4510a-297f-4f30-abc9-ceb4bb5822c5",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "9eeea46a-0c24-43bb-9184-8d45c0f8f304",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efa8e3d9-0fa6-4b93-ae66-04ad62c182cd",
        "cursor": {
          "ref": "157ca938-5aed-409b-99d3-09663db2e735",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "ddb79409-a8f2-4a6a-adb6-d5fc58055fea"
        },
        "item": {
          "id": "efa8e3d9-0fa6-4b93-ae66-04ad62c182cd",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "0bb5bb63-cffa-44bf-99cc-03de29f9fc99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95a488d9-90f8-401f-9c18-f1a1b981fb4e",
        "cursor": {
          "ref": "af64a4a1-ff56-4ebf-9722-23579fa17877",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "b388eb5a-0d46-4662-8cf7-368e787f8440"
        },
        "item": {
          "id": "95a488d9-90f8-401f-9c18-f1a1b981fb4e",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "9f902aff-e132-458b-be34-febb96284215",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "835b0739-b5a5-4aae-8ca4-b62c355d5b89",
        "cursor": {
          "ref": "f4b2b88b-9946-48d2-97dd-29d5ad8b3076",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "7a5c6258-16fc-492c-8586-991b289682b8"
        },
        "item": {
          "id": "835b0739-b5a5-4aae-8ca4-b62c355d5b89",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "a0040263-8b80-4e09-85b2-820eed77ba85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "186f3c56-29fd-4e23-996a-1f59121d7995",
        "cursor": {
          "ref": "8442ebbd-52b0-4b91-b933-71af1edd79a0",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "b799a0a3-99b7-4460-88b7-89cc19f46159"
        },
        "item": {
          "id": "186f3c56-29fd-4e23-996a-1f59121d7995",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "2183cfbb-6fea-416c-83f9-821e587f222b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5baec6e0-c99c-41f6-b8ab-3bd3c6a96d4d",
        "cursor": {
          "ref": "ffc3d23c-2524-4ced-a4c4-486db282332e",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "dc7efce8-e544-45dd-8ae2-09d14038a785"
        },
        "item": {
          "id": "5baec6e0-c99c-41f6-b8ab-3bd3c6a96d4d",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "3b259127-39d9-4556-9bd8-f4e7e6a0d05f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67d72b2e-2a62-4baf-b539-2ba76570c361",
        "cursor": {
          "ref": "ed8ab0a0-c844-4b95-b639-d2d0f90489ed",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "f1d99468-5e49-4c82-98c8-b2f08e97d98e"
        },
        "item": {
          "id": "67d72b2e-2a62-4baf-b539-2ba76570c361",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "0dbbafff-d455-4bf4-973b-10cdf2b3b75a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2833b90-e50c-409e-b20e-55f49ba2cab1",
        "cursor": {
          "ref": "be845659-47d8-4bfb-ab1e-e35e88f4ee97",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "74aafad3-3c5c-41dd-8141-4c18b5133153"
        },
        "item": {
          "id": "c2833b90-e50c-409e-b20e-55f49ba2cab1",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "8848834d-761a-4a15-909c-13ddeca63e2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d2f948d-4c99-4b32-9123-6f96af33ab3d",
        "cursor": {
          "ref": "3ee9855a-d380-4e3f-b966-f1e499aa6ac1",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "23e12ba6-117b-4f6f-8da8-a5bd4132fc9a"
        },
        "item": {
          "id": "1d2f948d-4c99-4b32-9123-6f96af33ab3d",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "78887a1a-b2c7-4a0d-aadf-2deea00ba495",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47e43cea-e175-4eb2-bfea-34a24e6e5391",
        "cursor": {
          "ref": "7840d62b-d3b5-470b-8d79-408b43ac4f60",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "57eb14dc-b5d2-4890-8a8c-1c15f1b35c30"
        },
        "item": {
          "id": "47e43cea-e175-4eb2-bfea-34a24e6e5391",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "ab33089e-7dd2-4566-b7cd-46acefa1e14f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fc54d23-b028-44f3-a59d-52f4a46686f9",
        "cursor": {
          "ref": "eb37fb0f-2b1f-4274-b56e-6c0ace36b9b0",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "66950ade-c369-446f-9156-745741a03428"
        },
        "item": {
          "id": "3fc54d23-b028-44f3-a59d-52f4a46686f9",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "4270aa59-0b9f-4ab4-8526-af6263360f66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d123a8ce-6ac3-4076-910f-e1e8f721721c",
        "cursor": {
          "ref": "5cfcce04-110f-4f31-888e-b0acc40a04be",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "fe9663df-8abd-4727-ae02-f3f9058f3595"
        },
        "item": {
          "id": "d123a8ce-6ac3-4076-910f-e1e8f721721c",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "1514c8a5-4c66-4248-97ac-19303d1dc1eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db40b5f1-ed8b-4016-8615-c6c58ee34043",
        "cursor": {
          "ref": "12964efe-200e-48dc-b2b2-7ea1cb4cf859",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "77a60f65-b867-4d3f-ac22-73f485beba83"
        },
        "item": {
          "id": "db40b5f1-ed8b-4016-8615-c6c58ee34043",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "57d48ce1-4783-40c2-936e-9bb6e37955fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "157a5c5a-77f5-42d3-ab73-529c8087a652",
        "cursor": {
          "ref": "38260c21-6ffa-4fe4-835e-cfc36c0519dc",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "2dd0792b-fe9b-4004-a53e-b0bf42f2fb6d"
        },
        "item": {
          "id": "157a5c5a-77f5-42d3-ab73-529c8087a652",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "fdb968d4-fa5c-4915-aaaa-bae8d71c21c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecaf90d0-a3f5-425e-84b8-e5bf62d50a87",
        "cursor": {
          "ref": "e430bea5-e9d5-487f-a984-f1c13b93ca37",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "06b55957-f1a0-4c69-8979-3e40971a1edf"
        },
        "item": {
          "id": "ecaf90d0-a3f5-425e-84b8-e5bf62d50a87",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "ac0d78e3-8eb8-4e06-9d77-d6430b408edc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f304fd5-f522-46bf-b88f-5077ac74a3c8",
        "cursor": {
          "ref": "95175f9e-33da-4f04-a084-1f1363fdd93b",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "5c72ff5f-491e-4963-9274-1268be96799b"
        },
        "item": {
          "id": "2f304fd5-f522-46bf-b88f-5077ac74a3c8",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "427ed826-bdbc-4886-b541-519e33a947d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea226624-5007-46fb-a452-1cb456f4327a",
        "cursor": {
          "ref": "193e4a4f-1d67-4d92-9911-d9db3d1c9023",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "07c9de59-d603-48b9-8381-0a66b815e441"
        },
        "item": {
          "id": "ea226624-5007-46fb-a452-1cb456f4327a",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "901b51c4-21c4-4df2-bb89-7ed1855d0747",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6bb73d2-0a5e-47f4-99dd-acb2254e5aef",
        "cursor": {
          "ref": "58700a6d-bb8c-440a-964b-e99fa42be854",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "f4038a5d-ae96-4f21-87cf-f3bb92d1e867"
        },
        "item": {
          "id": "d6bb73d2-0a5e-47f4-99dd-acb2254e5aef",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "488cb4b3-84c6-492f-afea-262ecb7bc188",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98be5739-f132-4bf1-b2fa-26eb2f7d9f34",
        "cursor": {
          "ref": "c5724858-e7f3-4fd1-a1b4-61b95cfd3c2b",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "b65db752-b007-44b9-985a-167f6641206c"
        },
        "item": {
          "id": "98be5739-f132-4bf1-b2fa-26eb2f7d9f34",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "66f04dc5-e46f-44ad-84a7-e8ed057b19f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d59b32e0-dfe6-491c-8cf5-9fe05edf2f8a",
        "cursor": {
          "ref": "4b0c2b80-ad33-4f05-b410-13f206a9081e",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "9dada07c-e782-402a-b20d-4931fef38e9e"
        },
        "item": {
          "id": "d59b32e0-dfe6-491c-8cf5-9fe05edf2f8a",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "b3f757ea-5a40-4a74-bc92-db33c29fbc78",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9164b75e-c697-4b42-8f45-8ca72618a679",
        "cursor": {
          "ref": "98994aa6-9977-48c6-951c-1a51b55a76eb",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "595aa1a9-fee2-4a30-965b-88fee6d14a94"
        },
        "item": {
          "id": "9164b75e-c697-4b42-8f45-8ca72618a679",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "eb3563c6-4ee3-450c-b054-877da88a2572",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "432fda22-449e-480f-93a0-8aef146b5114",
        "cursor": {
          "ref": "f9c34c04-7bba-463b-b22b-1e58d57d0b1e",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "1fda6d9d-7dd3-48bd-9b02-c87f97f3adad"
        },
        "item": {
          "id": "432fda22-449e-480f-93a0-8aef146b5114",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "43ab7771-e74e-49c7-b5b0-2b2d0fe4c386",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "b50d4812-01bd-4396-9444-c8f33a8fe45d",
        "cursor": {
          "ref": "af0f2171-4101-4458-aceb-b3da49cfe56b",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "72172954-0f76-4505-8628-9ebc8f28bfba"
        },
        "item": {
          "id": "b50d4812-01bd-4396-9444-c8f33a8fe45d",
          "name": "credentials_verify"
        },
        "response": {
          "id": "4f501d77-9b1d-4fdd-a646-831caa448096",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "ec92a3a2-bffd-4583-9232-038d3382c488",
        "cursor": {
          "ref": "4cdc42fc-5e9a-4d3c-a79c-1dd05cecef55",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "fd7e0675-2b77-417d-8a48-c2b2a7d1481d"
        },
        "item": {
          "id": "ec92a3a2-bffd-4583-9232-038d3382c488",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "037e8f0a-6431-4513-a145-cccc6c2184ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "64e19b50-2588-4b4d-bd19-3697d9ea54d0",
        "cursor": {
          "ref": "2bebc4dc-20c3-4100-8a44-b6fcf211175d",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "c13864dc-4952-4eb9-93fb-841e1fcf323b"
        },
        "item": {
          "id": "64e19b50-2588-4b4d-bd19-3697d9ea54d0",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "4bb22403-5474-44fc-a967-a98173a1006b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64e19b50-2588-4b4d-bd19-3697d9ea54d0",
        "cursor": {
          "ref": "2bebc4dc-20c3-4100-8a44-b6fcf211175d",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "c13864dc-4952-4eb9-93fb-841e1fcf323b"
        },
        "item": {
          "id": "64e19b50-2588-4b4d-bd19-3697d9ea54d0",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "4bb22403-5474-44fc-a967-a98173a1006b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64e19b50-2588-4b4d-bd19-3697d9ea54d0",
        "cursor": {
          "ref": "2bebc4dc-20c3-4100-8a44-b6fcf211175d",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "c13864dc-4952-4eb9-93fb-841e1fcf323b"
        },
        "item": {
          "id": "64e19b50-2588-4b4d-bd19-3697d9ea54d0",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "4bb22403-5474-44fc-a967-a98173a1006b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32d16d77-c896-41f0-afcf-4499ad8f9143",
        "cursor": {
          "ref": "841d21dd-1ab4-4a5e-b89a-2843206addc7",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "ecae2a6a-8398-414a-b9f0-ff944b6e3629"
        },
        "item": {
          "id": "32d16d77-c896-41f0-afcf-4499ad8f9143",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "51dfeda2-1fa3-4726-9813-e467aac0feeb",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "288cd026-a08e-4ec0-88ac-15e6016f4bde",
        "cursor": {
          "ref": "76171170-bf91-4f56-a982-f6ff995dc5bb",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "ce1ef976-f944-4603-a129-82066be24304"
        },
        "item": {
          "id": "288cd026-a08e-4ec0-88ac-15e6016f4bde",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "f206d648-0ad7-4e2b-9974-8f5c42e77343",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "288cd026-a08e-4ec0-88ac-15e6016f4bde",
        "cursor": {
          "ref": "76171170-bf91-4f56-a982-f6ff995dc5bb",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "ce1ef976-f944-4603-a129-82066be24304"
        },
        "item": {
          "id": "288cd026-a08e-4ec0-88ac-15e6016f4bde",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "f206d648-0ad7-4e2b-9974-8f5c42e77343",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "fcd4b81f-88c6-498e-ab8c-e842b0229bed",
        "cursor": {
          "ref": "b9eb6496-82b3-4ed5-968e-132a10147466",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "c6f99527-f49d-49a4-b53f-e9b780a2ba3a"
        },
        "item": {
          "id": "fcd4b81f-88c6-498e-ab8c-e842b0229bed",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "372c2f59-24e5-48a6-8ce4-a6f16552fffd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "c0c9e41d-c23e-49ce-841e-ddb51722470d",
        "cursor": {
          "ref": "424b54cd-2f42-445e-967b-3e30e6769126",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "79f3bf84-fca3-4bce-9cfe-169cfad4d1e7"
        },
        "item": {
          "id": "c0c9e41d-c23e-49ce-841e-ddb51722470d",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "f5e0bd0a-45d1-45c8-8137-64d7f16835a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "c0c9e41d-c23e-49ce-841e-ddb51722470d",
        "cursor": {
          "ref": "424b54cd-2f42-445e-967b-3e30e6769126",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "79f3bf84-fca3-4bce-9cfe-169cfad4d1e7"
        },
        "item": {
          "id": "c0c9e41d-c23e-49ce-841e-ddb51722470d",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "f5e0bd0a-45d1-45c8-8137-64d7f16835a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "365d6e31-b464-47c8-9ab0-59246080a081",
        "cursor": {
          "ref": "57879523-ef0c-4144-a274-2a5af9e610f3",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "b48562ae-4fa3-4ca5-8742-9e00c3cb4224"
        },
        "item": {
          "id": "365d6e31-b464-47c8-9ab0-59246080a081",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "78f67b6a-8cae-43cf-be1b-d7bbc7a69edf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}