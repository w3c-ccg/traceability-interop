{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "79cdf5f3-5951-4820-9e51-e63b642e76c4",
        "name": "Clear Cache",
        "item": [
          {
            "id": "1913f6d5-3944-4f43-8919-0169a929e93a",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b63e4549-bf9e-4e93-b29c-573dbab89602",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "d548c1b8-9d72-49fb-9087-8136106cedce"
                }
              }
            ]
          },
          {
            "id": "b686dad6-5be5-4acb-8317-9990abac6040",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "db04c00b-3a29-4e59-9614-4fdf144fb14b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "24dcf267-4559-47ad-a45f-8da61e3893f6"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "15ca9b74-0428-4dcf-a7f5-de9bb31474ac",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "1891fe41-49e4-43a4-b914-81c86ab17f77",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2b5ebed6-e2f2-4256-a7a7-76b71cacda79",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3c6916e1-6795-420c-81be-b91c990badff",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "97ef7ee1-2258-4d5c-908f-d53bb9fddf9d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "56c7ea07-3927-4eba-8d80-3338e21c3f30",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "201c2669-3fd7-4d84-9113-31507f8ebd59"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c7058202-ec08-4b7b-99f5-e8d4a64a950a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "914538d0-5728-4cd4-b17b-9129bd029f97"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dce45450-5393-46bf-a401-d87693659772",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "6bf243f1-08e2-464e-b402-5ff0c396b35f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e0096468-c6a1-49e0-a63d-9c4228aca8fc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d92a8ba2-7647-40e2-94fd-53e58997a638"
            }
          }
        ]
      },
      {
        "id": "faa22215-1474-4c99-88c7-cd9b431b7a5e",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "8bface64-1f61-421c-bdeb-b5a1f5586938",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e35bfeb7-45c7-40b5-9c79-33c4e6cf3bd4",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8021fad7-70e3-4bac-9dcd-d9b291238d9e",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23175c06-9bec-4c62-8a5a-41f58ad07387",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "afb88da9-0981-40a6-a47d-cab547a24086"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baaed938-4a65-4e22-aaad-cd0639f090d9",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9701c0a6-1d6f-4b8e-9757-412929d275de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "144ea814-fa47-4210-a4b4-90d81e1b91bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b443312-2c21-45fa-855f-c3948ed281ba",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acb1a413-456c-4935-bfb0-ae74e5c14c20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b521a4c8-3a44-40b7-8e7e-14875006690d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e7378938-28f4-403c-8f36-4f6e8c94978a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2790a6f0-9923-4a42-8b0e-9a3afba68e39",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c644501f-1d8c-407e-9825-88f932c0fef4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cc709fa4-c863-457b-8a45-42041bb52b6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0df84ac9-b141-44d2-a5ea-9b4a83eb957a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3a50499-c76f-4cc6-a542-3b7b4d86f7ec"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "10d436f3-f0c0-457c-b881-c7f1958cbe06",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3754f376-ef78-4f85-abd5-d029d03887ff",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "619ded74-61c2-41db-a1bd-56ad7eb9d90d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "0044d688-5dd9-4b0a-a5c6-264ce4204df4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e62b8b17-d409-4082-8461-13b6bbec4b72",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "6ea0997f-5589-4968-a365-27f8f102b80e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "541f715f-0f42-40d8-927f-bdb88f021e4f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "29ca06e8-259d-4622-b662-0e1408d470cd"
            }
          }
        ]
      },
      {
        "id": "ceaf6400-1480-4adc-b8a9-7afed8a44958",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "5588651f-832c-4d91-9477-1775ed5c2f3c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a9245f14-fa20-4e4c-a169-086124a7fc61",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "ab562495-830a-480b-8457-adf95b97f082",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebfbe53d-db18-420c-b3bb-fce3d810cda2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0921306a-2abe-4e2e-9319-f8a284a8c9d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8f4f602-5cfe-49f0-90a0-0369ee99e28a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "32ad4ea0-7bbb-4737-a2f8-ab3fcaf70867"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65f5368f-81b1-48a5-ab0a-059e831ad74f",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c37fa121-39ca-4f5f-82ab-838387db3c08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63d454a0-3c53-435b-9876-c572f63dc772"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "722825d0-4d65-41bf-adad-e0ff75e0ef67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "177e8b11-44ba-4836-a80f-71c880cf1357"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce67b4aa-99c7-489a-a8e0-5b19e615b801",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e84e4e8-5fa1-417a-aff2-69f69f12e336",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43cbe31e-e6d3-4cfc-b6b1-289c79564819"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f13bd47-2ec9-4a52-a547-fd059495987e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d44525ed-b15d-49ee-b5e5-e5607f0e49cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85a860ed-fcc7-4207-87d4-6c8e42c70252",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "198f3a68-8a02-4453-9f77-31e6baf65159",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "115d4009-d3b4-4fc9-815f-6d12d2be655d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a50e6fe8-884a-4729-a5e2-85c64cce3d91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3ba923e7-b234-476d-bd22-dbd2450bcaf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5abcf547-92d4-4aef-81c3-c8b70eb7e524",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3495d58b-cec6-4066-8e0c-9c7de4228517",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77cecc37-ffd1-44ae-a230-aeb546c7eb5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea166f44-9690-4d7a-bdd3-8c3395b743d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "848ad6bb-9400-4b84-93a3-7c4ce7a70b9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51066e21-b93e-4afa-bb39-b0878a532d9d",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fa78d3c-25a2-40b9-9b80-9721eed942e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acce5352-ed25-4a79-9c2b-260dcdc53df7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13d48c57-1e69-4cef-8ae5-ba3911af8fa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a97836f3-f30e-422a-bf59-2627472fa270"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88e05d63-8fd1-4040-876c-39626fbadeec",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "167bd768-ab0a-475e-91db-5c1f042cc5a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c04efe9f-09a6-43d7-b427-445157b33351"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bb67fe1-14db-47b1-9ccd-7c1bad2f1a60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cd147873-15ca-49da-9a67-b764f51c7d19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59e22bbc-6ba1-4ea9-bbad-a72ff7935715",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d854e50f-250d-4c63-8ad1-93655b10c6ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa68c757-7c49-4671-a825-2e8ec22b17f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "704bb054-d4b5-46d0-a16e-73dc9dbb1c66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1557b832-23ea-4d1a-94ce-3e49ab8e67e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fef1677-2033-4954-8c7d-f57a1c237c88",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc48caef-e5cc-4df8-ba13-7d6389639264",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95bd1a16-b7d8-44fa-9107-466cd0ddcf98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5b5436c-99f5-45ab-81e7-3c7a6836e055",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "24372c9a-69c5-4d1f-a59f-f2c0f61df334"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c59ae8c-2dd4-453d-bff2-182bcaa5596e",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cbcf813-a4cc-4958-a886-d1b129cecc90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c08a6f5-314b-43e4-a538-7db10aaf176e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25d10b22-8fd9-4352-941a-df20601e6bd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cef9a951-0591-4ca3-b41a-2a84a4105984"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43f4b621-9ca0-49b7-a77d-0f5d92cd9253",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a20e7ae7-5d8f-4595-b1b4-ab24a238f0ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7912f0b2-74bf-471c-be43-7c7d7277e4e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5241451-8637-41ef-8b4d-b67325859ab3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fbce61c1-8e0c-4f89-962a-90d0fb197a2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "518e14ce-a5cd-4a60-894a-e0b9563ba40c",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48fbd3cb-40a6-4843-8806-1b7101d80581",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "718987ff-2ef5-4edf-94c7-8d9843d695fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab25e79e-ada0-4350-ad41-e1157f37b3ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "beb57880-4b1d-4831-b66d-b4c8ab859b63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84f43d4a-f68c-441d-bf70-7b0e41e79c9c",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec0971fa-bfeb-4af8-a5fc-2801dabed4e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a72b4980-5c63-41c5-8004-2fcfb745de1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3804087c-7f0b-4092-9726-845f77d0ed40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1683a657-deaf-4dc4-af7a-b4c40c79296c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "726c4b36-6b74-4973-9e45-2d9c6de923c3",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca094b2b-c4bb-4467-a6b3-ac7afd372561",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99d8fd12-f491-4a77-80c8-f6e0602acf7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06312657-4dbb-44de-a47d-315f8ca334a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "44ec31f6-1acf-4f14-a231-2624f18ac5aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ac3ee88-791a-4e46-9340-7bbac3cfa8ab",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8d27afd-2e96-4d3c-8383-6e467b4a0b81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdf51de1-747b-48f9-a21a-9dbbb9b73fd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5eb30e58-2d05-4fc8-978c-418d2648b924",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1be3921f-b153-48c6-9e66-fd6ebbb5db6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "361f6864-9c79-4893-b403-7e16cb107479",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59c48a01-061a-4186-afcd-446ec6ba45d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c926413-43b6-47b9-9b71-9adec1ac1397"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89e86f60-e6da-4078-a1de-3d3f1e088c56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ce75eb4a-e146-4d2a-8663-ef0eee9fdfee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6152190-5809-4cf5-b631-bc5d51b8c292",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "594acd75-13da-4a48-a581-332867fd8106",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42d2217f-fc08-47ad-9c22-86ecf1055b52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c594b08-db20-4df0-a388-38671cca6390",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "358b0fb0-a3ee-4149-89ea-95b78e163789"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e750567-4b77-495c-9d3e-ad09ca01f3a8",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "676c0917-42b4-4052-88ae-af60e2b25f27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b52b681-5283-482c-8c7d-1e2ea76de8fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3b8daad-a929-42fd-8013-e706960771c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "902848ab-4405-46e4-96c0-4254fb08a8b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f5527e1-7ae9-41e7-bee9-9f41eb90498f",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d4de86e-ecc3-4591-9e51-5b41d7a957cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12c6bea3-d556-4c5d-8277-a9921c1d19bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4c61d85-8084-4292-839f-812676da3c05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3482c27f-85e7-4497-9483-55b270ba992c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3d033d9-1b9e-4b1c-ba12-b4f58a54f739",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eccf958d-6833-4ac0-9f00-23bff5bacf32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3641876e-dfed-4a05-81b3-8d2c59824aa3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "344eb61a-6cbd-4d23-9bfc-6d5ff7feba14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "154dc096-e42a-49ea-86d7-d161daadc8d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95f0a1ef-dcee-46ef-a119-ebdcf72335ca",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7a83b1d-1cf5-430f-8a7e-ea5b499963aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09527d3c-b6f3-41b6-bc5e-36cea54e84d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cd9ccc8-0fa3-49c2-922a-ade253d6edb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "690f158a-7f3e-4659-ba21-8717b7fb8b8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8459814-4e11-401a-8094-5802ef4d53ca",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa204f6b-2fd4-450c-82bb-7e728bd04136",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfa5c9e1-5364-4bbe-a1d6-c5597ce2fdd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f6f2f25-702c-475e-b898-006c3afee1bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6159f0de-17c8-4efa-8065-b82ed0389a8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "712d5746-4605-4d71-a51b-0be6d473ae8d",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cacd9ab-2f3f-47af-8ce6-be74561726c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c4cf664-e69a-427e-b060-e6252e6a56e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fc96c5b-510b-4a65-bb71-ea3eb597d2da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b28c1a18-abbb-46fb-a73a-0c9c280e7ced"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b166f4e-10dd-46ab-95bf-6754c006509c",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb11b37b-5396-4570-9546-86f2b5aa63d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6defaec7-c4f7-437d-bb5d-3e2ce21fdfd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff37ff9d-08e3-492e-8493-b2e5e47c3a23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "243a9109-db6c-432e-8010-869c057d9eed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cb2992f-f214-4c44-876c-0d0aeca327db",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bbd52c1-c056-47ac-aa82-a89088241db6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5b2046f-adf8-4f5b-b831-3004b764bee3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd7ea1bf-f318-477a-8ada-4ba12d7fb61b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b00510f8-660f-47a5-938b-f53796e9249e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "989c1be9-1810-482c-8950-1edcd2f74b43",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34aa094b-0587-4e65-8212-a267e085c636",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2236797a-8dec-43f5-a37d-4db96120ba8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0e219e0-5375-48c5-b4a8-c4355e519187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a577046b-026c-43d9-bf36-e569187997b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0576bdb6-e15a-4ceb-be11-a95ee97e4531",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5162297-e8c5-4dc0-9cb9-ec4c55bf0100",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ebfbaa6-b3f6-4323-a15c-963e6d0edc45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0d475d9-38bf-4eba-ad75-08a3f1558281",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e2b883d-6329-453f-b65d-581def827d02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02e33a85-fea2-4095-89e0-141276b043f1",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae287c90-5f55-408e-9c3a-effba9ca8135",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d96a89aa-2cf7-4bde-b39c-ff4181f5db82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a2010fc-0111-4b79-b089-b63849c88c1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c40ad276-4716-4e59-a9a0-a2cd3744eeac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46869f28-8946-4468-8827-b5560ca3dd33",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dece38d-ffba-4389-9ab2-497997a4dfc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbb21cff-01b9-4945-82fc-acd72492658a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a9ceb93-ac5a-4dbc-b1fc-e1a618d92a49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cd952641-c287-4d34-a25c-55e9d58afca9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d52fdafb-60cd-49ce-9343-73e792036bb9",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8c23b3a-e738-4349-ba96-c397b4c5b0c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6b229c7-52e4-4c5b-a2a3-25577d62c15c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b9ecaf5-efd5-4ffd-ada9-31ec780bf376",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "a995fc7e-11d8-4da9-8922-3e9d7e84d6a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c54390b-8a8a-4fcc-b7ca-61b4f1312747",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2def13c-ffd7-4f37-83d8-14fd303ba42a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d11b32c-4c76-483f-a774-c193c551def6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "309d8e75-611a-425e-8940-fce059d81087",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "491eb685-e147-4310-8058-d03498e3a891"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad756636-49d4-4fa5-81a5-0f9b3d821a31",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb0a0d2b-9cc7-465f-b330-2180d5554f8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca9cf525-93f9-4527-9621-6f44893172ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02deca05-8d43-4a9f-b645-b36fbb49fafc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f408dbf-3f23-4d59-a8c6-5734bc7a8027"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97e591ac-ba23-43a4-b4f6-bb627c008fd0",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ffab522-b685-4e6c-b01b-2760138035d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2338db15-284f-4cff-8702-770f42dc0776"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db193d21-19a7-4514-ae3c-0b437fdf2397",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e78b8da-48f1-4f3b-8aa8-1c4e5ac1b94f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cab9f17-4e0a-416d-ab56-8c545b1a30f7",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7446b9a8-faab-43a6-a1be-3f110d491e43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c9951cb-4ffd-43f9-a406-4d9d91ccf6ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19ba9292-daeb-41b9-9186-ce8fa501ac63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a5644b7-7948-41b4-970c-ffa7ef6c7fce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1fcbe66-9fd5-40d1-9d85-40886fa2a055",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a285f4b-2db9-4e62-9bd6-0b6ded185caa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57b0df12-405d-4dbc-b7a2-81225e623b3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f975f23-d215-47ea-961e-879cd8fd8eb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "ad5713ed-2a6c-44d5-be4f-dbbe91dc56f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fbd26c9-a78a-49b1-869f-32bfb9c312c6",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "847c70c0-a839-4dde-9278-1940c6b1449f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9322a559-933f-4867-8f88-55d7e24d273e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb120fcd-7b9d-4c19-bc4f-f30b0a077cf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4296cbe9-ed75-49e9-8c98-9cc2755852eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f3b2079-949f-42b1-91ff-ea38024a2f37",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6b35ecc-3549-48a3-87c8-822c6dc5c297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66e1c88c-03d3-4b61-a766-20e33f371de3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9ef70cc-e980-41e1-ad9d-163235168182",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4fbd75cd-57d2-4fb8-9306-06a8badadc8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6830e4d9-f9f8-4382-a8f8-a0b3588c6000",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3ad515d-302a-4da1-a584-97db4b6fcdd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1e64d07-314b-431c-b03c-ac2433c9f5d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed330632-e697-4896-b00e-7161d42e5b11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "61ecd7c6-504c-4023-be78-900894461b96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07604a46-99a9-41c8-b336-fdd6a68bb19f",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9850abe7-b7cc-4777-acbf-5bd6055acf05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac4a4a39-b940-4fef-9f0d-9b68d0fb1705"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7074c40-1b43-4d19-80de-965fccbcaac9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a6baf4e1-d317-4cb7-a83c-f9a0ceefef04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7232f18-b7a2-44e7-95e0-6d553eea177c",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1646429-ad79-4abd-be41-0d8feac2a2e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a0d3429-60f1-4f6b-842f-387cf74f0144"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cebb161-ffa4-4678-9e47-ce40f97ded24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6ee1c86d-419f-4966-82d0-182965330152"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83bc0e6d-31d1-4efb-a28d-72f8fdfbc29a",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d965f093-c9c0-409b-9638-fc8426e94ec2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7670403-fc60-478b-9255-77f1ed1c70ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cdf0953-393c-43c7-801f-75f04792de21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f6d1a90e-f9b5-47f9-81c9-785acc78fa00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94eb8d62-52b5-4d28-b462-f33f0515e4fe",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "977d67fb-a06c-4efa-8880-76dc69660507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f52c483-606c-41fa-a42d-bb1d29aa3d1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d04d288f-8b63-43e8-970a-e92d70b0b057",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "55ed25bc-b1ec-4314-a1cb-acb54f15b5da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f48a522-f480-443c-a6b8-57566c1eb3c8",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d616db2-beab-4583-bceb-746f6bbd4d11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3e99c37-8a70-4c6c-bb0c-84497330f53e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b40c8b7-3c80-4bce-9cad-2d4b6c394325",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "00a9bd00-89e0-4032-b1eb-5ab8c4ef0c43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb576674-3204-48d9-92da-deed8443945a",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4faeda9d-fa34-42c0-aac1-7072ca441ea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5822f7f9-2d44-4de2-905d-1cfe468bd78e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9a6fc7d-b0a2-457b-8e27-f0f44e8b966d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5b8f63e-4cb6-4d84-b0ab-b4e5ef0ec980"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91dd149a-0bfa-48d2-b292-9155599cff3b",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdf264ad-7dd4-4425-a20f-90cbbdbd4a14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f2b0207-87f7-4b36-8127-82a6961d162e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a571abf8-afb3-47b7-b6e4-a08efeff34a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d68038e-4c7f-40da-bf5c-bdd38c6e6251"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef0a7297-b3ae-43af-bc7d-12bb49118e50",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f961f7fd-57c1-4571-b583-3a78e82191f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37c52c60-8910-4ba7-aa1c-cea067e8a726"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "891f67ca-f7ef-49d2-b55a-4659856d1ce2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b007b80-0fc9-40e2-a0bd-e7f76c00e717"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69c2355b-1222-45ce-af45-fc1083ad7575",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e006e82c-4896-4809-af93-87431b7f5998",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a6b47a6-49d9-43a2-8588-6dfa41c30e03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d828308-3b0f-4b8f-b9db-39f2b6408a64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0cd938c0-dad3-43c8-aa7a-98667a592b43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "207fa60f-2c30-4d86-b8db-5782ba1b6e33",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65af7335-24b3-4cd9-b09d-c6dacc6d27fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d7c1bfe-7eca-4b89-9dc3-e60c73a13c09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d49006b8-fd1a-429d-b296-3dc4aef435a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d8fcbf7-25c7-4571-8cb5-9f5626ab9540"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08bfab21-87c4-46dc-99c1-84d0d30af3a5",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcfcf4a2-4c45-407e-8493-90b77c2475c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "065b7c0a-8a16-4179-a8f7-5533770e31aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87c04abe-80ed-47c1-be47-40efa105c775",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a4feb7d3-d254-44c9-8c01-8524f6ff2017"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e89a4199-48ba-4db6-ab77-fe924ec5833e",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d35e93bf-fe78-4bca-b16a-534d12cb174e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b7fc0fe-7878-4296-abba-94481f5dc93d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a42e8e0-83ef-4b35-8c28-4b487eeea374",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7edcfee9-d17e-43eb-8884-890438f1585e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ddf4bb0-85dc-456b-9fd0-f09241ec6007",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "045b80b1-e749-42e2-bc8f-e9b91148c1e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1ea7b78-3931-4f92-92b2-39d88df19fb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7482544-35ba-48c0-8b1a-fc9e73a4a9b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "381a2450-95ef-4db0-908c-4d378a31296e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f82f51d5-8cb7-4d04-9c72-b6d292cb90a6",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf561202-87c5-40e6-8a5c-8b686ee76982",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c794e681-997d-41e8-b8fa-39d80a941602"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "918ad9ed-3507-48b0-9df8-724263c1a7b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "55d60613-f171-4d28-9745-d3c7cf6e076c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c322dcf-c2e7-410c-ae02-db02a924fa9d",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ca9ced9-b342-4401-b47a-a2604772dd94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "291e2d06-6949-478d-a23c-7e8f3dd00ab7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13601406-a84d-49c4-b3b1-776364a2bf0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "036c0e77-0735-4193-90c1-ab6460433bcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a460c937-6cd4-4ccf-aff7-840c9d0b2362",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e07e9976-dd76-492c-9de6-036e9ead73b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e0649d7-26f8-4e19-8a5d-c2da77672a19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "445059db-b91e-4170-b13d-b97c4f332bf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ce8cc68-b81a-40f9-974d-26d5779c5301"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bc28731-d7e2-4c56-9316-b546b2c3d773",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85cba9bd-6fae-4ba9-9302-94fdf6e78226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c09932fa-f1a1-4fbf-ac61-0ade2ca1260c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "970d209e-010e-46fd-b714-69579929e69f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "12396fe5-a498-43b6-8f0d-b1e9136a8a40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd2695a5-f628-4ede-900b-c6a1fd4c2c47",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cc9b341-d166-4fc7-9a84-939868bd9b21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c44ee092-f8c8-4269-a14e-47f885463c12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8ea4e21-0419-48de-8ea3-64042fa1c157",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "49469b4b-2afe-484d-8f53-0dde29817e65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3cb174b-7a91-48e0-a021-9562027562d1",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "901c2d2e-4737-46f4-b0c1-cdb3a951475e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "580ac40b-dc85-4589-92ef-0cc5d4ac0db4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e10e181c-a603-4efc-9ba7-59dd1869b370",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e9f155da-0bba-4b25-b771-e62d7104a190"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff419204-a5ef-4caa-a79b-41a4bb668413",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a201eb1-a8bf-4d07-8dd5-91fde11553b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab657136-cf40-497c-b5dd-cebe41dfdf4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45ae2ece-5514-42b5-8c92-197c6c47be3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e4a1fc6b-9b02-4947-8f77-b9289dd6f14d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "952c3e7e-937e-496d-b43d-95beb67f2d50",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3de2aea6-a3d2-410d-b7dc-78dec3afcc2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0387fcb3-b560-4a71-9003-20ffbc0405d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f27b4f6b-b5f2-4826-aa44-03836f3aac18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "3499a256-2fd7-4255-b06a-b996411a6a66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e7499e8-427d-48e8-9a6a-f7210766116a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6796ec6-4e15-49e7-8b8f-109745e04333",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64b0e4ba-aac7-4a98-98e7-d87a8461eb87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f37e1b7-ab36-4e22-930d-7e5ad2881961",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "810c49af-462c-4a01-a77b-f83955cf1ab4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48826823-bc9e-4f99-aad5-7b14e62f221b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3e97238-39e0-4afe-a510-b93156be61f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8aa46157-f267-445b-890f-f032971e70b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66a943d5-9619-4f84-a0f5-d8834b56fe0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "164271a2-35a1-408f-b9d0-a12442b00fa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c63bb3d7-4143-4875-85d6-93bd7a5d2ad1",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7496b15-d70d-427b-83c0-dcbea1f96d2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33e721c8-140e-49de-9e40-2acbfb2d11d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f14d0a5-6e69-4b25-bce0-8ad60015e164",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "5148553b-9b61-49e0-bb2c-9fcee18e9f6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b39a084-eb3c-4cb8-86bd-5db67383c3b5",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd75993d-f90d-4554-9b61-366422a3ef6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "844b2542-55e6-4138-b91c-51fd8ce99063"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b5e0a73-81bd-46c2-8c59-da5ff40f6bfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f21d9908-e930-4de3-b35b-c50a1b26ba0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1b46235-7158-42e2-a3b4-64ab324b154c",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac07b416-b2c1-42b6-8da1-d6f63582e6fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4103c19-bcdc-4331-b4c7-6e725fe5af28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f40b440f-4fa0-4938-bd13-e4ef8e98900a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "631eefbb-abe6-4ce8-91b5-0b3e9bd7ac30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57d42b2f-a7a8-4cd4-ae12-70656d2e0b32",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14ac8036-7a5c-447d-9a11-8a2f03679f70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0df48cd-5a7f-4b44-979a-16417c85d248"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd02cb68-687c-4846-beaa-c67ba70bba63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "da1b9c76-6318-4f8a-a9e6-6a2a8f329c09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7b6f25d-2731-4147-9109-a6fab8b2745b",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "455be06f-324e-4c23-b518-46a9f4130dc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b491a833-4876-4a3c-9ec7-54dfa21e1ac8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b3d0294-e4cb-4e53-9a1f-68baeef9b36f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "42307bf9-00a5-49a9-bbc1-2ee73d684ccc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7e1506e-35c5-4566-9bda-dd6a0d5c9341",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9681cc3b-8ca7-48eb-acd3-6f6bfb93ad43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8665c331-8e9b-4379-b2ac-8e8b20ebab6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "255a0642-a28a-4ff4-bb37-f6dd771616a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1df39008-37ec-4b62-86f4-7515e792df8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a942f00a-dca2-459d-b042-67abedb110e5",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "299e47a5-2fcf-450c-86fe-24e6d3d937c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4971e5a9-c0c7-4a1d-ab12-b90017a18a52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a93c453-350d-4414-a6c1-df6bf852bd32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "92de95a1-dcef-4dbd-8772-2eeb01defd9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f53c27e-781e-467f-ad86-a245120020c8",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd0ec0f1-0bc7-4bc7-8193-271fe5084ab2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb8f4d20-6160-45cc-82bf-c24b86b8e65b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b279551-4103-4669-aaf7-ff55bab5fa57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf61cd72-57fb-45d0-ac6e-f881bcef99b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94ea1463-50c9-46b6-bbb3-f286232c5102",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5676acd4-54a8-48a8-bdf8-e671391b0401",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d66fada-fd22-4e89-9180-d84960907237"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d6d28ac-aeef-4c15-a9d0-6c04a56290e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d51354c-e160-48d2-b8c2-17e4c0182364"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2c4b911-1166-4901-aa2a-7fd888ec25d9",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a873f21-67e7-4f21-afa0-bd41530133e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c6cba0d-e1e7-4db7-95e0-a83f405cf0ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05221479-9020-4920-b4c6-e1635a9024c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4f7d83c-f89d-4436-b416-ade1725bcff7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa9ba78f-b3ef-489c-bd39-2605a89a9f3d",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b875cc19-155b-4384-bbfc-42b177c3cf22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4666fe79-810e-4c1f-917b-1c6d650ca41f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2923c06b-1ca9-4ac8-85b4-8da5bee0ba5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b89e2112-572e-49e3-a29a-f4c0398a13ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09faa62a-2229-4cc0-884b-89b29e8f1396",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17f2112c-108e-4ca9-a211-5b31822b245f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff459c0d-fbf9-403c-b96b-7e392f74b02f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89e76d88-e272-4d85-8906-5c9ef59316ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7f0c5709-5fb8-4d4b-957d-bfaa13005e50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b699e793-297d-455e-9dfd-eb12673952e1",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "472d1d25-5e03-41b2-b0e3-cedfe9a72d46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c462ff4a-5b34-4dcf-bb67-a7e70d0f6f70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fa1bfe6-5e9d-4925-8d87-df95914909ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "35e2bf6c-a109-4d2e-a211-f762be7d189c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7518deba-90cb-4b77-b505-cd1892fe20f4",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19e25637-a4eb-45c1-a21b-7b1528647174",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcc7c8c0-be5d-4d11-99ac-0a6b62a4814d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c16c1ee6-48d0-4331-92c0-f13914c40de3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae13ab43-d8d0-43ee-9d4c-52ae79143e7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff21cb49-307d-4add-9e0c-fd81153bb634",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "657b24fd-8261-4d46-aa1e-fc3b62a7a68e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1274455a-17fa-47c3-a0da-5ddb924834f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63a3913d-42a4-4243-84fd-29d3260f644b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "215a7f68-7ac8-499b-97b8-8dae7c2ced0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4454f71-76a9-4b2b-bf98-2bd18967be61",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d12f0e1-167c-44bd-9df2-61d255007759",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f072592-c29a-4046-86f9-08345b5ecd06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19d85d8f-f6e1-4c86-9a3d-3937a1eb8ef8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9a60d13-fd15-4e25-87ae-fa29a3ada232"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a7bc54a-5d51-4fa8-9bba-37ac249f63fa",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a11f4f14-a81e-4ffa-87a5-c196a94d2a9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e24ff9d-d0b5-43c0-8311-24226e03a0dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d06b8455-41cd-4979-9a3a-0b33c684da21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b03b461-0aea-4f06-b0c0-c7d18f3ff2e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5daa395c-71da-415c-820d-a24dbf873adc",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4631d097-50b3-4d6a-84c4-0e29f13cc073",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3895095b-7830-4c84-999a-6699670763ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17b959eb-3839-435c-b9ae-d2836749dbda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "66406a8d-77e4-48f0-8e51-9b7da18c854c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1b361cf-ddc9-478e-8e1e-3e1acbc41113",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57a9b053-f814-44f6-984b-9f90c7468da5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "772b403e-5d4b-4729-a05a-d667fcf64afc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03644255-6a2c-4c77-8b4e-1ba6a8073e33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0957cdc3-1375-48e7-89dc-e76b44c25e53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c374735c-db3d-4c4c-92e3-4e37d5b90e59",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d3dbab2-2c54-4a12-b923-5b94ce5d309b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "043871f7-5ab4-49c5-8ae6-90b93f777476"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c54c7148-4f91-4d29-9564-7f16980c1694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc741707-0549-4b80-b575-72ae9071f83d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f32025dc-5cc7-4509-8410-0812ea7fa395",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a1225ad-e192-4d59-b12d-bd4f43b2d267",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4506138b-a511-4a2d-bb0b-48f040e3a30c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd0a71f8-ae70-4fd8-b0b5-49518823435d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "73c42839-26e7-4855-b71b-1fd2af3339f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3599a6e-06d1-4192-9a72-6ae7671cb36c",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c611533-185f-41d5-92e8-0639e3b7ebe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb6cd0cd-53a1-4c5d-adba-0ccef1106ed0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55e021d7-1a78-42a1-af71-7a15b20a5b40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "62a9c569-1572-4af3-8628-6e263ed9beb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b7970dd-77e9-4db5-ba19-a1d1d53d33a7",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f0cb364-a4c5-4e9f-859f-df9cfe7378e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "779fbf14-c25e-422f-9254-45feea07a64d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5a30f62-41b8-4cf9-ba5d-8e1600029bd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c16d5f78-5d76-478e-8ed0-2ba4d68d04f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5a50b98-105a-447e-b796-6449c7a2f988",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "459ccdb4-67a9-4569-9023-382509607a67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56a001fe-a8dc-47fa-84db-d558fa419145"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec135bfe-1354-4770-8f99-a2e66ab1e9c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f7f75551-5890-4ba9-8de5-cc69d068553d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91f31312-4b4d-4024-bdf5-d7f28b60157c",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1039e815-1607-446c-a666-15c2056d235b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83e9cd56-e862-4035-8db8-8a63bb686392"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46f7be43-547d-4453-ad42-b8736eb5ac53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5102846a-a50a-4c8e-a91f-817425b93d33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "481ea439-b2de-4581-97f8-72b23b96e70c",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66ea337f-3a5c-47d1-b13b-511a5d74f13a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74f31206-db4d-4c1f-bc13-f8f718b17b97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8667761-0ac4-4356-8387-82396b0cca93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "fc3540e1-811c-47ca-b053-559c91e7755f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97e31aec-2a41-4ccf-9c7f-aaf818a5a7cd",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad2d4d2e-4e59-46f8-89e1-882fd9e292a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5db79398-1efb-4937-9647-25e9519dda37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba25fe42-eb8c-4417-97cb-fe2ff99ff470",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "bbbf4526-5bc0-45f6-9fd8-bdd1206705d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6486f1a-28d7-4267-b6b3-9292ef8ccf69",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02bc70f2-1c44-4fb4-91af-b7d19cf9e58e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7fd220e-8884-40ce-aa30-d03034a75f72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c677a10-e13f-43c3-a1ca-b49e2ae184b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "5af5a481-69fa-48d9-914f-d31749c7961f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e952c262-c9f3-4167-b71d-cacde68142dc",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "debaf6a4-3d8c-48e2-8152-656bfa3e8252",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97c5c5a7-9450-4af3-bc43-96d79be07598"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9256f780-3ac2-40c3-8b42-64bb0996c694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d36fb961-cb69-4447-8bab-611841ad9bf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9a5e848-38f6-48e4-a5e4-2fc1c999807c",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "336dfeda-6bd0-437c-af4e-2ccc26caae42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef2824dc-6526-434e-9b2e-7eb667fa03e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6592bef-079f-40a3-b5b4-6071d7e3f6f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "74beabfa-6d5d-45af-a465-1238c3565efd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a01e060e-90c1-43eb-8226-a9cb4c44d56d",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71eaf9ce-4f99-4131-9ad5-eb518907ae0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "409108a3-8898-4af7-aae7-964a33fe0fc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3862ad08-1e44-45da-8a15-83778c6add89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "0c515b50-3270-4a12-8610-1752cf1a5bc5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4ec4d052-bd7b-46ad-84db-847b57dde547",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1d260c38-9f40-4619-8bbf-d4ec74134105",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f96e2e10-d342-4b41-8de8-84984379d079",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a0838c02-dab1-4625-8844-927cadcfbec8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3253dda1-d589-411a-8a9d-8960e355ad5d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6c6cba2f-e870-499d-b65b-3f63dab50f08"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2f384787-82fe-49fd-9f0a-6a8eced08ad7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1e229c8f-74d5-47b9-8e62-ecfb574502c0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e2ff37ec-25cb-4d40-9332-ac4aac9fb386",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cbdebd49-386c-4fea-8387-c82c7e23d1a2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bf207a38-1214-4244-b816-4758291a0efc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7bb1bd36-26fd-45de-80bf-8ddcb5958048"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ddbfc91e-95a8-42e0-a18c-18c68e1dfcbf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "56c2979a-4cf6-4a66-8d3e-b7c2df21bc0b"
                }
              }
            ]
          },
          {
            "id": "414d2d5f-d34e-499e-ab1a-031a7e02e27d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "39e22a74-faeb-4a14-ab3d-34cbc419f23b",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "810ddf90-48c3-4e3f-a4fd-bd609316e3af",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a66d5dfc-5d6e-4e83-93c4-3a5ec60fd429"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7e120dc2-c82f-49bb-a35c-f7c00246a285",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "366b54f6-1104-41d2-8f30-8b0bec9c27c5"
                    }
                  }
                ]
              },
              {
                "id": "9b36723a-e476-4e19-a21c-a66965a35a44",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2487be66-8c75-4afe-bb70-66e0eaaf5560",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "481719bb-d701-4d1b-b7ae-c8923311162a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f19124c0-f848-4856-b754-687c2bd443aa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c92a57e6-7000-481c-836e-48b20369d0e6"
                    }
                  }
                ]
              },
              {
                "id": "f68caa2e-9ab3-463b-8631-751f4499e45d",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "37e722fd-c8d3-4c2a-882c-19dbde597883",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "59adca60-7851-4fbc-a833-062fc968b5d8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ba244c76-b2dc-4ece-907f-27eafb2cab9f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b403d15e-4177-49a3-921d-b10ef6872693"
                    }
                  }
                ]
              },
              {
                "id": "43340401-aa28-4497-a80d-e4d8be50f374",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5a524a67-012c-43f1-b7b7-b2b46959bd48",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "27c385be-8faa-49f2-a606-25e24aa0edc6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "801fbf2a-b4ec-4ad8-a051-17ba7d6c725d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "bd26251e-7bca-4439-9165-fefbc1c656c7"
                    }
                  }
                ]
              },
              {
                "id": "2e882ceb-6231-4bbb-8a2a-c8e221c1878c",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c639994a-7c36-45aa-aa0a-6977b16b97f4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c328bf96-f2e4-4c00-a608-59ba6a3d215c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b5cf79cc-10b6-4b0b-94e7-2b3128140acb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "463b6ef9-9934-4e60-bdb6-35cd97ca4b9c"
                    }
                  }
                ]
              },
              {
                "id": "68ad212a-fb62-44cb-9ad9-5a9d7f538ec4",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1fe88a14-9a93-48d1-adf8-3489bb657b81",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c3fceb36-40a7-40bc-a25f-d9b3ec673cca"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "99b5c667-34b9-4d8f-92c0-80750829d850",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c2395a99-203e-48fd-af11-a20ffadf6326"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "dc6f6005-aae7-42c6-b2f5-d2fe5ba9de93",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1cb4fcaf-ca86-4285-b650-c71f5bb48e33"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9b95097d-cfe7-410d-90c7-97d72241720f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "679c5e7e-3805-474d-9ea2-7f6faf37909d"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a7925504-5914-444b-a109-b47e149a29a2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "677101a6-f221-4a17-aa32-af8815e6d0c7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3403107e-2d27-44f7-b06c-067ec68221a5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fd4d3e52-f558-4435-b6af-e0df4c7e53b1"
            }
          }
        ]
      },
      {
        "id": "e298864f-57cb-4de6-9114-1bd10e79bbd6",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "1d08f9f5-3265-466b-81a5-460c128cf545",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cb8f17ca-0ae1-474f-bd91-054953408c2b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7c81d14b-7ce3-432d-8f92-13e82324bde4",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "016eb9b2-3923-486b-83ff-0bef08513921",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "298b1e18-971c-4a59-8fc2-7b8f79587f41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84b19ae6-0a1b-4a94-8312-a46d3576b29d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf4b770e-839f-42a0-a334-ab195eab84d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6c9135c-2289-46ae-b246-e820271122b1",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20f5ceb9-80b7-4c99-9d91-b604d95b3e09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0133d4ba-18bf-41ca-b9d0-2bf0131367f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0b0909d-fc54-468d-8323-2889638ddf42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4493931e-2935-4761-888e-e090bad6657d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e52189f0-d46d-402c-af83-a2717d46154f",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f2f00ff-da97-4086-aafb-de43eaf700c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "117d9464-746d-42a1-9bd3-cdfa52975e44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f261bd1-b40c-4479-a579-1b9b3092a7b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4630e44c-234b-4b35-a1af-7f8b1beebd48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b146faf4-6968-44d5-9025-4408ac41a5aa",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "607554ab-2c1c-4e57-a3d3-1793ffc50be6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9cf0d7f-2a43-44cc-9d83-bbc429d443cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56078bb0-3f90-4a7b-96a2-9a09e97f41b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "216b0c99-c2c7-4658-b20d-3782731e461f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39e67274-f21a-4b8a-8a98-a3b9b213d610",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c042a8a-8667-48e6-9a13-91688b980e91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91be65c7-d7eb-4d28-a411-814509a299a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c76995c-1320-46b8-8d39-bcba098f759b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "878a5fd5-1c1e-4899-80dd-f710a203595e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32662edc-8bea-40ac-9786-0d02101a8658",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8f984a4-7fcd-49c9-9098-7fa5c4f47d35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84294380-17f5-4c18-982e-1e804016e2a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16745a1e-542b-4e35-8d4b-b66ae3b4a136",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "94743c5b-28b6-45a1-87af-9159b212c460"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b498a964-08bc-4d73-b6be-e59ff4220c1c",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d4a3aa4-bdfe-4be5-8536-01d28de82bc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f22ab7e8-9034-4f4a-a799-df83dca950d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35e82db1-1275-4131-8fe3-8d18c9387624",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a7bacfe-c4dc-4abe-81d4-e7567c5a7dce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65088d31-7442-4072-aa6c-d905a29915fc",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "717217c4-9856-4821-af07-281ed108d645",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac2f7da4-76bc-49bd-8f6a-c3d6d357c48a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "239541e0-d348-4265-9874-7f2c20b58ce8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac3238a5-320e-4ee4-ae55-d86247673c94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "773e0242-5ac7-430c-a008-ae81244c1075",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05196f29-b358-44cc-b227-dc2dd3a8623a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c0b93f0-a76d-4b4e-a6ec-9469336665b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c742ef62-dc4a-4c30-99a4-d8083784448a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4da20717-0a87-41a8-a9fc-84bb78665a77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f1aa116-8fb0-4416-921a-035dac2feb40",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96d4bfd7-c230-4612-830b-0ff5baa58c00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c629bb6-6965-49c1-a4ce-67ceb2ec7b3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcf1de9e-dd43-4988-97f7-fec567f4c377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "87d7bc7b-a97c-4ded-bf46-cadd54784452"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9183a5e0-5264-49d3-9ca2-02d2590a053c",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc95fee7-4c9d-42c8-bff0-5b7b6a735168",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d12a71c-ef26-4205-9bf9-09becebae0e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d087c8c-b114-46c9-9e15-89058c66259e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "66587495-9268-42f3-b232-4c20816749f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdab7fad-647b-40cf-9a5a-5f31687e83cb",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89f772af-850f-4587-bf4a-bd5f7e5cafde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbd0eab6-fb56-4b8e-b12d-4a55e5cadfee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c5761f1-9ecf-4848-a4d6-acae320e185b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c8f0f70d-754d-407e-8396-ba406a63b3f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f688a138-44d7-4485-9160-13098a8e5a15",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc6b3153-9585-4d83-8630-13cc185acf81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "420eea74-56a2-44d2-934e-dbd88e640ec6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10f31569-db6d-4c84-9fa0-5c54d2d0baf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3b0d11e-7c6c-4b66-99da-b9995bad79b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bf14f11-17d2-4299-9d89-d17aa7f2c21a",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13277fe3-4a2f-4fed-873d-dfdbf4841376",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9580c1a-acbb-4b08-8b6a-7f1d3a94b805"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85c4a2b9-e464-45fa-bf92-02c1200ebcea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e4d255a-d907-41c2-9d39-4d669d462ddf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bba27f61-b082-4ff3-b922-53e21675cda1",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "120cb03b-d418-462a-9f54-d6f0de5a8710",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f656fd2a-0336-4cf3-afba-9bc4482d812a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6553bffb-dc8f-46e7-8827-e4d70bc7b644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "823586bc-dcba-4ac8-85f6-ebca99496823"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8259f85f-07b9-4772-a61e-68c46b207882",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c086e93-5b47-4b3c-bfdb-23791108c010",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0174986-d689-42fc-9b99-0ef3807eb0f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04201d21-6c00-4c61-96ac-d806a6a71477",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "24fc682b-b117-4a94-845f-850989672e57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a717a5eb-6daa-41b5-83ec-5762b3ac6460",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58046c6c-1491-443f-9079-d834c6a5cdeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "103489b0-524a-4656-8685-8ca2fe5ed0bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d12f604-f5f0-4d35-8bba-02efed1e411d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "64f10daa-aead-48d5-b7f7-bcde2a2848de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b80e2f25-d057-437b-8d3d-b59ab505f450",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd9e581e-196d-48aa-9a52-fd6b323d5453",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b5b1bf3-42e3-492c-9968-1fb3ef82d31f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61e6de9a-922f-4e3c-aa6f-1cc8ab91699c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8366638f-88cf-4f27-838a-7f452e8d57f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63a7d154-173d-480c-9cfd-7c3f14d28d4b",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bede6f6-44b9-4641-b147-db74c2d7f67e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65f73b3a-3dfd-40c4-b57d-75d67cccd02e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec3c66b8-b020-4185-bc8f-a467e15411dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d56f8530-0f32-4877-9e86-3dce637387b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e4b35a7-feac-4fd7-a2ab-72242b60db4a",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb3fc559-8c65-442b-8cce-aa3dd0083687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8e2e366-2b48-4cfa-a9f2-0c3c20698533"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3ae470b-cce2-4543-a49b-688a1d3b1d1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0adc42b-1ab2-47a4-98d7-b4b2c68f42d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a72d70b4-b14f-4872-888f-2250d8a1a55e",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b7d43a9-dc03-4a61-b170-cdaa47fe5932",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53981bd4-4299-42db-807a-48d4c118dff7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77b6e9ee-30de-4aab-91fc-9bb61eeeb1fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a7ef6c8-a140-45bc-bf66-52df78448e88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c746e870-fd35-4565-821d-6d9eeded8bc1",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6667e86e-6837-4263-8121-c590eb04a757",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b69668b4-dbf4-42a0-ac48-00ad533e3436"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a374de02-dbe9-41f6-aaf0-d869e1f19b21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "32e39ca3-bca6-4b55-a7c2-7039a5da01f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a29ee5ff-7f38-404b-8d28-1e5046db5b18",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6010530-3e28-4793-b3d3-5b9ce2c44bc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d6fe585-c420-4396-bf78-e3ef55b77b52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34cf3faa-c131-47a5-a16a-de54800437f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2404996-192f-4b65-b4b2-63ec98139176"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b000abd-813f-4711-8c6c-577b5fbded5f",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cb083e0-36e2-499a-a863-1ba9fdc93f1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1301aec-02eb-48b7-965f-4cdd70d50ba9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c506a32-b9e6-4ef2-9366-c69f989c2055",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d652ee0-bd1f-4e79-8fe6-0f44db45b4b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c44cf67-3d32-41c2-8190-273185da966b",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa8ffe8f-b2c0-4b3c-919d-ad6542ba9686",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0da52f7-b91f-4ad3-94e6-094cf47296be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46f64a6e-2d9a-49cb-999b-e46f06dbb26f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9d1d016-79fc-43a8-b60d-a8c911d9a7a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7610bbb3-1fdc-44b8-aa02-57f98a5d4827",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e072bf5-07ea-4242-b381-b428a9e013e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48f75e7e-0084-4808-bd6c-d7711ca07290"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94c17714-4d28-41c1-860b-63858b04c6cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a82a8e5f-2a05-4b7b-b938-47d0d99cd782"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a5bd7ca-3ef6-4021-af71-a4232ace492d",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb12c005-c8b1-4d2b-8001-4f410e69bffa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "417449b3-d8a9-4e3a-9ddd-f750536d90c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0784d869-4dec-415b-9430-d575549b9399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2531256b-15d2-40cc-9955-5e2a71c19265"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c4603c8-b4e1-4ae9-a167-1e4b7e5d27bb",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f90e1318-4f08-4b35-ba0d-f7e3e5daf391",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f56500a-dea2-4342-88ee-b569989b7e53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c443d48c-bbaf-44ae-843b-699c2d05d31f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a5a62cc-208d-4eae-acb4-3556276b13c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be75fce2-af3f-4f43-a5f9-617fe1d3c0fc",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22c99ec2-f6da-4f52-847c-e665264fa282",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02a86bcb-9279-499e-9656-063abf5751b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3be56f88-772a-40e1-95f9-b8f319727c53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a261a43-bcb0-4819-a25c-694404e14d41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87d11b09-69ba-4cef-b71c-24623e8d84e9",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a0a422d-2a39-4181-9414-fc3bbbb2655f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c33f8bc-6fec-4926-a94c-ac593396e62d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eabe4e79-7a30-476f-852c-b850ced8e8d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "94728da2-fa5c-445d-8233-df17870ce500"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bde87599-1033-487f-9211-0530af015f43",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebd65b18-c1a9-4a82-bdfb-7b04cd3b5e4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e3e6569-16b2-4aca-b66c-3837a3ecefdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aeaced11-c032-442c-ab12-f96cb1b5aaaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9157d6d6-bde1-495c-8ac9-727e6e7d27e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9031edd3-a08f-48c5-b121-2e5a44703e16",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ba1f035-4ce8-4765-94ba-ca450a1e2afb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73577951-0371-4e7a-934c-c0188949f5c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b97b1fd-e3a4-4e6f-b76b-dc48429b1cd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "071127b3-8818-459e-9c9d-79c7bbe10267"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "04c9e826-ef6f-4e8c-ba72-ffee807280df",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bc3af83b-a124-4016-9643-5b0e04abe205",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "454baf45-3271-4606-8e33-9b033cca0691",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "d74beff8-2b04-4671-be60-0272ec2ffc76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a882ce79-4077-4d85-8307-0a1c41ee968a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d65f00dc-b78d-43ca-b4f0-3dc9d331f064"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f92d4a28-e912-4048-8cae-a678f6d64fb2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c576d0f9-7773-45dc-a594-407d8864c2ad"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3b422ab5-5e8a-4bb4-9c1c-1bd49183d963",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6841d51e-3d75-4cde-be60-cb9db1b4781b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "85d18d8b-3f4d-4066-b7fc-0f91becd89cd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "794408b6-1bbc-43c9-9be0-0c7e7d7cffcc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cdb86fb6-986e-4c67-971f-e12a7cae7734",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cdf9cc75-6716-410f-8480-304b04f31dc1"
            }
          }
        ]
      },
      {
        "id": "98d6ee5f-0064-40af-b02f-1487db2c0965",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "30fb7ec4-d61e-4b4c-87b7-864d834a5a31",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7585a63e-1798-430c-b4fc-c10799ce6106",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "88679a28-724f-48e3-8673-090fb6f29dbc",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4caa8b8-3d0b-47c5-a9bb-a3818a6ac20f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c3c7b89-160a-43d2-aa88-40bf978fd06a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e4d45cc-54bf-414f-92d7-a681b0d08a24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "6232e2c1-33f7-41d4-a3b4-039d5ffe90a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbda5d12-536a-4aca-8907-cb17127a62ce",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46109715-5e14-4db9-b059-51bf0e644ab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b65e558-8b8a-4c70-8332-36e128bf2f0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "128c6325-12e3-41e6-80d9-b58fbf545819",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a37fbd3-97fa-42c9-b91a-25eb7f712083"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14b19462-6207-4bb8-87e7-66e9300c2489",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e4c8838-5665-48ba-a405-fe0f7d16b245",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b36c104-df16-4052-a2fb-5e5ea9f9f0e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fa01611-d6df-4028-bc57-cac1bd6333c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5284e5f8-eccd-47bf-9aac-e00a05ec47c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6381c6d1-c947-4776-88cb-4370b152cbda",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d80f7d11-ae0a-44b5-a0e8-7439c8dbf919",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1637e300-c2aa-4d80-bca2-5b3d065abfd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1684c459-9b87-49a9-beb7-2b5aa312620e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "46ee66db-f386-4bdc-bd1c-d7ed99315fa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a137c75-3c8b-4583-ad6d-dbb5bdab46fe",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9834fd5e-4d2c-402d-9f2f-8c8ab54d0b63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d85509d6-4dc9-40b0-a73c-bb5d73e73dae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dde9d63d-80d8-4a87-bdef-97ceb08cd3ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d51fb8c1-ac64-4758-8b84-b3a5489e9f9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed126bf0-89a5-491a-9ee5-8bf616865fe2",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed9e3948-958f-443d-bbe6-de7d39117a05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48d5570c-8183-4ed8-970d-67b7760b24f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3595bad-2035-4efb-ae6f-ded544fe8797",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7c4ad86d-c109-45e7-adbf-ce0ebb2a9d05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3cd26f0-9161-405c-b88c-8d5a95f023a9",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b860aa02-888f-4e4c-b8f8-307642d59260",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f8b8e5a-5db9-4a63-998e-b2bba35f6d7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d2bd53f-a2f0-4905-a445-8b96ee4ae949",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a443cdf-bb62-439d-a844-3efd17a12b4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72473831-605e-4089-b541-9c10d21d349a",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57a750d2-6b22-433d-9f5c-2d2818d3a58e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "396f9896-b3d1-4a90-8bfa-c4ca3383c654"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8e0463b-7d88-4526-bc68-7bffc97495f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe720641-6f51-45d5-b304-796f57b0cdf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3154b358-ee98-4599-8dd6-3ff2fc4bbb18",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0a6adb9-e1d9-45a4-9282-5cbb322f861f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68d0c007-fab4-4544-b5fa-646147398270"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfe7df33-5491-496d-8f1d-b405a06efb99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "89735bf9-1f99-4f4a-97c1-e1b4018ca9ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8a3ffd3-962e-40d2-84c5-e2432999a16a",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c49525a2-5c43-44f2-ae6c-095eeac9ac97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcd0de32-19c7-442d-9eae-356d3c9b9b3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2bfa87f-aec6-4fbd-af67-4b73fa6bbd87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0028b244-b912-4d42-9c41-aee618399376"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73c717fd-ad63-4447-854d-a861370fea0f",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cc3e140-3c84-444d-a5cc-c27da929db3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40b6a5cf-addf-4d3a-83fa-775a2ac5ffce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5129552f-d045-43fa-9f1b-35f1dc432d1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "e9db5a69-57e2-468a-b417-2d7804e6c4fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c792561f-0ab6-439b-a81d-191de584c261",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce8d7aa4-6920-4814-85c2-81b247a75204",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3687f4fe-d9fe-4aa0-8b02-21a0e80e037e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a47bfba-026a-4bbe-9ddf-4b4e17c75fa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "62714575-ec24-42a2-871a-ddb0f1e363bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "731e2d37-7347-45d4-ab26-ae781ccf9ae9",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a99668ab-e6c5-48be-abbe-7b65702c0ba1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f8de5fb-c958-470f-9415-a24578f04b1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd18fdd3-651c-4774-a739-b76abab1ebb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f45935e-9d25-473c-8b8d-23b629f4562b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2be87d20-4915-4691-b339-b5573451bf97",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63de22c2-957a-42a4-831e-b05fd176b557",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0502dd7a-a3e1-4310-b5c4-e7b2d456dd62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b0bba56-7656-4b16-86df-eb5c21d17a19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3b37438-0636-40f0-9201-44c21fc1e930"
                        }
                      }
                    ]
                  },
                  {
                    "id": "373a77fa-0a5d-4437-8614-58c017c603db",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5bb1964-a4ff-42c3-a1ea-d6b278d96973",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e38b296-b11a-4bff-bfbf-ab985ed94df9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee51c94f-63ab-4396-bdf1-bd1c05632471",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0b0c40d-80c6-4e63-973a-fa16ee5a9f50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ffcf6c9-f01a-49b0-88d4-a08501bb37bf",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1d98b1a-dce7-417d-bb69-c6d8601d4309",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98239d4d-b3c1-4ad4-9b26-6f4aaefbf571"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24d847ee-3fc5-4fa0-a841-020efade781a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "c87143f6-86b8-4167-b4a8-dcdf7a8fc15b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "466b2af1-a42b-40f2-a89b-bb5f57b7134b",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bea6cc25-98d4-4001-859a-80ca70063d43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1ecf11d-6e37-45c8-96ea-b9f4573374b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ac7bca4-6668-4c27-9be2-2737d543c72d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7690595-f950-47db-b5a4-2b64c8ca9a95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32577828-4636-4dda-a07d-504749e605fb",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c113b565-c539-4b58-b252-902e6302e0bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19761c44-d46b-4879-9ad4-ec0afb938cd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68952d4e-20f4-45fa-be63-e32f64dc5ff4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a0f88ff-ac8e-4b33-9884-04efbfcd577b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a38aa809-ac48-4222-a325-93ef7d73766f",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8faa7db1-0895-44aa-b63e-a5a75ced350e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84d8c7fd-13d1-4e20-a7fa-8bd004eb184f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36c582ed-5ba8-464c-b608-df888f313f03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "76aa0db1-d8ce-4a22-8615-5381a2c8654e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "820e313a-a670-4964-83d2-bbbaa01e689f",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a904bf1c-3ab3-43c9-9768-18f23ef060a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f713d5a-dbcf-4f8f-b398-9d66c28aef54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3160d0d-9016-406d-b639-424485641fde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "42a9d407-6a87-4057-b581-dd469adf795a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f40f51e-47c5-4f03-bb7c-111d3fc5d54b",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d91e0a9c-f006-4b85-8948-9123125c5580",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bebd7e3-01ec-4f74-aef0-5ca16643c578"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a50ae79-7b5c-4f54-9a83-5e4e5ec63859",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6675fb7-f5d5-408f-91ef-7b93ae94afeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e503b817-1ad0-4b80-8e0a-d5cd7133da66",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8a49a0e-ad85-4ec3-a0fa-f00e62e21514",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12181a47-27f9-4ced-8100-e40ff5f0f056"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0842fd53-ba29-4827-bae0-0282789de457",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9aceabc7-ee63-4aec-9892-ed258620789c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18c22493-0e63-44ee-aab9-bb3b10a163a2",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31bd6bde-c963-48ee-a798-2d63e9042a4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0f6877a-edfb-4667-a8ce-9f14d27d4bb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "327e1313-e02b-4d29-924b-f7707f05d6ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "54778c2f-16ff-440b-a69f-de5bd755de39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1801725e-27b3-48b0-8626-3357ddc37c9f",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e1bff86-c461-495a-9f66-67fdbb539985",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ad6ce2b-6616-4c80-9a2a-5ef9eb01b5d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d276f91e-c1a7-4089-b450-bc5cdaeaa1a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "98877c4f-dd2d-4edc-a4b3-654fe3a78127"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0933a0d-6db0-492b-b1e4-80712c060bdd",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38b5c506-6340-4e16-ad47-bbc0fca81c90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59af5117-977b-44b0-a1f9-b32ac235d2f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8094c8f0-3a6c-416b-bf7f-f512b302fedb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e71271f-dce2-4fa3-81ca-f7792eb88986"
                        }
                      }
                    ]
                  },
                  {
                    "id": "127fce5f-77e4-4202-bc94-867d50064245",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eea6bdb6-9003-495b-988e-ca912ac1ab44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2dca1a7f-fd93-4297-9843-85461e8f0303"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1d6e91f-b01b-41b0-b3e2-827b534a904f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "98162f93-dc52-49b0-8504-aae8f288b89f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1b1d2c6-e020-405c-a04e-f356887c99f3",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "342bc9cf-2287-4fc9-a392-a69694a308b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cdd618f-cde3-4f4c-b680-470c1c88976b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "453d83f9-6c3f-4734-9075-0cd28cd1f627",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "de0e98c6-3cb6-413f-8991-48b680a94625"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d448ef9-19f4-41d1-8106-6f796ef2891a",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4788c6d8-778d-4374-8f7e-5b3a319b5ba5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b4cae8c-54d9-4187-82c3-7e8fae9b631d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c08b1c6d-8c43-4c7f-a614-c9c697cb634a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e79227e-176f-439a-bd31-b480e06cd255"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e717e0b-6043-43c7-a771-49d43b35ad5b",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f24efd36-954a-4d04-af93-4097f7b7bd21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59b6dfc1-d046-4011-bb99-e661cc449b2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33d5197d-5e08-4f27-98d8-630561e60e45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d9d9905-b47b-4577-aa8a-4bfb628eab52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b940433-a89f-4dab-b59f-8be6c9da7aa0",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c10dbe67-ed5c-4fc0-8fdb-f51a67ee787a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d6a5201-6bc1-4d57-aac8-7815f18e79e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "022a6930-fbe6-4b68-9e38-fc70872d58ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "97f648b2-d13f-43ae-9bda-de931607e559"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ace6e107-8530-4619-a268-9c2a6bab937d",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2baaab9-1000-46e3-a5c9-363323939eff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c4a0e26-add0-4dc6-96d2-3b8ea8bac346"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3ae5e0a-384a-415f-9264-36d8f5c1aa3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8136e0ef-5fd4-4d36-bc5f-cf80c1ddc62f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "285407ae-1fcb-4c44-8720-07487544c67b",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c15b3cec-489f-4149-91d0-7e5e49fa96d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64207f5b-66d0-4beb-848f-6d9d9ad22d11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e8bf377-e752-4226-9d49-5e0b6cec0d66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bbadbc11-f619-4f71-a9ee-419765611b38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f31cb801-dcfa-400f-94f2-8cb8c4c4f43d",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "683f71cb-9df4-472d-96d1-3fd72483af59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec339882-3adb-486e-a034-b79f8839e538"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1047b2c-05fa-41df-b9ac-a145fa8e1072",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6536aa3b-9526-4c63-8aa7-dc12b189cdd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a233dc30-2294-4e38-8c09-a94dede5fc19",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a084b22-adea-42ad-9d04-4c5bd15ca993",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57760333-b482-42b6-867d-e7b4ea4d5203"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb4702a6-5779-451e-a6cf-1a7d1c6a8d23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "011deccf-335a-4ed7-86bc-acdb4cc5202d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d258f442-2108-4570-9097-11043a023787",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51dc28c6-0fef-4e41-9b45-35b8ddadf8f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac88190f-99d8-4be9-a606-b892ee0fc42e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c62a4fce-354c-4fa2-891a-12cb1ab9cab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "45f42c86-10bc-478b-8133-b57569d758c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87a16311-fa63-499b-b2a0-a50e8ae22503",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a773ef5-32ad-449c-9ddd-2d68bd361eb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "816ba324-49eb-4a1c-be30-a2764902100c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7762cb4-2dd0-4e8f-9484-301e14289b56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5032736a-b76b-4f05-a3b5-b6401e6b574c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f0ed582-fe81-4744-8480-71ceeba2d45d",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad9d8165-b09f-44e0-8e89-724a085545df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f9868d2-8831-47ca-932b-dc3366109f28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c26ff8b-3cc3-4317-8e15-e360d08b3065",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a87f67b2-3bf1-45a0-82fb-39c5b5232602"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9e94ea7a-8395-4baf-81a8-c39799e443f8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5896641e-464d-4a8e-b386-bb1d61a73bfa",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93a634c8-a19e-4dd3-a134-a9b215732551",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "64de771b-d974-41ad-a9b6-fe46545f1eb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea987515-cda1-4267-ac6b-0e976814b053",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ee22aaee-6551-4ef1-bfef-7efd3e16dfe2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d649cd34-5b3c-40f2-abaa-02c54b2bfa69",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9a90a9b2-2dcb-4672-a805-ece370c120fc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ee732af1-b235-46b5-99c3-8309ef793225",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "184f4143-37e3-4c96-8acf-aee8dc623f37"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "024cfb69-8014-44d5-8d2c-40f7baf880fd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "11681086-38c3-46b2-b478-08e1a7d7190b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0fb4bfd9-7cc3-44bc-ba02-56438b50b07a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d868212b-2b9c-4528-8593-85c4fd10ca87"
            }
          }
        ]
      },
      {
        "id": "6a9a52ef-d89e-48eb-9998-7d9529a975b4",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "7b9d4597-755b-4031-9d30-4210cf214d95",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5b6f4d3b-ace1-42ab-a416-a2f4bb7cf974",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "21030423-f873-4245-9c2d-7f71226e7c92",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19f86334-66cf-4b38-ba7a-10bbdf3df688",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "943561ba-0905-40b7-9794-d0dc4a5ff23c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e2743fd-cb46-4cbf-b560-79432333f12a",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6acede1d-045e-4ff6-91df-839a29c60a12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6d07d9a-7ddf-460c-a193-a95c6d950385"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7a7f973-a064-49aa-934f-2caaae0e3ced",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03d2e01b-7a5a-4764-87b5-e290a62ee222",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d6a37da-838f-4234-823c-58891cb3d085"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4974184-fcaf-491b-bd45-74994c3b9ea7",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e3e60d6-df61-4050-a644-ecb23f87b0c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83941d64-bc9e-4df9-bc17-809f948e1321"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0186d45f-9f19-4917-ad2b-d40a382e24c5",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a56b6eb0-b038-49a8-954c-77aef4cddc91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f56e9d5c-3eb2-470a-9e61-3f5adaa6252e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f1c7b29-6347-4076-ade4-c800647d8ebb",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5762ac7-d8fa-443b-8ca8-30d81185a4c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e76673b8-4a37-4253-982f-b9ed738659ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba85a051-f95a-4af6-841c-826f11487400",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3a23b20-e47f-4e6c-bd4c-1235ac44f63c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c27c2431-67bf-461f-bd33-10b0df9109f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc8fd11e-6908-4b64-bb97-6447ed7e2dbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5024e17f-8461-4505-87ec-b38bba7ae375"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57d02fe4-f828-49bd-90de-c146bff35a6b",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c52dfd9-3c75-4ce9-9239-c03d4bd47b40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a255bee-da5d-47a5-9da4-a5dc78e12cd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e626dc1-ef1c-4812-aa72-e6e88d934ff0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "193ce896-b967-4318-b542-1feb6a480a60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bf44653-9dee-446b-897e-7f3b4b977459",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2c1e776-3074-46f6-90b5-7843b5bc0997",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "727b38d3-049a-43df-8f86-c602d5e5ca2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e8a6784-f967-4eff-8e51-3d054a02eee3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "312fbd4e-e018-4499-a06f-7f313ef46731"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63607b3e-2f36-4124-b42d-b58ac833165e",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0597d86e-40f5-4a58-adbd-468b2e959413",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b078021-5051-4e6e-a752-e9388cdc1cf2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb262e55-7b71-4dd6-aa72-26c859e338de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "847f3755-b509-4d3f-bad5-ac919ba0c3a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c44c2fea-ba74-45bd-9785-afa56aecc67e",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e98cea8-5b3d-449a-b2cb-f73d75eb5464",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35939ace-d935-425e-bb02-782899d1852d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8835c10-fbc5-4516-9e0e-44e51cae7cbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d235f96-d2df-4f6b-bc8e-e81e48cfe0f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a17cc1e3-175f-4b26-b713-642ebf2aa159",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dc0d2df-d1c9-4b55-9692-37a4388ccd19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f92a350-d48c-4fd9-932c-007bf8bf79fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a598c849-534a-46ab-acfd-9e6f9b117d66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0db2802a-ef05-4e9f-9aa7-3242280796fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac34d4b5-b574-40e8-8ddf-bf8bd3c700c3",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abdf057d-4758-4202-91c1-e060e19131f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9be783eb-1b38-49c1-b2c7-512b740e6aae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0724558-f0c5-4855-9d71-2016e4f555da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a3dc5fb-4cbd-44e7-8c78-ea748d3a5a60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff65d3f6-5fa9-4a07-847d-9848590a249b",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55fe158e-e45e-441c-9a3a-324285e51138",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf579df2-794d-48b0-89e6-764b178b40cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f847e385-3862-4743-83c8-4e9ace936560",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c85fb2d3-e14d-46e0-a881-131baa4630dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20d7e54f-4474-47ba-978f-99a273888c0f",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "953e54ca-880a-4263-aaa2-9eaf082c324f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5e0fcb8-2bde-4ec6-860c-bda907fc7c49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efdad4f8-2b49-4dbb-99f1-b1371ee8c943",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "594b4880-5ec3-406c-a1bd-7d89459e77f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f475d8a-fddf-48f8-bf71-e074ebe90e6c",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b86020f-71eb-4286-a1a4-3f0450a256f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "badfaecf-e120-4c23-a06a-28aaf36ee7c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0092f67f-55fa-4d3e-83f7-2929adbce864",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2a3a6c9-5c65-4874-91a1-506922f478b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83339b34-375c-4724-a390-bee428363b88",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aa3ddc8-b08f-43df-bc33-d01c64db4632",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebabebe3-6392-4790-8695-9be1e68b91d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b77a553-1c44-4a99-8c18-3d411cfcad48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ae18082-8a68-4d2b-8e7e-7c29610939e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ab69430-5212-4853-84fd-fc2fe7585457",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "967c786d-63b3-4eb5-b3bd-4e0769dfae52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a4c2e12-341b-4dab-8ab0-12fab4e15ca4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09e7bb14-21c0-4dad-a23f-13270cf7886c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "945e1243-2861-4112-9895-aa620c77331f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a15bd50d-0a7e-405a-80ca-f0d258d187c5",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69af6719-76fc-4ef0-bde7-eb70c19621bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "687a71b1-6106-46af-b539-c32f643e2656"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6d11750-de18-45fe-a82f-a31e334d929e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "830e5f2b-4bde-4ce8-8a79-4d2237a61efe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99cae530-f41f-442c-9dae-6ad54bdf6b9b",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af6b09ee-1def-44e9-a400-f2a64f9d4bee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1026aef9-3e07-40d0-94aa-32c6f4511225"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9379da81-65f9-484c-aa4f-f200d13422e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dddb191-98eb-49fb-9f04-79ee5a276ffc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82109b7e-a85e-442b-a257-5a163b2dc537",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8a20079-7c38-455c-99d2-127889b3a015",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32050b09-d4ec-47dc-9d03-037a769bbbd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54de52a4-773f-4317-add1-22ba89076cb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4acaa714-560b-4521-a2a4-b639bac0b2d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "842aa427-3a40-4cfb-8ab6-2eb831bece04",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eb514db-f9d3-437c-acbf-adca4879bb40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e010d57-b14d-45a7-9ffb-45c1af3e2b9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "434f2fc3-8fe6-4b04-bf75-cd8b57188ed7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb0c68a5-391e-4a38-ae58-60de16571cdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bd1b0fa-b399-459c-b0c7-874accd54d49",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "707b94cf-808c-452d-9c5b-21aa590bb24e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6125743c-a8de-403e-b59b-d51010bac386"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a14d9072-a175-45c2-a60f-b7d2e09c1d72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5405cb27-a52e-419a-96aa-213e2e81e996"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c7954e1-afc3-4cd8-956d-b71235ec251c",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "595321ce-9046-4c05-935c-a3703fb5750e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "010e5fcd-67ef-4f4e-b8bb-7cd07f18268f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89d0e2dc-e399-42fc-9595-4dc6feb4e345",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3ae918c-92f9-40a8-8db6-67c8c7ec35fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1f658e1-92bb-4ae5-b356-696a555a0054",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5683c325-6419-4132-8c7f-62072a65dc32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06cb7e46-477c-41e1-bd14-661fd2c3b753"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d34b3ba6-9ab2-43d4-b409-2bfcb7290a47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afa80ab6-5ee3-405d-b3e6-db5339996cf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4069f7ed-909c-4b3d-98de-8eb7b76e7a3e",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f7d3c79-0f32-4dfd-b151-8c8be18c1a31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a5fb55b-4b0b-4325-86af-e30a092ffd4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47f36dff-662a-4e96-916a-1fa27f7d0b96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be273da9-d54c-4bfd-ae4b-d58f8f0e50d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6de6da5-609d-48ae-bc4a-10329af13800",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1df9af5c-b230-480a-85c3-54da954b4754",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf50110b-7a68-48a5-900f-23428a787c2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df654dd0-1bff-466e-8768-a2a51479ff87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbd36fec-1b6d-418c-ad25-c79ab5c6cf0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55ae998c-46e2-451c-8c2d-cada9d3ca2a3",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e5d7565-2e5c-4de2-9a2c-19b7b1a988a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c91aafc-b53e-4f63-a20d-d9b8c547f685"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd6efea2-bb69-4297-913b-9b3670107435",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef8346dd-4dbe-4079-a27a-000788402f0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfd8d8b1-cc05-4ca0-9fe7-664795424d4f",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8426e23-0457-4345-9e4c-3fd7a28de25a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e21323a-727b-4f0b-a2b0-8715f57c6e55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "877ac063-5b30-45ba-aff0-6fe961c2be2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d69c1bc-6199-4dcb-bed5-881aa314f419"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5ef32f8-111a-4c1d-ba16-b85d2524a72f",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37177c2a-47cd-4d2a-9e4d-365cad252071",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38328662-b523-4224-842f-a987cc830c65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7fa17e6-5f62-4fa1-a8d7-344edf40ab16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "190ae892-10d2-445d-8f09-7912a788b05c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d385ee64-7f00-4b58-9cde-942fb850f570",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdaa1920-ac03-4b44-ba4a-f1d20138648c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4bf6ba72-2653-44ce-a88c-c9cbc1c2450f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb4f88f9-b23f-40e7-bb7d-38dad0d8d28f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "562811be-a1e4-4c17-b5e8-33b400af731d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e430802b-417e-427b-a9f7-37254b17a9e0",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9333c88-bb48-44c2-8ee0-a88f361b7926",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b295ba31-6cb7-49c6-adb9-3e9ce9c994de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04d212c2-0274-461d-a557-1936acfe5c7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32083e8c-4f26-4b39-994f-dffeb246bba2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a72ad64-9425-4fd1-b93a-ea7abd0024ca",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f897b176-fbb9-4519-9935-2cde3c5142f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc68534f-17be-41a5-9d31-93608666042f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27baebcf-126f-49d4-b512-8306cad1280d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cbada3f-7dd9-4fc5-ae9f-cb59d67d7da3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3da0d40e-6f53-4d8c-ac58-e844caf33800",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec20bfe8-2d49-407e-a89c-8f0e9ae4a139",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d1ade2a-e008-42b8-b88f-2421d8e01275"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b471cafd-67c5-4c8e-825b-52b622d2d9ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9945cf3f-d5c7-45ad-85ed-36ae44d3e7eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a07b35a-5420-457b-921c-6c7c13b0e449",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "815631ae-6259-43f4-b6c9-2a43e9118f25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1491a163-5e47-4383-8d1d-37f6c686ddaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1488427d-5677-433f-9574-2aac813c9267",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a148692-788d-4079-9750-c9a5a11e417f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fc6d3a7-7e47-4155-b99e-ee6bcb828d3d",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3217fca3-3615-4f34-9acf-17f9aa45a936",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d627f092-efad-4456-b1b6-7dfed9d63eab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4480da9-725a-4c46-9743-bfab6a3f5901",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78800a2e-a933-4ac7-92e1-6c7c2790bf33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd46aef4-922c-4b36-af87-ecf10d20919f",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "858298d9-ad4d-4bbc-bd58-2ea740bcb6c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cad8aeeb-efd5-4984-b78d-34d60cba71a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75c2545b-0024-4808-8547-9f1df50d53e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db9b20af-3b06-4e63-afd9-001bcd3cb8ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cbeaa98-262d-4c8c-ba1a-d62aaed0ddb5",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "039836ca-b5ed-43f3-8bbf-d28f840b551b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87a99f48-3a8c-481a-970b-e75e529c9ff9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea1e11e9-c3da-4977-bef4-7dfe23b6d22d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c14e30d1-f22b-4119-936c-a998b348fc35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60f96ab2-cbca-4648-8268-a0ba2b7cfc39",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "541bf700-8637-4bf9-a21c-f53b1ffc9118",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd90967d-a1f5-415d-bfb4-d8beadcf43af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce504a46-832f-4eeb-8405-1db650cba4ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f1d7b3c-a4f5-4e5e-8d9e-511bd29f0469"
                        }
                      }
                    ]
                  },
                  {
                    "id": "045cc019-e8a0-4ad2-89b0-553ca40bfad2",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d4332e9-5da8-4b54-b6a2-04dcc5bc3606",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0ee91ab-d780-4841-888e-ac3a2edc4754"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60286a18-c80b-4b66-954e-dfb05c3fd0fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f90d6f44-674e-4a34-8c96-ba21da8c73d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9364d8b3-aca3-47ca-81b4-c66edcd9b859",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4bf5b73-4c13-45ca-8cc4-b48fa4120579",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5268564-0ac8-422c-bdbd-e23a7e9af882"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3ace591-18bf-429d-a406-a1f845dec40b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4258f49b-ff6a-4435-b6aa-2804a7ec9457"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a9ff199-c965-43a1-8518-174a153fe5ff",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cde49ac-3ace-4e7b-a1b8-b677c1c8bc0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3c8f6e0-71f2-44c1-9841-8b7d1d4704cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d4276c6-6e04-439b-9a0b-ec8bbb8343eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fba44e5-5132-43fa-a8a2-02ba9fa139f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1245f9a-a0d2-4a9d-9ada-9c8dec0d68ec",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62a4619c-6716-42df-a52b-af79b7e655ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfb631dd-7d1d-4a22-aa46-d9406e9d167e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21b80fc8-06ff-400b-850c-f5922aa8d56f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5945ea22-9218-4c3b-8fc9-311ac0d43a40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f93aeec6-b5fa-40a8-bb42-dd41a3853a67",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfdcbf9c-5436-40fd-8cdc-7b8e51a6d4e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3fec3c9-1871-436b-9900-551f283a7207"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "348fe120-0b9b-415a-b618-2f5d7b621f8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77a2c9c3-28c5-4981-af0a-8b836a591d8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fb49d7a-cb07-4b6e-86da-cbd583ee85ff",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03db56b2-4287-4e0c-b829-b6bc37ca3900",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54a1d71c-1336-4032-a8f2-bb4c9120ead9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82bc9ce7-a410-4e7b-af24-3fb341970e33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "057e7904-df25-4cb5-846a-a75ff3b06288"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a1d533c-74b2-4d90-a6a9-3cc310db3684",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ca740a5-0df5-4a0b-9dbf-539fbbe4d90b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9792a151-4f02-4f20-9e69-5b8a63b5a04d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "647e48ff-acb3-475e-a110-4b78f86b7517",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bd16ea8-fbc9-4694-ad6b-5fbc3558537d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33c9eeb2-0ad1-45a7-886a-4fdde5b2e878",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aea3d31d-4dad-4e8a-bd97-96abb0aad5c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4395ed04-2d02-4846-9b11-f1ddfe46fcea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c469ea47-5609-4131-b9f3-f5fe2705bd64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b68fc2d-4e01-4bd3-ab00-41587cea1f77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e16d012-24a3-4496-8dad-8bbc587ac46a",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28c7745a-f3bc-4adf-afaf-62d7c63b9fa5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f910db83-48de-402e-bfa6-bf6aabc7fb9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b40393e2-46ad-4e5b-be2b-d67c37401a06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71b09715-ce21-473b-9308-060b1c471af2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "571be146-57c5-49c6-ab69-c898d6f413b9",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ec04e95-9d1b-4adf-b127-e4ce1ef578ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a081585-12ad-468a-8d55-509a34c98e06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2520148-07ab-4cd1-9965-59e0227ef6bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89ee1436-8d08-4cec-ac41-0604ee6c669b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edb8dfbf-5442-4472-b3ad-d270f5cce516",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82329d80-d815-4da1-97c4-06d89efe89e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b64affae-dfc5-4b0d-b86c-da1aebbe1fdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa5033fc-9d87-4813-9da0-a520d94c025c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b7be2b7-1154-4a92-b7aa-a86517fc3c68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a993e79c-a9e3-447c-8138-0f377171df95",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61f1d6a0-81c8-4778-bfc4-824643a96d2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e62075b6-e415-4edb-9e18-84778c06f005"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1390d8e6-cd1b-467e-8013-d6bc21829ff5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1ae777d-2923-4a69-a5bf-7ef81722dedd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a057b047-5587-4770-89d9-0ba2dab9d345",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f354b658-1748-473f-92ca-6af44e0a82be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5a674e1-22c3-4cf3-b951-d7bdd4856b9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16dac704-3fbc-45d7-a388-30b784fa3127",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95a525bd-edcd-4e7d-8d29-62dff7253ea4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22c2aa5f-13de-4038-bf3e-07e956166289",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "288497da-b388-44bf-92df-311323d7cfae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adf1b6fa-9459-4858-844c-26576770b1d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a100304d-f9c3-4eea-a0f7-c4af7b682286",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07e06140-b33a-4b98-9169-2b91762d5133"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a72adf3-c1f3-4907-9de4-638b0e5f171d",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6929f2a2-5470-47a0-9b7a-335681a463d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "656b1748-6d76-4c49-a0c7-2096eb8fe004"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5b96338-d218-44d3-a0ee-18fd7817f3dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8451cda7-9f9a-43da-9827-861e81251da5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fe4e2c9-45ba-4ad0-923f-49123cdda7e6",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "750de13f-7a8a-40d5-b5b8-46ac1c97fcd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38b1186a-aaba-4766-ad75-3809aca311bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a792886-62b1-4c32-a796-52958387152a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99197c25-cb80-4495-8525-07ed810df922"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d63a4417-8a44-4b82-aec8-87d7a2e8ecdf",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cbc6de5-42df-4280-9864-7dbc1598fedd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8de83133-888b-46c9-b264-149d0b6c537e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb121c61-c197-4fdc-ba90-a125b68f573a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c0d8115-0aee-4fa8-9c3e-d02d784f5fcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff866d0f-ed46-4564-90c2-0c098c328273",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45a3096a-4128-4c83-8d11-6f171e6e69ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73ea9739-ab74-4f4c-b3e1-e6b25830f0f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9562180a-fcdc-435d-a943-35f6c173c58e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07342c6f-c357-4ceb-ba96-dd2002bb535e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18904c6f-2ec7-47ad-8cd4-3a2757ee2565",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64f60428-3aac-4bec-b52d-f79f938751d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c89fb628-362a-45fa-b903-590fd5135b6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29d70898-4425-4fd5-b838-4e9674be95a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "338e375f-153d-4d52-8c5a-5be08908de2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fce7fd5-7879-42db-8c3f-c79e3a8ae4cf",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "027cac30-7db5-412e-9c59-a415eb2ed6c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d635712-2dbb-4d16-b4b8-2d2d6fa48749"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62923404-1bf9-45ef-9845-c39f3709b4e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4087a13f-0f8b-4de0-8982-6bcc4b8cf60d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "505f2955-c185-4b05-b5da-09aa98acaca4",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d5cf8fb-c1e1-42fc-a5bf-824f96f7ca9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24833dc3-4927-45a1-b393-88b230ddaebb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6c341f3-f69b-4981-a3f3-7060f3dfa4be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df0a6d5d-1b19-4e3a-bbe4-9cad28c7e9cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1675cd3-9b15-4780-b66a-d416066991a8",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c58b863d-7839-4e20-9d93-3853eee4c36d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "772a8acf-c08a-4343-886d-85936aa9dc0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "821c4371-e98a-470c-b4b2-83896cfc5048",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15999774-443e-478e-a83f-4f6a57c9b786"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2417b31-5b31-41c5-952a-1bb4295719ee",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18ea7b2c-22e5-4c51-a1be-a16c825c7433",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92448be2-597d-484e-94ba-b630a496654f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e4d9d63-1448-4785-92d9-f885c6648afc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e37e67b-56e0-4ab8-8897-3bfe4fada956"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89352e0b-cc12-4074-a064-b2a1bf699500",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df637b65-397f-4303-a339-d0b47d265766",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be290238-1d38-41ad-845b-ab88ca5a5435"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fccb40f5-c75a-48fb-b41b-862b4187e55e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a3d5c5c-cc87-45fe-97fa-e061611ca157"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc87ba5c-c5a4-4497-8e3f-d326f4383818",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01d4f435-7707-4cfe-8850-29cc5aa54696",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7e4491f-3ecb-4d04-8650-eb67768182d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82d1e9aa-f5d3-4fae-81e3-50fb255bb648",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74e4ad9a-a562-47c7-ac38-be67129f3485"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4731de28-8e79-4618-86b4-94cb0103113e",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "554f8e00-8e0f-4398-bea8-984f5b210256",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2602ac64-2a9a-4033-b583-b5a1d1fce989"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7d70c52-ffb8-4cb2-a004-f8c8656d9e17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91115964-297b-48fc-ab80-c487225e7662"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e632f34e-ec0b-4b20-a85e-0bdbb2883314",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d61925a-aeac-4a96-b313-0a371d56314b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3c1e1c4-2d83-42a0-83a8-373ef50b7544"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d453160e-d307-4c02-9eb7-42cc47b8e693",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "658be317-93db-40b5-84f7-d9977bce8aa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66c2b80c-48c7-475c-8963-fd9776717078",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b821830a-d073-4675-9ee1-e73b535f066b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88d350d1-6307-4e21-a0e8-4b6b16ad39f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c89bd4bb-a472-4a6c-b3a6-41a39bee0b06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "842cd2b1-f537-47f6-865e-61e1bb5dbf07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5cad649-081c-4a2d-a5cf-a1cc8c334328",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b01c7222-e68d-4aac-9dea-f3460d4bd857",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c185e014-7ebd-444c-a734-e7c8ba5910ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e09c9ef8-0a47-4dcd-86e3-3f25c221a5cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aaa600c6-b9e7-41c2-9bd7-ebe940f5f44e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "346fc14e-f327-414e-8403-f7fe4ad6e50d",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7fc11d9-ac44-46eb-b308-ac5d118e5826",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de4b8103-c656-4a04-8331-b9d2012dbdca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cb2c413-2e78-4bdf-88ab-d3b3667d16ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7292056-4284-499b-96d1-f5b89ba5499f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5d7932d-8829-4f4b-a60d-4bdc1635bb3e",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e709f3de-fdeb-4c92-b950-d3065d27ea1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3703ca5-a981-455a-9131-c104c5a157c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bd9366d-dafc-42c3-bc6b-b1382390075b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0f3e932-9c9a-44b2-8549-f963579c1713"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe1b7ead-54f5-4153-a0ab-f58d4822be85",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7f24d3b-aa9a-4c9c-8cc9-958cac8a03f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed4814a2-15dd-49fe-90dc-3564d9c55604"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de8d4ef9-774a-4eca-bd04-7506a1987ab8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1115886d-d96e-4627-a256-20ef306be204"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0adb6e71-e39d-498f-ac02-fbd7db955cd3",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "974bd015-1bcb-4ab8-8d3a-7cdb50e1c51e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "226d9e5a-c740-486c-ba50-36011c7d3d79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d9bfe0a-5452-4579-9aac-d595174561ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f1d4911-c3f6-4526-9e86-afc24858d825"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86edf9dc-8464-434c-9a01-1a34e67d29c1",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11683678-25c7-49fe-b505-f72a14fdbe3b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ccf68a97-34bd-440b-8e25-9329e5d40162"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3be4b24c-17cb-4303-b7e3-b0d5ec429581",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25c51db7-a5e5-4b9c-b722-4dc41c0447de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "187d477c-d769-45dd-9d58-b5079de97a00",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aa1b35b-df16-438d-a780-af65cf5a26db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90d77623-ab46-41cb-9da6-f8825535a1d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b5ce88a-729a-48d1-a81a-5219752475db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53f95227-977c-4791-927a-31db7a10b92a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84866614-3adc-4f97-8fa4-0f22b5ce2567",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c492bcc-eefb-4d8c-b374-45c9c667d2f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee5606d3-642d-46ac-ae33-8f9eccca6ca9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0797ff98-de1a-4345-b12d-547ac9632649",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7092dd6-7ce5-4578-b787-daecf3639241"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39bab41c-0412-48a2-abc0-6bd83747fb5f",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63acd64a-fbe4-48aa-a440-6fba48e273c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ac18eb5-5abd-410c-9ef8-fd6ac0f45c46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c56cdc78-d761-49b6-8551-4d57a173b2bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72b90a19-f77c-4319-9455-03f46d9d89d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40bf6dcd-a6e5-4e76-aa39-645906fcbfcd",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed7f8c18-0008-4334-b85c-828b3c826ef5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9215d112-421c-4a03-98f3-f9ba6ac2b327"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78f80b64-e0e9-4742-815b-bf35c7361ca4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1acce4b8-66f9-4c7f-a49f-1fd7a7c8b9e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c45063a-4380-4d49-a126-1c5048ceaf1f",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc68fe7f-645b-4260-b16e-9f4c93f69e67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bed8f6b7-55eb-41ab-8966-fa827b584ffb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b89b273e-7ac7-43ed-900c-24e820bd1b35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bea2a70c-93af-42d6-919c-36d4c5880404"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85acda1a-6a61-4511-9da2-f122026a061d",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caf5e4c1-984f-4cf1-b3e9-1d31bb27a0f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "340cb4cf-b372-4566-a68d-260933a6320a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31dd6604-ce6f-4c80-a8bb-20977af958d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07e2711b-f71c-469c-b14c-ad8b863cf9ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61fa03f1-5153-4154-83cb-a1308f2706f8",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bcbc7a8-e134-4fb7-a09b-a6e361b63c38",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c12cf1ad-5663-4ec3-8b98-c7afb367110b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6808df4-05b3-49dd-8d39-daa99b9dec2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccead7bd-b53b-4796-9e7f-9ea6102745b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c892a271-6e66-473e-83c2-a25bb4efce79",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd0369c3-fa70-4378-a4c5-28d414413f74",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5c5b736-c176-429f-a14b-5a83171b744e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c8e67af-153c-48af-8707-9f2f262b0adb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b381d0d-c3ca-4617-a86e-b88b7b863754"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44d18adb-2e32-4865-a8e1-215afcc96530",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea6f4505-273c-44bc-a89e-9493aeac83c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fad2a3ae-b544-4154-85bf-8d816e103234"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcaa6c68-66b9-41bf-882b-e63676fd8a17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff571939-5b19-4cdd-8415-886346b01f8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "583e923d-19ac-4575-a2a3-8ed0c480bfc0",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7837446b-b485-4be7-9a7c-2d788b060920",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76d49767-fc5e-479c-ab90-33e2226238f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a5b08bb-3996-4209-a4a8-2274404d8351",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4006e8b-5f01-42bb-91c7-92eefc4bc9d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "765387b2-3f2d-414f-95d6-df05ba89ab02",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be3ca11f-412f-4a49-84bd-14069ef61938",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "966a4eee-4f20-402e-a9cf-0c93f2b2dbba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b130f832-1e30-4eb6-9229-a3ed367342b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62cd272b-d32a-4751-8ffe-bba7dd8928e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "828dd8f9-864e-47d1-9b19-2a0900303513",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9f92dc7-f4e1-4ebc-8929-9d85893f0c2f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "563e33ac-843c-44b5-96a4-9b9970bdda3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce098066-1dcf-4af7-a1d5-3a9648da902d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac0c6565-f5f2-4e23-a7be-ff80d7fd2872"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e47ef8b9-7556-4a97-830b-e6070bb6e7e2",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f94902c5-d051-4524-952f-2e79a57493a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22bc6336-4b9b-4259-9889-1a07f883c730"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "356cad62-2a74-4de2-a119-fbf2fff2369d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d149a68f-0a7c-4a09-a532-30b23c3c2ee0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df1fc08e-01df-4c9d-a55e-6374d8df9186",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b525d0f7-a6da-4688-899b-73ca44488462",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15a6a307-f5ae-4e5f-a60a-6c33a3e15965"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b52483d-11b7-476a-9fc0-5547697f4f87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0110bcb-259f-4d15-98fa-e2762ca1643b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0784838-0478-44bc-978e-7683ee9c1764",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ff23c1e-7dc1-41f8-a6ea-c1ae86603ad7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "663504b8-ff81-4c6e-b441-a0edeaaf7f6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f377cf9-6e5c-4339-9db0-3a77e6a6046e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "738a4d28-8919-4c1a-96cc-5ac9fe9eb791"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bfe4915-75b1-47a0-8287-ffd91dabdc17",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a77dbc8-375d-4242-9e2b-7dec5565214b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1bf7454e-fbf4-4657-8d51-3de4c5ea83b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f60e68a2-981e-4f2c-8e78-4907dc85213c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ba9a6db-9782-409c-96df-8bafb79fdc25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dd32c83-3e6e-4af1-92fe-6211db6b9287",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfe22a51-9b40-46f7-818a-e3191718b2ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a5c4163-2878-40a1-89a7-58d9f0470d75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4a830e0-d4ee-4d13-8d3f-79911650ff36",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "618d1cc5-9432-4d2d-8805-b676327415d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2426521f-dce7-416f-8aee-251093691fd9",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e210a994-d152-411d-955e-66bf2d98eeb9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5fdcebd5-9307-4b08-b641-bb1168b1015f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92283f40-7fc6-4846-8d18-0889480adf00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ce45911-408c-493c-bbb2-d1fbdd29897a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51ff3386-a48a-4bba-9f29-a000b8a2c638",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc0676f3-0ef7-405d-a006-75460704ee92",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3eeb030-c2ed-4f04-913d-b363947781f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96e43e4e-22e5-4e9f-83d5-4df855886c47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ca6ff74-a23d-4f4d-8141-bb9e406e5999"
                        }
                      }
                    ]
                  },
                  {
                    "id": "138b7f12-fb85-48bb-a5ba-02376d8c29f9",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fba3a670-4937-4c0e-9fda-5a4b5a1e74d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b9ac1d4-e1d0-43fe-8931-e5a0d4d0d438"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cc03dac-bb3f-4a87-b38f-f9576a57241f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3b58db0-b90b-4787-9f32-7e78612b5c30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a34801d0-5adb-4ac8-ae6e-e9d15d7977bf",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51fda1aa-d33e-489c-bcc3-a020cb33d06f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff494e2d-a556-4dcf-8d62-58f068d316eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "781c3f83-6a72-4fb8-8ecd-dc5968f6b48f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e46466cb-10ef-46b9-9b6b-63486f010ce3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd6a2b2c-5985-47b3-8c05-b4c3e854146a",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1476c9c9-613c-4738-8a02-c589a5ead747",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6bd414a-8ed6-448a-b6e4-b7648f13c699"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ed52258-fd7c-4337-92ce-dd5e0aa1b80d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c5f1779-d495-415e-af08-c3e299955e9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce3f6057-ef5a-4e3d-ac13-0520a81b8b07",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76baf317-ca37-4abc-97c2-82be5e6e0ff7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38f8f8c6-b4d6-4b08-9f73-a556706147f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29a202ef-96fe-4016-929c-e332df9bfc47",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ad3dc97-e719-4829-9402-fba1ed6f7971"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f18ff59-8819-4ec9-97dc-c99950f8c36a",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1383fb25-1697-4ac5-a8c5-e3c89fccf85b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5435d00-c26c-4b77-851d-7f36c1a2127d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4d42935-49e7-4592-8066-0066d2324dd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc5a8fd2-2ca0-43a4-aff5-66b115eced2f"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1122a33d-87e0-423b-ae5e-afe905b3ff21",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "263d8fba-c505-46d9-b40b-3cac48f49f45"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f9b0ca4a-c839-494a-a19b-152ea171e39c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a87581e3-e415-4ac3-b6c9-df306c1e93f1"
                    }
                  }
                ]
              },
              {
                "id": "dedbc723-5ae3-4aa4-bb21-8b08abaed815",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5a81a6f0-ae17-441a-9b77-d88865d7a6a1",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1bdf0e6-89ba-40ab-b149-9695e9cba831",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "78b58ce4-0d65-4e51-ac54-caf0643cea27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a330217-4372-4480-8697-2f59169aa286",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ef5ee5a1-a73a-4e68-bae8-f5a404b5ba88"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fe42d1f5-c70a-4632-8db4-85718eaa577e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b0539489-066b-466d-ac84-84f4f00623f8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1b9c8b9a-7476-4418-957f-0e374e70a96d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ad31525a-3e1c-4d51-85a5-d73dab4edad3"
                    }
                  }
                ]
              },
              {
                "id": "d93a951d-7dfb-48e4-b89e-89ce4801a203",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "65cce737-35ae-459d-9dc2-0766c6ce78f2",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4691e500-7773-4c70-bc99-9c7d3464b40e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "dc26c1fb-d445-40a5-ade2-729df023df5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8209f94b-53a4-4ce5-a276-4b41e44646c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1bdfa7e-45ea-4ae5-bcf2-a7a08b8a766f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ae9b6bb9-a2ba-4c16-bde8-7aba0f87b80b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e29798e5-a84b-4b98-ac34-087cbcb9a2c9",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ba21da43-3985-4cfc-9bd6-12a48809b960",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "95aa9934-ddc2-4a24-82e5-22d226466099"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "61764a32-6e80-496e-a49e-6068058c00b8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0611b448-ad87-4a9a-94de-614d83f16f0b"
                    }
                  }
                ]
              },
              {
                "id": "fc5d398e-7bd8-4883-8461-1f40895a70cb",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b23a8aff-ac79-49fe-bd27-0a75f1cc553b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "e2e311c0-6151-442c-8b37-26edf04b22db"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "12481ea0-229d-41ec-863e-021c90581a96",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "50edeeac-a473-4b61-bcef-4747ee8f34de"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0c3c04cb-4873-4336-be2c-9b4b7a75d3d4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "f87701ee-7c04-4a2e-b469-e0705e308dec"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7d82f050-3691-4785-a2a0-a2975b5d0104",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "32d9b917-5ac4-4927-8146-bb4a24a243de"
            }
          }
        ]
      },
      {
        "id": "60fb22a0-c2f2-4326-b62f-93f81737c713",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "0c93aac4-c049-49ea-8dfd-d14b950e7f31",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e4a495eb-5eeb-42ff-8f89-08329dd41866",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a91e27ae-f5b4-47cc-858d-b4eba8c80b61",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0870ddcb-6073-4da1-aff3-78c37fd987a8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "48fb3893-c917-495d-8277-bf0b50d5c511"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5edbc84-524c-4c17-9d3c-874c1eda9081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dcdafd05-8efe-47d2-b9cc-86cb31d3f916"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9d55418c-02f0-4509-ba11-90b978dcda59",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "61341f9c-6a11-4b5c-8dd7-37d7d5b600f7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a97d1e82-a873-4aaa-8cbc-f9f02cd9e87b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b118e72e-04e4-46d9-a57c-8e826f8ec3bb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7eecc310-2ebc-4231-9a22-d78504c46725",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "0f0520f0-1877-4bd5-b02d-b2013ee6894e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7b84b120-6b10-464c-9014-9e6ff2738cb6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "515570fb-3f47-445b-8a8b-9a6eda33b8e1"
            }
          }
        ]
      },
      {
        "id": "f074dcc3-e876-43c7-a101-ee518c6078b8",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "7a9a60ac-a823-4716-9636-7b0a513afb91",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5bad7f3a-c962-4279-bbe0-a205240ebc0b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6865b0bc-5e66-4d11-91b1-a3580001fc2e",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b1a5fc3-58d3-4d9c-bd49-924f65378e3e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "754ca21f-b9ee-475c-89c1-f7d9d4999519"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70b08c1e-89fb-41e0-92c0-fba8d280f24b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e857801b-d419-4166-aea4-7725a31d8250"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "daa56f0a-650f-4884-95d3-0f036b8cc906",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fb71f885-c1e2-4af6-9bc4-6ae6ab7757f7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "39824083-8d4d-47d2-85a9-c8a1391b9612",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c4a6bfec-e22d-4ff9-9477-0b1d4a6f572b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6eea7b9f-1f74-44ec-8033-37c9225f9412",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "1f0c1ff3-28a8-448c-b7f3-0f40d416962a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "21d7ba92-cca8-49f0-99ee-2fa06d20b333",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4e8ade2d-a6c4-4586-a930-850eee7e979d"
            }
          }
        ]
      },
      {
        "id": "87b49045-6f83-4caf-b30a-cf01231e0426",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "108b8472-dbbd-48f5-afd6-0e781ed4ea46",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bfb15c47-8c0d-447b-9a90-5374e1fa2103",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bc3227fd-c6d4-450e-92aa-b962ebee2802",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c0bfdec-706c-4036-9705-6abe8284efd7",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4dda3096-7383-4c94-877e-ec6af9ace5a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff31313f-4497-447e-ad08-d404ed3c92e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4cfd04a8-7944-4a5c-8962-d28a40d7d656"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5a556d20-f204-4446-9687-8efbf3a3a815",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "614fb80a-7e9e-4c87-a41e-5825ae91ba61"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2652ce19-d149-4919-bba6-6936dbe6b5bf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a271cf9d-04ef-4d72-b74b-b1e0e685899b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "04cad786-afb1-4858-8ef0-68451af94651",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "95f81e12-51d8-4033-985c-3f2bd9531ae9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "53e298ab-8d99-4f81-9a14-99716c20b225",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c956a6ff-0ff6-4015-b4f3-1b90970f762e"
            }
          }
        ]
      },
      {
        "id": "b3e50313-4a32-4038-9eb9-be57cb70c343",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2834a923-e638-4e5f-b8d0-4c2a4ffa2198",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e36feaa1-672f-4289-a61e-6ba4fd8a5049",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "0f820ad3-c351-4b0a-8d81-8e423f0f92ff",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c0a2a6be-23dd-4881-b123-847a8a1fbef5",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7ea242b8-4850-4c6a-9a5c-bbd307725986",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 51
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 180.51760563380287,
      "responseMin": 6,
      "responseMax": 2138,
      "responseSd": 329.2791150460876,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1695256388979,
      "completed": 1695256454318
    },
    "executions": [
      {
        "id": "1913f6d5-3944-4f43-8919-0169a929e93a",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "07f46640-7732-4312-9e9c-d7259b38e216",
          "httpRequestId": "3f9cda55-4797-40f1-b405-12d30925cfb3"
        },
        "item": {
          "id": "1913f6d5-3944-4f43-8919-0169a929e93a",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "2657e07d-c49d-44a5-bb4b-e299af4a3cb4",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 0
        }
      },
      {
        "id": "b686dad6-5be5-4acb-8317-9990abac6040",
        "cursor": {
          "ref": "873b4b40-fa33-4930-8082-36cfc19c0703",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "0ad976ad-df4b-43c2-ae36-785305e504d8"
        },
        "item": {
          "id": "b686dad6-5be5-4acb-8317-9990abac6040",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "3a453197-52e4-4da4-992c-4890f9ded8ce",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "2b5ebed6-e2f2-4256-a7a7-76b71cacda79",
        "cursor": {
          "ref": "4fbe737c-487b-4a06-a3a2-890ea768bf6f",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "3a792d2a-1495-47a5-ab4c-68bc4353956f"
        },
        "item": {
          "id": "2b5ebed6-e2f2-4256-a7a7-76b71cacda79",
          "name": "did_json"
        },
        "response": {
          "id": "e231af68-c73e-48c4-8b4f-9e189a57e017",
          "status": "OK",
          "code": 200,
          "responseTime": 536,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8021fad7-70e3-4bac-9dcd-d9b291238d9e",
        "cursor": {
          "ref": "3db1c9ef-3af2-4185-921f-a5da23fd0522",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "faab39be-8dbc-4e9e-9b56-36b6e6848a93"
        },
        "item": {
          "id": "8021fad7-70e3-4bac-9dcd-d9b291238d9e",
          "name": "did:invalid"
        },
        "response": {
          "id": "c9e0a8d8-7b87-4692-b9be-50b51e7597fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 134,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8021fad7-70e3-4bac-9dcd-d9b291238d9e",
        "cursor": {
          "ref": "3db1c9ef-3af2-4185-921f-a5da23fd0522",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "faab39be-8dbc-4e9e-9b56-36b6e6848a93"
        },
        "item": {
          "id": "8021fad7-70e3-4bac-9dcd-d9b291238d9e",
          "name": "did:invalid"
        },
        "response": {
          "id": "c9e0a8d8-7b87-4692-b9be-50b51e7597fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 134,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baaed938-4a65-4e22-aaad-cd0639f090d9",
        "cursor": {
          "ref": "68163cae-c345-45f2-9973-fc98cbe97c0a",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "783ee483-7710-467b-815d-734d595cc300"
        },
        "item": {
          "id": "baaed938-4a65-4e22-aaad-cd0639f090d9",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "b3ce1050-b63a-402d-86b5-9542d74af08e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 148,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b443312-2c21-45fa-855f-c3948ed281ba",
        "cursor": {
          "ref": "1563a3bc-9d6b-4ed8-a96d-94962dbc9eaf",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "39199592-e35c-4038-8fb0-27f98347b339"
        },
        "item": {
          "id": "1b443312-2c21-45fa-855f-c3948ed281ba",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "a8ab220e-9cc8-4236-98c1-aa4199016cb8",
          "status": "Not Found",
          "code": 404,
          "responseTime": 96,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2790a6f0-9923-4a42-8b0e-9a3afba68e39",
        "cursor": {
          "ref": "eee85e26-54d9-4cf3-b21f-14553e1ddc92",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "c247d2ff-0420-4dfe-ae0e-a7e18158e1e8"
        },
        "item": {
          "id": "2790a6f0-9923-4a42-8b0e-9a3afba68e39",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "b2e4752a-a7b1-4625-82ed-311c78051a81",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3754f376-ef78-4f85-abd5-d029d03887ff",
        "cursor": {
          "ref": "28ecfdef-af85-4d3f-84ac-3bae6c85c5a0",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "542482d6-fdcb-4068-98e9-4f625085214f"
        },
        "item": {
          "id": "3754f376-ef78-4f85-abd5-d029d03887ff",
          "name": "identifiers"
        },
        "response": {
          "id": "992688e7-8da2-4726-825b-aa05bf84bb36",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab562495-830a-480b-8457-adf95b97f082",
        "cursor": {
          "ref": "891d6525-6644-47c1-8e82-b5fd8f5090e4",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "1c62d8c6-0fa8-4d93-9095-08f25d8fdd39"
        },
        "item": {
          "id": "ab562495-830a-480b-8457-adf95b97f082",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "047cdece-5a0d-4f00-b778-ad97e14ed288",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65f5368f-81b1-48a5-ab0a-059e831ad74f",
        "cursor": {
          "ref": "b97e2132-0afe-445f-9b74-ef4a1dca6a65",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "8f493320-8932-458a-9a37-3062d3c43d52"
        },
        "item": {
          "id": "65f5368f-81b1-48a5-ab0a-059e831ad74f",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "9a81b636-7020-49c5-b246-a4cb74a719e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce67b4aa-99c7-489a-a8e0-5b19e615b801",
        "cursor": {
          "ref": "fde5777c-ab31-4147-ad3d-92a54ae87e1f",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "67e7bb65-c7de-4bd0-9abe-a9b481eb6c7d"
        },
        "item": {
          "id": "ce67b4aa-99c7-489a-a8e0-5b19e615b801",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "31a1eb55-daf1-4e19-8a61-2b34cf1370a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85a860ed-fcc7-4207-87d4-6c8e42c70252",
        "cursor": {
          "ref": "8d2f958b-efa2-4a5d-ade3-267908da24ec",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "7bf20cbe-3453-4ce5-a3df-ff31cf9009cd"
        },
        "item": {
          "id": "85a860ed-fcc7-4207-87d4-6c8e42c70252",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "3558ccc3-f9c3-4066-a6df-ffd345142b00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5abcf547-92d4-4aef-81c3-c8b70eb7e524",
        "cursor": {
          "ref": "d794121d-c423-4946-bb37-19322a845f93",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "ab4b443e-27a9-4e32-993f-1cad0e4b07c9"
        },
        "item": {
          "id": "5abcf547-92d4-4aef-81c3-c8b70eb7e524",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "b79e3586-1144-464b-81e9-458788589d6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51066e21-b93e-4afa-bb39-b0878a532d9d",
        "cursor": {
          "ref": "9d1ac7a3-2f26-4fca-ae88-ad0bc4ffaf95",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "402046ac-07c6-497a-a73a-1db59a0db8ea"
        },
        "item": {
          "id": "51066e21-b93e-4afa-bb39-b0878a532d9d",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "b0bbbb50-7900-4b7e-aa0c-52eb66c2cb5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88e05d63-8fd1-4040-876c-39626fbadeec",
        "cursor": {
          "ref": "bb605859-fefb-40ce-a0df-4fddbb937b5b",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "6fedd15e-3434-4c35-b5cd-3dde8dba0066"
        },
        "item": {
          "id": "88e05d63-8fd1-4040-876c-39626fbadeec",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "43f2c0ab-486b-4060-bc46-ea96e87fd3b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59e22bbc-6ba1-4ea9-bbad-a72ff7935715",
        "cursor": {
          "ref": "a2e7059d-b16b-4058-a530-6147bffeef18",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "53f93a30-4000-4cf6-bfb7-ef157308807c"
        },
        "item": {
          "id": "59e22bbc-6ba1-4ea9-bbad-a72ff7935715",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "0dad8411-8fba-4b69-a304-a6538ea1c6e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fef1677-2033-4954-8c7d-f57a1c237c88",
        "cursor": {
          "ref": "0a513342-e09f-4874-9ade-b7b4bb81b50c",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "8633e8d3-0bfd-4abe-9104-f936782ad164"
        },
        "item": {
          "id": "2fef1677-2033-4954-8c7d-f57a1c237c88",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "b1945dfd-d154-4127-879b-e5700666db67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c59ae8c-2dd4-453d-bff2-182bcaa5596e",
        "cursor": {
          "ref": "33ed21ed-1df4-4e79-b87b-a7f5be6681c7",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "6a3ee93f-f331-4974-b862-221e4f4644be"
        },
        "item": {
          "id": "2c59ae8c-2dd4-453d-bff2-182bcaa5596e",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "55a07faa-c3ec-4c21-bc1f-9c5c592b97d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43f4b621-9ca0-49b7-a77d-0f5d92cd9253",
        "cursor": {
          "ref": "775d6d6a-5cfe-4066-a800-fa68083a8248",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "8056ec39-2f68-49eb-b692-c4ac393d5a60"
        },
        "item": {
          "id": "43f4b621-9ca0-49b7-a77d-0f5d92cd9253",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "cba65ef9-2c1e-46b8-8299-af65434f171d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "518e14ce-a5cd-4a60-894a-e0b9563ba40c",
        "cursor": {
          "ref": "7cc10e56-d879-4ab2-bceb-dd0320aa3766",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "5cc64bcf-ef59-4d88-9259-1699112e5202"
        },
        "item": {
          "id": "518e14ce-a5cd-4a60-894a-e0b9563ba40c",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "f8cd8890-a661-4f93-b0a5-4706248980cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84f43d4a-f68c-441d-bf70-7b0e41e79c9c",
        "cursor": {
          "ref": "16d51c5e-e1e5-4710-a180-0acd400c086e",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "155674ea-7e58-4403-a4e8-393a49221c46"
        },
        "item": {
          "id": "84f43d4a-f68c-441d-bf70-7b0e41e79c9c",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "f64c7e13-fa32-474b-beb2-626587edb759",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "726c4b36-6b74-4973-9e45-2d9c6de923c3",
        "cursor": {
          "ref": "b7580397-bde9-407a-8498-1f9d7886dfea",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "b5c6e37b-13d2-469c-9901-7fc750067fc0"
        },
        "item": {
          "id": "726c4b36-6b74-4973-9e45-2d9c6de923c3",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "d4665f04-1625-4781-aab8-61a3204eef5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ac3ee88-791a-4e46-9340-7bbac3cfa8ab",
        "cursor": {
          "ref": "5a2b6eb7-4ccc-4835-aee8-138fa384a292",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "395a8407-8f53-4d3c-bf85-5349fbb81e52"
        },
        "item": {
          "id": "4ac3ee88-791a-4e46-9340-7bbac3cfa8ab",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "3f2d78a8-fbd3-4ccc-9c93-ab13915800f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "361f6864-9c79-4893-b403-7e16cb107479",
        "cursor": {
          "ref": "97fc0627-1e95-4f0f-b039-e965ec7675d6",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "c6c5c7ed-66f4-4600-ad2b-b0366fc37270"
        },
        "item": {
          "id": "361f6864-9c79-4893-b403-7e16cb107479",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "1b365f5a-2bc8-4ada-81ef-5841138a0bc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6152190-5809-4cf5-b631-bc5d51b8c292",
        "cursor": {
          "ref": "67c74d12-256b-419d-ac97-593030a9654c",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "4bf672ac-20c1-44d2-a8c1-568b251f39e7"
        },
        "item": {
          "id": "d6152190-5809-4cf5-b631-bc5d51b8c292",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "e4906fbc-5d78-4254-b8e8-934e94a1b230",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e750567-4b77-495c-9d3e-ad09ca01f3a8",
        "cursor": {
          "ref": "bc3c13ab-fd51-44fa-b832-73f6c52c50ca",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "74e76824-ce4e-43ba-865e-9273a646e860"
        },
        "item": {
          "id": "1e750567-4b77-495c-9d3e-ad09ca01f3a8",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "febd9e92-bfd8-4a05-9eba-c251613d5f28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f5527e1-7ae9-41e7-bee9-9f41eb90498f",
        "cursor": {
          "ref": "8ca4e42d-5126-4fc7-8f75-9999f6de033d",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "5cac8f11-9ab1-4ed2-8ae9-25f8144395e4"
        },
        "item": {
          "id": "7f5527e1-7ae9-41e7-bee9-9f41eb90498f",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "c470783e-4e40-49e7-873c-15adfb31838a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3d033d9-1b9e-4b1c-ba12-b4f58a54f739",
        "cursor": {
          "ref": "f2728eac-5811-48c6-aa37-7299d7fcc3be",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "0bb3a5f4-206a-4982-b65d-1cc525951333"
        },
        "item": {
          "id": "f3d033d9-1b9e-4b1c-ba12-b4f58a54f739",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "b5bba5a7-6d18-4b15-ab82-aa99d7d3d559",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95f0a1ef-dcee-46ef-a119-ebdcf72335ca",
        "cursor": {
          "ref": "deede1f4-1c5e-408a-9a8a-82ce8ba8921a",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "a806238e-1654-4a4d-a0a7-8b29a3daca11"
        },
        "item": {
          "id": "95f0a1ef-dcee-46ef-a119-ebdcf72335ca",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "a3ba3768-5693-43cd-8df2-50c6bfbdc0ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8459814-4e11-401a-8094-5802ef4d53ca",
        "cursor": {
          "ref": "faea7fa1-2f90-40ff-8bde-d0ca1bd2f8d4",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "b55b2eb9-bf8f-4733-8640-c17700b8b5c6"
        },
        "item": {
          "id": "c8459814-4e11-401a-8094-5802ef4d53ca",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "493d552a-3ada-4d72-8175-74e2ce4d7f92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "712d5746-4605-4d71-a51b-0be6d473ae8d",
        "cursor": {
          "ref": "ccfcdb78-4ffc-46db-b425-9562ed813f90",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "770af73c-789f-4676-be51-98257692f3f9"
        },
        "item": {
          "id": "712d5746-4605-4d71-a51b-0be6d473ae8d",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "2cdcc1f8-8ce2-4f82-9428-8413c277ded5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b166f4e-10dd-46ab-95bf-6754c006509c",
        "cursor": {
          "ref": "0991c1da-a237-4082-83a9-990865b25492",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "44048a48-16f8-4804-abe3-e2d32cb4ea99"
        },
        "item": {
          "id": "7b166f4e-10dd-46ab-95bf-6754c006509c",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "39a67949-4c89-4b06-a358-7af676bbb6a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cb2992f-f214-4c44-876c-0d0aeca327db",
        "cursor": {
          "ref": "227c1ffb-03fb-4c51-9930-275a0283034e",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "99f22be9-bfbe-4ab9-9fe0-4674ab696a9b"
        },
        "item": {
          "id": "8cb2992f-f214-4c44-876c-0d0aeca327db",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "2cca460f-487d-4795-9543-45e0da563a1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "989c1be9-1810-482c-8950-1edcd2f74b43",
        "cursor": {
          "ref": "201da0ab-b929-49e3-9124-e3fd2f14cf9a",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "426d3330-3d96-4d25-9855-e1935bf9537a"
        },
        "item": {
          "id": "989c1be9-1810-482c-8950-1edcd2f74b43",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "cd260427-b809-45ac-8b80-3146ccd6cd04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0576bdb6-e15a-4ceb-be11-a95ee97e4531",
        "cursor": {
          "ref": "18409230-28ec-425a-b254-ccc42fe1bca2",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "c4efc1a3-8ed9-4c42-9991-386a4d40c9e6"
        },
        "item": {
          "id": "0576bdb6-e15a-4ceb-be11-a95ee97e4531",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "518e49b5-8eb1-4119-a091-d877f123e880",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02e33a85-fea2-4095-89e0-141276b043f1",
        "cursor": {
          "ref": "ff354bf4-aa7e-4f70-87d4-2bb7c9f15e30",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "db8a62fb-7fe7-4649-89de-34a5e626287e"
        },
        "item": {
          "id": "02e33a85-fea2-4095-89e0-141276b043f1",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "f228b701-4cfd-4be7-a3c4-79cd6c53fbc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46869f28-8946-4468-8827-b5560ca3dd33",
        "cursor": {
          "ref": "e549dc87-91c6-4a17-8d98-27f07ed780ba",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "837b8ca5-0c54-4958-bdeb-21aca372b071"
        },
        "item": {
          "id": "46869f28-8946-4468-8827-b5560ca3dd33",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "ee1dfce2-87a9-4acf-bc00-f74fda8063c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d52fdafb-60cd-49ce-9343-73e792036bb9",
        "cursor": {
          "ref": "37810f41-d9eb-4d96-832d-cd3bfbef168e",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "7fe7af16-3a0d-434e-b484-61f1d20d2750"
        },
        "item": {
          "id": "d52fdafb-60cd-49ce-9343-73e792036bb9",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "1b5acbe9-5748-45dd-a3ca-98ba8a174425",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c54390b-8a8a-4fcc-b7ca-61b4f1312747",
        "cursor": {
          "ref": "5a8bf40d-09ec-47f3-a9d3-9e83a2a4b613",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "204bfd16-e55c-4f74-bb6a-b03fc009541d"
        },
        "item": {
          "id": "6c54390b-8a8a-4fcc-b7ca-61b4f1312747",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "1ba7545b-bd81-443e-92a8-137f68dcb381",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 104,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "ad756636-49d4-4fa5-81a5-0f9b3d821a31",
        "cursor": {
          "ref": "2028ceeb-dbbe-4803-8c18-a45e3c6a4518",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "9e2b4b50-fdca-4538-8259-e0109481ffaa"
        },
        "item": {
          "id": "ad756636-49d4-4fa5-81a5-0f9b3d821a31",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "7b6ff306-cce8-40d7-acc7-e6946560c9e0",
          "status": "Created",
          "code": 201,
          "responseTime": 2138,
          "responseSize": 774
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "97e591ac-ba23-43a4-b4f6-bb627c008fd0",
        "cursor": {
          "ref": "95f8c2d9-2111-4767-9eae-e62e219685dc",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "5e750433-f243-4cf8-ac1b-13746703d8c2"
        },
        "item": {
          "id": "97e591ac-ba23-43a4-b4f6-bb627c008fd0",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "0576d59d-a8d0-423d-aad2-ef06809ca46c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 92,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "7cab9f17-4e0a-416d-ab56-8c545b1a30f7",
        "cursor": {
          "ref": "45b99bc6-b61c-4a46-8b4c-3f9a7f73fb00",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "f919d087-8446-44a0-b716-7902d4d3a22b"
        },
        "item": {
          "id": "7cab9f17-4e0a-416d-ab56-8c545b1a30f7",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "c8f42928-f220-4ff4-8550-3fdf8ca06d14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1fcbe66-9fd5-40d1-9d85-40886fa2a055",
        "cursor": {
          "ref": "1cbef4fb-a180-4527-95d7-07950352f395",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "0564fbb0-a6c5-4e31-b3d6-e4b25f49baeb"
        },
        "item": {
          "id": "d1fcbe66-9fd5-40d1-9d85-40886fa2a055",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "141ae399-3457-458f-a7de-72cb5fe81a18",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 92,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "7fbd26c9-a78a-49b1-869f-32bfb9c312c6",
        "cursor": {
          "ref": "5963fdac-9bcc-4194-b35a-0a800e11810e",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "463f7f8e-7baf-469e-ac4e-12ed83441adb"
        },
        "item": {
          "id": "7fbd26c9-a78a-49b1-869f-32bfb9c312c6",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "cd761a02-2ca4-4ed1-b571-3a90e414fef9",
          "status": "Created",
          "code": 201,
          "responseTime": 1436,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "0f3b2079-949f-42b1-91ff-ea38024a2f37",
        "cursor": {
          "ref": "37ae8064-f63a-4fed-817c-cea3fad8ebd8",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "580f41b5-94bf-43ea-8fb5-51caa22d45b4"
        },
        "item": {
          "id": "0f3b2079-949f-42b1-91ff-ea38024a2f37",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "2815615f-3c03-4e53-ad78-c6e94efbf4f5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 98,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "6830e4d9-f9f8-4382-a8f8-a0b3588c6000",
        "cursor": {
          "ref": "8821af99-6695-4ba5-a158-546d37eb38c7",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "3be42ce0-59a3-43cd-b1af-92ddae486e0d"
        },
        "item": {
          "id": "6830e4d9-f9f8-4382-a8f8-a0b3588c6000",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "dd002091-92ed-4e0c-b4c6-3c59777010ac",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1255,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "07604a46-99a9-41c8-b336-fdd6a68bb19f",
        "cursor": {
          "ref": "64a68b63-97b2-4e71-bb9d-23900c5f1bb0",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "f703e04b-eab7-49dc-aa20-2c1c2b1005a7"
        },
        "item": {
          "id": "07604a46-99a9-41c8-b336-fdd6a68bb19f",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "b80e1de3-f2f2-4b2a-8f6f-db1985b56f9f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 91,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "c7232f18-b7a2-44e7-95e0-6d553eea177c",
        "cursor": {
          "ref": "0b9e8d60-35d0-4d48-b612-33fecc64f953",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "f152f624-623b-400a-a364-bb6d707df6ed"
        },
        "item": {
          "id": "c7232f18-b7a2-44e7-95e0-6d553eea177c",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "29acbde8-e53f-47e8-b047-63ed0308bc33",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 94,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "83bc0e6d-31d1-4efb-a28d-72f8fdfbc29a",
        "cursor": {
          "ref": "d815770f-061f-4378-a812-e992b94b815f",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "b801ea7f-2b15-4e17-b2f9-1a152012dacb"
        },
        "item": {
          "id": "83bc0e6d-31d1-4efb-a28d-72f8fdfbc29a",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "a8978f9f-9183-455f-ba93-156b716d6192",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 89,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "94eb8d62-52b5-4d28-b462-f33f0515e4fe",
        "cursor": {
          "ref": "e00452b3-b610-4392-81e8-f7be276b228e",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "7ef4af7a-ea43-4f90-b0ff-d8a64ff761c1"
        },
        "item": {
          "id": "94eb8d62-52b5-4d28-b462-f33f0515e4fe",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "a4e7e1b5-af51-40e9-b00e-78db37338fba",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 88,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "9f48a522-f480-443c-a6b8-57566c1eb3c8",
        "cursor": {
          "ref": "a7b3c287-4238-49d6-b0b2-b7b5355fd7fb",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "c6ead254-03de-4d37-b49d-7a0a82c17179"
        },
        "item": {
          "id": "9f48a522-f480-443c-a6b8-57566c1eb3c8",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "6647bcd0-3cfd-420a-94ed-ef73099cb970",
          "status": "Created",
          "code": 201,
          "responseTime": 1524,
          "responseSize": 770
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "bb576674-3204-48d9-92da-deed8443945a",
        "cursor": {
          "ref": "40eac072-74c9-4e89-bb7f-0706874f75e7",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "e2e74d15-ef28-468c-8bcb-48a6042d90e9"
        },
        "item": {
          "id": "bb576674-3204-48d9-92da-deed8443945a",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "88b135b1-09dd-4e8c-9ad1-533fa9cab8a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91dd149a-0bfa-48d2-b292-9155599cff3b",
        "cursor": {
          "ref": "03a509e5-5fac-40e4-99f2-4cc4d83f581f",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "9d58d0b6-634c-4d00-916a-2ecfab2e6e78"
        },
        "item": {
          "id": "91dd149a-0bfa-48d2-b292-9155599cff3b",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "685505a7-99ab-4105-8c1d-bd80f767e4b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef0a7297-b3ae-43af-bc7d-12bb49118e50",
        "cursor": {
          "ref": "810d6b2a-85db-4c20-b6d4-7b816d91f590",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "ab7fa0ef-b048-470b-8158-8eb0337516ea"
        },
        "item": {
          "id": "ef0a7297-b3ae-43af-bc7d-12bb49118e50",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "9188f27c-e4ef-4004-a017-78672b711b1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69c2355b-1222-45ce-af45-fc1083ad7575",
        "cursor": {
          "ref": "f5e583a0-bfe7-40ac-98db-ce784a6cec22",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "7194bf64-7f59-4189-a4af-5bfce4af84c2"
        },
        "item": {
          "id": "69c2355b-1222-45ce-af45-fc1083ad7575",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "515624c1-83ca-4b35-a8f5-c6e29a63e3b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "207fa60f-2c30-4d86-b8db-5782ba1b6e33",
        "cursor": {
          "ref": "7e9a0294-1b69-4959-8670-b7108453bd32",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "1f10833f-91e1-4c5c-8a56-98abd2fef66b"
        },
        "item": {
          "id": "207fa60f-2c30-4d86-b8db-5782ba1b6e33",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "eb62cbfd-8ab2-4cca-b974-edc9190b60e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08bfab21-87c4-46dc-99c1-84d0d30af3a5",
        "cursor": {
          "ref": "6b279131-5991-4e6b-876c-e83536be35c8",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "98e9e402-21f0-4d41-ab50-9b6c1fe3e0c3"
        },
        "item": {
          "id": "08bfab21-87c4-46dc-99c1-84d0d30af3a5",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "04f6f2dc-dd4c-4d12-aa88-fd33d0441085",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e89a4199-48ba-4db6-ab77-fe924ec5833e",
        "cursor": {
          "ref": "31b8ad18-46c3-41fa-b32e-fbb7e6bcbf0f",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "35486e83-194e-4cf1-804f-180e887b30cf"
        },
        "item": {
          "id": "e89a4199-48ba-4db6-ab77-fe924ec5833e",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "c224a515-95fa-4cea-ab4a-4974f7c69250",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ddf4bb0-85dc-456b-9fd0-f09241ec6007",
        "cursor": {
          "ref": "5e2f1e93-f226-463f-a417-655aa2d9b0b6",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "3302e9bb-baf9-46cc-b138-074a23311c2e"
        },
        "item": {
          "id": "6ddf4bb0-85dc-456b-9fd0-f09241ec6007",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "46ed7cb4-e6c1-4267-82a8-a13efb8fc0d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f82f51d5-8cb7-4d04-9c72-b6d292cb90a6",
        "cursor": {
          "ref": "1aff0d0a-bdc8-4ac7-a0d1-5ff612b6045d",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "c1afe7b5-4abf-4fed-8e6e-2e21a8088599"
        },
        "item": {
          "id": "f82f51d5-8cb7-4d04-9c72-b6d292cb90a6",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "ef69c1d1-e9ce-496b-9bee-6761766056dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c322dcf-c2e7-410c-ae02-db02a924fa9d",
        "cursor": {
          "ref": "9f5fb278-773b-4e26-ab08-3d535f8bb67c",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "d58f09a0-9cd2-4125-bc82-56504a158286"
        },
        "item": {
          "id": "1c322dcf-c2e7-410c-ae02-db02a924fa9d",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "379f9f53-aa20-4e96-81e5-74fa872127ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a460c937-6cd4-4ccf-aff7-840c9d0b2362",
        "cursor": {
          "ref": "fc5d970b-fb1c-40b3-a8e5-ec407e83bd9e",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "3622f134-e147-49f7-9ce9-c928b95f8343"
        },
        "item": {
          "id": "a460c937-6cd4-4ccf-aff7-840c9d0b2362",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "ef9b1973-a612-45a8-8021-1d7a199d1e77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bc28731-d7e2-4c56-9316-b546b2c3d773",
        "cursor": {
          "ref": "34cfebe3-1df5-43b3-9b98-088bfd953ecb",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "1dc4b611-51d2-430e-a187-d58341c3ba26"
        },
        "item": {
          "id": "1bc28731-d7e2-4c56-9316-b546b2c3d773",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "e3bde7f6-ce8c-48ea-bc8f-a67efa68ba1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd2695a5-f628-4ede-900b-c6a1fd4c2c47",
        "cursor": {
          "ref": "769611f8-6406-48c1-842a-23c8bc254817",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "3c8d4aac-61de-4ffc-8850-61920916352f"
        },
        "item": {
          "id": "bd2695a5-f628-4ede-900b-c6a1fd4c2c47",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "dad5ed8e-08fc-40fa-a80a-087db90dc0dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3cb174b-7a91-48e0-a021-9562027562d1",
        "cursor": {
          "ref": "8cc03a32-255b-4fff-bd78-f1a33fea5e6d",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "b4376dca-f8f5-4e8f-a734-5fe1900b0a33"
        },
        "item": {
          "id": "c3cb174b-7a91-48e0-a021-9562027562d1",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "79b6194a-df8a-451a-b8d1-3f74f46b8573",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1197,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "ff419204-a5ef-4caa-a79b-41a4bb668413",
        "cursor": {
          "ref": "b8ee398d-fabf-4869-898c-08ebe65c0fdf",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "2620ced3-d824-4133-8eb2-6272e810c90b"
        },
        "item": {
          "id": "ff419204-a5ef-4caa-a79b-41a4bb668413",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "106dda27-7bcd-44d1-885e-b708294bef41",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1252,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "952c3e7e-937e-496d-b43d-95beb67f2d50",
        "cursor": {
          "ref": "abe7f651-8795-4316-9089-2823aae69e3e",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "9e500ef4-66fe-4337-98a9-02f9664300fd"
        },
        "item": {
          "id": "952c3e7e-937e-496d-b43d-95beb67f2d50",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "4d2890a6-b9d1-4c1d-bd75-53b2e4a3bd8c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 92,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "6e7499e8-427d-48e8-9a6a-f7210766116a",
        "cursor": {
          "ref": "042d65b3-3d2c-4c14-aa4a-da30b2e62a80",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "d8626a4a-9748-4a88-8b08-5a337c6b9bd1"
        },
        "item": {
          "id": "6e7499e8-427d-48e8-9a6a-f7210766116a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "a7d97918-4d0d-4cf1-992a-fe9e5d31e089",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1190,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "48826823-bc9e-4f99-aad5-7b14e62f221b",
        "cursor": {
          "ref": "64750c1a-cec1-4b56-9d09-e286b7efbe8d",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "ab78d8ef-a869-4df5-9097-c39c28480b3b"
        },
        "item": {
          "id": "48826823-bc9e-4f99-aad5-7b14e62f221b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "e20f880d-7219-45ce-9a7f-27480fcf7d5c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 92,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "c63bb3d7-4143-4875-85d6-93bd7a5d2ad1",
        "cursor": {
          "ref": "2db18241-5c78-4671-90af-0d824e12a597",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "cd60556b-cef5-42d3-b1bc-d15a39277d24"
        },
        "item": {
          "id": "c63bb3d7-4143-4875-85d6-93bd7a5d2ad1",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "25dad0cb-4716-410c-b63b-375402e2c2c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b39a084-eb3c-4cb8-86bd-5db67383c3b5",
        "cursor": {
          "ref": "0213d920-e19f-4023-9129-481eaeaa9eb3",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "2bc22644-6702-4e57-904c-c4f616edce33"
        },
        "item": {
          "id": "3b39a084-eb3c-4cb8-86bd-5db67383c3b5",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "b16b1c89-c116-4977-a1d3-12fa773dae14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1b46235-7158-42e2-a3b4-64ab324b154c",
        "cursor": {
          "ref": "0df53bcb-0a35-48dd-bfc4-de8cff46e7fa",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "0f262b40-b993-4dbe-988f-5d34d0f112e7"
        },
        "item": {
          "id": "d1b46235-7158-42e2-a3b4-64ab324b154c",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "d8f8b7bc-2a41-433f-be6e-36d63603ae73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57d42b2f-a7a8-4cd4-ae12-70656d2e0b32",
        "cursor": {
          "ref": "bfe116fa-165b-44ff-b2a6-be47ed35e708",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "8df34328-2ac8-4103-87fc-a2dc59ef3108"
        },
        "item": {
          "id": "57d42b2f-a7a8-4cd4-ae12-70656d2e0b32",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "5bb7b047-3af0-48e7-b56d-6fc3cbbdba6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7b6f25d-2731-4147-9109-a6fab8b2745b",
        "cursor": {
          "ref": "9218188d-b27d-41ec-b9bb-4cd269327643",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "c247a68f-8685-4c85-a314-e1c310115466"
        },
        "item": {
          "id": "c7b6f25d-2731-4147-9109-a6fab8b2745b",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "591723d9-bbdd-402b-92a9-612f2e0fd134",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7e1506e-35c5-4566-9bda-dd6a0d5c9341",
        "cursor": {
          "ref": "b13e31bd-3303-4e31-8638-9c69168c0a74",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "eede70e3-8cd4-4122-babf-716c55d4bc3c"
        },
        "item": {
          "id": "b7e1506e-35c5-4566-9bda-dd6a0d5c9341",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "3c51a523-dba4-46a0-8712-0d0452e742c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a942f00a-dca2-459d-b042-67abedb110e5",
        "cursor": {
          "ref": "30b5d327-67b1-42f2-8518-a984e8a8d2d3",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "e952d38b-6e4c-4064-a2b1-a3805ad665a0"
        },
        "item": {
          "id": "a942f00a-dca2-459d-b042-67abedb110e5",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "5aef7f65-fd44-4d0b-944b-0619b987a9ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f53c27e-781e-467f-ad86-a245120020c8",
        "cursor": {
          "ref": "1281551f-59e1-4195-bcda-1fbdba1657cc",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "8e6f81b3-56f0-420b-8042-50f6be5c069a"
        },
        "item": {
          "id": "0f53c27e-781e-467f-ad86-a245120020c8",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "244d4382-ae60-472c-9c6e-74fcc372ea35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94ea1463-50c9-46b6-bbb3-f286232c5102",
        "cursor": {
          "ref": "3795b097-b71c-479f-b994-2141a6de5067",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "7ceeb9c4-c29e-4cc7-902a-8abddaca1ebf"
        },
        "item": {
          "id": "94ea1463-50c9-46b6-bbb3-f286232c5102",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "d2ba22ae-d4db-455b-bf59-e56ebe804d30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2c4b911-1166-4901-aa2a-7fd888ec25d9",
        "cursor": {
          "ref": "fa97c64b-ee83-4648-892b-6acbad04c469",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "621662da-e2e5-4be1-b54e-277c6586b6ff"
        },
        "item": {
          "id": "e2c4b911-1166-4901-aa2a-7fd888ec25d9",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "9d2b7555-52e4-4668-8333-792a1a778cd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa9ba78f-b3ef-489c-bd39-2605a89a9f3d",
        "cursor": {
          "ref": "a54d85db-87d0-46df-8500-527e1a519c57",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "8e964fe1-f325-4289-b85a-657c89790576"
        },
        "item": {
          "id": "fa9ba78f-b3ef-489c-bd39-2605a89a9f3d",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "5eaa2cfd-0e1c-44e8-b996-67e80fa05060",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09faa62a-2229-4cc0-884b-89b29e8f1396",
        "cursor": {
          "ref": "bdac6a06-0bd0-409d-a915-ebd5a5010c10",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "861f87f6-7ccf-41c2-9dd6-d0f90bbee4c1"
        },
        "item": {
          "id": "09faa62a-2229-4cc0-884b-89b29e8f1396",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "77e780a3-ed02-450a-bede-1589af03205a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b699e793-297d-455e-9dfd-eb12673952e1",
        "cursor": {
          "ref": "2923ea95-801b-4711-aebe-c7f11306d4b2",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "1ce7593e-0e7d-4d7f-b121-e1c23b1c65f1"
        },
        "item": {
          "id": "b699e793-297d-455e-9dfd-eb12673952e1",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "7fec2ce7-ab5b-426b-a3a0-7b1912578213",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7518deba-90cb-4b77-b505-cd1892fe20f4",
        "cursor": {
          "ref": "14d6d6e7-c013-4a38-9e4b-88e84c5cb5d1",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "f8e10291-12f1-459f-b913-9a6570dc4954"
        },
        "item": {
          "id": "7518deba-90cb-4b77-b505-cd1892fe20f4",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "fb627d4a-9c06-4136-8d42-59f7c0b6d81f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff21cb49-307d-4add-9e0c-fd81153bb634",
        "cursor": {
          "ref": "07b2a837-71f4-43e4-adfb-91f11ceeb040",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "01fcc879-ad8a-451d-8f41-33f982608fa3"
        },
        "item": {
          "id": "ff21cb49-307d-4add-9e0c-fd81153bb634",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "684dbf47-26dd-42ff-ac9f-31fdc11b5493",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4454f71-76a9-4b2b-bf98-2bd18967be61",
        "cursor": {
          "ref": "f1d309e9-300a-461e-86e0-38167e8135bd",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "033d0d53-084c-40f9-beeb-0c62bae61e86"
        },
        "item": {
          "id": "c4454f71-76a9-4b2b-bf98-2bd18967be61",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "22ed391f-32f5-4802-8171-a20fa4824f74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a7bc54a-5d51-4fa8-9bba-37ac249f63fa",
        "cursor": {
          "ref": "6d9c49e6-6acb-4a02-ab27-7de43e962e13",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "f3f24079-e10f-4cf1-b1d8-5ad6fc7d1db8"
        },
        "item": {
          "id": "9a7bc54a-5d51-4fa8-9bba-37ac249f63fa",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "8d841e33-00a5-4ebc-aa41-4fc1cb57cd74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5daa395c-71da-415c-820d-a24dbf873adc",
        "cursor": {
          "ref": "19faa5e8-3f94-46bd-84c3-d6d5f29a708e",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "0609c9d8-d09e-433e-b860-c3fcc245601a"
        },
        "item": {
          "id": "5daa395c-71da-415c-820d-a24dbf873adc",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "a55f3c72-b270-4e90-8953-7512022df4e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1b361cf-ddc9-478e-8e1e-3e1acbc41113",
        "cursor": {
          "ref": "7bb2f257-23c8-45a9-a5a3-2f889e28af4c",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "bfdc885a-ff31-41f0-97d7-248116acef05"
        },
        "item": {
          "id": "e1b361cf-ddc9-478e-8e1e-3e1acbc41113",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "48990f0b-c8d5-4a4c-beee-afe971ef4c69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c374735c-db3d-4c4c-92e3-4e37d5b90e59",
        "cursor": {
          "ref": "0997f929-ed22-4dd9-9888-fe1470c300ec",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "bad3b951-fd47-44f0-9d81-b402b6c60004"
        },
        "item": {
          "id": "c374735c-db3d-4c4c-92e3-4e37d5b90e59",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "15296831-67e1-47bd-9c4f-55876379bae0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f32025dc-5cc7-4509-8410-0812ea7fa395",
        "cursor": {
          "ref": "f1a4bee6-7369-44c6-a1b5-db265aec20aa",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "2c017ddd-6498-4fcf-b8bf-9b29b87abfa0"
        },
        "item": {
          "id": "f32025dc-5cc7-4509-8410-0812ea7fa395",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "a99f1c6f-8de6-49e0-8209-8bdb13f6c12d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3599a6e-06d1-4192-9a72-6ae7671cb36c",
        "cursor": {
          "ref": "fbb81d84-0090-4d71-9421-3eb3d4c5fee2",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "2c8f1ef7-3778-4d96-8266-861e21a3d5a8"
        },
        "item": {
          "id": "a3599a6e-06d1-4192-9a72-6ae7671cb36c",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "bcd22117-b5bb-4d5a-8b0a-17a82f73724a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b7970dd-77e9-4db5-ba19-a1d1d53d33a7",
        "cursor": {
          "ref": "aedfe12b-333f-4a0a-80d3-11852e1a38d9",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "3fdd17d1-3388-417e-9dc0-a5db374e6109"
        },
        "item": {
          "id": "4b7970dd-77e9-4db5-ba19-a1d1d53d33a7",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "13a2378d-0ae4-43bb-8788-6916bac6a8f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5a50b98-105a-447e-b796-6449c7a2f988",
        "cursor": {
          "ref": "dab2c3ad-e363-443f-af2c-db32d2a57593",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "229f3107-b1fd-474e-b028-55feb6002df7"
        },
        "item": {
          "id": "b5a50b98-105a-447e-b796-6449c7a2f988",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "9341d642-2f1e-4a31-804e-3793768e50e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91f31312-4b4d-4024-bdf5-d7f28b60157c",
        "cursor": {
          "ref": "ffc969ba-1db6-448d-8985-ac3a9b168862",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "9d539050-6f8f-4f25-9e06-d339756b441a"
        },
        "item": {
          "id": "91f31312-4b4d-4024-bdf5-d7f28b60157c",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "0bf6ef78-e950-4c41-a152-287a5eb88d46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "481ea439-b2de-4581-97f8-72b23b96e70c",
        "cursor": {
          "ref": "9ec0aa5e-9f65-4406-807f-c922f0c5243d",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "22b1f4ce-1b97-4d1a-ad81-36c7eda5042e"
        },
        "item": {
          "id": "481ea439-b2de-4581-97f8-72b23b96e70c",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "7379a3b8-92b6-4b5b-b968-8582e0369f9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97e31aec-2a41-4ccf-9c7f-aaf818a5a7cd",
        "cursor": {
          "ref": "dfab8945-b589-4417-a9e1-7b3f74ff0c77",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "6c1e47da-b828-4885-9397-4341acffc7d6"
        },
        "item": {
          "id": "97e31aec-2a41-4ccf-9c7f-aaf818a5a7cd",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "790b5953-dddc-4a31-846f-5d5d727e2fe7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6486f1a-28d7-4267-b6b3-9292ef8ccf69",
        "cursor": {
          "ref": "bd454edd-7807-4f16-8e9b-a4c3efe7db94",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "d60a6b0a-adfb-4595-8705-2508c71e0e93"
        },
        "item": {
          "id": "f6486f1a-28d7-4267-b6b3-9292ef8ccf69",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "c1b02e6e-e772-43ce-876a-14fa30d31748",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e952c262-c9f3-4167-b71d-cacde68142dc",
        "cursor": {
          "ref": "79cbf6bd-3f18-4eb0-aa7e-ce77a183dd60",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "d4c7631a-14e1-4767-ba4c-4b0282f69ddc"
        },
        "item": {
          "id": "e952c262-c9f3-4167-b71d-cacde68142dc",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "736ea11f-2d95-48a8-a1d5-50ca9e8b7f9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9a5e848-38f6-48e4-a5e4-2fc1c999807c",
        "cursor": {
          "ref": "e5ded06e-49c4-450c-9c53-c166f2e2bd0b",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "cc8860d9-7bdc-4847-8590-215d101048e5"
        },
        "item": {
          "id": "a9a5e848-38f6-48e4-a5e4-2fc1c999807c",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "3b498706-5cda-45a1-aee8-05ca0f2e4174",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a01e060e-90c1-43eb-8226-a9cb4c44d56d",
        "cursor": {
          "ref": "70421b8f-d4a4-4bf7-ae4a-c710a6779bf5",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "89a770e1-b857-4b8d-9601-111647f63992"
        },
        "item": {
          "id": "a01e060e-90c1-43eb-8226-a9cb4c44d56d",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "cbdda44c-27b2-44f6-8b1d-84afa5a7082e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d260c38-9f40-4619-8bbf-d4ec74134105",
        "cursor": {
          "ref": "6067144b-044a-49d6-baf1-88363a77dc02",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "2647b527-4884-4d35-bb63-c77a4496eb63"
        },
        "item": {
          "id": "1d260c38-9f40-4619-8bbf-d4ec74134105",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "d7e114e5-3abd-4886-ac9f-1deb6f600dca",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39e22a74-faeb-4a14-ab3d-34cbc419f23b",
        "cursor": {
          "ref": "cfd1e295-e839-40ea-86f8-cf89287cc62a",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "e1b8310f-4e69-4bff-963f-1ac57660858d"
        },
        "item": {
          "id": "39e22a74-faeb-4a14-ab3d-34cbc419f23b",
          "name": "credentials_issue"
        },
        "response": {
          "id": "ad19f4f0-8616-4b70-9968-172d90150b4b",
          "status": "Created",
          "code": 201,
          "responseTime": 1582,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b36723a-e476-4e19-a21c-a66965a35a44",
        "cursor": {
          "ref": "77fffef1-b991-42fc-a443-a7dfc3a8a34a",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "a52c8439-fbda-416a-9d54-104347a959e3"
        },
        "item": {
          "id": "9b36723a-e476-4e19-a21c-a66965a35a44",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "76482ea1-89cc-4f03-bbb0-47b19c8003cb",
          "status": "Created",
          "code": 201,
          "responseTime": 1503,
          "responseSize": 714
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f68caa2e-9ab3-463b-8631-751f4499e45d",
        "cursor": {
          "ref": "3666e76d-4c58-427c-9b5e-3c4eec79f6d3",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "19e4f32d-bd5f-4a48-8359-471f3c6d443d"
        },
        "item": {
          "id": "f68caa2e-9ab3-463b-8631-751f4499e45d",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "670dd282-1828-47f3-9f4c-101c94748a96",
          "status": "Created",
          "code": 201,
          "responseTime": 1490,
          "responseSize": 767
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "43340401-aa28-4497-a80d-e4d8be50f374",
        "cursor": {
          "ref": "cc7e11cc-f376-4b1b-9000-998afa0c01af",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "0079b0ba-fafa-4737-8f4b-c10c211939ed"
        },
        "item": {
          "id": "43340401-aa28-4497-a80d-e4d8be50f374",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "36122891-478c-4207-a3ab-6303392e4df5",
          "status": "Created",
          "code": 201,
          "responseTime": 1446,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e882ceb-6231-4bbb-8a2a-c8e221c1878c",
        "cursor": {
          "ref": "0862f094-cc62-4b08-8013-1198ddd0ef74",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "cd46d24f-ecb8-480e-96c6-8336df9220f7"
        },
        "item": {
          "id": "2e882ceb-6231-4bbb-8a2a-c8e221c1878c",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "2e840a9a-98f1-4325-8e64-555d0ba5cf55",
          "status": "Created",
          "code": 201,
          "responseTime": 1453,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "68ad212a-fb62-44cb-9ad9-5a9d7f538ec4",
        "cursor": {
          "ref": "8c6e6a01-fe0e-4e65-a61e-3d0615760107",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "1b00bfdc-f014-42b2-bc81-c89852b1f15f"
        },
        "item": {
          "id": "68ad212a-fb62-44cb-9ad9-5a9d7f538ec4",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "d3a7388e-7a22-416f-ae7f-4e8057596cb8",
          "status": "Created",
          "code": 201,
          "responseTime": 1475,
          "responseSize": 1093
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c81d14b-7ce3-432d-8f92-13e82324bde4",
        "cursor": {
          "ref": "5f43d288-fd2f-471e-8e9b-512ad260a98f",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "5c21ca67-831d-4a80-9cf4-570db99618e0"
        },
        "item": {
          "id": "7c81d14b-7ce3-432d-8f92-13e82324bde4",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "e1559421-1645-40b9-b005-cc21111f944e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6c9135c-2289-46ae-b246-e820271122b1",
        "cursor": {
          "ref": "7c12a1e1-1dc5-4905-befa-977b1696b1d8",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "a666ccbc-f704-4d21-835b-065415e55969"
        },
        "item": {
          "id": "f6c9135c-2289-46ae-b246-e820271122b1",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "ce165443-2c92-42f3-95e5-bfcb2ea9a21a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e52189f0-d46d-402c-af83-a2717d46154f",
        "cursor": {
          "ref": "61fa93ca-944c-41a7-97b6-67f6bb8a79ac",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "7d88ed38-3b9f-4a76-8c94-1aec96e7df97"
        },
        "item": {
          "id": "e52189f0-d46d-402c-af83-a2717d46154f",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "6ddd2c21-362a-46e1-81d4-9ac2d9a4a4f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b146faf4-6968-44d5-9025-4408ac41a5aa",
        "cursor": {
          "ref": "a3d6c93d-f5b0-4531-8f90-4fcb9d29aaae",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "d0653753-666e-4e8b-b6c1-8f1f73f9f122"
        },
        "item": {
          "id": "b146faf4-6968-44d5-9025-4408ac41a5aa",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "83165437-de33-44a7-a9e5-6d18204f7e4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39e67274-f21a-4b8a-8a98-a3b9b213d610",
        "cursor": {
          "ref": "9e5cc550-7d00-4e6f-a908-c078fcf0ee8e",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "1d53c9d7-3d12-458f-a3ad-a9825732df4a"
        },
        "item": {
          "id": "39e67274-f21a-4b8a-8a98-a3b9b213d610",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "e4fc0e63-f454-4eee-8077-8c14fa43d4a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32662edc-8bea-40ac-9786-0d02101a8658",
        "cursor": {
          "ref": "d311583a-6e2e-43ae-9733-1bdcc9399ed6",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "089c261d-8156-425e-b64d-e3e77655a2ba"
        },
        "item": {
          "id": "32662edc-8bea-40ac-9786-0d02101a8658",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "8c675fe8-ae2a-47b0-b075-6469eafcc0de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b498a964-08bc-4d73-b6be-e59ff4220c1c",
        "cursor": {
          "ref": "4c25dd6c-eef8-45e3-9ddf-3e247d06a189",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "586e2432-3d86-4c5e-8605-1d7dcd846ccd"
        },
        "item": {
          "id": "b498a964-08bc-4d73-b6be-e59ff4220c1c",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "1be7538e-045d-4c2a-8c26-60afe788aebe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65088d31-7442-4072-aa6c-d905a29915fc",
        "cursor": {
          "ref": "74f7f66d-4694-4bad-b4f7-10456ec52ce9",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "27f2de00-f224-4a39-be57-1aef97d5d439"
        },
        "item": {
          "id": "65088d31-7442-4072-aa6c-d905a29915fc",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "e0b55a5a-78ea-4935-b2ed-7854b8ea9e85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "773e0242-5ac7-430c-a008-ae81244c1075",
        "cursor": {
          "ref": "7f63eb9f-4ee6-4e30-a430-e4ad2321fce6",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "78bfd49b-c647-4ef6-b53c-950c6c255cef"
        },
        "item": {
          "id": "773e0242-5ac7-430c-a008-ae81244c1075",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "38fe80e8-2d9b-4df4-9f24-9810d4d8209a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f1aa116-8fb0-4416-921a-035dac2feb40",
        "cursor": {
          "ref": "5dadb2af-1b76-49e4-b061-2e00a2eeb202",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "18ca11df-77ce-4424-991f-a6204597bbf3"
        },
        "item": {
          "id": "6f1aa116-8fb0-4416-921a-035dac2feb40",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "2edd4e60-b5a5-4ba1-a2fb-fbaaf15491a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9183a5e0-5264-49d3-9ca2-02d2590a053c",
        "cursor": {
          "ref": "74dddcd0-0477-48bd-83cc-e0b44e5835c9",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "2ac6d6eb-d992-47ba-a3f3-54d0523aef4e"
        },
        "item": {
          "id": "9183a5e0-5264-49d3-9ca2-02d2590a053c",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "d134bfb5-dd14-43d8-bac1-8f3173d7d1ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdab7fad-647b-40cf-9a5a-5f31687e83cb",
        "cursor": {
          "ref": "2b5bd994-9383-4f67-8746-029a5c764827",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "8834596e-08c2-4cf5-a1c5-f6d4a308c9a8"
        },
        "item": {
          "id": "fdab7fad-647b-40cf-9a5a-5f31687e83cb",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "10092f2b-67a7-410b-b1cf-43b643a8ad48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f688a138-44d7-4485-9160-13098a8e5a15",
        "cursor": {
          "ref": "a452badf-bf34-4168-9a02-cd861eeb7402",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "ed28feee-c30c-4cc9-b970-536633f5f8c0"
        },
        "item": {
          "id": "f688a138-44d7-4485-9160-13098a8e5a15",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "6d7ab6a0-eea3-418b-81ab-c8ff3cb99fa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bf14f11-17d2-4299-9d89-d17aa7f2c21a",
        "cursor": {
          "ref": "fa07bfcf-3ca5-4cbb-b0d4-a1f0113991a0",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "4eb7c584-ac47-4a8c-8433-79b43bb9c744"
        },
        "item": {
          "id": "8bf14f11-17d2-4299-9d89-d17aa7f2c21a",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "dbdf668c-f6b5-4073-a621-948c6c0f794f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bba27f61-b082-4ff3-b922-53e21675cda1",
        "cursor": {
          "ref": "8eb9e801-5c66-4a21-91a3-d6cfaf7712e8",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "81304157-23f6-444d-bf4e-1b60e57e5272"
        },
        "item": {
          "id": "bba27f61-b082-4ff3-b922-53e21675cda1",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "765668b4-dd5e-48a4-85bc-1e0781a0dbc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8259f85f-07b9-4772-a61e-68c46b207882",
        "cursor": {
          "ref": "39ffb699-84e9-4105-b020-7846941c048b",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "c00e5564-e6a6-47e9-82aa-73c06a7e6636"
        },
        "item": {
          "id": "8259f85f-07b9-4772-a61e-68c46b207882",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "7a80afd0-5a0f-467c-95d4-dd8733ef3770",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a717a5eb-6daa-41b5-83ec-5762b3ac6460",
        "cursor": {
          "ref": "9c8a6cc5-1e7d-400e-89ec-e46ed94bca9c",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "5bb433c7-e50c-4e07-9655-e11e09b689ca"
        },
        "item": {
          "id": "a717a5eb-6daa-41b5-83ec-5762b3ac6460",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "22a1b69e-097a-4519-9b33-d650f1d57bbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b80e2f25-d057-437b-8d3d-b59ab505f450",
        "cursor": {
          "ref": "c706087a-4330-41be-bb8d-93589165339b",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "292e7a59-8b88-4720-87b3-95291759269f"
        },
        "item": {
          "id": "b80e2f25-d057-437b-8d3d-b59ab505f450",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "030bb4f1-83c8-4580-848b-19c50259c68c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63a7d154-173d-480c-9cfd-7c3f14d28d4b",
        "cursor": {
          "ref": "e81e9e50-2d37-4f49-97ba-14ab02ce0bde",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "300d7f6c-8c8d-437d-9bd9-1b5b49175497"
        },
        "item": {
          "id": "63a7d154-173d-480c-9cfd-7c3f14d28d4b",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "4e4fbbba-cce5-4e8c-b3d8-f60bb210ad51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e4b35a7-feac-4fd7-a2ab-72242b60db4a",
        "cursor": {
          "ref": "526d6dc5-0f5f-44f2-9e41-bbd17125ec2c",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "994ce826-3712-4b44-bcda-4a82bfbcf9d4"
        },
        "item": {
          "id": "0e4b35a7-feac-4fd7-a2ab-72242b60db4a",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "a42aeed3-4d93-4585-9f33-2176b4399eb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a72d70b4-b14f-4872-888f-2250d8a1a55e",
        "cursor": {
          "ref": "b85b3f70-aa2f-404f-9bef-f7f42bedb6e9",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "4b3fb1a2-5b5e-465a-805d-9874a7c3f8ac"
        },
        "item": {
          "id": "a72d70b4-b14f-4872-888f-2250d8a1a55e",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "60ea2723-8403-4d0c-9a5a-03c0f4616561",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c746e870-fd35-4565-821d-6d9eeded8bc1",
        "cursor": {
          "ref": "40e8e74d-6d2e-4d9c-9824-e0457d33560d",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "8f5ab0b2-dbf1-4cc0-8a37-efbd370ccce4"
        },
        "item": {
          "id": "c746e870-fd35-4565-821d-6d9eeded8bc1",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "cb0c2306-83d9-42df-acf9-fb91b83556d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a29ee5ff-7f38-404b-8d28-1e5046db5b18",
        "cursor": {
          "ref": "fb9b759c-3a49-4a8e-8922-fa8fe9f6a0b6",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "0a9bfece-0768-4812-bf91-4b0cbc9731c9"
        },
        "item": {
          "id": "a29ee5ff-7f38-404b-8d28-1e5046db5b18",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "eb1bb704-a538-41ab-afd7-44b8261e9ae3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b000abd-813f-4711-8c6c-577b5fbded5f",
        "cursor": {
          "ref": "fe199075-4270-44d8-8609-4f8b7c760f29",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "1825eb5c-bd5c-4e2c-8703-705aa5a8c89a"
        },
        "item": {
          "id": "2b000abd-813f-4711-8c6c-577b5fbded5f",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "a95a2127-9051-47b8-b9ee-f9afeb9467c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c44cf67-3d32-41c2-8190-273185da966b",
        "cursor": {
          "ref": "dcc41605-c441-4233-a197-e41da8417a79",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "facaf7de-7554-4a80-b041-dee3f613cab1"
        },
        "item": {
          "id": "1c44cf67-3d32-41c2-8190-273185da966b",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "194b1d8d-8f1a-4edb-b040-6003bdb1d811",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7610bbb3-1fdc-44b8-aa02-57f98a5d4827",
        "cursor": {
          "ref": "7bd541d1-4119-43ee-a4f7-8eed17d56a05",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "bf92c0d2-2f05-4bd5-98b7-f4afdc8ba849"
        },
        "item": {
          "id": "7610bbb3-1fdc-44b8-aa02-57f98a5d4827",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "e3840a94-0278-429d-ab96-c363f5551157",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a5bd7ca-3ef6-4021-af71-a4232ace492d",
        "cursor": {
          "ref": "d00e381d-13c1-414c-b0b0-e344eacfbc26",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "1be9e457-31ae-497b-8808-28e242aa69cc"
        },
        "item": {
          "id": "5a5bd7ca-3ef6-4021-af71-a4232ace492d",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "139e339e-a8d6-4419-83a6-c728e3c8a32c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c4603c8-b4e1-4ae9-a167-1e4b7e5d27bb",
        "cursor": {
          "ref": "ade19481-2a8f-4dd8-822f-dc92a24c2ce1",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "90acfe97-d781-47ee-a17d-0b24ce199402"
        },
        "item": {
          "id": "1c4603c8-b4e1-4ae9-a167-1e4b7e5d27bb",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "0c259cda-0693-4a93-89be-fd449b754136",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be75fce2-af3f-4f43-a5f9-617fe1d3c0fc",
        "cursor": {
          "ref": "23a7ab16-2682-4f69-aec5-c42bec8faba9",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "fcd853d0-ec5c-40f4-9760-ab370dfd9719"
        },
        "item": {
          "id": "be75fce2-af3f-4f43-a5f9-617fe1d3c0fc",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "46e5b842-b811-4fbe-8694-540cb4dc8605",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87d11b09-69ba-4cef-b71c-24623e8d84e9",
        "cursor": {
          "ref": "813da30a-804f-4bbd-8064-784e615f6fbf",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "dd2f3026-ffe3-479d-b878-d774311f1e37"
        },
        "item": {
          "id": "87d11b09-69ba-4cef-b71c-24623e8d84e9",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "dc8917ba-c13c-42d0-a61c-83fbf3ce21a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bde87599-1033-487f-9211-0530af015f43",
        "cursor": {
          "ref": "2a3d2d14-0928-4ab4-ab3b-060716c5490c",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "db0ef9f7-0334-4028-a5d7-a5d6b44f953c"
        },
        "item": {
          "id": "bde87599-1033-487f-9211-0530af015f43",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "4ce47219-6166-4a8b-bfcb-d1a1087c24f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9031edd3-a08f-48c5-b121-2e5a44703e16",
        "cursor": {
          "ref": "cb47124d-5644-4244-aae1-30a5c5a0c072",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "cbddd41d-8d48-45b6-87f2-42ebc32e98ce"
        },
        "item": {
          "id": "9031edd3-a08f-48c5-b121-2e5a44703e16",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "d4472112-8c51-47e4-8d04-854e0a09c1e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc3af83b-a124-4016-9643-5b0e04abe205",
        "cursor": {
          "ref": "023f9691-9aa5-4a95-861d-5fe1e67a6513",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "54815cd8-9262-4065-a8f6-5f36c48e4059"
        },
        "item": {
          "id": "bc3af83b-a124-4016-9643-5b0e04abe205",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "219b7fba-8398-4bd5-ac32-d5bd5c9a5c5c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88679a28-724f-48e3-8673-090fb6f29dbc",
        "cursor": {
          "ref": "15a50514-f7fd-4347-b778-059eea583801",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "a1c35f98-58b9-4069-a3b4-df105e4705a3"
        },
        "item": {
          "id": "88679a28-724f-48e3-8673-090fb6f29dbc",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "24e75f75-4ca3-4a99-ab32-506c927c3643",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbda5d12-536a-4aca-8907-cb17127a62ce",
        "cursor": {
          "ref": "c409c4ce-6520-488d-9ae5-005db10fee60",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "2bb0a687-9923-4de9-bb55-365fb592b1ae"
        },
        "item": {
          "id": "fbda5d12-536a-4aca-8907-cb17127a62ce",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "ce8381a0-76ba-428a-8a52-242c437fde62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14b19462-6207-4bb8-87e7-66e9300c2489",
        "cursor": {
          "ref": "6407216b-5a81-4de6-9ac8-8c657f086f39",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "052d0b90-3cbb-4523-8125-8af2604b388e"
        },
        "item": {
          "id": "14b19462-6207-4bb8-87e7-66e9300c2489",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "67848a53-109f-4074-b66b-b66c19e9e931",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6381c6d1-c947-4776-88cb-4370b152cbda",
        "cursor": {
          "ref": "a1d9ed8a-c504-4a3f-af68-9812ba9b25e2",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "c652ac38-873d-440b-ba73-7d90e19ffae1"
        },
        "item": {
          "id": "6381c6d1-c947-4776-88cb-4370b152cbda",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "3ec94ad3-b265-449e-afd8-8135fd1bd37a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a137c75-3c8b-4583-ad6d-dbb5bdab46fe",
        "cursor": {
          "ref": "c27c4c94-dd92-48a8-92e8-5850ed03691c",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "4e7b2281-8948-4950-9e8b-1a38f1f28327"
        },
        "item": {
          "id": "5a137c75-3c8b-4583-ad6d-dbb5bdab46fe",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "c60e2dbd-4fa8-4b8a-9545-5c3c8819d4fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed126bf0-89a5-491a-9ee5-8bf616865fe2",
        "cursor": {
          "ref": "24616e9e-5a93-4637-b416-f217268e2d28",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "2ba4a0cc-6b7c-4a3a-b3d2-a765dacad9a8"
        },
        "item": {
          "id": "ed126bf0-89a5-491a-9ee5-8bf616865fe2",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "3e9761c0-ee1f-4eb9-887e-9fc9cf72e792",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3cd26f0-9161-405c-b88c-8d5a95f023a9",
        "cursor": {
          "ref": "e2c7b881-fba3-4769-8e73-3f1a99086798",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "dc0c6e37-8c9b-4bae-8b46-e504f5f79b52"
        },
        "item": {
          "id": "c3cd26f0-9161-405c-b88c-8d5a95f023a9",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "a18c226d-42cb-4aa4-a76c-70b14ba3072f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72473831-605e-4089-b541-9c10d21d349a",
        "cursor": {
          "ref": "20e9999e-a40a-4142-bf26-bd08d14945a2",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "d9aef814-7741-409e-88b9-5a5ef3b6a41c"
        },
        "item": {
          "id": "72473831-605e-4089-b541-9c10d21d349a",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "d44877f2-c376-46bc-9dec-ed9c11e7f5b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3154b358-ee98-4599-8dd6-3ff2fc4bbb18",
        "cursor": {
          "ref": "e2b39697-53d0-4e41-b2cc-4024fe57f9b0",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "776b3629-2cb8-4e6a-867c-a096439cd1a8"
        },
        "item": {
          "id": "3154b358-ee98-4599-8dd6-3ff2fc4bbb18",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "8727af63-7a2d-4490-8ea2-20456f159338",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8a3ffd3-962e-40d2-84c5-e2432999a16a",
        "cursor": {
          "ref": "6001c4f1-b33f-4df7-b672-329ac5c27189",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "9e8e7201-96e6-47ff-af78-248639b27bec"
        },
        "item": {
          "id": "a8a3ffd3-962e-40d2-84c5-e2432999a16a",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "72b6d53b-2dc5-4232-97fe-c5e485b2736f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73c717fd-ad63-4447-854d-a861370fea0f",
        "cursor": {
          "ref": "69e9aadb-5352-4442-879b-cd3fba50b0af",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "682f0fa7-0ca4-4728-87d5-e05817fbdd8f"
        },
        "item": {
          "id": "73c717fd-ad63-4447-854d-a861370fea0f",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "6917a64e-c6f4-4c61-af13-632e0bbe3429",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c792561f-0ab6-439b-a81d-191de584c261",
        "cursor": {
          "ref": "c2b252c1-b1ee-4acd-9d8c-2d4326623935",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "57bebf85-d2b2-4606-9fd4-d9e903a16aea"
        },
        "item": {
          "id": "c792561f-0ab6-439b-a81d-191de584c261",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "8b4386a3-087e-40c2-8750-edb3caf39c00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "731e2d37-7347-45d4-ab26-ae781ccf9ae9",
        "cursor": {
          "ref": "0663cad3-1ff6-4388-b890-9e77a30cb29f",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "e7aab278-959d-4f42-9012-553af30e26c6"
        },
        "item": {
          "id": "731e2d37-7347-45d4-ab26-ae781ccf9ae9",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "7f8f0c58-aff3-4a09-8c54-be36976fb35c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2be87d20-4915-4691-b339-b5573451bf97",
        "cursor": {
          "ref": "89c8301e-c1f8-4a94-951c-57aa72076113",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "ed61047b-976e-48ce-8e9a-862a6ba8f2b1"
        },
        "item": {
          "id": "2be87d20-4915-4691-b339-b5573451bf97",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "6bcfcec3-095f-4d60-96eb-ab6e5aec799b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "373a77fa-0a5d-4437-8614-58c017c603db",
        "cursor": {
          "ref": "62151a4a-52e9-497e-8da8-dd642d1a999e",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "8b0fadaf-9817-4f61-ad4b-e4d9f2c48801"
        },
        "item": {
          "id": "373a77fa-0a5d-4437-8614-58c017c603db",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "1480294c-62ea-4721-8726-c0969166c533",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ffcf6c9-f01a-49b0-88d4-a08501bb37bf",
        "cursor": {
          "ref": "6c0951a8-21f7-4e81-a8d3-b5fe8ad55531",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "75ade988-806b-4ab9-9b42-98f5c8e3dcbb"
        },
        "item": {
          "id": "9ffcf6c9-f01a-49b0-88d4-a08501bb37bf",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "33713dbd-e10b-445b-933c-85f3c228cfcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "466b2af1-a42b-40f2-a89b-bb5f57b7134b",
        "cursor": {
          "ref": "c21117a3-5e29-43aa-bc25-983b7970b682",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "c41f6ce3-6451-41d6-a759-0894b0d13159"
        },
        "item": {
          "id": "466b2af1-a42b-40f2-a89b-bb5f57b7134b",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "ff6d446b-a20c-4814-8e55-d1363df8d701",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32577828-4636-4dda-a07d-504749e605fb",
        "cursor": {
          "ref": "998a415f-b812-4002-aabc-546caae2b25b",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "8dbf3a39-fd91-49a0-aeb5-283544286eeb"
        },
        "item": {
          "id": "32577828-4636-4dda-a07d-504749e605fb",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "a96a4d10-003b-49a8-bbe4-e2f7a75f8390",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a38aa809-ac48-4222-a325-93ef7d73766f",
        "cursor": {
          "ref": "2b89f012-62cf-4230-ae22-b7c77390c517",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "34ffbd4a-2a54-4df0-ae68-ab458810074c"
        },
        "item": {
          "id": "a38aa809-ac48-4222-a325-93ef7d73766f",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "7b8fcbe5-892b-43d9-8954-6f076154c040",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "820e313a-a670-4964-83d2-bbbaa01e689f",
        "cursor": {
          "ref": "fee49d30-9330-4d23-8c9f-309de3278fb5",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "f93058d9-d942-4091-b7d6-f6a43c041e41"
        },
        "item": {
          "id": "820e313a-a670-4964-83d2-bbbaa01e689f",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "cb342bf0-f06f-41f3-bd95-30c040c697ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f40f51e-47c5-4f03-bb7c-111d3fc5d54b",
        "cursor": {
          "ref": "65c4e3d6-69fc-4896-bb01-840b90739259",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "8486dca4-2bd2-4806-a768-1ae2a25e42be"
        },
        "item": {
          "id": "2f40f51e-47c5-4f03-bb7c-111d3fc5d54b",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "cb3f02ef-ccb0-4aa5-afa6-fb44aaf82688",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e503b817-1ad0-4b80-8e0a-d5cd7133da66",
        "cursor": {
          "ref": "ef29ea49-8f51-4c17-b699-19f0601b4d10",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "431580c2-89e5-42f4-8239-ac8885fde3d0"
        },
        "item": {
          "id": "e503b817-1ad0-4b80-8e0a-d5cd7133da66",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "593612a8-d070-41db-8b00-0d1f44b7af28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18c22493-0e63-44ee-aab9-bb3b10a163a2",
        "cursor": {
          "ref": "a08a9452-bcce-408f-af94-082bb4f1b038",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "93acbc01-ba46-4d59-bf62-cb66fb048bea"
        },
        "item": {
          "id": "18c22493-0e63-44ee-aab9-bb3b10a163a2",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "3285a5a1-1382-4612-8ee6-3dcebc02432a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1801725e-27b3-48b0-8626-3357ddc37c9f",
        "cursor": {
          "ref": "bd88e184-d04d-43f6-94fc-02dd3794d26d",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "e8e1cf8a-1fcb-440a-9658-50233e550af5"
        },
        "item": {
          "id": "1801725e-27b3-48b0-8626-3357ddc37c9f",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "54d25ae7-45a7-42a9-bfb0-6ac15baa2c14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0933a0d-6db0-492b-b1e4-80712c060bdd",
        "cursor": {
          "ref": "9fbf2ec3-76c8-4e4e-a85d-3a68f2ba2092",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "b08342ff-9d1f-42f7-b279-7c617d0bd765"
        },
        "item": {
          "id": "f0933a0d-6db0-492b-b1e4-80712c060bdd",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "496869d0-a82d-4674-b2dc-0175069c07b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "127fce5f-77e4-4202-bc94-867d50064245",
        "cursor": {
          "ref": "8064b136-58dd-4b2c-8a4e-931f7728fed4",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "be676def-cd80-4ace-9460-247d24b22ce1"
        },
        "item": {
          "id": "127fce5f-77e4-4202-bc94-867d50064245",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "07d9582a-b6b7-4993-8d81-2782ae8cc28d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1b1d2c6-e020-405c-a04e-f356887c99f3",
        "cursor": {
          "ref": "9ed8527b-d2f9-4521-9a27-fd25577c5865",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "f4b45dbb-b718-4640-9d44-742992fab841"
        },
        "item": {
          "id": "a1b1d2c6-e020-405c-a04e-f356887c99f3",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c9bb746b-022d-496f-9a88-0880c0cd6569",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d448ef9-19f4-41d1-8106-6f796ef2891a",
        "cursor": {
          "ref": "1ae5ded5-955c-44fd-ae9f-a40ee63b339c",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "53a08afe-2cf2-4e2e-b4f9-5130ae03a407"
        },
        "item": {
          "id": "6d448ef9-19f4-41d1-8106-6f796ef2891a",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "8529fae0-17c5-4e9d-8c4d-662588c05a54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e717e0b-6043-43c7-a771-49d43b35ad5b",
        "cursor": {
          "ref": "6a2e8f71-79fe-40f4-9ddb-53695c12435d",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "52fec70f-b7a5-4d8a-b2e4-ff72ea03a91f"
        },
        "item": {
          "id": "7e717e0b-6043-43c7-a771-49d43b35ad5b",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "f77714a5-988c-4641-8dc3-6b91c41710c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b940433-a89f-4dab-b59f-8be6c9da7aa0",
        "cursor": {
          "ref": "81085ebe-aadd-4cde-8f09-363e3057ce54",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "030e590d-78bf-45e4-9ee1-656bbdf27d69"
        },
        "item": {
          "id": "9b940433-a89f-4dab-b59f-8be6c9da7aa0",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "f3509230-0794-4c65-9e98-5dd0270c9d5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ace6e107-8530-4619-a268-9c2a6bab937d",
        "cursor": {
          "ref": "f2ee1856-9158-4767-a86c-c89467edcb26",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "a6cefc69-0546-4962-a606-4a68498c2bc3"
        },
        "item": {
          "id": "ace6e107-8530-4619-a268-9c2a6bab937d",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "99a31846-eabe-4d38-8186-2b6b712c4fcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "285407ae-1fcb-4c44-8720-07487544c67b",
        "cursor": {
          "ref": "ba87d960-302d-40b8-8bd1-945820794068",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "c4e8367d-590a-4aa5-8772-f808b02f8fbc"
        },
        "item": {
          "id": "285407ae-1fcb-4c44-8720-07487544c67b",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "dcf6c8e9-db23-4278-aee0-af1a6af767ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f31cb801-dcfa-400f-94f2-8cb8c4c4f43d",
        "cursor": {
          "ref": "c186d7b7-8fa0-4f9e-8cd4-b26979e45cc2",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "4c35deb5-2364-456d-97bd-e7f5e37361b0"
        },
        "item": {
          "id": "f31cb801-dcfa-400f-94f2-8cb8c4c4f43d",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "b5ef749f-d4e2-45e8-85ff-2c9a64e1252f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a233dc30-2294-4e38-8c09-a94dede5fc19",
        "cursor": {
          "ref": "bbdab506-efc8-47a1-91ac-2925a6e25bfe",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "a38c49df-0fa2-4473-b0c3-b5b1fd0d2a84"
        },
        "item": {
          "id": "a233dc30-2294-4e38-8c09-a94dede5fc19",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "489496d3-27a4-486c-9cc5-4da45476b3b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d258f442-2108-4570-9097-11043a023787",
        "cursor": {
          "ref": "63d86f20-c6c2-4d59-b15e-c7fd966d090c",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "6e601450-a412-4aa6-9c73-8856cb03e50e"
        },
        "item": {
          "id": "d258f442-2108-4570-9097-11043a023787",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "15207195-7987-489f-9d5d-ad49c5813446",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87a16311-fa63-499b-b2a0-a50e8ae22503",
        "cursor": {
          "ref": "f1472fe6-40eb-420b-af8d-2d677b3eb5a3",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "81e5c47c-17aa-4517-8b35-dfe8e8b92f7d"
        },
        "item": {
          "id": "87a16311-fa63-499b-b2a0-a50e8ae22503",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "c0bf1e79-de68-4468-8ad3-6d2fd1fdc132",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f0ed582-fe81-4744-8480-71ceeba2d45d",
        "cursor": {
          "ref": "1997306a-60d6-425b-9a82-10e7d5828425",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "05c7fc61-c44a-495d-9412-94d17c74099d"
        },
        "item": {
          "id": "6f0ed582-fe81-4744-8480-71ceeba2d45d",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "faa17623-5fe0-4aff-b25f-4752afe36e70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5896641e-464d-4a8e-b386-bb1d61a73bfa",
        "cursor": {
          "ref": "9afe287f-4bae-4dd5-8357-818ce7d1066c",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "983dedcd-5c2c-44a8-aba4-6feec1392f73"
        },
        "item": {
          "id": "5896641e-464d-4a8e-b386-bb1d61a73bfa",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "2c73ba9b-9681-4763-9402-d0fd367223a1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21030423-f873-4245-9c2d-7f71226e7c92",
        "cursor": {
          "ref": "131a8767-1fc4-4165-a3d3-6a0d3320ee7b",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "e11d6f18-3425-4502-8f1d-c5beae10d8dd"
        },
        "item": {
          "id": "21030423-f873-4245-9c2d-7f71226e7c92",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "f27e2d20-88aa-4df1-a122-969e11998d8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e2743fd-cb46-4cbf-b560-79432333f12a",
        "cursor": {
          "ref": "4e750753-5b4b-40df-ba25-2d101a773546",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "e8e7310d-03c6-4fb7-9dc0-c903015a0263"
        },
        "item": {
          "id": "6e2743fd-cb46-4cbf-b560-79432333f12a",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "3e7d24c1-a7be-4b85-a7fb-8674957d8a89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7a7f973-a064-49aa-934f-2caaae0e3ced",
        "cursor": {
          "ref": "d6be48be-d9d4-43e0-a6bf-cf2230d76570",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "26dc2c6b-98c1-4996-934d-52387a86ec50"
        },
        "item": {
          "id": "f7a7f973-a064-49aa-934f-2caaae0e3ced",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "27023aa2-d8af-4a40-8266-737a566f67ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4974184-fcaf-491b-bd45-74994c3b9ea7",
        "cursor": {
          "ref": "2c497c7d-068c-4734-a263-f01319744914",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "6c77b90b-d130-418b-8361-f4287ec8ba38"
        },
        "item": {
          "id": "d4974184-fcaf-491b-bd45-74994c3b9ea7",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "41dc53c2-5da5-4c2f-97af-e50217e67bcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0186d45f-9f19-4917-ad2b-d40a382e24c5",
        "cursor": {
          "ref": "bed1e77a-00e4-4067-8415-06d1a9b1c18f",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "2a3d95a3-f983-4188-aa5b-b9d8f97a10cd"
        },
        "item": {
          "id": "0186d45f-9f19-4917-ad2b-d40a382e24c5",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "722b551b-1a84-419b-b5ee-b5c719a4ce44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f1c7b29-6347-4076-ade4-c800647d8ebb",
        "cursor": {
          "ref": "a57a6bd1-bd4a-4937-bbe4-18c69395b778",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "4f379145-7113-4708-b759-56311e5f3cad"
        },
        "item": {
          "id": "3f1c7b29-6347-4076-ade4-c800647d8ebb",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "c46c9b24-048a-4527-8352-30f9e47291d2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 92,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "ba85a051-f95a-4af6-841c-826f11487400",
        "cursor": {
          "ref": "b9375887-1324-4f30-b36b-9f05986e6ca8",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "af994b78-f0bd-4d55-ad4f-1afda0277c4e"
        },
        "item": {
          "id": "ba85a051-f95a-4af6-841c-826f11487400",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "8aa99ac2-e593-4950-96d9-5c7dade6dbbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57d02fe4-f828-49bd-90de-c146bff35a6b",
        "cursor": {
          "ref": "94990b6a-0493-4fee-b987-1318c843f2a1",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "9d986eb9-4924-418c-8ae1-21e33e0a8771"
        },
        "item": {
          "id": "57d02fe4-f828-49bd-90de-c146bff35a6b",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "115507b1-a4bf-4623-949a-c6873b8bd37e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bf44653-9dee-446b-897e-7f3b4b977459",
        "cursor": {
          "ref": "33891312-f112-416f-b699-c7f8101874f2",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "7c7d3fd5-fe1e-4862-877b-f873103b0f4f"
        },
        "item": {
          "id": "8bf44653-9dee-446b-897e-7f3b4b977459",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "1fecf9ac-cefd-4309-9137-d09188740a1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63607b3e-2f36-4124-b42d-b58ac833165e",
        "cursor": {
          "ref": "f553c069-e4fd-46fc-bd61-5198624cefe5",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "d25fc1d0-e985-47f9-b848-df630cf9d28f"
        },
        "item": {
          "id": "63607b3e-2f36-4124-b42d-b58ac833165e",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "16ef9bde-dc5d-4e0f-99db-c3dafd357443",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c44c2fea-ba74-45bd-9785-afa56aecc67e",
        "cursor": {
          "ref": "4da384d0-6483-4b71-84fb-4bb511dc4823",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "78ee598c-06a5-4e47-a247-bab476179a17"
        },
        "item": {
          "id": "c44c2fea-ba74-45bd-9785-afa56aecc67e",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "177331c4-613b-4644-8a61-a2d706f280a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a17cc1e3-175f-4b26-b713-642ebf2aa159",
        "cursor": {
          "ref": "77bd7094-1a1d-458b-856d-bdca1dafd30d",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "a1dd3300-ec4d-47ef-a69b-1f7cef5c21fd"
        },
        "item": {
          "id": "a17cc1e3-175f-4b26-b713-642ebf2aa159",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "a898fe3d-338a-4936-98e5-6fa697e2d9cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac34d4b5-b574-40e8-8ddf-bf8bd3c700c3",
        "cursor": {
          "ref": "f1586a57-a85d-4cff-9cd4-630ce558f3b1",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "de4fcdfb-56bb-4523-b64e-c2c4f8f706f4"
        },
        "item": {
          "id": "ac34d4b5-b574-40e8-8ddf-bf8bd3c700c3",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "fa23c171-b572-4ad7-925f-97327ad318b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff65d3f6-5fa9-4a07-847d-9848590a249b",
        "cursor": {
          "ref": "140b23f3-d87c-40b2-99fc-73896eb2cd02",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "a789108c-b11a-4c46-91be-84ce67f10741"
        },
        "item": {
          "id": "ff65d3f6-5fa9-4a07-847d-9848590a249b",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "1076a5e6-e951-4430-9654-d12549476b0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20d7e54f-4474-47ba-978f-99a273888c0f",
        "cursor": {
          "ref": "d7fccab9-150b-47bc-bf14-a0c495ff6cb0",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "10e26712-9e9b-4fc0-979e-acf2ec4ccc19"
        },
        "item": {
          "id": "20d7e54f-4474-47ba-978f-99a273888c0f",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "dd4c85d9-e346-4421-9124-108b33da8970",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f475d8a-fddf-48f8-bf71-e074ebe90e6c",
        "cursor": {
          "ref": "3778d8a7-b677-4a6f-86c9-37d15462b1df",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "c9eb7e35-b926-45d3-b6b1-932fe9e490e5"
        },
        "item": {
          "id": "5f475d8a-fddf-48f8-bf71-e074ebe90e6c",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "05448ff3-e22d-41e8-9f76-8655cbada1c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83339b34-375c-4724-a390-bee428363b88",
        "cursor": {
          "ref": "5cc43e04-ac09-4a75-bd1f-8fd4c2e4dd6e",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "7ea65fca-ac7b-4380-9705-9e2ecc77ef50"
        },
        "item": {
          "id": "83339b34-375c-4724-a390-bee428363b88",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "1f25b50c-350b-4e68-b3e9-1b2cb45e1ba7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ab69430-5212-4853-84fd-fc2fe7585457",
        "cursor": {
          "ref": "33ee5441-a80c-4fa1-9128-7a73b4b59eb1",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "0e4025b2-d101-49ba-99d8-c2be61ada54f"
        },
        "item": {
          "id": "7ab69430-5212-4853-84fd-fc2fe7585457",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "514ea2e7-7d99-4d8c-bdc1-fea416d22ea6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a15bd50d-0a7e-405a-80ca-f0d258d187c5",
        "cursor": {
          "ref": "9c0c32ca-6f19-4461-86c3-29574cc2f74e",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "b9995d10-17d1-4eee-a04e-f2a0bafdd91c"
        },
        "item": {
          "id": "a15bd50d-0a7e-405a-80ca-f0d258d187c5",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "4f2dc7b6-2ec5-49df-a9cf-70b041f3b036",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99cae530-f41f-442c-9dae-6ad54bdf6b9b",
        "cursor": {
          "ref": "60a1ec11-aa44-4430-8d94-2a0b7c7e35e3",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "031552d8-20ca-485c-8c0f-68f0064106fc"
        },
        "item": {
          "id": "99cae530-f41f-442c-9dae-6ad54bdf6b9b",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "102a36db-75ea-441a-834a-cb922be392c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82109b7e-a85e-442b-a257-5a163b2dc537",
        "cursor": {
          "ref": "fe5d2777-7299-4257-b0e3-6e019cb88c36",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "31e2522d-0bed-4eef-9a73-5ccd04e213d0"
        },
        "item": {
          "id": "82109b7e-a85e-442b-a257-5a163b2dc537",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "2b3ed10d-60ac-48f3-81a9-236e61ec1e61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "842aa427-3a40-4cfb-8ab6-2eb831bece04",
        "cursor": {
          "ref": "9cf57775-d0df-4633-afd1-f826c6b28fc5",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "05326cc9-1687-4560-a5e6-ccb961988614"
        },
        "item": {
          "id": "842aa427-3a40-4cfb-8ab6-2eb831bece04",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "c145e214-5bc1-4f0e-9f88-819b86de0d50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bd1b0fa-b399-459c-b0c7-874accd54d49",
        "cursor": {
          "ref": "f852de11-dc53-4eae-a612-b37387fd86c8",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "ad5f9a95-54a7-404a-b0a9-99a793bbd45f"
        },
        "item": {
          "id": "1bd1b0fa-b399-459c-b0c7-874accd54d49",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "eeacb133-cfa9-4644-a58c-7546dc2e1597",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c7954e1-afc3-4cd8-956d-b71235ec251c",
        "cursor": {
          "ref": "4a54df1f-78a8-4106-b2d8-4a02c16fcfa6",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "a079ab5f-a9f9-4d92-9ea2-855d2da6e8c1"
        },
        "item": {
          "id": "0c7954e1-afc3-4cd8-956d-b71235ec251c",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "1f5e8565-4d29-48a6-bb53-f253d654247b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1f658e1-92bb-4ae5-b356-696a555a0054",
        "cursor": {
          "ref": "58082604-5315-4a97-8420-1742a280cbfc",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "a21b7a0d-6cf2-4be8-9db0-8112f8574fa7"
        },
        "item": {
          "id": "d1f658e1-92bb-4ae5-b356-696a555a0054",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "d79ceb38-0f9e-4c56-af32-47a91a87bec3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4069f7ed-909c-4b3d-98de-8eb7b76e7a3e",
        "cursor": {
          "ref": "d5281f5b-c1b3-4ea6-8cbc-467a1f3df202",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "bcaf54eb-e771-41a4-8e07-31a7788055a2"
        },
        "item": {
          "id": "4069f7ed-909c-4b3d-98de-8eb7b76e7a3e",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "64d59a52-c48a-43ae-a9eb-8eab2e61d231",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6de6da5-609d-48ae-bc4a-10329af13800",
        "cursor": {
          "ref": "1552b695-a611-46f4-b955-bc6f005d5230",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "b723a855-03f0-48cc-9509-b9180ab9a5ca"
        },
        "item": {
          "id": "f6de6da5-609d-48ae-bc4a-10329af13800",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "38fbcf8b-e1d7-4e3e-ae58-a7361306b5bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55ae998c-46e2-451c-8c2d-cada9d3ca2a3",
        "cursor": {
          "ref": "6594058d-7e80-4fb0-9996-040f6a68301b",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "8c4cd629-6aa3-4264-b590-59f7e7f18d73"
        },
        "item": {
          "id": "55ae998c-46e2-451c-8c2d-cada9d3ca2a3",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "dd7fe11b-0d46-454c-9c5b-ecdba86aa238",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfd8d8b1-cc05-4ca0-9fe7-664795424d4f",
        "cursor": {
          "ref": "e7bba56c-4e81-456f-8615-25c7f0369fd1",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "83497ce1-2871-447c-9051-c2cee2a75b0e"
        },
        "item": {
          "id": "cfd8d8b1-cc05-4ca0-9fe7-664795424d4f",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "d393a66d-584d-4a9d-a639-dd166777c552",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5ef32f8-111a-4c1d-ba16-b85d2524a72f",
        "cursor": {
          "ref": "e10752cc-5552-40fb-a7de-8d19e4596089",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "3acfff2b-f67d-414b-9c28-d51115e40a9a"
        },
        "item": {
          "id": "a5ef32f8-111a-4c1d-ba16-b85d2524a72f",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "98dd6e26-0c55-4cd8-b129-a6670a7289dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d385ee64-7f00-4b58-9cde-942fb850f570",
        "cursor": {
          "ref": "2d257724-0447-42c0-8a20-08ebf8bb2e02",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "f6083902-e255-42b0-b89a-c3e049fd59dc"
        },
        "item": {
          "id": "d385ee64-7f00-4b58-9cde-942fb850f570",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "757d5220-e015-4898-8cce-fac44cc08b1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e430802b-417e-427b-a9f7-37254b17a9e0",
        "cursor": {
          "ref": "54c7b584-1a05-490c-b797-a0f81aaf8ff8",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "a0724b9b-ffe9-4122-b73b-2d0e2254baa5"
        },
        "item": {
          "id": "e430802b-417e-427b-a9f7-37254b17a9e0",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "cf259982-60ff-4217-8638-dd29092a73c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a72ad64-9425-4fd1-b93a-ea7abd0024ca",
        "cursor": {
          "ref": "19d1593c-af02-4342-9b89-8d9afd13e126",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "c9c33683-7680-435d-bf87-d01714c8fe50"
        },
        "item": {
          "id": "4a72ad64-9425-4fd1-b93a-ea7abd0024ca",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "3b201d42-d67b-4a72-816d-d90ffca920e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3da0d40e-6f53-4d8c-ac58-e844caf33800",
        "cursor": {
          "ref": "baebc7ec-f3b2-4c70-b24e-a30041e3efb3",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "fb35ad58-1013-4fea-8597-60d3135d9343"
        },
        "item": {
          "id": "3da0d40e-6f53-4d8c-ac58-e844caf33800",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "98615261-093b-4be2-8237-c78e02fbdc4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a07b35a-5420-457b-921c-6c7c13b0e449",
        "cursor": {
          "ref": "da66a68d-e2fe-4b04-8452-691215ea3467",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "1ed0c6ba-ac2e-4377-a25a-541537b85b36"
        },
        "item": {
          "id": "5a07b35a-5420-457b-921c-6c7c13b0e449",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "40522869-a5cc-46ec-90b5-5b3739389bf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fc6d3a7-7e47-4155-b99e-ee6bcb828d3d",
        "cursor": {
          "ref": "4e0b5f4c-dd87-4c2a-b6b7-e410a1a63069",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "fdc616fb-75ff-471e-9a40-54e346d7c135"
        },
        "item": {
          "id": "7fc6d3a7-7e47-4155-b99e-ee6bcb828d3d",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "cdf93ca8-6ed9-4f01-b763-9e1c95c947dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "dd46aef4-922c-4b36-af87-ecf10d20919f",
        "cursor": {
          "ref": "ed6270a3-493e-43b2-baa8-0e2ef314bd49",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "6ca81841-9e67-4e73-b4d1-41d900afdd90"
        },
        "item": {
          "id": "dd46aef4-922c-4b36-af87-ecf10d20919f",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "2a700a01-8589-40a1-9e3e-2e58978274e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "6cbeaa98-262d-4c8c-ba1a-d62aaed0ddb5",
        "cursor": {
          "ref": "acf55b98-a2f5-4a8d-95cf-7a2860c5d8da",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "1dfab521-b472-4900-8671-48af33207bb2"
        },
        "item": {
          "id": "6cbeaa98-262d-4c8c-ba1a-d62aaed0ddb5",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "1a6bd3ba-9d5c-41c0-b014-4af6e4a5e6ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "60f96ab2-cbca-4648-8268-a0ba2b7cfc39",
        "cursor": {
          "ref": "228df59b-d543-4f57-a2b8-d61c34f41c07",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "94fe3e24-711c-4a0c-9930-9c757daef265"
        },
        "item": {
          "id": "60f96ab2-cbca-4648-8268-a0ba2b7cfc39",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "8d999270-e82b-42d4-bc63-90f76e02392c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "045cc019-e8a0-4ad2-89b0-553ca40bfad2",
        "cursor": {
          "ref": "33734dfb-393e-4334-bca0-e14746daf012",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "a765c8ac-1e50-417f-aecd-e197a9e66078"
        },
        "item": {
          "id": "045cc019-e8a0-4ad2-89b0-553ca40bfad2",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "3ad2aa5e-b525-41da-a47f-8730cab36b5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "9364d8b3-aca3-47ca-81b4-c66edcd9b859",
        "cursor": {
          "ref": "9897d2a9-6c53-4095-a125-2e492bcbb709",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "f8fcd56c-64b6-4135-bc7b-9b5edbdf37b1"
        },
        "item": {
          "id": "9364d8b3-aca3-47ca-81b4-c66edcd9b859",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "2a319636-a840-4bdb-92b2-27ee5a2c0421",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1197,
          "responseSize": 1523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "4a9ff199-c965-43a1-8518-174a153fe5ff",
        "cursor": {
          "ref": "ff218136-0bc4-436e-8b94-445fd71f90b6",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "615c727d-04cb-4d36-90ac-2a3324fea5f9"
        },
        "item": {
          "id": "4a9ff199-c965-43a1-8518-174a153fe5ff",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "29917002-5eff-4ed7-8679-0812af85d93c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "a1245f9a-a0d2-4a9d-9ada-9c8dec0d68ec",
        "cursor": {
          "ref": "ffae4d22-6e77-4273-952b-dad5ba59301c",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "70580e24-90c3-44a6-8db1-4fb7e4cfce3c"
        },
        "item": {
          "id": "a1245f9a-a0d2-4a9d-9ada-9c8dec0d68ec",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "16841a75-7279-41e5-a2cb-2d5050c4d5e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "f93aeec6-b5fa-40a8-bb42-dd41a3853a67",
        "cursor": {
          "ref": "2cb8ef4b-0875-4a1e-80bd-8c4af4905bf5",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "c9f7a188-c576-4c4d-b866-58cfb3e7aba6"
        },
        "item": {
          "id": "f93aeec6-b5fa-40a8-bb42-dd41a3853a67",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "5d32649e-1c49-4270-aeca-cf907bd9c630",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "2fb49d7a-cb07-4b6e-86da-cbd583ee85ff",
        "cursor": {
          "ref": "4b3383dc-e00a-40e9-8ad2-ea6c371989db",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "03a03a3d-6a8e-472b-a465-d3aa13e0a0b4"
        },
        "item": {
          "id": "2fb49d7a-cb07-4b6e-86da-cbd583ee85ff",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "65bfcfd0-a72e-487c-8093-b5e85b3918fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "6a1d533c-74b2-4d90-a6a9-3cc310db3684",
        "cursor": {
          "ref": "c20fa303-bf5c-4833-9b71-1ed37995571d",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "5d845ba2-3d85-4b52-8ff8-f136f4b0f720"
        },
        "item": {
          "id": "6a1d533c-74b2-4d90-a6a9-3cc310db3684",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "46865452-2b56-4e7d-b978-7f85479e7d38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33c9eeb2-0ad1-45a7-886a-4fdde5b2e878",
        "cursor": {
          "ref": "a9b6f5a4-4045-4cc2-8205-e29024b9ef39",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "bfced578-9527-4ae4-bcf9-b327aca59ae8"
        },
        "item": {
          "id": "33c9eeb2-0ad1-45a7-886a-4fdde5b2e878",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "9842a130-968e-41c6-84c5-020fc9351a07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e16d012-24a3-4496-8dad-8bbc587ac46a",
        "cursor": {
          "ref": "7e73712e-462d-4dda-b8c3-5e0fcef9a29f",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "2f7ce4bc-7500-4483-990b-01f22a654167"
        },
        "item": {
          "id": "1e16d012-24a3-4496-8dad-8bbc587ac46a",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "18423d7d-1836-4f6a-aa50-5210e4fc25b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "571be146-57c5-49c6-ab69-c898d6f413b9",
        "cursor": {
          "ref": "f5d9e9be-bc61-448d-9208-0a7a18b38275",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "e13689a8-a131-439f-a54a-487e394d41fe"
        },
        "item": {
          "id": "571be146-57c5-49c6-ab69-c898d6f413b9",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "720ca2a3-4602-42aa-9be7-0ece2f2514fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edb8dfbf-5442-4472-b3ad-d270f5cce516",
        "cursor": {
          "ref": "24ebe232-3abb-4f9c-87f7-42485039d825",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "191239bc-eced-4ac0-b4c5-2483981697a2"
        },
        "item": {
          "id": "edb8dfbf-5442-4472-b3ad-d270f5cce516",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "cc18f2ef-cb43-4d3d-8b32-025f18ff5fde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a993e79c-a9e3-447c-8138-0f377171df95",
        "cursor": {
          "ref": "f6d427fe-a386-4868-8187-8227e591619c",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "1fbef376-7322-462e-8b37-ba7ebd1d8762"
        },
        "item": {
          "id": "a993e79c-a9e3-447c-8138-0f377171df95",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "c6859ca6-3f91-4569-bffe-a90f6555d5c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a057b047-5587-4770-89d9-0ba2dab9d345",
        "cursor": {
          "ref": "061a2cc8-4ffe-4713-b4bd-11f47986ca61",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "c1d4276a-bb0a-4a48-a4f4-3dd40dbb3d69"
        },
        "item": {
          "id": "a057b047-5587-4770-89d9-0ba2dab9d345",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "ed39d3ab-9923-4bba-93b9-99895133b606",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22c2aa5f-13de-4038-bf3e-07e956166289",
        "cursor": {
          "ref": "88c1164b-6a7d-47eb-a9cf-8e3d152f8fb1",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "500a4b22-b297-4a4a-a22f-3da077168d95"
        },
        "item": {
          "id": "22c2aa5f-13de-4038-bf3e-07e956166289",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "dfbe8a31-d93e-41ed-a21e-dd9237d89d90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a72adf3-c1f3-4907-9de4-638b0e5f171d",
        "cursor": {
          "ref": "7206f698-26c1-4fdd-9dc4-dc79ffcd0095",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "149c755c-7a1f-4a78-a331-f03cd8bb2a1d"
        },
        "item": {
          "id": "9a72adf3-c1f3-4907-9de4-638b0e5f171d",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "2b6518a3-065b-4784-b9f5-d6cd471ace24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fe4e2c9-45ba-4ad0-923f-49123cdda7e6",
        "cursor": {
          "ref": "60ba4480-91f2-4458-b655-e9bfd9bd4699",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "43366c17-0b7c-4ef0-bf7b-b927177acf7a"
        },
        "item": {
          "id": "8fe4e2c9-45ba-4ad0-923f-49123cdda7e6",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "b0b0ceb8-5393-47cb-8de2-4694ff9eb16b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d63a4417-8a44-4b82-aec8-87d7a2e8ecdf",
        "cursor": {
          "ref": "f86ad599-9ea5-4a38-b1b6-1d2be441baae",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "8dc3491d-88dd-4fd7-9491-b27300678973"
        },
        "item": {
          "id": "d63a4417-8a44-4b82-aec8-87d7a2e8ecdf",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "6bfe052b-381e-4c94-8c5d-ae950922b23d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff866d0f-ed46-4564-90c2-0c098c328273",
        "cursor": {
          "ref": "59b8bb23-0706-4e15-b6e0-c6187fef2155",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "81f8a460-4e96-408f-90be-cc95832c0655"
        },
        "item": {
          "id": "ff866d0f-ed46-4564-90c2-0c098c328273",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "5deabd7f-a832-4646-954c-fcf1324d7aae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18904c6f-2ec7-47ad-8cd4-3a2757ee2565",
        "cursor": {
          "ref": "0298b2a8-c7dc-4d0c-bc2d-10225ca8948e",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "f4a67599-cde1-42e2-b6f6-f946eb11d0c0"
        },
        "item": {
          "id": "18904c6f-2ec7-47ad-8cd4-3a2757ee2565",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "fd28f2e8-6359-4407-b844-7588db67f358",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fce7fd5-7879-42db-8c3f-c79e3a8ae4cf",
        "cursor": {
          "ref": "d8b921f1-5947-4649-abd5-55129f742a9a",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "9aff8706-7d09-4445-931d-fc5185569b76"
        },
        "item": {
          "id": "0fce7fd5-7879-42db-8c3f-c79e3a8ae4cf",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "f0ae594f-2586-45e0-a7bb-81db80ef1d6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1220,
          "responseSize": 1517
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "505f2955-c185-4b05-b5da-09aa98acaca4",
        "cursor": {
          "ref": "2ed47d75-b34b-4573-9238-219d058c7873",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "2918b61f-6e3e-4ecb-9ce8-a75a78da0b43"
        },
        "item": {
          "id": "505f2955-c185-4b05-b5da-09aa98acaca4",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "5ffc92a5-2495-4dd8-8145-215d2be14a7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1246,
          "responseSize": 1503
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "c1675cd3-9b15-4780-b66a-d416066991a8",
        "cursor": {
          "ref": "6aa6a8b6-bef0-40f2-93fd-a86f61f6e5e1",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "4d3f1a1f-a0cf-401e-af26-436e0e47293e"
        },
        "item": {
          "id": "c1675cd3-9b15-4780-b66a-d416066991a8",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "20f5f2b1-086e-49b7-a42e-0457a9a91e0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "b2417b31-5b31-41c5-952a-1bb4295719ee",
        "cursor": {
          "ref": "3e54b74a-b7b9-40e4-a69c-f6adef455855",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "977c4550-dcdb-4879-92e2-354efc7406e0"
        },
        "item": {
          "id": "b2417b31-5b31-41c5-952a-1bb4295719ee",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "3f2739fc-4428-4776-897d-ed745b1a6e5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1251,
          "responseSize": 1502
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "89352e0b-cc12-4074-a064-b2a1bf699500",
        "cursor": {
          "ref": "d50488d2-fe02-4592-ab18-59dfc243cb22",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "a715ea05-b254-4681-9c9e-7d9494b5ddd3"
        },
        "item": {
          "id": "89352e0b-cc12-4074-a064-b2a1bf699500",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "7a5caf93-10fe-4c1d-9837-58e4d7bf63d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "bc87ba5c-c5a4-4497-8e3f-d326f4383818",
        "cursor": {
          "ref": "facc401e-39e7-4ff0-a07f-28c8206ca727",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "291c9a50-53cf-4c57-9643-ad904333c174"
        },
        "item": {
          "id": "bc87ba5c-c5a4-4497-8e3f-d326f4383818",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "58860056-b4c1-4046-a556-b7cc7e0c5377",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4731de28-8e79-4618-86b4-94cb0103113e",
        "cursor": {
          "ref": "494b4746-6009-4f48-b7fb-b01ec7bdca33",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "a3af06c9-789f-476e-a0d1-62402394d0e8"
        },
        "item": {
          "id": "4731de28-8e79-4618-86b4-94cb0103113e",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "bf632a06-0f3f-4192-b5a2-cabb2ffcf168",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e632f34e-ec0b-4b20-a85e-0bdbb2883314",
        "cursor": {
          "ref": "50d14f83-abbd-4307-954d-2af57bb78c33",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "69022fc7-7eb5-4108-932d-d2ecdcd33e36"
        },
        "item": {
          "id": "e632f34e-ec0b-4b20-a85e-0bdbb2883314",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "0072a5d6-c43e-4032-be29-282bb706f1c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66c2b80c-48c7-475c-8963-fd9776717078",
        "cursor": {
          "ref": "b4fbc7c2-4c75-4e67-be9a-113c19961892",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "58feb741-696d-4905-9669-7ad920ea71dd"
        },
        "item": {
          "id": "66c2b80c-48c7-475c-8963-fd9776717078",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "bb8fa9d8-0b97-485c-8763-2c1698d3f72d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5cad649-081c-4a2d-a5cf-a1cc8c334328",
        "cursor": {
          "ref": "c953d5f9-ab40-4f12-85b3-083ddfe218be",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "5109c999-b5b4-4e61-993e-b66892ae25e1"
        },
        "item": {
          "id": "e5cad649-081c-4a2d-a5cf-a1cc8c334328",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "91746a6d-b6c3-4cc2-9218-0a8d84de0224",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "346fc14e-f327-414e-8403-f7fe4ad6e50d",
        "cursor": {
          "ref": "3607c785-b23f-4fc0-92d7-7c11a4418c45",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "a75eff12-5383-4974-8a57-d358b8554da3"
        },
        "item": {
          "id": "346fc14e-f327-414e-8403-f7fe4ad6e50d",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "010b6e1c-ce2b-4721-b4df-ecad9d16af61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5d7932d-8829-4f4b-a60d-4bdc1635bb3e",
        "cursor": {
          "ref": "e442b09d-d33e-4ee1-9c50-6ff82d6c2a9a",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "306a118c-36b6-4f17-a80d-37b773e6cc92"
        },
        "item": {
          "id": "c5d7932d-8829-4f4b-a60d-4bdc1635bb3e",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "bc685a88-3f52-4eae-b693-79a95828a2a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe1b7ead-54f5-4153-a0ab-f58d4822be85",
        "cursor": {
          "ref": "05e64e85-5ff8-4dc5-95be-2c71d2c72fc8",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "ad70ed13-6c00-4a1f-9cff-f0866151e106"
        },
        "item": {
          "id": "fe1b7ead-54f5-4153-a0ab-f58d4822be85",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "9d780335-77c0-4480-bc37-3fbd394411ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0adb6e71-e39d-498f-ac02-fbd7db955cd3",
        "cursor": {
          "ref": "a26ee596-fbae-471e-b92e-b5ecf06dadf4",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "ce739ef7-7bd2-4264-9743-d29dcd209a50"
        },
        "item": {
          "id": "0adb6e71-e39d-498f-ac02-fbd7db955cd3",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "817ba13d-7e06-4b0c-9f26-845b80894242",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86edf9dc-8464-434c-9a01-1a34e67d29c1",
        "cursor": {
          "ref": "0d7f49f9-78e1-4c09-98bf-33b0b214ccf1",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "0994622e-ce5d-496c-b3d6-984eae792f31"
        },
        "item": {
          "id": "86edf9dc-8464-434c-9a01-1a34e67d29c1",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "7b5d0461-1de0-4c79-aba2-4f5d3527d157",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "187d477c-d769-45dd-9d58-b5079de97a00",
        "cursor": {
          "ref": "8031f450-e17d-48e4-9a06-833966014c00",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "3743a7cf-f7a9-4976-9849-01a51bb549fd"
        },
        "item": {
          "id": "187d477c-d769-45dd-9d58-b5079de97a00",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "b5aa87fd-4b5b-4ac6-9b6c-3562bde44f80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84866614-3adc-4f97-8fa4-0f22b5ce2567",
        "cursor": {
          "ref": "06bca4df-adec-4920-b46a-d70e8f91eeff",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "a6132694-23b2-484d-aa3f-346d5ca1c7c4"
        },
        "item": {
          "id": "84866614-3adc-4f97-8fa4-0f22b5ce2567",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "a8cd51c6-1109-41bf-8154-3eca6f00372b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39bab41c-0412-48a2-abc0-6bd83747fb5f",
        "cursor": {
          "ref": "003fe10d-69e7-47cc-bf8a-ec0c0de42f2b",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "f97b659d-c7ab-4a01-943c-87f61471f815"
        },
        "item": {
          "id": "39bab41c-0412-48a2-abc0-6bd83747fb5f",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "aec0f9ac-bb34-40fc-8130-bcd754ef6a4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40bf6dcd-a6e5-4e76-aa39-645906fcbfcd",
        "cursor": {
          "ref": "61608f2c-b2e1-4816-807c-dfa3358aefcc",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "93fb57a9-5c05-4162-aa12-26fe68acfaab"
        },
        "item": {
          "id": "40bf6dcd-a6e5-4e76-aa39-645906fcbfcd",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "9a277d4b-e9f1-4fff-b04d-c25a4e6db72f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c45063a-4380-4d49-a126-1c5048ceaf1f",
        "cursor": {
          "ref": "8fe8c2c8-79fc-4cec-8b39-b16ba7fe7bdf",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "9522e1ad-7878-4c18-bea4-9a38d1bd33c4"
        },
        "item": {
          "id": "5c45063a-4380-4d49-a126-1c5048ceaf1f",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "69e6a144-74fb-42bc-a73d-9ced1e34130a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85acda1a-6a61-4511-9da2-f122026a061d",
        "cursor": {
          "ref": "9b16b04a-16d1-4742-b4a1-c22dc3a0cc2d",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "16cfc53b-3489-4bb2-a906-d5602724d1a4"
        },
        "item": {
          "id": "85acda1a-6a61-4511-9da2-f122026a061d",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "253a7298-fe23-4866-90d6-cb9cc8d06cf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61fa03f1-5153-4154-83cb-a1308f2706f8",
        "cursor": {
          "ref": "d0aef8c0-2216-4812-bafd-954c5cd13e9b",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "7084c61f-8412-4bf3-90f8-9a672a847900"
        },
        "item": {
          "id": "61fa03f1-5153-4154-83cb-a1308f2706f8",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "973ea273-0873-4215-8b32-a069f45808ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c892a271-6e66-473e-83c2-a25bb4efce79",
        "cursor": {
          "ref": "af16893b-7ee3-4dc8-864a-5ede02cd8d9f",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "5683c9b6-c889-41f9-8117-7f7a600b80a1"
        },
        "item": {
          "id": "c892a271-6e66-473e-83c2-a25bb4efce79",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "a1f391c0-7c5d-4479-b9bb-77e0719783da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44d18adb-2e32-4865-a8e1-215afcc96530",
        "cursor": {
          "ref": "cdc34eca-e1cb-4329-aad7-dc4a8d17e440",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "fbc90403-cde8-49ba-8f21-fc47263db8f5"
        },
        "item": {
          "id": "44d18adb-2e32-4865-a8e1-215afcc96530",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "3a0ec9c6-aee8-41fe-8ae5-e74a435b6fcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "583e923d-19ac-4575-a2a3-8ed0c480bfc0",
        "cursor": {
          "ref": "1e9bff67-4bf6-4305-81e0-4e7ecc346f5a",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "1deaed5e-49d0-4eb6-b724-f2715d5b87e5"
        },
        "item": {
          "id": "583e923d-19ac-4575-a2a3-8ed0c480bfc0",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "e9b5aa32-8b8b-4cc3-a6cc-28e1f1826c61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "765387b2-3f2d-414f-95d6-df05ba89ab02",
        "cursor": {
          "ref": "277e6c26-b005-49c3-868c-f0e73e12c547",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "c1a3d6d0-5de3-45fa-b876-256b7733e0f7"
        },
        "item": {
          "id": "765387b2-3f2d-414f-95d6-df05ba89ab02",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "bbd7063f-5cb6-43b9-b781-d59156012c3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "828dd8f9-864e-47d1-9b19-2a0900303513",
        "cursor": {
          "ref": "8f09e9c4-d03f-43da-b429-f4773c8d006e",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "c881ba5f-7001-4ce6-9f71-37be49646200"
        },
        "item": {
          "id": "828dd8f9-864e-47d1-9b19-2a0900303513",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "43c5998e-54ef-4463-bb8c-625c18b572a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e47ef8b9-7556-4a97-830b-e6070bb6e7e2",
        "cursor": {
          "ref": "902f7524-f1fc-4b10-9386-ecf8914af339",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "cdde0300-1452-459f-ba78-cc15a1f483a3"
        },
        "item": {
          "id": "e47ef8b9-7556-4a97-830b-e6070bb6e7e2",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "34712e17-0925-4d26-814a-c24b80438b22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df1fc08e-01df-4c9d-a55e-6374d8df9186",
        "cursor": {
          "ref": "3ec0d53e-c546-4c6a-a853-d096158afd4f",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "414497f2-c984-4242-bf46-f036109721fa"
        },
        "item": {
          "id": "df1fc08e-01df-4c9d-a55e-6374d8df9186",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "a54a5919-4e81-4460-860b-d3811256623f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0784838-0478-44bc-978e-7683ee9c1764",
        "cursor": {
          "ref": "a9cb8b13-629c-4091-bb85-038c2e599d1e",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "dea4e907-caba-4f81-9832-6910b3d8ac85"
        },
        "item": {
          "id": "b0784838-0478-44bc-978e-7683ee9c1764",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "3dac80d4-9384-429d-821c-f02a48b3774d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bfe4915-75b1-47a0-8287-ffd91dabdc17",
        "cursor": {
          "ref": "8c0ee93d-c65b-4e10-9e47-df33c76bd3a2",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "a5ca8045-4d80-4690-919a-0a497c902d63"
        },
        "item": {
          "id": "4bfe4915-75b1-47a0-8287-ffd91dabdc17",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "e5da89d0-b5f1-46cb-86ab-83080227cec5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dd32c83-3e6e-4af1-92fe-6211db6b9287",
        "cursor": {
          "ref": "cbe2ced0-7997-47bd-9e5c-2f44e7cf0ae1",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "2713b0ae-c11c-4192-9d4c-e13050e0e6b3"
        },
        "item": {
          "id": "4dd32c83-3e6e-4af1-92fe-6211db6b9287",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "443f5f54-72e0-4200-9113-5abb23cf8d20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2426521f-dce7-416f-8aee-251093691fd9",
        "cursor": {
          "ref": "397ad423-ac0f-47af-9bb0-d520eb974a8d",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "596d17bd-8f06-41a6-9a50-e67e0a4ab81d"
        },
        "item": {
          "id": "2426521f-dce7-416f-8aee-251093691fd9",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "832e1b19-2e67-47d4-82e5-58a25b405afb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51ff3386-a48a-4bba-9f29-a000b8a2c638",
        "cursor": {
          "ref": "4f7c9bae-aaba-4089-81c4-6e2e753e2d63",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "91518ba7-5826-4429-8634-15dcec3b55c0"
        },
        "item": {
          "id": "51ff3386-a48a-4bba-9f29-a000b8a2c638",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "1f61313a-a44e-4bf2-8e37-22e1f46acbe9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "138b7f12-fb85-48bb-a5ba-02376d8c29f9",
        "cursor": {
          "ref": "201fbbb0-f123-4743-98bd-a6fa9baf2f8e",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "a3efe446-f511-402c-b801-ecd2cad1ca61"
        },
        "item": {
          "id": "138b7f12-fb85-48bb-a5ba-02376d8c29f9",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "2a10e7c9-fd3b-48cb-ab34-130060d021ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a34801d0-5adb-4ac8-ae6e-e9d15d7977bf",
        "cursor": {
          "ref": "fdfce2de-e14c-48ea-a455-d9387e87fc67",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "4ec194f2-b6cd-4133-9610-ab68a5989a13"
        },
        "item": {
          "id": "a34801d0-5adb-4ac8-ae6e-e9d15d7977bf",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "ed39c526-e5ea-4158-8cc0-668683064e71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd6a2b2c-5985-47b3-8c05-b4c3e854146a",
        "cursor": {
          "ref": "75a4f214-10bb-4451-b225-1ff252d2d3f4",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "9ae873de-89ff-41af-854e-a805efdb7beb"
        },
        "item": {
          "id": "dd6a2b2c-5985-47b3-8c05-b4c3e854146a",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "7bafdaeb-8ae8-49a4-9325-f7fde9f7e54e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce3f6057-ef5a-4e3d-ac13-0520a81b8b07",
        "cursor": {
          "ref": "94a608c0-5064-4b16-b413-d31cd962ca7e",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "a5f6187c-2f47-4cba-b14b-347583d5bc36"
        },
        "item": {
          "id": "ce3f6057-ef5a-4e3d-ac13-0520a81b8b07",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "8d7a3333-8816-4d94-914c-daccaf57b68e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f18ff59-8819-4ec9-97dc-c99950f8c36a",
        "cursor": {
          "ref": "cfc85837-e9b0-40a6-a185-57ee1533d8aa",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "af2820c7-be9a-485a-9fd1-270fa0023d23"
        },
        "item": {
          "id": "9f18ff59-8819-4ec9-97dc-c99950f8c36a",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "8d493418-a86c-4933-9688-f1c94c8c815d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a81a6f0-ae17-441a-9b77-d88865d7a6a1",
        "cursor": {
          "ref": "bafed6b2-2597-4646-a627-76ac66e1dd95",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "ca02de08-6a41-4a14-8aeb-cc17b5860e13"
        },
        "item": {
          "id": "5a81a6f0-ae17-441a-9b77-d88865d7a6a1",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "9f7c8f67-753d-4b59-9e92-c946bbebf0bd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65cce737-35ae-459d-9dc2-0766c6ce78f2",
        "cursor": {
          "ref": "a649c15d-019f-4c56-9b48-c0210157084f",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "02176053-cf20-4d26-a9df-f049d225ff63"
        },
        "item": {
          "id": "65cce737-35ae-459d-9dc2-0766c6ce78f2",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "5af71235-adc0-4501-99b2-b3481eec3020",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 1083
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "e29798e5-a84b-4b98-ac34-087cbcb9a2c9",
        "cursor": {
          "ref": "4e7baaee-d2b4-4fe1-a041-a1a6e3372fe4",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "ac02239b-4bd0-4ed6-8acf-12d74e74789b"
        },
        "item": {
          "id": "e29798e5-a84b-4b98-ac34-087cbcb9a2c9",
          "name": "credentials_verify"
        },
        "response": {
          "id": "30731d16-064a-4d93-8185-1ef370e16675",
          "status": "OK",
          "code": 200,
          "responseTime": 1236,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc5d398e-7bd8-4883-8461-1f40895a70cb",
        "cursor": {
          "ref": "cad6c313-f15f-400f-8c14-f7ce7a20a57d",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "895a549d-c603-48ad-b69c-ca7c84958be7"
        },
        "item": {
          "id": "fc5d398e-7bd8-4883-8461-1f40895a70cb",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "0ec5423d-7f82-47d7-b13f-8389151fcf9e",
          "status": "OK",
          "code": 200,
          "responseTime": 1260,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "a91e27ae-f5b4-47cc-858d-b4eba8c80b61",
        "cursor": {
          "ref": "498538e8-8c8f-468d-bb3f-fb6b7ec735d9",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "2a72937e-8a0a-44ec-ba32-ea17eadc6031"
        },
        "item": {
          "id": "a91e27ae-f5b4-47cc-858d-b4eba8c80b61",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "86ab3c71-5923-4690-9492-e3102f2bac5d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a91e27ae-f5b4-47cc-858d-b4eba8c80b61",
        "cursor": {
          "ref": "498538e8-8c8f-468d-bb3f-fb6b7ec735d9",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "2a72937e-8a0a-44ec-ba32-ea17eadc6031"
        },
        "item": {
          "id": "a91e27ae-f5b4-47cc-858d-b4eba8c80b61",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "86ab3c71-5923-4690-9492-e3102f2bac5d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6865b0bc-5e66-4d11-91b1-a3580001fc2e",
        "cursor": {
          "ref": "84a23e22-2acc-4428-80ce-6e5e34d61ca0",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "1753173a-e53d-4dbd-b393-066abfc8e938"
        },
        "item": {
          "id": "6865b0bc-5e66-4d11-91b1-a3580001fc2e",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "6042a952-0e03-4752-933b-cf8455307ccd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc3227fd-c6d4-450e-92aa-b962ebee2802",
        "cursor": {
          "ref": "cc63ed66-1d19-48cf-b663-a615e92f5bef",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "28027b89-562c-4192-b9bd-f69747859498"
        },
        "item": {
          "id": "bc3227fd-c6d4-450e-92aa-b962ebee2802",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "ef2d30fc-d686-474c-bdff-998a71d1b350",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}