{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "537343f4-0346-4bd0-b826-934a163a5bd4",
        "name": "Clear Cache",
        "item": [
          {
            "id": "ca68af3b-7395-4e6a-a6b4-08b869eb7df3",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c3b206d4-f4fd-4f9a-9987-285c3b9739fd",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "6b78b5eb-c062-4009-b467-f4ada348772d"
                }
              }
            ]
          },
          {
            "id": "b458845c-85ad-43ee-8bd6-4b35a68667d9",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c8488f9d-6575-459f-a6e0-6c3ad207935e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "6af3e7b7-600c-4e70-9974-110fae1ce10e"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "39cb859c-8ea0-4491-9f55-2bc2c4be1d0d",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "2901f4f3-767f-4bb5-a4bd-8d4ed03732c8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "86e34902-8d72-46c9-8da8-ef243f6f6230",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7bf482a1-1ded-4480-84ad-5a92c218ccbd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3eb6365d-1e23-4d3e-86e7-b37570087d50"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cf8ae6c1-afa1-4c27-82cb-c120c60da331",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1199e533-ebab-4eee-a1b8-c74c551c5c8d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "072ed718-d63b-45f7-91b8-6c807f760c4d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "475af517-22a8-4573-b8fd-f874edd1ffef"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "daae8835-9d30-4820-91a9-88adeb23bcd1",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "56e722ab-99fa-4ec6-887e-554f2b2d107e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "47a2632c-6d1b-43ad-8364-efe531a402b1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "23f8866c-2dec-410b-83f5-f365b1a81346"
            }
          }
        ]
      },
      {
        "id": "3c78ce9a-7b0b-494d-89dd-b61281c90670",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "55224f5d-482f-4b60-804d-2e4df554ac12",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8f042bea-0e3b-4b5a-aced-d06a6f6d6a85",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b98e28bc-b5a6-48bf-99d7-9ddead372016",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c01c71a9-7bbc-4bba-81e0-21416160e8ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f6a45458-376b-446b-b8de-c6ee5de14a4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ee8b548-72ad-470a-93bc-42473af2faf7",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16e47c0c-3118-42d4-a9de-c0f178642ee6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ac73f8db-8015-4e17-8b6d-aa7366830ee8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b424df88-9c14-4cc4-944e-b5921bc39c93",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb278c62-34f1-4a0b-9e19-01ca36eccba9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "092b85d7-d7e7-4346-8b01-4e1fb03ea3de"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b1cefc6e-f684-4894-a1b3-a3239d17adb7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0d157e7a-ecd6-4332-b675-23d31afb2bd6",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a4c6c50-6c48-480e-b140-fd2288de4a33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2bc2149c-ec1b-4131-bbf4-3c0d787b0e41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8188dea-cffd-4e3b-8d99-dbbff74ff68c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6877d6ee-9fc2-4926-a499-af4b24292e6a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "072a56db-9370-4ce0-8da2-43fee3df0eaf",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c0b05732-16b4-41d3-ad01-f8dd787408dc",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ea6f956e-db50-4976-81eb-38026ad29409",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "31359fd3-21de-4334-90bd-390e74b88585"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ee1111d7-c62b-4781-84f5-b81b106aa773",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "c10a0638-fb69-47b6-afdd-b404488bd014"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b71d1cd2-f14b-46eb-858f-276ebf427f38",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2514faef-97db-44cd-badb-cfa6ca7e3c8e"
            }
          }
        ]
      },
      {
        "id": "73ba8e28-09df-4595-9823-39d22bc01e8b",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "537494f8-89a4-4b98-a5ec-e6ba69486bdf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "479a69e3-aaa0-4f0b-8efb-d8b86df7b2a0",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "1a0192b9-4b08-4057-a10e-00abe377b529",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47470b06-34f8-4aa4-8ac0-865fed01d033",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bef5e7e-d683-4b7a-bf4c-df502bf699a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "401ef4be-b443-4059-8708-9d8e1e22c103",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0227ca86-08f5-4c41-9ae9-32465d6ea2ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfeb03c1-721f-4fb4-b81c-7c4f4fc60696",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ae58705-445d-45a8-9261-a1759b42978f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e89d6674-cce3-4988-9778-252491a1fa5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55d2ec5e-e90c-4e0a-a316-07565d3d3cdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "56aa62cb-87aa-40f6-b282-cbc078719d6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dd8edd1-6105-417f-9513-0ecd3c1f7da8",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90ae4d0f-6b3c-4c45-878f-1aafd1d6fe9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b5f42ce-bb52-4c91-adcc-b6114b6348e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32ec861f-8a57-44c4-8848-b44d6a4df336",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4a661d58-4aac-41dc-a11e-a6bd60a4fe0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33f5b320-23d2-45bd-9723-57fd84cc63dd",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab48835a-80f5-450c-8525-2d13ac7243f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bfda4e3-777f-41da-b3f2-b012b55ec1eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2b01d80-ffed-464a-b92b-393485e95305",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "644f7fd3-bd72-4ddb-8b54-989704a6dfc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c62753a-c3ab-4086-a596-a35fb956832f",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26e940ee-d6cf-4126-a283-5253b1f80492",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64233c0b-1c34-4586-a4b7-e95d71aa6605"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07bbcae4-c23c-4ec0-8c83-57401e815b40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e166a419-5dfb-4487-b391-f118aa5b8002"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5e8977b-bbe6-4331-970b-4cf7805bfbfe",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1c8d6cd-bd47-421a-bd8f-85976f172992",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3100f1c3-f0d8-49a4-8698-20ef743b8625"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "defb9bad-d881-4e88-b2df-700e98753ff7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "efdc6850-2f95-4da5-8443-152af3b30fba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75515f4d-0fd5-4732-943c-c1d208677144",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adae2182-6a42-445e-833c-2b4c083aed9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b53347b-b5d4-47b5-9755-3a9cb62c3c01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f03a20f3-d703-4674-9c8e-972b9bd43020",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "36a126f5-4265-4870-b9b0-26d4b16bf996"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7616bf5a-1a1c-4af3-bfaf-3e03d2727956",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19455293-68d1-43de-b2b3-2658e9025e5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e953b93a-3ebf-473f-94b5-585d8263b638"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd37c7df-8665-4ba8-97f7-7add3f2d9ac6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7001b7e3-e5d2-42b4-b5d0-6107ebd1e195"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f1a07de-3eca-4437-804b-163d580f8ead",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b75ed38-12a0-4a81-9261-8706557af221",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3aaa4855-f8aa-4454-9e9e-fd75f04e762f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfae8d10-066c-4d42-be40-3c0c11db93f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e554aaa3-8179-4576-a70d-0355a0d0cda2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c9601a9-5165-46fc-b146-f7947c3621d8",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5172ade-af44-4514-a119-6d270773eab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e51d214d-7a46-4087-97ba-c39dc25e48b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80c0735a-e23b-43a3-998e-0d1ee76a9f1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e2356299-ff55-4679-9ac8-fb89ca52950f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cfe1e2a-d437-4f16-832c-1d63619868b6",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e165cc53-2cd5-49e5-80a1-5eff9c47cfd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71aacf6d-6bc0-4d59-b935-c28a83fe2b62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a60fe9d-b37d-4538-8281-b9df3a84b331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "05d002d1-615e-4b84-afd9-cc11987eda04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "332b4a69-f77b-48ed-b456-ec3d477d9f63",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f86cf35c-883e-48a3-80a4-87c1bb65eb21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "263c68b9-da48-4604-b1f2-8e913b43b2a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53e83ff0-e30d-4eab-ae49-db92d361cfd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5e124631-9ba1-40eb-a1cc-cb6a08116a33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5c21fcf-11ed-4811-a088-633fe667f6bf",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83f6956c-6f8c-47bd-98b9-271831a816a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c7818dc-0186-4ac6-8e3c-27bc294785a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16c23afd-e64f-4258-b65d-856f6f108340",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "87894669-78ec-49d2-ac95-151388d45949"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05ccce14-594d-486d-96e8-9e9403e942c8",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2587e4d-f0c5-4912-8948-b84cea1647ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "112a7f77-7338-406e-a235-9678f9101853"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6b504a5-bcc4-4113-bfad-dae66cf523c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a2e787fc-9b47-4413-a009-eca4a5c632df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "137916a5-114a-4fe1-960b-63cde943b8eb",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36062456-dd48-4b7a-9a5d-db5165c7f1ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebe662b4-e0c3-475c-93ee-9d2a4da96f57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a2a5b85-16a0-4802-9297-c4c36cafb002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "66a56d6d-4f26-41b3-a216-41ff069ed28b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4804a8a5-5878-4b21-b9f5-cd6b7c9c1af7",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74f54df5-9658-4dd9-960f-d2e5dcb92d05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34bddccb-71dd-4388-8d7d-af0f45477ffe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d407af5a-e702-4a57-8bf2-bf82a3b45654",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8a9c5ccf-12d9-4124-aeee-9c425b35badc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "835694ba-b7e3-4b7f-af52-8552d94c714f",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44a7a09d-c2e8-47a0-a922-74e1161f3b7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0a33b4a-479b-4bcf-9f01-57199826bdde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5909abc-0946-4b90-9a5a-d67a575cc5fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a5d970a4-61f4-4f61-ade0-d0f685ee2c4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d8a8dba-dd69-4df5-b2de-bf1aad2fe9f7",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a46575a-2302-4ecf-a8d7-4806646fd6ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce4ab3bd-1963-4291-be94-e04d760f0d39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19e36ffe-03ca-4f01-b8fe-60667db80f5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "5aed7284-8635-4d24-8e4d-4f66c703f601"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f15b5d54-06c1-41a8-9c8d-13416619e152",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d913d18c-1320-42d4-8e1c-1318502cea0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a545694e-2cc7-43e3-9e5c-1132ed5707fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65b417ff-e52c-4aea-948b-6247d7dd14c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "02290dfb-433b-4878-8e86-46494040a859"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f878f9c4-482a-4e45-9ee3-f75b711ffc8b",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27614fb6-8d5f-43f5-9a69-9e225abf06ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0414677-12fc-46fd-ba01-03aacc3361d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6e5bc3e-a610-4a64-a71e-3940feed329c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e02516e-c0ba-43a6-bf41-ffdb8ffb76b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38acde47-90a4-4d2d-9544-1ce0e4ce4468",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2ebe5b3-57df-4887-85bb-ac9816352094",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f35b419-53c3-4d50-95f4-beb4575c01e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70e28f73-adee-4681-a231-ac7c68d4cc0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0479cbb4-3b5c-4a26-8dbf-2ca7c2dbe857"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8debaca1-0493-402e-b651-1b97fa0a74ce",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ccc6406-0942-49ab-8be1-c1442a66dd26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2db043d-54c7-4742-b120-8cad1145cf98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c11fd6d5-8690-4185-ae93-5b6a3040039f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9d756ce3-de3a-46d3-bbd9-52514e2ce425"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5fd2a1e-23f8-4e30-b884-1581771b15b7",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c54e0acc-8625-412c-8684-14e942755db5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7329f6a1-50bf-4c0e-80d1-022617f0934c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69d46147-7427-48e4-aacf-3d45512ca29d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5c187f11-c066-4837-ba25-603a562df82c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9537a75e-cff9-461b-bf8d-e0693ca8e640",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e51f29c0-99f3-4a95-8b5b-22948f31a49a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "366d5c14-250d-4885-8a8c-4f4d1624927c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e233dbd0-3cbe-46a4-a9fa-c58a76d806eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "03df3df9-6cf3-4b9e-a43b-855b4649eaca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98bded84-6be8-465e-bad5-b5dd5b0942b9",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24b7b635-d5b4-43c2-bdbf-7fb182c69e32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebd1fb2d-f28b-45af-a59f-2670b8652e76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f07efd6-1258-42b4-ace9-5687016f5ad0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8164ed42-4017-4123-8d2c-5a15fabac28d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff1569c9-feaa-44d4-af61-98d1fbc1eac5",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e9a0804-b17e-4dc5-8b2f-8220c098b6a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36c04eff-6a68-4830-b9c5-a5a07d293876"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce983d88-dc45-494c-91c3-e5cd22cef6b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "38202647-c3c7-4435-89e9-45becc357d5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "751521b7-3810-4959-ae3b-39f3cbd04a60",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86f73c69-b757-41d1-b91d-3153fa40dfdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67958796-b387-48f8-9339-62615c7ca162"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "484697bb-d431-42db-8bf0-760d8d448215",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef3c01a6-846c-47fd-bb33-f27507691aea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8b69170-245c-43d9-8915-b015a9fc8a5f",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "daba8230-7b6a-473a-b70f-c1bb1e1db7bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1d49c97-ca51-4ebd-9884-3088b3b88b05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1e2296b-2ad1-400e-a400-0470d76fabd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4ed947a-7f53-45e4-b4c1-b78b8d8f9d67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "621401b2-aed4-4933-9c1d-9344da16501a",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef35f752-a95c-47cd-8dbe-35e1c6d92c55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cba4967-1028-4b08-8b15-4de617bc9eee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af3ae93e-97d4-4451-a802-31fa81b9617c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "23cb8790-ab3a-4ccd-9cd9-06df2927f48b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25c6281d-904f-4439-b600-6e107cd1df43",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07a54fe8-b22c-4187-b368-13b0ef4c8eb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1231f8fe-0fda-4405-bc79-d2e9acbabe61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "085ff443-1a0e-432c-8f71-85a7ca7db9c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "53b2632a-5e48-4ffa-b34d-5b67449f3a31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1042a40b-1818-45c8-9c37-9e4eb7389dc7",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d78e1cf-772e-4a8b-9a2f-b331ed4bf799",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75712067-e7da-4d29-ab24-c1c711c9b126"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16d8e8b0-9add-4a12-9f1e-b5e7c573a8b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c497d069-213d-48f3-8ce6-b2082b577d47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b382006e-d958-48cb-b46b-98bd04bb59b5",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b105ff3e-cfcd-47d3-9efe-c9a6ab8f5cc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d936ec9-6ea2-4c80-bd63-d8be4cc7576d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f57ed82f-7db0-4bb7-9e77-0941bc76debd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c677905-a8c2-4b70-a272-4e954ec6ab65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b64837ab-bd8f-4333-977d-a22f4c8f5ae4",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe853398-4660-4b94-962a-fab49d92458b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea6812a1-cf9d-4152-8c4f-9c92daefba9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2476cf62-a064-4040-8ab8-1b89d4b6592a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "42a76292-5514-4634-b786-b395341af231"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccfaac45-9e65-428c-80b0-07cca7e1fab8",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec6d4361-98ea-46a1-bea5-5a65ba87c034",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92ac5c2e-6375-4364-b11e-7faa0afdcc96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8317c983-9c96-4602-8c8f-1e3e37e98db8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "28475473-a599-4448-b30a-b0f46cd01055"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bbbb504-49ef-4712-964f-156b11be2c62",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5ea67b5-667e-4b54-b62d-2d772d5f64a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec602663-662c-4006-ab9b-ecd03dcba765"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8b36881-c65e-41ab-a4f4-03ba50ae646d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "2f10f92f-7446-40e7-8ae8-ae39b36363ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b4e9925-7c4f-4c2a-9ce0-c53c20ad8135",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89543227-e234-48b7-8280-f75d9f1ade06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3cb74680-d185-451a-a1c8-dbc41ac59326"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72fc6afb-efda-48cf-8e08-aeed1fd4bc74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "eca2a17e-dd80-4924-888d-4107154110e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa8f8fd3-1bd6-4d95-8d61-b1b0a151c841",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65ab8455-e8bb-4784-ad11-141f6b45ca72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7757549-6510-4d8f-9248-100f520f6720"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc43409a-2605-45cd-a6c7-1bb5e276be68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c32c8094-3edb-4304-bc99-c6db6e4d393f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d432daa9-41df-4f09-92a6-1408991776f2",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c721bdd9-9eed-48b7-b802-cb088ce9ee33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76df0735-4bab-4aa7-a954-59347a8ba824"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1d7efe9-8b95-4788-84e1-28632267264d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "01478a3c-b7e2-46a2-87dd-0727b5259ea0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15fc0965-b1ce-4b41-976e-e18036d6d4b3",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6c7eb32-fc93-46b7-a64a-c63179743e8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e25bb4b0-4de8-45e6-836c-9f5ec4a903b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8b1f342-16c0-441d-b05d-d5c5ff464cfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3f315ea4-fe6d-4932-bf1c-88c8a8cd0307"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04dbcd35-19a3-44f8-9c40-04ebbb15aaf2",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1652149-129f-44be-ac8d-9299fd6a6bb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ef05f48-7fab-46d4-b9c1-ed08ae33b682"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f9ee755-7dc0-4a7d-8913-82421c242c19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b397ea67-66ce-4271-8a31-a164ba5fd780"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63a1c115-e931-4c9e-9041-7c41fe36a364",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51262594-d238-41dd-9e79-32234dd492c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a1522a7-62c4-4fd2-992a-ade94c10bac3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba71ea54-19cb-443f-9691-0bb35859d0c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "cb7642e9-bcc6-474f-a219-3c728b76556a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1170acd1-19a4-4b3f-ae80-d0213ab1d861",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24867b8f-5723-44f7-81b1-bf8e63491af9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c49431e8-4082-427b-8a46-7a308bfbf185"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b181e747-1537-4f74-a91d-c434c4dd8df0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "49dfc001-eae5-4a6e-830e-5fb77ffa34af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cee11aa3-7de4-4579-a632-7793bdab6820",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aeb6885-c048-4b67-b698-8d5a12096a10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9e9c3df-0a0a-49df-82b2-b4185ec18314"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8a8deda-4df8-49d7-97ea-cf5a2957a109",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "54a802c7-9271-4876-9e4f-37fd773f49d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96fb84f8-2816-4462-892b-20e89b7987f3",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2fb586a-4542-4f58-9fe1-cbd8419bc451",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e0c42d5-4756-463f-944c-d58042516d04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdec5482-5dc4-4d46-b907-96c6a909d41b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ad5ab66-c1fe-465b-8ec9-6d9e3317cc92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63150e17-24eb-42b2-9c70-68591f47bbcb",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d1e8eb4-00fc-4610-aea7-4ade41a51073",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe175007-ce29-48c2-98c0-568af7f5c9bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4b7256f-06de-4383-aacd-16ca3f40c4d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea9f0137-026c-47d0-9238-288bd1040e09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3827acaa-eade-4e6b-b36c-fc78b8be0f71",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8140e301-b529-4679-bc36-4cf9b232fba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d17527a4-2f87-4bf8-80f1-5a45908b3cf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1d396fd-06e6-46e5-a087-2c0be9edb42e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0781dd82-dc50-40fd-a2ca-d568e9721ae2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b95f4c0c-e5a4-4cf8-bf5a-a85797b7488e",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2822a08-4ef4-4f67-83b2-814177633de8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86705f13-743f-4e54-94a1-b997a6b12872"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca0298d3-348d-4b57-8ea0-2467a4ecb146",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f9327870-c1aa-49af-a467-f3c8177ef147"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c6e7248-23a6-42a4-8ad7-17113f30be7e",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d5423c9-44a8-409a-bbb3-46cb171648ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "606d303c-50fd-40a6-9ae0-f848b7aae946"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ffa20ce-14ab-4221-9b56-16ede6aeaf1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "302f21ee-8ae1-4b11-aeb3-2ab6510a98fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7532f3f5-2a4d-402f-ac9c-a998f3eb4665",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c04c558-834f-43af-b137-84f6647af252",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c4a9f9c-d0ef-4598-b4ae-87fbec11c8b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f37797e7-e592-4a45-a6bc-6698cb090c1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bc370790-9820-42a7-8621-55cb6c4d97f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3978ea1a-0ce5-4d57-8c74-e4f4ff1c1f16",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09e07a3c-59b6-4b86-a18b-8fb572fd392e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "777c5cdc-7b50-45b8-a947-250df75aaa58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7fe5bcd-4340-4cc3-9a69-7846a9ccbee5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bb9e0301-731e-40b6-92d3-42330314a1e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9fc76f7-16a3-4e7f-b778-57b8eaf8003c",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47cc2531-29e2-4301-baad-09d2b5bf77be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "595e460f-454a-4da9-9219-8173cdf55bbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86a42e54-a390-4a2b-8692-a6c819cdcec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "84b8056d-a9e9-44c1-ad99-cca040055a4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c194bba-03c3-4833-a79c-f2e9c98bfc1e",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "700b06a8-676a-4089-a13b-1267f6224b61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3a2ff79-7cb5-4078-9fa1-17c8ed83fd2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7463490a-2b10-4231-ad2c-6e2b069df3b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e86e4911-e25c-4d1f-9c23-b1c23338d74a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b333c9d-5542-4549-87d6-1f019b7948c4",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2df7b199-5db6-48c3-9773-266c994aa380",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e72f495c-2a63-4df8-945c-5d3803e6fef2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ad30d6f-db4d-4192-9954-adbc179771a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "981ee36d-8de3-4e13-b18e-88b072b68139"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f919f1b-b863-415c-bc95-28dc544110ae",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a32aca74-ea5b-422e-93d1-505ccba63814",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02dbcc65-b2dd-4a20-95a4-b69caab68205"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "370967a0-3db1-45bd-af5d-6c3eb6c72492",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "31611c7c-22f9-44e6-8aaa-9b716713c0e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f1a550e-57a6-4a3e-97c3-0b7e219213c7",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca673a12-2a12-4f81-be45-87fdeb14cccb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca3124be-89ca-4fcc-b70b-50b9333288b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c00fa3b0-7d26-4aaf-9e6d-9f536dc4608c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8abeadd6-436b-4354-be51-938f2c8f08d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "678391f3-50d6-44ab-98b5-4b889900ab58",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ffe5e1c-516d-4a5b-bc53-e4c40ccedb29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68022108-6788-4b67-9ecc-4d0796e7c98a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3add564-2c3a-422b-bf98-543f89ff7a7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "6867b301-a959-49be-8973-d1fc122d3174"
                        }
                      }
                    ]
                  },
                  {
                    "id": "124db2ed-55fa-4e0b-9ce1-43182e8b45c7",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a59b78a2-828f-4c39-97e0-239f54938ab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c97f30fe-eee1-41dc-8710-3481a907a904"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a6d5c3d-d276-4615-8111-87bc53142ade",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d52de887-e416-42e7-a352-cb01e7f0fad9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ce37911-3e72-4892-980d-8778afa6d29c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "898a2a3f-1522-43ed-84fb-82281c10c980",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fbdf8ba-e299-4822-b34c-eb28b8081dc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a5eb571-00b3-4710-9ec8-b147040a5e61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "4a4358df-5f02-4528-8ec7-0c4b58d3437e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06441fab-9fc9-4a16-b95f-26cd6e2804f1",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e9da152-ee3a-4d64-a178-422bd6e65e7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa2a6704-021f-4b77-a28e-ea810a5c7a9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "572af72a-975e-45bd-865a-20718e37ec3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7a3f23fd-1fb8-481f-bb0a-79ae168cbbc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b94a9410-2f8f-44f6-8f46-0b8cecf35b0e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "399252cd-cf77-4ecd-aeea-e699c516a198",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a297f4a9-4071-438d-82bf-1c7f814b723d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51883c5f-b45c-40c1-bb24-b95ff1ad230c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f13ce46c-54fb-404b-861f-5caf03a8fa12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e9412d4-3aab-43c6-855d-71e18009b612",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca621fca-4285-4083-8203-0283b3fbccc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2be11197-8b07-4e8b-8c02-863522f81bd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "194decbe-0dd9-4a12-a1ca-73c130021fbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "df28c9f8-c8e7-45c0-84db-efdab080ede8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8917753-3266-4b90-a085-a781184f92cf",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93645d56-8fa7-46f6-8ec2-f6212ea8da69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0f0f56d-5dd5-463b-9f9e-b680d240c6c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c48d45c9-046a-4d73-a8e2-c541d2cbb4a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b2b5820-17d1-4b36-b2a8-5c45e6106190"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2da8e108-50e7-4a2a-addc-f3cc2cd6867f",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4228d80c-e62f-4dad-b93e-d632a7c63378",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88da3bce-b61a-4a78-ad9c-10af768daa8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f738b57-6267-4af6-b244-f4e02ffad746",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b34bbd0-aed3-4c4f-a833-79e9300c1012"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55ce25c7-1f0c-46c3-8676-e4d29ac71bfe",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f368f2c6-72da-4960-8256-fd3a8d29ffaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a00d802-c1a2-4887-ab82-0e1e00df0d47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6962209e-cf37-453a-a1ce-3aa7ab7deef5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f9602342-c527-4ba6-b013-51ea2e474e6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b103d8ac-190b-4c37-8e10-8414eb2a139b",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99f87a24-50fb-4369-acbb-337c34c40e12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "270bbe82-981d-4441-9f6c-37feca392adf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1a9b082-c2d7-40b8-952c-6d43be1e0bf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "317fb293-0df2-43d1-bb79-888985525f77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48921c91-61d3-474e-8e88-4d14f01a6087",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b410b0ea-4b5d-47c0-a336-59c32a32c6ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "144d4e82-dc64-4b8b-9d86-5c1bd36f98c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2425b7e9-9a29-4cab-a328-2d332134f243",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0fbff119-a629-48d1-949b-87a45d383a6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc3e14fe-44e2-4084-bc8f-56cb72dd9545",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ee705c7-b5df-41ea-8213-fbb099fff5dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d86c1175-7953-4df9-a069-ccee6a01d65e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f379787-912d-4179-bfa2-577aa0cfa09c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c0491856-4b23-4fc1-afe7-97d1895dcaf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b3af52b-c65e-42b9-91aa-b4af4f7764eb",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "695e100f-62d5-4c3d-9773-d4e603389837",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d609c19-e008-47d4-a639-b152550633ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e4a3a95-fced-44aa-a949-489e9b872418",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "56e55f38-5e79-4f34-b4df-2858a9828813"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccbafaed-c79e-49ea-b533-475be9a2ab1c",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83a515b2-3f9b-4577-8412-2b6e8039ca3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b252b659-6700-4aa5-9d71-148a0e549f43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f12684d8-4e92-465e-9e4c-f5b96e614549",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "4923fcec-8f59-4187-9abf-3ec5b0c92eb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d7afc06-5b04-44fc-993b-ea625fdba191",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5935cae-8ff1-4d85-9f4f-8e4c7f239e3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b8ca3bb-0e00-4575-9c8b-dde0dea0c68f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca74eb08-65c1-4e00-9bf6-eb6639d6178b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ef562da-edbf-4602-8ad6-f6e9105748d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "634b7240-1586-450f-bcb8-a9dc05dc5217",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ac96635-a43c-47b2-a648-2cb9a317d180",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d76f031-ceac-466a-b287-33f4f5e22e7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c87d578-1ad6-4eaf-b359-3ff97ebaac70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "43f678d1-4474-4b9a-9482-8d8e77fad39f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e45734a1-af0f-47e4-aca7-f8014d4e43b6",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3456be37-f126-471c-a0e2-4ecf3eb8ca69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "419322ba-6080-4141-bc63-7ea556cf332c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3948bab-6d31-47ee-8a17-f7ab59704ce4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f21586b2-acf0-490f-a993-b35784935ac3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5a17dfe-ce79-4b23-9000-12b9e6a0c534",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2291f701-896b-4a4d-9595-3d3b30b80ab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bbc3727-c358-428b-9ad6-d5c5de71a262"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e8522c9-e6e3-491f-b3d8-aff7b697e638",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "478a2d0a-e39c-4f9e-a648-01dcea3b63e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c77a2de9-7741-46a3-b2ae-70534af8d35f",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9e6fda4-20c8-4c8d-9110-572d6ea77f7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccb97c13-508b-456a-be1e-f6f6ec7ee32c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7e468fe-898f-4c00-9b91-d1c47a4d6726",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4bb6f1c5-1454-4cc6-9184-7bef5f649507"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7395f22-9493-43f1-88cb-304bd9f1ef04",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43c52009-1d74-42e1-b4bf-827ceb282871",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ca2df14-605e-4b60-aee0-68f66064a9e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "050a6522-2100-456e-a94a-b486ccf29528",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "67f189ee-2034-4596-b808-e3d08affaa1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8b3ffef-2fe1-4475-a139-7abf2d66188f",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9dcf372-e87a-445c-856b-c2767101cbfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc9a7010-924e-4612-bbe6-f3794b41aafc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3960956-f934-4c6f-9207-90670da2a824",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b396fdfe-69ee-454d-9519-1461f4e96cd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac42c62a-1e2f-402f-9020-baba8a52e317",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "524f1f38-8b6c-4fa9-a316-e0f25e53baa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc2fea26-3c88-42e0-aa14-a0d2b926fdc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "728bfdbf-1da0-44fc-b251-ce6bcf8f2490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f3964a6-7f81-48bf-8ad3-839e60b459ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0ddc413-6d9b-4386-ad10-4e77d8b453c1",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03ebcaec-6f61-4faa-be66-b6eac582794b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e10ce261-e0f0-4a79-8ab9-b540eca46b4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91a3a9e3-b995-48f1-b142-19d295965ad7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "21aec30f-64a9-40d3-837b-c5690ec5af15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a6665f9-b6dd-43b7-b02f-ccbec54b44b4",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48911619-a7f1-4f71-9341-9becaf54ca29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "966debb9-c774-446d-8000-4581a443a3af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b27e4c40-32c6-4d58-8369-c0dd34fb3d85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "355e5e6d-52e4-4a11-ad40-b2aac08e9550"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e88c35a-c990-479f-af2d-2373601b7d0c",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dd49471-43e6-44bc-98a3-8ff13bcaa390",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed9b1b07-2191-4a62-a90a-c20b8f701622"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ec4ef29-1dc8-4dec-a527-366b5e636557",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fbfdbb74-b712-4a24-880c-4c15d5332ad2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ca54954-ef2b-4b41-8e97-5b76fa47fc1d",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "509b8ede-996f-4764-8fd4-3f8983f32c27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5df53d43-4cea-4556-8c49-9e6b09e89b5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82a31b46-f872-4f98-a0c8-15f4baaeab46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a333b3c7-6076-4b81-8ee5-9651d36ffead"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ea316fd-d28c-4831-be1a-ae37b1df5bbc",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5c493eb-97dc-451a-9140-9eedc98e83a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faeb3e4c-d29f-493a-b506-d6512c6d9583"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddb249d4-0a87-4f47-afd4-029709c8ad3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "228f9d40-5331-4dc0-94ae-7a1af55b4892"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27fc2528-8c07-48d8-bc06-3a891637c8ee",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce291cdc-75e3-4770-a4b5-b771f417bfaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "196e7252-cafa-4eaf-9e70-41f808e26b18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc058ce2-cf7f-4045-af81-88fbee9c7842",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7abe834d-f605-43d6-8cdb-89206b6d9114"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3182f159-ff5f-4d53-8a4e-a9484f937f71",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "945ba7d4-3ecd-4b9d-b0c4-fbd86f0d455f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29d49092-6511-4a49-8aff-9b9746818186"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9844ebeb-35eb-4459-b8d9-d95ec8ef8ed0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7da9956f-75e4-4760-be68-9addce3f4e92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab539896-b443-4dd3-9621-a385512d5382",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "994d9b5b-e1ea-443e-9dd2-531defe382f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0bde0ff-2a5c-4521-bf0b-1dbbfefabc38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "364d9108-4160-4708-a7e7-93e5ae0f46ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "25290ca2-63ef-43d8-a281-9daa15c868e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6f578ce-ecfa-4479-ae31-efe90e8ba4bb",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a58b5ee-be22-45c5-92a4-3dbf1019b48d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b53c682-37bb-4a4a-85f5-57987f43897d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10749786-d53d-4cf0-9d70-8789a06b24f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f601f85a-1411-439d-a0ff-8f81a199e131"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaef81f8-9e10-495f-b453-4cb838389f70",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13cc6a3a-25f6-4da9-90b2-27ffd6918391",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bb7cded-3f73-421a-9b44-9715db3dcaf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a9df317-ea85-42c7-8c6d-9ee2c8926571",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ac107d3b-e65e-4646-84e7-5cfef1e13eca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fc6ee78-ac3e-4be6-8b22-b19ff3ae4604",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d71772a-f578-4ae0-8e92-127a5a82ac99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52e55ffc-a795-4c8a-aa04-70d5bf753da1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae268c98-7711-4162-b3b4-f9485f77c91b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "fa3b016a-97e8-42b6-8930-39438b77e523"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91217828-e256-4403-a97e-45247fe7f93a",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aa528d2-31bd-4eb5-9a7d-e9d245c7e3a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4a91cbc-cbd3-4230-a93a-24d6210ec8aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1f386f7-8a44-46e4-aec2-a62c840f6ce2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2eb58fcd-872d-453f-93ea-fd4adeae113d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8adf6838-cf7b-4350-bf3e-9a087acbd9a0",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ac10887-3bd6-4b98-96e0-381543f38bc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1148ad2d-139e-4ed2-8790-37942d2157b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0889f918-8ea9-4dc2-aee3-4d3e2442decb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "3b1e2b50-bfe7-4ec1-a294-f866b108bbcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b014242-0068-4561-97ac-48d577901dd5",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85bbc301-2911-4992-ad3a-dae250e982a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0020a958-fd8e-44ef-9d36-922248aecdd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38c04b95-c9ae-4ebe-a3df-ba0dcd720ce0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "91498284-f809-4aed-8d2a-55935a66b116"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0862534d-f132-4d71-8130-6dd3fbe949cd",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e051096e-7067-441a-b59c-3fe2a1dba04a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "15ad211d-28c9-45f4-b7d2-cdcc51a2aaa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f74762e0-1573-4f66-bd03-b8df5d56e4fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "159a6a8a-9b6e-4460-b6db-9ee1ffbbcc25"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2d938539-ea5d-41c0-87d9-1dce096d1dba",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "120e6565-4d1b-4f82-9098-b62fc087d0b3",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5627ab6e-cc4d-498d-8bea-f6b9b7d07c30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "87ff811f-46e8-4896-89af-0af2dfc7405a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1d60674-c3ea-4d44-a6d8-571efe1f6d26",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eb5d38ac-750e-4c7d-84c7-ca2498f7f870"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "96c970f0-d823-4430-b0ee-af42bcea06bc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7a11524d-e696-4880-8f92-4835d9ea2505"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "91ec5160-8a22-4aaf-9252-9c6ca5169600",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fde968bf-29cf-456c-924c-744a08886ca8"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a99fba93-a9db-45e7-9991-46aa09d9c131",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "18ea96b8-ed87-4fb2-bc2f-a108559672ca"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "784b140c-e072-48c4-8563-81c2b0e08832",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c737b291-8aac-4a10-abf2-fefb16986eed"
                }
              }
            ]
          },
          {
            "id": "b2395b92-9ee3-44e5-bf95-c44eb05a13c4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8bf4e7fc-2ca5-4104-a8c7-34dceafdf882",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "91ff3c48-d410-47a6-bc11-1d908878458c",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30e2c41e-1e02-45a4-854b-5530887659b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "fcf6b6ec-1b65-4c1c-ae83-d426ae20fd7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bd462a7-d35e-4f46-a237-4f5fa856b1e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "792efba2-c837-4f9d-ae0a-3f444452adbc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c067dfb6-c3b5-4ed9-9c7e-f4e188e79fa2",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "90e8e076-3487-471d-a09f-89019e7de2e6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "14dd35e1-47cd-42c2-9ee6-90121a13dbf5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c3538a66-1ffc-4d4e-b7ec-c0dccbf96ca8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b8099084-3ff7-40fb-a03b-3240c25cd118"
                    }
                  }
                ]
              },
              {
                "id": "27489d50-1a08-4402-8edb-7d2384674d35",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a9d760de-f8ee-44e4-bd7d-f41a61add9a7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9a18bc95-8074-43f0-8d4d-9f31e9735248"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "609658d1-3353-465d-9151-3ccacb785d76",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1e0a5d03-4b36-459f-b5ff-04fef45f9570"
                    }
                  }
                ]
              },
              {
                "id": "59e0e53b-9671-49ce-bd66-874b52097780",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "209144c9-c3a8-4f44-9c2d-aa97f07fdb9c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f5a1e067-e9be-4635-9697-dc33b9bfd9ae"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "42b5a04b-0356-4198-a9ad-60f9debc77da",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b0905484-e238-4038-81ca-58062d0f0e5b"
                    }
                  }
                ]
              },
              {
                "id": "9ff8f3c3-1583-4814-9d9b-5e62120b70fe",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8ca6fb90-2788-4bd4-b385-a9d7c4cf3aba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "800891ef-d6b2-4086-8d17-e134583e5a99"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "05694909-3a0a-4b32-982d-4a06685a611e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "2adf0e08-bfe1-4c5d-b319-9701a39d51a8"
                    }
                  }
                ]
              },
              {
                "id": "8668e338-6e12-4861-b3f8-7efbf20460f3",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7f42fc08-ffa6-4569-95d5-9f4835aa57ec",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bd6f3e77-2dd9-473e-a217-6c6ba2433d02"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fbd365da-c6ea-4a57-b905-445af9db69b4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "95829c45-55cf-4616-b461-ff22a3946d79"
                    }
                  }
                ]
              },
              {
                "id": "48a73e62-02a3-4cff-84a4-2cab5a4a32eb",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ed281c1d-4d98-44e3-9159-f5e385de8d21",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a51c28da-f0e8-4fbf-a81e-c65441b6bd7b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "08c32419-1a40-43e9-8aea-8df7130a7afe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9b1cefec-5db5-4c8f-b447-719396e23164"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b061416f-ba55-4c78-a23e-8d41ebd89c40",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "55ca8488-3645-4dbb-8792-6c495d3eb9a7"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2b201937-258a-42c6-8c22-8b814b021c49",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c3f5f8ab-dc8b-4f02-8dad-b2a5f1cfb166"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "55175291-22c3-4721-926c-1ee0175804fd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "4c4c81c9-c71f-4cde-9ab3-83f72b17fb77"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7665a244-947c-46cb-8718-7cc0b126cbb3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f07c8c56-6924-42e5-bfb1-518ea862f6cb"
            }
          }
        ]
      },
      {
        "id": "5e8f297f-9dbb-418c-bdca-70b6842873f2",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "2ff0fce0-0727-4905-831d-70ac76a22d7a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a4d89778-83ca-4e26-a418-b264c02e9a6b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8861e13f-79ee-4557-9953-88f6a4cef681",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e82bbca-1a3c-41c4-ae98-08907ff49bf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "286842f4-bcce-4973-9130-c0f88d8b72d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f7f7794-0219-4c0c-9b78-948d98fc0593",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "58585967-69e6-4a43-9190-ea2e5659f930"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dfdb989-fe70-47f5-9109-8bae0156d8d0",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0ab8177-4e1e-4a0e-b41b-53a28d4dd3a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee30f171-85d2-41d4-9ee1-02e15249b588"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5ed609b-52ce-457d-bfc6-77aff472e1c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "42a07b16-8d08-4a6e-b6da-5886382bb55a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb239705-3b00-4356-90a9-42d9d4352ba8",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "101a6b06-34bd-4e00-8921-2b717500f0ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34e9ad00-0677-4fa1-b7a1-8a133b746694"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82e288dd-e6f7-42fc-ba9a-761ea98f3cbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3e85f1c-07e5-4ba6-919f-6a6ac6421fff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "292c7e46-08a7-4c71-856e-f786b5e6bcd9",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cff7776e-4f6c-4bd6-a407-7f9a5346adf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f003fd7f-2f61-482c-a583-43c142a56982"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a743a92a-c3a7-464e-a07f-be6a9755e9f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "79aa95df-7fc6-4767-a6df-aa868fd2e78a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be539fad-3a77-4643-8a4d-712e887d141c",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89e27f99-930c-4a40-a4c6-c6dba5e1646d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60fdf674-44a3-4fbc-abcb-1ac2aa74dc77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5074156-3106-4874-8e7b-f58f0187f34a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f0f45f7-92e2-45b8-a234-8644a5fb3c56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eed8989-0ced-481c-bf19-cc5a2cd2e748",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e77e7b6-bc86-4536-b499-d6a48bfdea61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d732372-901a-4aef-85bd-217e1c862377"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c643bbe-a5a9-4268-9562-df8bbf4c1dda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "640bdf7c-0a88-4e31-8d3f-49c4cf0a6460"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3997946a-050d-491d-af36-e6af7708c302",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "325c598c-723a-4424-8aaa-88905bf9cb78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "480b3ed5-cc12-46b1-8a27-4bf328257aaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fd127bb-6867-4230-b7ee-4c08f2e9d78a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7b38db2-c654-4290-99d1-5d86115d5221"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1071954d-e43e-41a3-a72e-af63fde0336f",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfd410de-4d98-4ed6-b722-a85c4449b705",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36a2d120-0c22-4a61-89b4-3b3b72b73e08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a94f9c2-ffaa-42fc-ba99-5d2d2a3282fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7f83b34-e3a5-4e86-b2c4-bf9c374eb91e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3899026a-f8d5-4cf0-bbb1-e786e3c07dc0",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe8a43bd-40ab-404c-8aaa-19b585d40cc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d4747ec-d780-4de6-9aeb-b152423de932"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a23ee6db-342b-4d07-bc98-1f00d9bffbfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6417f258-7b11-4541-9478-917ffd44a047"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efdc9259-a7fe-4bdf-ae57-26e75d01f624",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0dbdb2c-9971-4a39-99c3-2ce3f3c0041b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a8dc60d-283c-44bc-80d0-e876b8c7758b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "316bbfa6-caf8-4905-b436-cedff996a01b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "efe01da0-2de9-4aad-9498-60af7b1a244d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a9a75bb-1486-4d32-8a9c-96f635c440e9",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a45305eb-6487-4549-9e12-2a965f112eba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a37a40bc-ee19-4e9b-819d-52b130b9a6cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b086bd50-9cbc-4aa1-86e5-618030206f02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "cfbe5bf4-ba70-4cc4-b6fe-254748ebd51d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "348ac081-9cb4-483c-a67a-e8820031c7fb",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2cc148b-483e-42bd-a85f-d05daf63ea92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43280b0b-e397-42c0-9d11-b7fc34b43bfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10764737-29a3-4895-9237-7e289e820f57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5034fb3f-8a50-4a1f-9c94-649705a11308"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b131f64-132c-4b5b-82b6-dffa5990727c",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f74207de-affd-4a6e-8288-5106d28f18de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "570a5c68-d910-49fc-9784-a688bca29864"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d734ce22-73b2-4088-9d96-4d2811a524ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5a7a7f4-646c-407b-af73-f865c77410c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91bac27a-495c-4d8b-965d-88a6f5ea8807",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25a70009-5a3f-40d5-b47c-7424eb795ba7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff0944d8-fbaa-4b76-93b3-307e84b185bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8fb3f15-ca13-45f2-9d35-26cc5670cfed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "825ab66f-112e-4836-aa16-95881ac84a3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ba70f86-ace3-4816-bd38-ebd61ea10a08",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f60171e0-b1d3-41fd-9127-d6a3a168a510",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "290dca34-636f-490d-98e8-62be78750ab9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da7195c3-8021-41f2-be29-e02a50bb2ad7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "60dc53cd-2900-435b-954f-abcd2b021f58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "972b9088-d76f-428e-90b4-78e83f33ea9b",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be12740d-8406-4e02-a4cc-5f6e0da6a16f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64ff8f2d-4183-4dae-9790-096c97bc8b21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21ee2070-5e3c-4459-993a-ee6afc922735",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "9200370f-bd56-402c-b43c-ae30cafeeb55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3073cbc2-f974-481d-afc2-fb6a68b51f17",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "182bceee-6950-4073-8ad9-5e3f41732887",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96cd37b7-126d-4927-b02f-d1f87aa26835"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "550887ec-ad96-41b5-b5d6-259d7380f3b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "cca595f5-0a12-47b1-8ae5-11d5c3a7424e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6638e4f-cf99-48ae-b3dc-709ae2e176df",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3097915-0b2c-4a60-b252-ba50bc4ca157",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e108474-7e85-44ca-81be-1ff9e04ac0d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a92d10a-9a93-4aea-89a1-28dd7b456329",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f4a310e-ec67-4ca1-ab26-76fb57f6a413"
                        }
                      }
                    ]
                  },
                  {
                    "id": "346d5170-3014-4f29-a410-afb0a14190fc",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4f07d51-3445-4306-a9d0-5a57383b3b5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e8cba91-63f5-43be-aabf-ec75050b692f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1456df48-b425-4d90-ad3a-81771c66c5a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "39b880f6-6eab-4913-adc3-7dcab7fb82d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b887b4b3-6ef2-4e67-be00-35ddeb4217ec",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2b95543-6705-48a3-9569-2ff8e76bd328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c00efd1-d2b7-4780-840d-86bd6006d157"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f538b224-1c13-4e3e-8d20-bc75e22c4c48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "84d525c6-f273-4ba0-badd-d9b4aa47a01c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "023556f8-dd50-4669-a532-05757fc5d868",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8ff8773-125e-4328-9d08-b08482cce2f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c20eda32-8955-438f-9ef3-773d97877956"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "011d2010-9e0a-48fb-ba2b-d53779400d36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "787b2dc0-c2a9-48e6-b43f-22efa00de9b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "872b31c5-0f07-4ac2-a467-4600049efeed",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d32340fc-74f8-4c50-bae6-504e1638d2a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77be53a5-406c-46e6-ab2d-653a9a3ccc12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a079fdb-fc5e-4a80-9b63-bea9dec23037",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c88bc2e-f5b1-4e9f-b831-311b32686c60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "309fe609-1ef0-4bdc-8e40-383efbca3d4c",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b20f9eb6-a028-492b-801e-aa49f3bba04b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7ec7ec2-5164-4af6-a8e8-ae5414d4cf72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a23e00c5-2474-42e8-ab92-7dc1aa0e6554",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0460dd02-bc01-46dd-be06-e41395a19855"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dccdfff-54f9-48f9-8118-26d8837bf034",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f3b29f7-1d63-4ecd-bc99-02e066d921ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "068dbb55-2591-4042-89c2-3c968e027c71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a5bef0c-101b-4e43-8295-ba8fe86de959",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7f23d98-96e1-4518-b020-c49c51b05050"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eb1863d-a7f5-4c30-b47a-41f5ee35cce3",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1444e5fa-d910-402c-9f53-46f0744a9970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce98a846-5fe9-418b-8ae7-fb70b048a53c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f80f1d64-fd99-4384-84d6-231b6626f31a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "74642d09-42d8-4f80-a7e6-5ac82a2b29ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ad683bc-91eb-4176-90e3-c1379a2e295a",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "236830d4-41e8-4db0-befc-1c851534e8e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19ce64cb-5a65-4c40-b113-87b25a4d77df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67b3abfc-0fa4-4e66-8070-a35ca3d7f141",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e66be645-ad94-4860-b077-db6f03c5b19c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b87f79fa-c220-4c87-a41a-8063ba38ecd6",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81edf10d-7b22-46c7-a97e-02b845162763",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89c8855c-2a07-47d0-b7dd-a66c9312e6eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9138a197-5d96-4abf-9f14-dba04629ac47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "267ee38f-2179-48d8-9784-dcfc3742fe4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2fd5617-50a0-40d2-bcd3-ceffe95806fe",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "128a88b6-b5ff-485e-b18d-598a40095116",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d4aa820-8b0d-4b72-95d6-f36599bbc31a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b8a0711-c1e6-4f56-a913-9536aaf0d0e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "594e2b54-0997-40f8-a718-2e45e6045b35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e750b67-f260-4f36-a841-1fdb1f4c500d",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2f6ecd7-b3ae-4621-a28b-1508e522ec5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "add86f73-a4be-4e66-ba71-17a0058eab26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bc6a3bb-fc4f-443b-b983-f5acbdec7e72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "24ee6703-2818-4a13-9bfd-ec5c10c56da7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55767799-802e-4814-8050-5b3b3dde3ef7",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f64bb71-a2b5-46a2-8221-d82e06b4a27f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "739fe30b-a673-4c16-a0cb-045fe789b92f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5d20119-ee78-45d2-a38c-cd0b2e9d7f1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe5dcbf6-8559-4104-a3e6-488b34c6b513"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0d8bc4c-7a64-410f-8baa-8310d5b2a5ed",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e1d430e-1a8f-4088-9def-98b0e3023547",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db89b64a-9f16-48cf-ade1-afc5aad02e66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89499257-40ea-43ef-884e-e58d1a676873",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dfc871d4-3a32-46b8-bba3-0e4d681e31fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1f36273-dbff-4330-9a79-d57d5939eb88",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43f42ce1-3f5a-41d9-a018-8ce603fc0c92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e9a78b8-3dd9-4aee-a6c6-d658df571775"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cdd0781-72f6-43ab-a243-e356a41f7853",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b45d70a2-2efe-469b-afdd-8085245c4250"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d6161ea-32fb-472a-9e66-a82b8cf44d23",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a984480-83f8-4b8f-adff-7232d3e9c192",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aaa45d91-a5fc-471d-a780-45d8b4598e52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f17a4c72-1e91-48f0-9244-4246ae69289b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb3dfeae-633a-40c0-bba3-44fbd36c02b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ae88c07-55ce-4047-8b99-4fea892c20b6",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "115feaed-b408-40c9-8e41-aecd19b6f22a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3b64f60-1080-4bd6-ae64-c210b36a59a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f87f36e7-3cd7-4aca-9ff4-b37825583a33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3a230d6-f80c-49b0-a449-7d2fec6466d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85064515-0850-4f77-9f24-0cf7e21a917e",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f1395d8-2695-4dc3-9fdd-d5ad3a56ce4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb0470d9-db88-438f-b6c2-b8875b9c8139"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a3e7b5a-aaf5-48ff-920c-7729b7cb5114",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a324545c-688a-49cb-8b48-389ce5b51817"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b38bef9e-9a77-43f9-ab08-e66751f9bac7",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "752b3283-6052-4f50-8cc9-24730b696e2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea85b401-b814-4221-81ff-5bd723e35377"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5199614-b00e-48c0-8233-cf80fcec910d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bda8b6d5-5e18-4ea9-a281-94ddf591389c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fb83948-9185-4b2b-9c8c-e631cc16a884",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1d408a5-80da-4531-97d5-a66a0c04338d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9fdfa5e-3a73-4520-af2a-acb7561514ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1da07a0-8f19-4918-a6e9-2ad805abdd74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "68926a4d-62e6-4534-b823-20c4f65852b5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c0e3249e-4be6-4359-bc06-f499527cef25",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f89bf23f-5e9f-40e5-83c8-041da4edc146",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "243c4263-1d53-4c7b-aced-17c03e0ab0a8",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "d1a9f66b-1d1a-491d-a7b9-aa334af3c3d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa7a960c-50d9-4e25-ac21-e838ebb9a621",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d455d243-5e9b-4ace-bc73-ebfa8a2483ae"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9b8e4b70-87fc-4d6b-9869-ebcb305da5f3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3606242e-681a-4ee9-a27d-009b793f596d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2b471155-f49a-4eb4-9165-bcc9fbb76a7e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5106f22d-f942-4b3c-8e1c-df54d8963011"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8cc058f1-114c-45f0-b513-22effd271e34",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "64e0851f-b079-42f0-8951-061b05840e6a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "955f4063-7a04-4708-9cde-fb86af45fae8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f1a553c9-8765-452b-b1b8-50ba0565a675"
            }
          }
        ]
      },
      {
        "id": "a341922c-d729-4fd3-98e7-6ff5e8238e4f",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "c7078733-b443-46a5-b37b-85ea3d69e6b9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3ffb9606-978e-42fc-b89a-300778caab85",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "76bd1039-dee3-4158-9461-e601f99a05b3",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71634dc0-328c-4dfb-aafe-e2da56810603",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9e6e55c-d97d-4130-bb2e-c81218cba33f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "622652f9-9ae4-4a38-88ca-d6415ad1957e",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd112ad7-8ba7-4018-bf90-c82cb7592aab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37f297ad-def9-433c-a7c5-c176dd7c5ece"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01b475c0-4888-4aef-8357-a4bc7cfce047",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4587505a-36c2-4f9c-a960-43b2573e9390",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dcea78a-348d-4e24-a2c9-571d06548af4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d29444fc-1693-41e1-90db-069b637989c0",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6b8de90-b959-4e6b-99ba-9d851890284f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa572693-67cf-4c7b-9e73-8f9503dc5678"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca9202d2-3536-467e-b119-a0620421e4a1",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f619be4-134a-4893-aedf-3156a8eda5e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "384dfe79-6592-4e2e-be56-afe6d1225bcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "849008a7-63ba-476f-88e2-20174a34acdf",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d22fc1c6-19b5-4910-a3cd-ff307c22251b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b434aad-593c-4af3-9a77-9f37d7e4981c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1fe3a5b-ac23-4d78-8c28-d54a5122c835",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba981ac3-a4dd-4523-8723-8c3bba3591df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e20d8d77-cbf1-4d79-9cfe-a461247a2eb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92ed2110-1d8b-459c-ab78-ee2704d06402",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff07a27c-fb3e-487a-8096-e1cd6d96c4a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6346929-ee16-43db-a259-7d4009ae3be3",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c6cfeed-3996-4fc8-99e6-0a9e8c460ef7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3fe916b6-b662-4476-8a8c-8623fd884efb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "865360c3-381e-45aa-a1c1-39956b5dba18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "506e3ffd-306f-4dbb-aaa8-b8a6c7c42ce0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f86aa162-c153-4634-87d6-b42608dca3f6",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca64715f-289d-4dda-8b3b-412607b92919",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d9df2da-88f6-4da7-8998-75b2c4d6f7aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "050aa3f6-b8cc-4050-9b18-125580fd5dab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cb397f9-a0c3-48ce-8459-b9bda7a00197"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24bcb459-cd62-407e-939d-441f30c1622f",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d7a0ab8-b5b7-4b82-b059-b147435726be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31f7d786-c371-4731-a66c-ee31b158a3d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c9cb82e-8b27-484f-8892-0374e3d39f0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7947cba-284d-42a8-a8ca-c0bad1ed43fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "892d3b46-08ca-42d1-ad55-d8de7ec20726",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c04b80ff-c2c5-41eb-9c93-d10bac5d16e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc7a5b2f-6c40-4719-8b4a-e0f91ef52ebd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e4b796c-8709-421a-908a-9823abbf009d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a3190c6-9b76-41ef-8c03-16c810081252"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5c084d7-52e5-4bc8-bb87-b18193bd10fc",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7af3393a-cd62-4c70-975e-2e0a1e9127ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01771833-01d5-4622-b008-a5dbe32fe244"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "201de61f-1a74-4846-853b-a348641b354e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b6b20ab-8432-46f1-9c86-fb1f38e22d62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "520ed717-7add-40eb-96a8-2fc2295abf55",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a97491e7-aab3-4720-9115-a9e4859b16b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "343eaf3a-3157-42b6-b9a4-56ac297588c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49433007-c041-47bd-9e82-f748db9f721c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afa9fe42-d8ee-4807-8c70-5adffa3fd141"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5171326-f1de-4613-9bee-2e12a8cb0648",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3f183a2-c848-4b56-95e0-ed7b88c184cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41ee771b-5c78-4441-9a8f-86b9178923a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5bdda14-17dd-43e0-a66b-9348d54e8d88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a86c4e33-fa2a-419c-8d71-a9f726e7185e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bf012c4-2130-4442-af47-4bb4f8683355",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13dc7c75-b54c-4d7f-9295-79c700ab85f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12b2d63a-9f7d-42dc-9c86-a21a41f9909d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b22951d-99e5-4de9-b4f7-51e61af8889e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc334e91-18c3-4b4d-ad30-ef4deec44eb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05116cd0-1078-4a9f-b16d-f3270d09fa32",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0e6cc02-8b15-4f05-9a40-66a426b73d71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "189c7e73-d05a-4368-afcf-75bb2d02030e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1d8334c-67e8-40c6-94f1-60e67329d592",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1b283f7-cea4-4edb-9424-37f7d2f06a2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d939dac6-6ab5-47aa-91a0-140c57a3289a",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52afa0db-51ab-47f5-a66d-66bf83b431ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f16ca4b1-fa05-45c3-a64c-fb99d28bc6cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5edb0e26-7baa-4306-8071-4745260530ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc523bf7-9a25-40a5-8f83-88158d44eabd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b970dfd5-e9a4-417c-88ca-4c4acb5c8632",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f18469f1-d5e2-4073-a29c-6334d6d46e44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "480a3595-df05-4b34-9676-888c7d5b0eb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7718f38a-3a4e-4c3d-8f73-1b93a42757ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e88ba166-3715-44fc-9ab5-d1c816360f8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29359125-89db-48ba-aaac-5828e9bbce7a",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f769128d-50a2-4c9c-bf7e-13e3502626c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e587952-5b0c-4d0f-a2e4-fdcf5ab6a7c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51e66069-05ba-476a-b584-676cc51c7b69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86be81f8-b4f3-4300-a3f2-6f451102d4dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7824349-9b75-4b1a-82cf-52b628ee661d",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67e56050-1c9f-458c-b510-814db678b811",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd9f6d55-6e82-4a5f-ba84-b0017b50695b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9589048b-26e5-4d8a-a132-9c6acc574343",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4eba329b-d135-429c-b3d7-9adb7c16f148"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdd17708-6818-403a-9866-5ce8941a6c88",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a07aa65-8736-4304-9b51-fead08bd37a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "045d44f5-75a9-43cb-9325-c1b891b110a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "641c2ffc-f9bf-4915-8f22-60eb407d5480",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3e4d095-cb22-4f2e-80a9-7a9040755515"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e57a853-8c5d-4c93-83f8-521e849cfecc",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32dc3330-71f2-4c61-9934-106f78854875",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce21749f-c0dd-45f5-9329-73075b0edfe6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76a89920-f91f-4f50-865c-74836047c5eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3394fb9d-2bbe-463e-90d2-4956daa774d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6643763b-5a14-45ef-a95e-1ad0a60962b5",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f760c18-52f9-482f-add7-1849ca327be7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e52afc8-c46c-42b5-a329-186fd8212b8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06ffe898-65b0-4262-8d53-cce351fc22ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd98026d-bdec-426d-a261-18db0c2780c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d86d6eb0-00ca-4297-9dd4-f7d2d7b768dd",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca8c3b74-0ea2-4a77-b29d-5266bbfb10de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35826d77-8a55-4cde-a6d0-13f6b230a1ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f554b368-84ae-4287-9f6f-7df11fb27d4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30bdd91a-4d58-480b-9b88-74ca49668e83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6785301-229b-4b18-978c-425850b0ffc2",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30f5e4d0-8d9f-418f-a891-301ca771ff79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f8496f0-96e8-4cbe-a3a1-76d91d7709bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c33bf87e-4f96-4fd6-80c3-5f5de5e276af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d8492dd-5742-478c-b901-13a02cda714e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a52e3c22-f01c-4996-832f-a94bc6a158a0",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "369518cf-724e-4551-b2c3-2ab6f60381b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "341f3eec-3815-4ba4-8fae-a96575391c67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f077f23f-f2d7-4f2b-adfe-df1f1348621a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06363d77-9771-4ae0-aae4-634cda028ec0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d15ff367-ba27-4830-95d9-08259f730c2f",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b95b516c-aab7-4a5c-8b8d-0bca0092e818",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4455b6c9-42ac-4ab0-b9bb-de8520f7c029"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a850da1-dbe9-4811-b77f-0a6758dd7580",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b2c92ea-22a8-454f-8043-a7ada622d85a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91e8bdad-93e0-4d4a-a935-fd3a38c957a1",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04dd2e0e-873c-4d41-bfe2-3b3f71b8ffdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4392177-aaa9-44ec-9074-5a84ed2d425f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1891e0c4-2358-4f41-bd1e-4b4f7b2d4472",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a777ea0-7477-4fca-9c6e-8530c933f3db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8a867a1-7805-4415-ad7f-4e0b653b2951",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bda69aa-1cd2-4b6b-93a7-170b24b35a2e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19082c15-ba73-4784-8d79-47a4e71a96b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f3b84f4-8ef3-4e75-8343-ea4d196e6a8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99f3ad69-7c9b-4a2a-9061-70945436b72d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ad9a4a4-8d49-42f6-a5b6-c5be38866f48",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f8f4846-3105-4f90-8beb-9e97dcb45548",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd79a076-42b5-4c0a-a4d0-c247722e0d15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "264bd2f5-c34c-4d4b-a861-f111ec26c20e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da254b81-2d5d-4ff7-9bde-b23950e4fc08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b670782-1646-4a72-8eb3-9fa55d45dae8",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ffccd15-1445-4040-8d27-1d4fd160cb33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a0f9ab4-e0b7-4a16-8443-ca4f1f2110f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93af6ea0-b2d0-41c1-a0aa-4cbc8f989bc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d9a138a-643f-467b-a111-f31927b743ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95519107-f59c-4037-9c79-5b2b32011c38",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e46e690f-29b4-49ae-93b6-35395864a95d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d925d0c2-a3ce-459a-9f0b-0941c5dddad7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80cfa288-6fa3-4340-be8a-91fd6ec2a14e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47d62991-2fe1-4c4e-b76b-ad81ac0663dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e933243-313d-4d56-8715-7e058d476d4b",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "161e5bed-51ab-408c-b41a-20302eaf2cbe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b14427c0-fa1c-42b1-9a16-007b60093db8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f69ed6b-c17a-4e6f-a275-66a813b05b1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d91aed3-c7d2-4297-8089-27393edc1f7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "affe8043-9932-43eb-8666-cfb80519b308",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85fbb79d-f349-4e93-9db9-fd00d6ec0900",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f60a700-06d1-4318-83a5-50cb60d68900"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9499e201-3839-4409-b179-3f86384648de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ada7094-2966-46b8-b41e-09944ac1caf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a540eb85-c03b-450e-83c0-adf3917f7b83",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39bada69-c853-4748-ba95-dadfdbebbb7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3e5b336-de49-40be-abbd-868974ca8219"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e5ac716-abb9-4a87-b49e-4bab2c198fb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6543bda-6982-4740-8609-4adbf076e0f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94be74e5-a2b3-499a-8f81-5bef4fd9a51d",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "968be663-31f2-4044-a1ab-7432b82b52e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a361147-7788-4bab-98c4-eb80d6b254e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fd221c5-ab3f-4dfc-875a-1616d7be4265",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f83d2b8-23b0-4368-be1f-8e6fa4984c3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19ad0a61-a573-4aff-a4d5-4dedcb7668be",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5eb8a0b-b527-449d-81e4-94156a405500",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf328f8f-8bfb-4c4f-850c-19f5f0dbbd2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8d410d7-5e88-4713-b5ae-ab93ad675df8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7da51d9e-a84d-4d39-8136-548f836515d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53d0e48c-0997-4425-aab3-abddbd6dd6d6",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2295fac1-111c-4556-891d-afcc90d8cf21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd15c937-05eb-4f21-95e1-c5f068d64abd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40380df3-73ac-4384-a1b7-65a7ae5529e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9259ff3e-83ad-4dc9-83e5-239a55d4990e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd2a3af9-63d7-416e-a60d-5e896f649515",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8faf4ac9-2f6f-46dd-bdef-cd39c6477e42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5126e274-d199-42f6-9a73-c03aa240cf3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59d85695-0a27-4763-986d-8341c78457f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36770f64-15eb-44bb-95ff-be2f0bf6db6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f95f017-79ab-4904-9eb8-81956fc48b94",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4acc8fb4-2a65-4366-b152-8dba5d89feaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d45c743f-4373-48e4-8f89-d2fb56b0b2b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e71845a2-c0b2-4bad-9b07-602285fae7c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da41aaa2-d761-424f-a174-563e41ab594b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "434a317a-4dcd-4102-af34-78553f24c66c",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d14231b5-2220-4bf8-a620-500fa2099b87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "342d4c65-3fd4-4659-850b-23c48c51716a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06b199fd-6ad2-438f-ac9d-ee7bba3e9c94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e038daa5-7434-442f-9968-cecd1a391f75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b3c4bab-4c21-49dd-8119-2f75526f0af4",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40308948-96f0-4bbb-a334-60045f06a143",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d49e6173-b30c-4be4-adb9-9f63a6afb197"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55e410e7-cedd-45bb-ba69-4b02a4e2faf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03aa82ae-e8bb-402d-bb99-0304df3a7814"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e077cce-5018-44c7-950c-f4ff92fc1988",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29116d6b-7469-4d0c-a6bc-6b186e576d67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c38ecd30-b508-485c-bd22-15d708576391"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94693be2-6da5-4411-b6c5-d32c4eeba4f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c193e7f8-a42a-4497-bcd4-8b93824e4563"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc617de4-ca59-4fcf-85c3-b4aa1a7bba8a",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08cdbc01-1d56-4842-a260-89975c7b7b0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab80dac1-e5ea-4896-948f-8c7fd9266d77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ae36563-1b72-4332-b82b-b26b37df9afd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "731d46e0-624c-4113-bc38-7b919557f9c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6854c271-6968-4f74-944e-9999e578eb82",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4603acbb-43f3-4792-8ad4-5dbd49f589ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "508abc5d-2747-4cfa-86da-c739cbaf98a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0e4df54-b936-4c12-88e2-f6f923107c38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c655de42-ccb8-484f-a715-ad61498cc799"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a327a4c-4833-48d6-99ca-98a111eab4c4",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09f03002-315d-4092-8fc8-69ca7277e784",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cb3000d-8791-49f5-9acf-94a5d4b881d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "719ced8f-9d16-4a2e-9834-f95fd2b3083d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e888d055-31f5-482b-b972-fe81b8bef9f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96705b41-fbaf-499a-9cae-f83319d5d9cf",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "587cf250-91e8-4283-8d47-cd419f08892f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b2c72e8-e16a-4db9-9442-8ce27ed3a898"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "090e6b7a-1ca5-429e-8972-ea0c2d2749d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed81748c-3e7b-4363-b56d-5e611e4151fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "027b6b2b-570b-4e53-bac3-2e743af6d3b1",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd502699-87e9-4f92-bf1b-6dd8e6d21af1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76f2d26a-5867-43b3-b4b5-a66e08bfdc51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41b26fc0-3418-49d4-8be2-09aea7d94d64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c67ca930-1312-4b69-adb5-9857d8bc77bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82c682b1-b94b-4ca9-a7d3-64a94fbdc302",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2a5ddaa-febb-4142-b6a7-12a2f6bf7650",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c6c8096-df1f-4c12-913b-81a5cfaf8d3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93a2f2d9-2fb3-4910-91e2-6f02f9ce808a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6faf8d1a-50d0-486c-8da8-ad801733b2b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6def08c7-f595-4c3e-bebb-a4c42c5a2741",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f22692c8-b2b6-4532-8dea-b4a6a184a0c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e1a81d5-1990-4d00-98a4-6ca06b0a07ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "854bb0e5-6ce4-4911-a6e3-570771294958",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80c04746-20e4-4619-b537-35b7ee26831e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "175e9dab-cec4-4bd2-b029-96028a15809c",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48ef3bf0-1622-48f5-b0c9-95c5decbf8cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "755323ba-c4ec-4cd6-ac73-b959fcebcbdd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4e838ef-216c-4743-89f1-f52e9489fe0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25c749f6-820b-4f75-8aac-4bcc2cd89cfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eb0b031-cc96-4acf-a147-1d42b0a55e81",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf978763-79f2-4aed-9330-90265c734ca7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "985025a5-c7b2-4989-b21d-6d3b4d2004dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fcadbe2-ac2c-4708-b972-333396708826",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "456a1a43-8095-42d5-be3c-9eab9c9f74c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9782c06d-eea0-4ac1-87ca-8da9fed0d119",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5598197-6465-4568-990f-d516e5109795",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0c2b287-e434-436a-a3d4-decc11d25f09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee629588-70e3-4d1a-bbbd-c0426d2b8586",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c14109e-bf24-4e66-bbd1-4624d82f5474"
                        }
                      }
                    ]
                  },
                  {
                    "id": "434cb5ca-fd37-47cb-a201-0fd2ad946169",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5f710ea-5742-4d70-a60f-bdffcd32c800",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f0bb468-e2bd-4a69-92b7-d77e8e2cc5b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cae528f2-a610-47e0-a25f-fca1760553be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d720bb22-cacb-4b0e-a758-298e28d8ed3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d88b921d-4369-478e-8926-3a3662dcbde5",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f2d44df-1727-4332-bd68-acb1a1ed6cb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "105071f3-a8fb-43c0-9a80-0118e286c07a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5540b31-df48-4e4d-a3f2-241ea82d658f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "985fe7c0-9415-4991-89dc-78e84cccc39c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1169c38f-bcdc-4fce-8464-b23737657aec",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b61292a2-535b-44cc-97fe-5a9d1da5ebf7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "848e30f4-0264-4844-b487-d54a8ee41b9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51f561da-f502-492c-b486-71e4bf309313",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "857520db-8873-4330-a1b0-1a89b7d1dfb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21b7123f-0e4b-4868-9234-a805b01683c6",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f619dc4-f94b-439f-8571-cc75c22971cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a275811-458b-4746-952d-7b718cd00b0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e6234b2-48be-4c81-91d8-97a24b69f462",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a086b22-6e09-44dc-b3f2-7f9cb0f2beeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c38a21d7-7f74-474f-974d-6aac7b301b14",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "475bc359-db96-4aea-8298-097dd4dbf836",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b01ead9-a0e1-43a0-a1aa-1305860ec00f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fedc3aa4-36da-4e2a-9577-b2870abfc638",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88b57eb4-9516-4b3f-badf-3eeb2b9424d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7a43472-a315-400e-86ab-4de696f976e9",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7afcb378-d3af-475b-be52-e0e040bf276c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a070c18e-594c-4006-a60f-69576124e3d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97d3e21e-14e5-405f-b024-5beff066de4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbcf208f-96d1-420c-bfd6-5ed45c0d2497"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc1a9e30-d5f9-495a-a84e-7189927d952f",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86e90739-a834-4986-8e1e-915d9f79b5ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "539656ea-0c70-4707-ae85-9f1f1839f4dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab288966-48e6-430c-b013-305fa5dee421",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fa331fb-171d-4438-92d2-da0e24848bf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a0951eb-2069-45d4-bb1b-2719897ee354",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac639813-c39c-4a97-88eb-90068fc0ee9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4d9496f-49f6-4d7e-ad0e-e632794ede35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cef6af8f-1dd7-40f9-9952-4bb3eb4fe3d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d94aa66-dc51-4e49-9f3d-7c34d8c79202"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f70ea3ce-31a2-43b9-846b-c4439a0c3186",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "787323e6-1e98-4e99-81e7-5d411f6d5192",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ceec6044-a041-4839-9daa-eab6973291d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5cd9dca-ba26-4706-bb38-704c67d28c30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "093863e9-7b7a-4e2a-a48c-aff8bb9c3ca7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a39c12f-abe3-493b-99c7-603a2d3dba51",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a858c85-d948-4165-b0f7-6707d2d8f193",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd653524-1286-412a-87d2-4372dd54bb43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4183c0fd-59ab-442c-80b9-aa69e23605ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "749a45b8-88f7-4f41-94b2-64ecf8038614"
                        }
                      }
                    ]
                  },
                  {
                    "id": "120df404-26fd-4fc4-9969-fb64d68e810c",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f07c7404-ef74-48bc-8a29-365453415231",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef0e6eb3-3caa-49b2-9cbd-12f6e1ed8548"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18136a0c-7495-4ec0-ac7c-e389e4419dcc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95f830b5-fffa-4c9c-ac27-df4dd32de8a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1358e68-3032-4059-aaa3-788f6d879ab1",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caa02a9e-9f40-40e0-abed-e377b0a16e5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2047f024-3ddc-467b-bd70-a48323f4235e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af1a9e66-e01d-4b3a-802a-e45e43c4324f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "658a838b-8036-4439-959d-3c619ed36881"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f9f88cb-32ff-44ff-aada-65d16521980e",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f051ee0d-d8a4-4c1d-8f3c-dca9f3a23927",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c9978a3-dc96-4cf5-b4e5-97516bae13b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80d51ab5-51c6-41fa-b321-3c1d1cb798dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "252c6134-17e5-488c-974e-5525dfac69a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a35501b0-f7b0-4f42-847e-ed9e85718317",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f1eb926-7e0a-4529-a921-fb9565263a5f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "838b8183-9fb3-41ee-a35a-08f66dbdb690"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "860ef4d6-7b5b-4ab5-befc-f8e8e1463d33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47818e70-1c4f-4aaa-9f00-634e9bbfe30e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3015b3d-2e00-42c2-b177-c1b407cfaea3",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69a82ec7-dcae-48e5-a4b0-629e33b1be1c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d39be7e-ed6d-44c8-a463-5912b1c0bc99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de95a3de-6f3c-4ad8-bac1-327c05918375",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec1cdce1-ecbb-4f49-b2f0-99a2ea8d430c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93983f1b-a2db-4a46-90de-74dae73b6222",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cbd5346-a582-4fef-b4d2-831d4369e325",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff305488-7a40-44d7-82bc-e821597af6d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d6d72aa-b069-406a-b943-7d886d52f7e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c32e6dd5-f0e0-4066-bb29-d7a1c9679704"
                        }
                      }
                    ]
                  },
                  {
                    "id": "954ab890-17bf-489e-a5a0-3c9ad9124c12",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a0b0154-4527-4e71-86e8-4c3face37a9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1308f444-d48a-4fc6-a229-6fead291fcef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e92585cb-b2a6-4a75-acf7-43d84bf77d05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70e581b3-f819-4e5e-aa5f-48d6ac0dfcb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ab9e1cf-aa5a-4188-b51e-b0968d422a21",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0f2916b-8f16-4444-890e-9726cdcf046d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cde33f5a-bd32-43cd-a91f-81e978b6b504"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0948a6e1-b4a7-47b8-8931-1af0a431c664",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f77b31a1-8deb-4137-8b19-2d668b3a0cb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a56228a-f5b6-4605-a3fb-388258c6977f",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "959f3454-f862-4cc3-99fb-f7ace7abbf12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c54a688-3f5a-4c80-bf25-a2d4a18039fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5825bfbb-8900-46b1-a8db-45f3b3cfdba2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33850d06-7079-4488-b377-483ae08f23ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9de36fb-be92-4e85-88e3-e400f683bde1",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a906d57-c784-4a15-8a5a-c02973b026a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82ad0549-487a-46ce-82c2-78e360fa41f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2feec10c-f7f0-41aa-a15e-58ff0ca85444",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "841721cb-4bd1-46cc-8ea8-5478e2cb916e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4344a95c-a8c3-4e59-bb06-227223de6e51",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dffed80-fc2a-4ad0-8c66-1d182a60a028",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c873e765-f439-4fed-9420-1885fe79cec9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08072919-1b74-4640-a94c-a74d8875af63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6e77bfc-1d54-4fff-acc7-5d6413549a0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad097e28-3915-435e-8be5-7c20b1a5c03d",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b72f4e4-0298-4b11-8ea3-e40fb179adf1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca125b80-93fb-407f-b995-f0d406dc6579"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a91d2e7a-4a06-4660-99ba-d58b85a76206",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3af14d08-1101-4ed7-b9f3-171d22ef910a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e33b5a2c-3b0f-44ed-8b4a-563112b41306",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70a6ff3c-92c6-45ec-a397-5476f95d40a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "099ec5ae-d848-4e0f-a5d5-5c37bb5d75fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a673fe3-404b-4e22-ae4c-f4f2248a5179",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f234550c-c53c-44fe-8b59-a2cc897e5328"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efddbea3-1629-43d6-9803-bc80806ce05d",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6cae028-23cf-43d1-8491-e99aab69d51d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "542f4c8d-8764-496d-80cc-897384104932"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1224c1cd-83d8-42b8-81b2-f441c6821778",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3849f195-6ac1-4ce8-97d1-2810fd5b431a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e667224-e621-4c51-87f8-d71b9cf770a0",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8029ea4-7cf2-4088-b23e-0f800feb1323",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c094822-ec8b-4d97-a275-94f7c515d677"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "113a12b1-190c-471f-8845-e5b2d929355f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccf6812b-6876-4115-9fb8-d23aec75c758"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7748206d-39b5-42d3-9d5a-e717b981df85",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86b3ef46-112e-4bad-bcc9-73b6462bb800",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "94a4926d-36cf-425b-b720-350bac9426ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b93e169-36b9-4c5c-9d76-bfd4b6560ff2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee850b9d-a6a5-4ff1-9e7d-4b06eba2f935"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ae3431b-fc1d-43ca-8171-6a7773c082c6",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a869990a-b56d-42b1-afd5-8f7bf77811cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b12a9874-9496-4e25-8a53-9bf6b9c67465"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f526d180-7d3e-4e19-b91c-e8b77c389ec1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aaa7e047-8632-498d-8d5c-f5ab45d03b97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84260653-9e58-44e1-bec9-f90357ec3abf",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93b0e931-49df-49dc-bc26-142e06cafda8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "444c837c-495b-4577-bac4-08001725af69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d75220a-64eb-4618-95c4-d5bc31933b33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89a58ae8-666e-42ad-93d8-defb29385cc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "720dcf9d-6300-4ae3-9dd3-10df3a991ce9",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af629733-433e-4217-99b8-c7e2788f5114",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13046250-c518-426f-b72d-969d84762edd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47748ca0-f09d-4074-b974-971ffae0b414",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c53f0876-e5e0-47b5-9e2c-72d86ab4cef0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed2cd876-b05d-454d-aa7b-11ca73241a93",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63f5591e-ffe2-40d1-b4e8-7a6f01730142",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e70ef5a0-a599-461d-b00a-1022250007c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03863fdf-80b3-49d6-88dc-72a19d79fec2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96686dff-4221-439e-b9e3-b538d0a80a78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab6133a2-9f63-41f0-bb0d-05c845214b25",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f6c8d42-8655-495c-8caf-6cbb073f5dc1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97cbbc99-1a61-4f13-8284-8d1c2adca487"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf67a4a4-d388-4c7a-af01-c3b853cc0e17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88977919-2b97-4a0b-b7e9-ff88d1e7ef6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb78d4a7-25ca-4563-8036-88d286575f85",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "863b018a-2489-47d4-bf9d-1e811212924c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99b5ea2b-b129-4105-8788-eb7359215531"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeebd53d-0bb5-45b9-8aef-fbe166f4fbc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "966aeea3-7070-40a6-97fc-479c5aaf4934"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b4fc538-c784-4b3b-aa2b-8f3dd1e6d541",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "904b684c-8ec6-44ab-b746-8c90505db42c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dab8ee34-c2e9-4a00-81f7-56642269626d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb5dbf1b-1ca7-4057-9866-3394ef24151b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ae95946-3be1-4fc6-b34a-963276887aa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a71d53f-4547-480a-a2b5-aae1c57961a8",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b01dac23-7fa7-4668-bece-75d1a116e3b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5cb35056-9474-4935-b5d4-a942489680da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e450eb0-0fee-4a1a-94e8-fe73b91cfa55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7400deaf-facd-44a7-abcc-602544cb4013"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e6cf514-32f0-4286-91be-d8c2d9940feb",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8c26c3a-761e-4387-ad12-efb9205de44f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "873cf942-2dde-4aeb-9df5-ed0e3aeb3014"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f98e224-d4a6-49c8-899b-9c6d600d2422",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99fe4da5-9129-4ae3-8180-c8dd1499be57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4382b731-6506-4e8a-bf4a-020cb37edbe8",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cd391c3-8c18-47d7-a36c-492d25c5a718",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0694b13-f58e-4691-9dc6-65b04eb6d9ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5bc9aaa-f82c-406d-bd4a-9c36f5e1e2d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d52227ef-e48c-4949-9413-c28ac0a28478"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be1ccf37-9c41-4eef-977b-e7abeb18a21a",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "446b4424-52c5-4ef4-9cc0-a5395a4623c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5f26af0-056f-4c87-b1dc-22929ade0276"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "647276f1-dac0-443c-9906-406bdf48da81",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e18a4d09-3172-4954-afc1-833405f78cc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd8dc966-16fe-4e36-ba3d-7b265d478147",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1678332c-63f8-435f-99cb-08f22d180926",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b0a2ce7-f064-4877-985b-e55cc26295a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71c89a3d-1b60-4262-9012-e05e5d9d2c60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d05a42a9-ad5a-49fc-88d1-f1a2db287c97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "390b90f6-702c-49c9-b8bd-e158599b9b9a",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cdd7d00-7698-4e85-87b5-6c3d8e37260f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "caa7e641-728c-4bba-857a-4c495cfe0379"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e3537c4-32f6-4dee-8900-1b59ae14fa0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d60fd41-de87-48a1-8588-f26958d87bac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb55f98d-e0cc-45ce-b005-bf6bc7164ba8",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1691b6a-b12f-48ea-b969-af5c7f8a63c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aff26b71-3214-418f-accf-e1cbf8c68e21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b55d48a-e41a-45b0-ac55-dd60345cdc8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d4c35cf-dbc1-4abb-b693-9ffef0f2fa2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75d68e57-9e07-4475-93a2-c1ced9bc7d23",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90a50f4f-ce25-404b-8e16-4dbbdb7485fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9c82240-e8b8-47aa-9ab9-dc00fd934009"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43ce1d69-8ecd-4b82-a90b-4d8182d45ca1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc2537c8-fd64-460b-954e-7f0a05ad9e16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97926076-9679-4bdf-b2bf-35f0d16364de",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ad816d0-ba44-4c35-9118-5f1742ad30a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f842637-df1c-484a-8823-3cf843b4e287"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffae6f22-eef0-449a-8beb-23dea3d8d2be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24f001df-c464-4c19-bdf7-a467a0f2bde8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8414f93f-3360-4b6a-a4ee-a5b053ea6fe5",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f516279-0b6d-499a-bbc6-b744d8e799f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "046a8939-de4f-42b7-995a-0a2a366d9760"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47deeb6a-d338-4ba1-9ef0-684921b0d97b",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36c0940b-ee8d-4890-902e-c2b9e39feb94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03b6668e-7bcf-48f2-80ef-f0d2195c01de",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39aca2fa-3219-422d-9f3a-9bed4fcb055c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23fcafd7-c470-4f22-b805-6420282f4722"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0dce270-7fea-4415-890d-135cdf6c59fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce5757b7-94b8-40ce-ab03-5122a1bfe057"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2b024887-1fad-4e5e-99ed-e220531aa0dc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5b206024-2d07-4353-b702-93f73cd4d4e2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cc957765-88c1-4f06-8254-df9c120fa352",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c01866f4-62d8-4378-9943-9473f15dafac"
                    }
                  }
                ]
              },
              {
                "id": "ff8a485a-6a5f-4b75-b886-4e8c00427809",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1411cd97-ada0-497e-9762-d93f2f61a82b",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a7dfbef-7583-4088-97ae-0902c6fa2e90",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "1849b89c-e241-48aa-88e0-982a0fe49681"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94f6e2aa-6ee1-4463-821c-15862a47020e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "042537a2-4a08-4045-8556-1cd9c3410fa6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "991d7248-cfb1-4706-a436-fd1ec86fa503",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "42e3ff84-53de-421b-830b-ea10c4d9ff39"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0dbb9e14-5868-4dc7-9ac4-1fa0f60d8f26",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c2b84590-577b-4665-88da-5c3602df4ef0"
                    }
                  }
                ]
              },
              {
                "id": "c787c800-22d8-44bd-b3fc-105a151abb72",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "74edfdb4-3097-4bcc-a214-8b09bdf16783",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a24a171-9078-44de-804f-51f523ef4604",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "cd348a49-3284-4828-8ef1-b56514e93414"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "538781d4-b151-4b37-b7e1-3c14589455a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0998a03a-ecc0-44b6-bac8-6cc828c5db1e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "d931be39-f734-42cc-9511-f0778926d984",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c540ecc1-cce6-4aa4-ba2c-eb1d0bb7ea9f",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "78f6bafd-f980-450f-9b87-c03b6aa8177b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "2ada5a21-75ec-4886-a82f-0ed6708e23e0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1d840e2e-5951-4919-9b84-961b29e577f3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cffa7980-d75b-4434-9409-264bf8e3d0ff"
                    }
                  }
                ]
              },
              {
                "id": "8b36e02f-d7c3-47d0-ac43-86dc03574f24",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "15adaf2b-9c39-4b19-ade5-f964ea4c837c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "e7b8825e-3866-4245-8402-7a1697a3f2b0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ee4c2bd4-5fc3-40c7-bc7d-d90d1042f28b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c748b735-77ff-4209-9ee4-5a597a09ad90"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8507a475-c0df-4a23-8982-40fe9562536c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "28716e89-6c6e-470f-a6bc-2ec06a782a82"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fbb3e052-f812-4f21-978f-c0da6e31c084",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1cab6bf1-00e5-4923-a8ce-f8a9bb07fcd4"
            }
          }
        ]
      },
      {
        "id": "9afcb017-5661-42a8-b7f5-4a7632dc4cdb",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "fb0fcbc3-9247-422e-9bfa-45fe4ad662bb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2c6f96bc-5b3d-43ad-a9fc-934049401f0c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e8b27ca0-700f-4e05-b0af-5d998103de92",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bef4dd3-6235-4206-bacc-25d6510353ba",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "fef29721-3306-413e-9561-3835dbf3a858"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80c2c686-be2c-45f9-aa08-a736b45e7277",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "36a15416-4224-4c04-a006-f119f504e2f7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "957bb356-9635-4337-934c-5341e614bb28",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "64bb9a90-56fc-4f07-adff-9cd91e937bf5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6b4e4bf6-8005-46cf-a3a0-7cf8b74c3303",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8cd1cf7b-7196-4502-9453-0c525a002482"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8e181387-54ca-40f9-81ef-8af15d04b888",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "ae70a455-a54f-4c06-8279-45b2432f0c87"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d302488f-7aa6-4ff5-8b22-6aaaa828a14a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "10fbf2be-4856-4ad7-88ff-d9903ea6b4e2"
            }
          }
        ]
      },
      {
        "id": "3f946bca-c8d2-40f4-9586-21cd80fc4802",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "a88df32e-1983-4d3e-abe4-4059a5a61eee",
            "name": "Negative Testing",
            "item": [
              {
                "id": "10abca3d-2407-45d7-85aa-1a26b22405fe",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c0d6a1f5-c4ee-4146-8fca-e9964c75e1ae",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e019acdd-9020-4b2d-81d7-496d8b273d26",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5ccc3998-cc34-43a9-a84e-e47f4f2ff685"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68ca761a-d516-4cc4-88ca-2ad107ca73ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fe3623c9-ad58-44cb-a7e2-8bcde9b4ad6f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c5923e9d-44cb-42e4-aaba-d194534c7d69",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "27ca5f5e-245c-4657-8fce-f617f2b62309"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b8f73699-5a26-4a60-848c-f22e849771fc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7d5173ec-3540-475c-ad58-cc27b2ab7dfb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9038afdd-94a7-443a-a48e-b72d6f7ce15f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4b19ee1e-6144-47d7-b5ba-fa99787ff1a1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "304441ef-1417-4759-9769-944ea5b2ea5c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7b9d2742-7992-4bd5-8e25-f68f1aed5098"
            }
          }
        ]
      },
      {
        "id": "c4c11aac-475c-40df-8711-1145b6c8f53f",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "11a96a27-e4c8-48c8-98fc-291f9e841ccf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "be693100-b1d3-4a42-aab7-aed27d568536",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0a52d1d7-1df8-4497-bd29-65df04807eff",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80b0448c-929c-4ae4-b095-a8a304ba5633",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f3127b1d-73d4-4d05-823f-92e236d79303"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2634869d-62d6-4574-9527-0c91a10a4424",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b37491a9-914e-4d7a-9f17-1743c897780e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3cf07e34-66f5-4389-bbd3-8d694bc35b15",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9929a7f8-87d4-4e16-8d1f-cf77f01532a3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c71df4ed-ae5a-4af7-8066-f0a284372fdf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e7a258b0-157d-4481-9d0c-c2ae2f962e91"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2fa64204-769e-4e4e-9fde-0f27f049663f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "edb6ba8b-f004-4bf6-93ec-92ccdede6bb9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fc57a0ee-e35e-4ba2-b3ef-c1b04a04a850",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bf01544a-0f7d-4a33-82fc-06a7b2bd7c54"
            }
          }
        ]
      },
      {
        "id": "7e687618-242d-4a05-8974-9ab2d633718e",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e8449d6e-e5ee-432c-b193-0c750e85bc46",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6978b3aa-dc09-4c61-8a33-89cdd711d0b9",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "e00b1767-01a6-45d3-a57f-580911b26e36",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c7de040d-2a35-4b07-b843-8c6541c32293",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "32720be8-ccb2-433f-b6fa-0369bc4bbb8a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 70.28571428571429,
      "responseMin": 6,
      "responseMax": 522,
      "responseSd": 58.38404015760401,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1712104458944,
      "completed": 1712104485144
    },
    "executions": [
      {
        "id": "ca68af3b-7395-4e6a-a6b4-08b869eb7df3",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "32394415-dde0-4b7f-8dd0-d16d6443a147",
          "httpRequestId": "75bb8e0e-95bf-4484-92c9-3ad28e73ba03"
        },
        "item": {
          "id": "ca68af3b-7395-4e6a-a6b4-08b869eb7df3",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "607b4e68-aba4-42de-9a51-04ecd706d22f",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 0
        }
      },
      {
        "id": "b458845c-85ad-43ee-8bd6-4b35a68667d9",
        "cursor": {
          "ref": "8dfefe79-be55-4803-aaff-224c2ad4a1eb",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "92d30bdf-fe62-4a97-86bc-fa35cfb11cdf"
        },
        "item": {
          "id": "b458845c-85ad-43ee-8bd6-4b35a68667d9",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "da930377-5d73-4bea-a7b2-963ee29941fa",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "86e34902-8d72-46c9-8da8-ef243f6f6230",
        "cursor": {
          "ref": "6d9247e2-121c-4bd1-8eef-a3aec641aa95",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "58ff6001-4319-407c-ba41-a3f559d1062a"
        },
        "item": {
          "id": "86e34902-8d72-46c9-8da8-ef243f6f6230",
          "name": "did_json"
        },
        "response": {
          "id": "7c274f6d-360c-4718-86ea-279a8e3dc956",
          "status": "OK",
          "code": 200,
          "responseTime": 169,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b98e28bc-b5a6-48bf-99d7-9ddead372016",
        "cursor": {
          "ref": "112b32aa-91bc-4fee-af4c-ef02b9e008b1",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "97f32448-e7ad-4602-b0f9-90e38fb1d167"
        },
        "item": {
          "id": "b98e28bc-b5a6-48bf-99d7-9ddead372016",
          "name": "did:invalid"
        },
        "response": {
          "id": "ceb9026a-6d90-481d-ada3-07adce48b7c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b98e28bc-b5a6-48bf-99d7-9ddead372016",
        "cursor": {
          "ref": "112b32aa-91bc-4fee-af4c-ef02b9e008b1",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "97f32448-e7ad-4602-b0f9-90e38fb1d167"
        },
        "item": {
          "id": "b98e28bc-b5a6-48bf-99d7-9ddead372016",
          "name": "did:invalid"
        },
        "response": {
          "id": "ceb9026a-6d90-481d-ada3-07adce48b7c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ee8b548-72ad-470a-93bc-42473af2faf7",
        "cursor": {
          "ref": "261f73b9-673d-4082-8d43-d82a99c79d2b",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "8d7ebbf3-78de-4328-a7c7-0470909b8e5d"
        },
        "item": {
          "id": "9ee8b548-72ad-470a-93bc-42473af2faf7",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "bafd1fb9-f970-4224-9eb3-76caef0aaafd",
          "status": "Not Found",
          "code": 404,
          "responseTime": 157,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b424df88-9c14-4cc4-944e-b5921bc39c93",
        "cursor": {
          "ref": "587c2b61-0a63-4f61-85db-ab30d76df508",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "80b4525c-0504-47d2-a09e-06c2feafe216"
        },
        "item": {
          "id": "b424df88-9c14-4cc4-944e-b5921bc39c93",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "f0e27680-1c4c-401d-a227-f9d11f99bbfe",
          "status": "Not Found",
          "code": 404,
          "responseTime": 51,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d157e7a-ecd6-4332-b675-23d31afb2bd6",
        "cursor": {
          "ref": "36b76eed-72bc-4133-a432-1e7ebad87138",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "73ad45c3-241d-442d-83f0-8377de41132e"
        },
        "item": {
          "id": "0d157e7a-ecd6-4332-b675-23d31afb2bd6",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "a4df3c38-5b3c-4bc6-bfbe-33838db23397",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0b05732-16b4-41d3-ad01-f8dd787408dc",
        "cursor": {
          "ref": "65a9428c-2c65-4d2e-8601-8bc4ce380001",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "b555ca5d-c186-4483-8f21-de31b3936272"
        },
        "item": {
          "id": "c0b05732-16b4-41d3-ad01-f8dd787408dc",
          "name": "identifiers"
        },
        "response": {
          "id": "89cd73f1-cb2f-48c8-9bdc-4bc1cf91d9e2",
          "status": "OK",
          "code": 200,
          "responseTime": 98,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a0192b9-4b08-4057-a10e-00abe377b529",
        "cursor": {
          "ref": "ead78451-6f2f-470b-b77c-edd1f5b3d3ac",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "732b5fe1-c9ed-4194-8951-d5bedca443d7"
        },
        "item": {
          "id": "1a0192b9-4b08-4057-a10e-00abe377b529",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "311fcdfd-5bf7-451b-81c6-0de4ce67d2d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfeb03c1-721f-4fb4-b81c-7c4f4fc60696",
        "cursor": {
          "ref": "cb67404a-b0c6-4c32-a9bd-97168e556046",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "55c36f9b-c433-415a-bd5a-b81d46f0cd34"
        },
        "item": {
          "id": "bfeb03c1-721f-4fb4-b81c-7c4f4fc60696",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "93cf449a-6210-4618-b07e-0f224a83751e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dd8edd1-6105-417f-9513-0ecd3c1f7da8",
        "cursor": {
          "ref": "2748fe5e-7fc4-4062-8eb6-7a9409b93d72",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "708e5c0f-e454-4b64-968f-632c0e81a0f8"
        },
        "item": {
          "id": "3dd8edd1-6105-417f-9513-0ecd3c1f7da8",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "89f0ba23-25b5-4947-9d82-baf6db68d9a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33f5b320-23d2-45bd-9723-57fd84cc63dd",
        "cursor": {
          "ref": "ccfcbfe8-937a-4d5c-b6ec-dca87d530d58",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "3bd26311-ba71-421f-af90-adb07a143988"
        },
        "item": {
          "id": "33f5b320-23d2-45bd-9723-57fd84cc63dd",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "012e3a89-c897-473e-9999-ff22c61a0d2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c62753a-c3ab-4086-a596-a35fb956832f",
        "cursor": {
          "ref": "46548886-f25d-4a1c-8264-70e81e7c210d",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "775d1e4c-5d3c-492f-a0cc-a096e7a9bb59"
        },
        "item": {
          "id": "8c62753a-c3ab-4086-a596-a35fb956832f",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "5b6138cb-8e13-4d40-bcb7-fc3ab60c6bf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5e8977b-bbe6-4331-970b-4cf7805bfbfe",
        "cursor": {
          "ref": "6f59c51d-52e1-48b3-8938-21f3b66735ca",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "bbdd0556-3744-4ee3-85c9-8234a1f62d7f"
        },
        "item": {
          "id": "f5e8977b-bbe6-4331-970b-4cf7805bfbfe",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "58041932-ae93-48c1-a143-4d2146f3f2fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75515f4d-0fd5-4732-943c-c1d208677144",
        "cursor": {
          "ref": "83e6cf70-7ae8-493c-a5c6-272f5e3f477e",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "5d2631cf-fcbe-46a1-9cb1-d499397c4694"
        },
        "item": {
          "id": "75515f4d-0fd5-4732-943c-c1d208677144",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "de4ad797-6a66-4ca8-8aef-9f1960a8528a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7616bf5a-1a1c-4af3-bfaf-3e03d2727956",
        "cursor": {
          "ref": "025db15d-12cc-4eea-a5e6-15d629dbf473",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "9d543523-d387-4744-8936-c862c3ec4276"
        },
        "item": {
          "id": "7616bf5a-1a1c-4af3-bfaf-3e03d2727956",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "65e7626a-d097-42c1-8465-34eadae2ed3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f1a07de-3eca-4437-804b-163d580f8ead",
        "cursor": {
          "ref": "e1be37e7-181c-4c80-b8f0-b18edf60077b",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "bfc3e42d-c9d2-4c2d-a058-b20bce502363"
        },
        "item": {
          "id": "2f1a07de-3eca-4437-804b-163d580f8ead",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "36ae819e-9424-4309-9e90-287a6ed3a2da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c9601a9-5165-46fc-b146-f7947c3621d8",
        "cursor": {
          "ref": "db840408-1075-42f0-a8ae-e1f7b3b0aa16",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "7dbe4467-614d-47ec-854d-cffc0c3dfeaa"
        },
        "item": {
          "id": "1c9601a9-5165-46fc-b146-f7947c3621d8",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "337cf0fb-b716-41ae-9563-d83f6b76de61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cfe1e2a-d437-4f16-832c-1d63619868b6",
        "cursor": {
          "ref": "12a956a6-bf2b-47ab-a553-e490263f8945",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "9bd611aa-0780-4930-b64b-14b117c0594b"
        },
        "item": {
          "id": "2cfe1e2a-d437-4f16-832c-1d63619868b6",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "aa939c6d-46e4-4d8f-b90b-e1fcb912c9a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "332b4a69-f77b-48ed-b456-ec3d477d9f63",
        "cursor": {
          "ref": "4cc60405-631a-46ac-8ba9-aad7b959dd65",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "c0cad211-d642-49b3-860f-4d2e28b26504"
        },
        "item": {
          "id": "332b4a69-f77b-48ed-b456-ec3d477d9f63",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "e07ce595-da26-4461-8d64-a0130776e2d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5c21fcf-11ed-4811-a088-633fe667f6bf",
        "cursor": {
          "ref": "e8f2af0e-e074-4a8e-b300-5162170101c9",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "92e97bd0-d85f-48b3-82e1-71e5fa0a4ce4"
        },
        "item": {
          "id": "f5c21fcf-11ed-4811-a088-633fe667f6bf",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "d333a635-c882-4d14-a170-b4fee1491e14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05ccce14-594d-486d-96e8-9e9403e942c8",
        "cursor": {
          "ref": "c65443c9-544f-4aa9-8251-3ca643f632f5",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "f580fbb9-b3ce-49d4-850e-1827bac382b7"
        },
        "item": {
          "id": "05ccce14-594d-486d-96e8-9e9403e942c8",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "baef1cef-50a7-4317-8d57-d164eaf2aa4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "137916a5-114a-4fe1-960b-63cde943b8eb",
        "cursor": {
          "ref": "2f616fd6-f7e0-4e3a-8d3e-7c3e63dd58bb",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "21f53bb5-f0f9-4859-8a09-8f1dd39cfd80"
        },
        "item": {
          "id": "137916a5-114a-4fe1-960b-63cde943b8eb",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "a2bc6207-435c-4f26-852d-90887afba6d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4804a8a5-5878-4b21-b9f5-cd6b7c9c1af7",
        "cursor": {
          "ref": "def2512c-b0b1-45d7-84a1-e2dc032fff06",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "20d4de0b-be80-4aca-8619-63089f8411c8"
        },
        "item": {
          "id": "4804a8a5-5878-4b21-b9f5-cd6b7c9c1af7",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "fc80f7fb-b47d-4ee0-93e6-ccd24253cc41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "835694ba-b7e3-4b7f-af52-8552d94c714f",
        "cursor": {
          "ref": "fd5adaaf-56f6-449f-b332-dc5e9aa62afd",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "86b00a4d-0364-421b-8081-463b38223210"
        },
        "item": {
          "id": "835694ba-b7e3-4b7f-af52-8552d94c714f",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "9468ef80-d16b-4a49-a648-c3c3af3cf0f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d8a8dba-dd69-4df5-b2de-bf1aad2fe9f7",
        "cursor": {
          "ref": "635a90d7-5369-4a9d-a357-6520ecb0b1f4",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "dc08fb3c-d564-468d-9cf7-7d31cfbfa2ee"
        },
        "item": {
          "id": "6d8a8dba-dd69-4df5-b2de-bf1aad2fe9f7",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "db226e74-7428-4650-9848-562af4c8f5c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f15b5d54-06c1-41a8-9c8d-13416619e152",
        "cursor": {
          "ref": "884a3fb0-8ad0-4786-854b-61d3c6976904",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "110e872f-6199-4a72-bf46-6e72127321fc"
        },
        "item": {
          "id": "f15b5d54-06c1-41a8-9c8d-13416619e152",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "f2acc1e4-dc1c-4bf8-8265-b3d0ed335999",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f878f9c4-482a-4e45-9ee3-f75b711ffc8b",
        "cursor": {
          "ref": "6b3b74e4-1f7b-4dd3-9a20-5212c7eb99c3",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "2d644075-0f5c-45e2-9391-03b1545d1c53"
        },
        "item": {
          "id": "f878f9c4-482a-4e45-9ee3-f75b711ffc8b",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "00e40637-9759-4ebc-af60-89ca5c9978d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38acde47-90a4-4d2d-9544-1ce0e4ce4468",
        "cursor": {
          "ref": "51bda681-bfad-4cfb-846b-fac720deaa1f",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "64acd34c-0039-4b8d-a13a-3864b124dea5"
        },
        "item": {
          "id": "38acde47-90a4-4d2d-9544-1ce0e4ce4468",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "8d7f3eca-3ec7-413e-a26c-0def7f60965e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8debaca1-0493-402e-b651-1b97fa0a74ce",
        "cursor": {
          "ref": "757db52e-a770-4c1c-87f3-a0c714b0fbe6",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "e525d46c-97da-48ec-98bf-a58e697593db"
        },
        "item": {
          "id": "8debaca1-0493-402e-b651-1b97fa0a74ce",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "07890f53-1fc7-440d-aad0-c0ad93609c28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5fd2a1e-23f8-4e30-b884-1581771b15b7",
        "cursor": {
          "ref": "e0f2d99f-a086-40c5-92f3-418017e66f32",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "7c94568f-7333-404f-bdd9-c3bc948d1f75"
        },
        "item": {
          "id": "f5fd2a1e-23f8-4e30-b884-1581771b15b7",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "1c444af7-c247-424f-b7c0-e0249317ba7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9537a75e-cff9-461b-bf8d-e0693ca8e640",
        "cursor": {
          "ref": "668a319a-5c32-4b4f-aa84-45b04b14bedb",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "86f69a6c-a37d-41ab-bd02-cd38ae6a3a30"
        },
        "item": {
          "id": "9537a75e-cff9-461b-bf8d-e0693ca8e640",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "4d43dd25-7cd9-48cf-b85b-cc8e568ad4cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98bded84-6be8-465e-bad5-b5dd5b0942b9",
        "cursor": {
          "ref": "8f9a6d9d-268b-412d-a36f-0613100c2d16",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "62062fd4-097d-4d0c-ba76-d9bf57bb20e2"
        },
        "item": {
          "id": "98bded84-6be8-465e-bad5-b5dd5b0942b9",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "932ef80f-2b82-4635-a1d6-fc2d23862206",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff1569c9-feaa-44d4-af61-98d1fbc1eac5",
        "cursor": {
          "ref": "93872ee4-52ce-42ba-9722-267ec5a0b035",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "e986fadb-78e5-449e-8014-1c4564b09636"
        },
        "item": {
          "id": "ff1569c9-feaa-44d4-af61-98d1fbc1eac5",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "e25ee575-0359-4903-8cdd-32a245079f64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "751521b7-3810-4959-ae3b-39f3cbd04a60",
        "cursor": {
          "ref": "31db916e-8226-473e-b032-5004f23f041a",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "52d69c18-5152-4322-b9cf-413af21f0a4b"
        },
        "item": {
          "id": "751521b7-3810-4959-ae3b-39f3cbd04a60",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "46806cbd-71b3-4406-98f1-f668bf21cf85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8b69170-245c-43d9-8915-b015a9fc8a5f",
        "cursor": {
          "ref": "4cea8de8-7d4b-49d4-9f11-51a44716fcd0",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "cfeab937-374b-42a4-a138-3ab2d5250bca"
        },
        "item": {
          "id": "f8b69170-245c-43d9-8915-b015a9fc8a5f",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "54f73c59-8b0d-44a8-bf1a-96fc4c01b83b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "621401b2-aed4-4933-9c1d-9344da16501a",
        "cursor": {
          "ref": "4a38d9fc-b7f3-4b49-b2a5-f7abb65565e4",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "a135f92f-2204-4221-aae3-ec2eb5aca129"
        },
        "item": {
          "id": "621401b2-aed4-4933-9c1d-9344da16501a",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "66aaca21-3b9e-4d5f-812f-e204d1eaf291",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25c6281d-904f-4439-b600-6e107cd1df43",
        "cursor": {
          "ref": "0467c967-f98d-4044-a17b-a078275b65ed",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "15959697-0d14-4b0f-8a93-441d0a4352e7"
        },
        "item": {
          "id": "25c6281d-904f-4439-b600-6e107cd1df43",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "c935fa97-e6ac-40af-a7f2-6f4c2692a3c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1042a40b-1818-45c8-9c37-9e4eb7389dc7",
        "cursor": {
          "ref": "39f067ef-1953-4dfb-bb0e-9aafea08493b",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "fc831fa9-acdd-4a21-adeb-e61f25f76e99"
        },
        "item": {
          "id": "1042a40b-1818-45c8-9c37-9e4eb7389dc7",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "49bc332f-57f1-4b69-a81b-b75f20ed9207",
          "status": "Created",
          "code": 201,
          "responseTime": 522,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "b382006e-d958-48cb-b46b-98bd04bb59b5",
        "cursor": {
          "ref": "755e1d36-0612-4207-a7a9-343cd44aa3c6",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "1cdf3bf4-2860-441b-9ae7-890ccd7df85e"
        },
        "item": {
          "id": "b382006e-d958-48cb-b46b-98bd04bb59b5",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "3750cda2-0ee7-451d-8ab2-f23937c33a45",
          "status": "Created",
          "code": 201,
          "responseTime": 196,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "b64837ab-bd8f-4333-977d-a22f4c8f5ae4",
        "cursor": {
          "ref": "4e2f5fa4-a962-4fef-bde0-07ec70035a75",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "c1305228-2484-452a-ba72-bd63f7cfa843"
        },
        "item": {
          "id": "b64837ab-bd8f-4333-977d-a22f4c8f5ae4",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "e7567e85-52f8-4f66-945d-30e30a98694f",
          "status": "Created",
          "code": 201,
          "responseTime": 204,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "ccfaac45-9e65-428c-80b0-07cca7e1fab8",
        "cursor": {
          "ref": "fe32f6cf-5ec6-45b4-b75b-1e2dce66d2b9",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "588de4a2-4595-49d7-902d-2034dd776efd"
        },
        "item": {
          "id": "ccfaac45-9e65-428c-80b0-07cca7e1fab8",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "e04b83ed-6dd6-4f00-8fa0-929e08e6dab6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bbbb504-49ef-4712-964f-156b11be2c62",
        "cursor": {
          "ref": "2611b74a-7b54-4e26-978e-b17cce331ff4",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "c5622875-ccc3-4085-bce9-012215312202"
        },
        "item": {
          "id": "6bbbb504-49ef-4712-964f-156b11be2c62",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "353b5c2c-f0a5-4213-9e84-fa5bcffa01ab",
          "status": "Created",
          "code": 201,
          "responseTime": 208,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "1b4e9925-7c4f-4c2a-9ce0-c53c20ad8135",
        "cursor": {
          "ref": "23a659f2-4e21-4e79-a798-ebf3357591b4",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "0818394a-ffb8-4819-894c-6882f47d3de9"
        },
        "item": {
          "id": "1b4e9925-7c4f-4c2a-9ce0-c53c20ad8135",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "35ea5706-cdb9-437a-bb47-efccdb125b88",
          "status": "Created",
          "code": 201,
          "responseTime": 214,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "fa8f8fd3-1bd6-4d95-8d61-b1b0a151c841",
        "cursor": {
          "ref": "b98e1b97-e433-430c-a7b7-b7e07190a240",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "e262e676-6af8-4e30-9ed8-daea0d96a39e"
        },
        "item": {
          "id": "fa8f8fd3-1bd6-4d95-8d61-b1b0a151c841",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "f575396d-baa4-4118-b904-bb76ea359a70",
          "status": "Created",
          "code": 201,
          "responseTime": 199,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "d432daa9-41df-4f09-92a6-1408991776f2",
        "cursor": {
          "ref": "a2112a79-1dfe-4d01-9d85-6b6f39bb17a5",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "49b8a6f0-8540-43b6-9b79-8db0079b9401"
        },
        "item": {
          "id": "d432daa9-41df-4f09-92a6-1408991776f2",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "3a811ae4-75a7-4cc6-a917-c4c9481b1c47",
          "status": "Created",
          "code": 201,
          "responseTime": 201,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "15fc0965-b1ce-4b41-976e-e18036d6d4b3",
        "cursor": {
          "ref": "c4d61763-a58a-471a-b0e1-d24c76a4adc1",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "f9b3dacb-d36d-4e86-8f65-0f3768e4d0f4"
        },
        "item": {
          "id": "15fc0965-b1ce-4b41-976e-e18036d6d4b3",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "83f09fcf-ebfb-4f97-87e7-a78f89f50406",
          "status": "Created",
          "code": 201,
          "responseTime": 195,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "04dbcd35-19a3-44f8-9c40-04ebbb15aaf2",
        "cursor": {
          "ref": "e9b64759-c70e-4536-ae65-8defa0fbe135",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "54148738-4521-48de-941f-1815fffbe499"
        },
        "item": {
          "id": "04dbcd35-19a3-44f8-9c40-04ebbb15aaf2",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "3f334543-6ce3-434e-8156-18d8232e107c",
          "status": "Created",
          "code": 201,
          "responseTime": 207,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "63a1c115-e931-4c9e-9041-7c41fe36a364",
        "cursor": {
          "ref": "76739b83-307c-4edc-9fc0-4841a28bfe39",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "c334f54c-e05f-41ea-93a3-af10bcef1bb0"
        },
        "item": {
          "id": "63a1c115-e931-4c9e-9041-7c41fe36a364",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "dbe7e4fb-4731-41d0-a99b-6c1c5d66f01f",
          "status": "Created",
          "code": 201,
          "responseTime": 225,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "1170acd1-19a4-4b3f-ae80-d0213ab1d861",
        "cursor": {
          "ref": "1e6f0001-7413-4fe0-98c8-6f2533eb8a45",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "a29ea349-ffd2-4406-b337-1f5aea3038a3"
        },
        "item": {
          "id": "1170acd1-19a4-4b3f-ae80-d0213ab1d861",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "2a83e2d3-0da2-4294-b617-d117a62fe5b3",
          "status": "Created",
          "code": 201,
          "responseTime": 204,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "cee11aa3-7de4-4579-a632-7793bdab6820",
        "cursor": {
          "ref": "900db233-6fe1-43a8-8acb-1812703d74be",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "25454c21-db2a-413f-b9c1-929a21252738"
        },
        "item": {
          "id": "cee11aa3-7de4-4579-a632-7793bdab6820",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "c5abe22f-7137-47f2-8116-4a80233a0530",
          "status": "Created",
          "code": 201,
          "responseTime": 233,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "96fb84f8-2816-4462-892b-20e89b7987f3",
        "cursor": {
          "ref": "910493b6-6c79-470e-8716-1cdaf5af7c58",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "6f0f1a27-2fbc-46cb-80fc-355af481e0e3"
        },
        "item": {
          "id": "96fb84f8-2816-4462-892b-20e89b7987f3",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "1e4a48af-f498-4515-a43d-410067e2cdb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63150e17-24eb-42b2-9c70-68591f47bbcb",
        "cursor": {
          "ref": "c649ec44-4d9e-494a-8549-e34227740a79",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "335d39f7-f3ef-4366-9676-5df11f349bbc"
        },
        "item": {
          "id": "63150e17-24eb-42b2-9c70-68591f47bbcb",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "2f3d655f-b6fd-4ff1-ac62-4c88ffd7a154",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3827acaa-eade-4e6b-b36c-fc78b8be0f71",
        "cursor": {
          "ref": "01dffcec-4eab-4d79-93ef-1a4b5330fac7",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "c9b73151-325f-4408-90b2-c393df8748db"
        },
        "item": {
          "id": "3827acaa-eade-4e6b-b36c-fc78b8be0f71",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "73cb6398-2908-4e55-b963-8bf3ef5bc54b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b95f4c0c-e5a4-4cf8-bf5a-a85797b7488e",
        "cursor": {
          "ref": "3ad22f13-8aed-4e42-a853-c13daf43eb45",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "bd8b1315-5ee7-4f20-af7c-d98db97cbc7d"
        },
        "item": {
          "id": "b95f4c0c-e5a4-4cf8-bf5a-a85797b7488e",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "208011d1-4f5c-4a40-bbe2-6755f87fe12f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c6e7248-23a6-42a4-8ad7-17113f30be7e",
        "cursor": {
          "ref": "2060775b-1a52-4e5e-aa00-b4d1161df571",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "ed4704f6-8795-4cb2-aba8-380c184b51bd"
        },
        "item": {
          "id": "3c6e7248-23a6-42a4-8ad7-17113f30be7e",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "75d428f6-ad48-428a-abc6-eaacfabf7a4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7532f3f5-2a4d-402f-ac9c-a998f3eb4665",
        "cursor": {
          "ref": "e4e3a99e-58c3-4d0b-b6eb-fcea29f57e9f",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "190b0e47-e91a-42df-8f93-232d58b569ab"
        },
        "item": {
          "id": "7532f3f5-2a4d-402f-ac9c-a998f3eb4665",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "0f1862de-d16b-4918-8560-0c088e16bf20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3978ea1a-0ce5-4d57-8c74-e4f4ff1c1f16",
        "cursor": {
          "ref": "79c6707f-28f0-4176-b390-6c3ac805c762",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "52a6bb29-a4fc-4ec9-ba86-a2f8d1d70723"
        },
        "item": {
          "id": "3978ea1a-0ce5-4d57-8c74-e4f4ff1c1f16",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "17f6fa0b-aca6-497b-9c98-886dc35c62b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9fc76f7-16a3-4e7f-b778-57b8eaf8003c",
        "cursor": {
          "ref": "b21238a3-e0a0-4ee8-a793-c5be762b4e21",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "a3aa2852-e1da-41fd-91da-8c937f90a160"
        },
        "item": {
          "id": "a9fc76f7-16a3-4e7f-b778-57b8eaf8003c",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "36673a14-0b49-4bd7-b706-c49e214db4c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c194bba-03c3-4833-a79c-f2e9c98bfc1e",
        "cursor": {
          "ref": "fa4024b4-eda8-4024-8d83-eaf311884691",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "34008fdb-db58-4e33-acf0-baca09533348"
        },
        "item": {
          "id": "5c194bba-03c3-4833-a79c-f2e9c98bfc1e",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "3ae5eca7-b126-4f68-a42f-1e789d7c46db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b333c9d-5542-4549-87d6-1f019b7948c4",
        "cursor": {
          "ref": "9e81e090-c3e5-4023-8e9a-0cbd3057e0f2",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "bc00227a-4063-410c-b553-5f427d85654e"
        },
        "item": {
          "id": "3b333c9d-5542-4549-87d6-1f019b7948c4",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "f9f018c2-4b80-4add-912e-4023bebf8174",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f919f1b-b863-415c-bc95-28dc544110ae",
        "cursor": {
          "ref": "a55c2d92-0f42-42de-ab38-79767d35478e",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "1422cffc-e509-4fe9-bb02-65bf6afcf081"
        },
        "item": {
          "id": "8f919f1b-b863-415c-bc95-28dc544110ae",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "f54b0747-0064-4890-854e-82d8fd2f44cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f1a550e-57a6-4a3e-97c3-0b7e219213c7",
        "cursor": {
          "ref": "cbacdbba-aed5-46e9-a918-6606743c292e",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "521c48df-ded0-4633-a8e2-2320f16d1e17"
        },
        "item": {
          "id": "7f1a550e-57a6-4a3e-97c3-0b7e219213c7",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "796f13c9-1607-4828-b837-0d0f427b696d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "678391f3-50d6-44ab-98b5-4b889900ab58",
        "cursor": {
          "ref": "6899ef1e-8a1d-47c7-b5d9-637c01560d46",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "8838fd39-0843-4157-bbb0-4df4152ae350"
        },
        "item": {
          "id": "678391f3-50d6-44ab-98b5-4b889900ab58",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "18e821a1-1411-4664-8758-0ae4d8e642d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "124db2ed-55fa-4e0b-9ce1-43182e8b45c7",
        "cursor": {
          "ref": "d03d2a71-9691-43bb-b29a-17b59bf92a97",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "74001489-a331-48e4-89e5-8a10d26fcca1"
        },
        "item": {
          "id": "124db2ed-55fa-4e0b-9ce1-43182e8b45c7",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "85bdf88b-ed17-4d4e-a949-f5c8675a97f6",
          "status": "Created",
          "code": 201,
          "responseTime": 216,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "9ce37911-3e72-4892-980d-8778afa6d29c",
        "cursor": {
          "ref": "1d829263-7dd5-4fc9-bd90-25d7f1eb7226",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "49b59ac2-52c1-43e9-a9da-d656226e8a22"
        },
        "item": {
          "id": "9ce37911-3e72-4892-980d-8778afa6d29c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "9c811be4-d550-4119-93ff-8c843338acf6",
          "status": "Created",
          "code": 201,
          "responseTime": 221,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "06441fab-9fc9-4a16-b95f-26cd6e2804f1",
        "cursor": {
          "ref": "34f8a815-376c-4947-8f5a-527d83323318",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "c23bfdf4-d45a-486e-b4bb-5830be35ea38"
        },
        "item": {
          "id": "06441fab-9fc9-4a16-b95f-26cd6e2804f1",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "019858d2-5335-4c13-8fad-668635005a0d",
          "status": "Created",
          "code": 201,
          "responseTime": 221,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "b94a9410-2f8f-44f6-8f46-0b8cecf35b0e",
        "cursor": {
          "ref": "66883676-6973-4523-93f7-b553e2f29f49",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "df4a65c3-d097-4763-8985-9fbe3b455184"
        },
        "item": {
          "id": "b94a9410-2f8f-44f6-8f46-0b8cecf35b0e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "04c72769-7849-4b95-9ad4-916fc5807b03",
          "status": "Created",
          "code": 201,
          "responseTime": 216,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "5e9412d4-3aab-43c6-855d-71e18009b612",
        "cursor": {
          "ref": "1c8ae418-3801-4c7a-93a7-0fe13f2d7c6f",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "648d16eb-4ba3-4538-8178-59e22fd3ff9b"
        },
        "item": {
          "id": "5e9412d4-3aab-43c6-855d-71e18009b612",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "c689e581-a676-4113-9e2a-91eb68faec64",
          "status": "Created",
          "code": 201,
          "responseTime": 216,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "b8917753-3266-4b90-a085-a781184f92cf",
        "cursor": {
          "ref": "4383db9f-23ed-46b5-b4e4-cf5ae9c66f0d",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "0214d1f4-c5bc-4ddd-b0ad-71d5391758cd"
        },
        "item": {
          "id": "b8917753-3266-4b90-a085-a781184f92cf",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "4a18e3a1-a9b5-45c8-a076-e7233d2bc0d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2da8e108-50e7-4a2a-addc-f3cc2cd6867f",
        "cursor": {
          "ref": "50812123-c8f5-49f7-831b-1da82749ae9d",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "e29f951c-73d8-48ca-b505-1450e4d652a8"
        },
        "item": {
          "id": "2da8e108-50e7-4a2a-addc-f3cc2cd6867f",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "372e7a1f-7008-45ab-b9c9-392d22687c1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55ce25c7-1f0c-46c3-8676-e4d29ac71bfe",
        "cursor": {
          "ref": "9004781b-25bc-40f4-815c-2234ac3dd0ae",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "4768d555-bca6-4d84-83ce-db87f2a306ff"
        },
        "item": {
          "id": "55ce25c7-1f0c-46c3-8676-e4d29ac71bfe",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "6c035591-6ece-4f9e-a034-c711f21da057",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b103d8ac-190b-4c37-8e10-8414eb2a139b",
        "cursor": {
          "ref": "3e89808e-2b9e-4ee4-8af2-addcee64b6ad",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "ad0696a3-07ac-43d2-bfa6-3b44b6896737"
        },
        "item": {
          "id": "b103d8ac-190b-4c37-8e10-8414eb2a139b",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "71e3666b-e625-4077-89fb-91d64b07fb49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48921c91-61d3-474e-8e88-4d14f01a6087",
        "cursor": {
          "ref": "f99a3f7d-2854-4ffb-a2f0-13925ee8aa86",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "52e7bbe8-6014-4b53-9c33-eb5e9b874a23"
        },
        "item": {
          "id": "48921c91-61d3-474e-8e88-4d14f01a6087",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "5f101ba7-9a32-4f60-8adc-c7ed2fe40c0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc3e14fe-44e2-4084-bc8f-56cb72dd9545",
        "cursor": {
          "ref": "383908d9-dfa4-4e8d-9a14-67c1617172df",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "db57b42a-106f-4830-89eb-a34ce4426469"
        },
        "item": {
          "id": "dc3e14fe-44e2-4084-bc8f-56cb72dd9545",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "2671f498-2b39-4aac-ad06-e4a03a5d839a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b3af52b-c65e-42b9-91aa-b4af4f7764eb",
        "cursor": {
          "ref": "1081e715-30eb-4dfb-8ff2-6c73c3cc5bcb",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "00d5df7c-ce31-403d-90cd-4198c09fbce8"
        },
        "item": {
          "id": "4b3af52b-c65e-42b9-91aa-b4af4f7764eb",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "7626ca00-a55c-471b-8721-4fab026715cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccbafaed-c79e-49ea-b533-475be9a2ab1c",
        "cursor": {
          "ref": "4cfc0576-2434-4fc0-a78e-4e534a998318",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "272a7158-75dc-4107-9084-8ec2b9fa96b0"
        },
        "item": {
          "id": "ccbafaed-c79e-49ea-b533-475be9a2ab1c",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "cd906653-e1df-404a-a8ea-98ee5474829d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d7afc06-5b04-44fc-993b-ea625fdba191",
        "cursor": {
          "ref": "4d657f1e-9df8-42bb-9b09-3e8cad6e6ed6",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "443f80e7-0e46-4dee-b187-3bf061f50245"
        },
        "item": {
          "id": "9d7afc06-5b04-44fc-993b-ea625fdba191",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "e0446236-f70f-41de-a890-154b0e7a8ee6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "634b7240-1586-450f-bcb8-a9dc05dc5217",
        "cursor": {
          "ref": "7fe518ed-e561-4b58-817a-4858888ceb1f",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "f9015dcf-87b5-4868-8173-f1306bcfa6fb"
        },
        "item": {
          "id": "634b7240-1586-450f-bcb8-a9dc05dc5217",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "ce125e67-4c4a-4499-970e-02738c783ad2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e45734a1-af0f-47e4-aca7-f8014d4e43b6",
        "cursor": {
          "ref": "8020ea7c-bcbd-4fea-8960-2a518b772e9f",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "b659fbd7-867f-46f1-a5a9-4ca39cc2feaa"
        },
        "item": {
          "id": "e45734a1-af0f-47e4-aca7-f8014d4e43b6",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "ee0b801c-5fd7-4793-bb60-1254f0bd71d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5a17dfe-ce79-4b23-9000-12b9e6a0c534",
        "cursor": {
          "ref": "430da233-f4bd-45de-adc3-88cbac4e0cca",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "4d719f5f-544b-45c7-b5e0-18fad2b90ebc"
        },
        "item": {
          "id": "f5a17dfe-ce79-4b23-9000-12b9e6a0c534",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "02e9a0c3-b0d8-4d23-81e5-9e486b1dc683",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c77a2de9-7741-46a3-b2ae-70534af8d35f",
        "cursor": {
          "ref": "fd2f0b93-f1d4-4b7f-80d8-68952ba4fa78",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "315a9867-fb9d-41f7-a1cb-ba688b6a958e"
        },
        "item": {
          "id": "c77a2de9-7741-46a3-b2ae-70534af8d35f",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "7a20101e-c099-4ab7-a661-93954d84e821",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7395f22-9493-43f1-88cb-304bd9f1ef04",
        "cursor": {
          "ref": "558cbe02-a642-44bd-a2dc-2d72835bcab4",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "1cfc57ab-7967-4187-9514-3a1102b4ea7a"
        },
        "item": {
          "id": "c7395f22-9493-43f1-88cb-304bd9f1ef04",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "d20d186c-c38f-45e9-a94e-27751d441d9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8b3ffef-2fe1-4475-a139-7abf2d66188f",
        "cursor": {
          "ref": "735e0238-665c-46ea-b00b-209d608109e6",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "04445bd4-b947-4923-a469-3a0c9359cdfe"
        },
        "item": {
          "id": "f8b3ffef-2fe1-4475-a139-7abf2d66188f",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "1253fc80-68cb-4268-a62b-11fc0d049ba7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac42c62a-1e2f-402f-9020-baba8a52e317",
        "cursor": {
          "ref": "c37a962d-1c10-494f-8391-85a119421678",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "79c40a93-e422-4f1f-b075-28bd63012084"
        },
        "item": {
          "id": "ac42c62a-1e2f-402f-9020-baba8a52e317",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "f940f6c0-3a90-4799-ac61-1d5f2fb22695",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0ddc413-6d9b-4386-ad10-4e77d8b453c1",
        "cursor": {
          "ref": "18b0a595-013e-4270-9b04-015c83f27d76",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "c340df8c-9189-4892-8b73-eec69fb585c9"
        },
        "item": {
          "id": "e0ddc413-6d9b-4386-ad10-4e77d8b453c1",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "2edf2c03-cb24-4340-b00a-7c6eb63a546f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a6665f9-b6dd-43b7-b02f-ccbec54b44b4",
        "cursor": {
          "ref": "662624ec-456a-4c15-9e63-62f797b990f9",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "e97d0e23-8a58-4283-9de5-b8bcfdef6b8d"
        },
        "item": {
          "id": "4a6665f9-b6dd-43b7-b02f-ccbec54b44b4",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "01b32f0f-654f-4b5c-a696-24091868348a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e88c35a-c990-479f-af2d-2373601b7d0c",
        "cursor": {
          "ref": "6b473566-efaa-42fb-92cb-ced4a8a4d672",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "cabd149b-987f-4fdc-a53e-18f7c41773f9"
        },
        "item": {
          "id": "7e88c35a-c990-479f-af2d-2373601b7d0c",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "b5147b72-9cbc-44d3-923c-ec6b87d4d370",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ca54954-ef2b-4b41-8e97-5b76fa47fc1d",
        "cursor": {
          "ref": "83e131ba-b3f8-44dc-bcf0-b6f13e960a4f",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "20f0046f-ee3e-432a-80bf-97da5e56fca9"
        },
        "item": {
          "id": "6ca54954-ef2b-4b41-8e97-5b76fa47fc1d",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "51254711-0e97-4125-9530-1f58fc335b99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ea316fd-d28c-4831-be1a-ae37b1df5bbc",
        "cursor": {
          "ref": "79a52b0f-d97e-498f-ad83-065a15bde1d4",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "6dfae023-8faf-4e22-9be2-28bed0cdc805"
        },
        "item": {
          "id": "3ea316fd-d28c-4831-be1a-ae37b1df5bbc",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "b4ad05a9-943f-47fd-a06f-40a9d25c6846",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27fc2528-8c07-48d8-bc06-3a891637c8ee",
        "cursor": {
          "ref": "46852c78-96da-44ad-a79a-ab7e650bf47b",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "a276ab4b-4d6c-4b58-9f24-24078c1487e8"
        },
        "item": {
          "id": "27fc2528-8c07-48d8-bc06-3a891637c8ee",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "ddc26e96-e210-49c7-aa6c-207f6f4ef1d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3182f159-ff5f-4d53-8a4e-a9484f937f71",
        "cursor": {
          "ref": "3ffb2278-14eb-48e6-b1fc-538154a94377",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "10ef81d4-fe6f-4e58-880e-b89f4b44530c"
        },
        "item": {
          "id": "3182f159-ff5f-4d53-8a4e-a9484f937f71",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "42656a9c-7d22-4191-8b9e-f0768404cc4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab539896-b443-4dd3-9621-a385512d5382",
        "cursor": {
          "ref": "17455c32-e1a7-40de-b337-e3d488821e57",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "60cdd3f3-8663-4526-99e9-c3d13c82cb8b"
        },
        "item": {
          "id": "ab539896-b443-4dd3-9621-a385512d5382",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "8f9a5248-4610-4435-9e6b-b2bdba1623dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6f578ce-ecfa-4479-ae31-efe90e8ba4bb",
        "cursor": {
          "ref": "5d75bdf8-3a83-4ca3-999b-cd12dbff1224",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "0feeb9b6-4b54-4ee4-9012-4c7d3772ced3"
        },
        "item": {
          "id": "b6f578ce-ecfa-4479-ae31-efe90e8ba4bb",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "baf12878-c8d7-4979-be7e-60bbd0e06c0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaef81f8-9e10-495f-b453-4cb838389f70",
        "cursor": {
          "ref": "36009d3e-4ebb-4afb-96dd-bd6c758b2972",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "0fad5632-f0a5-49ad-9acc-cd8b0acf2adc"
        },
        "item": {
          "id": "eaef81f8-9e10-495f-b453-4cb838389f70",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "d7234326-4b8e-43ee-911f-45a8ca70189f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fc6ee78-ac3e-4be6-8b22-b19ff3ae4604",
        "cursor": {
          "ref": "1ea04eca-6b3c-4451-806c-7bb726cc797b",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "4edc799f-47ba-4062-9058-fd2c53d74cc7"
        },
        "item": {
          "id": "5fc6ee78-ac3e-4be6-8b22-b19ff3ae4604",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "5b2dbc9c-0917-4f38-bc6a-9806d5d7945a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91217828-e256-4403-a97e-45247fe7f93a",
        "cursor": {
          "ref": "f52e58ec-708e-43b5-b9ef-d1d797680f1a",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "09a6f97b-91c0-4cca-9f5b-c567681b7d4f"
        },
        "item": {
          "id": "91217828-e256-4403-a97e-45247fe7f93a",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "826bb09c-ddd4-4114-8a65-2c1cc401aeff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8adf6838-cf7b-4350-bf3e-9a087acbd9a0",
        "cursor": {
          "ref": "53b33d0b-9d88-4991-8fe4-a895b06ad765",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "6fe969b7-8063-46c8-807d-19bdcafc62dd"
        },
        "item": {
          "id": "8adf6838-cf7b-4350-bf3e-9a087acbd9a0",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "35f7ea68-936e-49ad-b1fb-b617c7d5d01c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b014242-0068-4561-97ac-48d577901dd5",
        "cursor": {
          "ref": "22795d9c-25c3-4622-8de5-2e0c9ec07a98",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "40e9eff6-97ba-43d5-890f-0bb211d40937"
        },
        "item": {
          "id": "6b014242-0068-4561-97ac-48d577901dd5",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "3cbc7078-3f32-42c1-8723-81feb98f3275",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0862534d-f132-4d71-8130-6dd3fbe949cd",
        "cursor": {
          "ref": "be22e29f-1fd5-4c2b-905b-1314656336f3",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "7cd59dac-f0d3-4ef0-9d87-68ad007f3a43"
        },
        "item": {
          "id": "0862534d-f132-4d71-8130-6dd3fbe949cd",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "e7af0d7e-9b31-4a42-bb5a-e31e2cf9088a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "120e6565-4d1b-4f82-9098-b62fc087d0b3",
        "cursor": {
          "ref": "080d7383-6ea4-47ee-b268-cb42e44d89d0",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "27d65a4f-4224-4174-be68-e780ca034b19"
        },
        "item": {
          "id": "120e6565-4d1b-4f82-9098-b62fc087d0b3",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "16a83794-446d-437f-8856-a2cf3ef8d28d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91ff3c48-d410-47a6-bc11-1d908878458c",
        "cursor": {
          "ref": "2afd6c4b-4e97-41d1-bd64-1c5633625706",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "8d95523d-d9fc-473e-b77f-bff76f1bbd69"
        },
        "item": {
          "id": "91ff3c48-d410-47a6-bc11-1d908878458c",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "f9138d2c-22dd-478f-b57e-2177910a48b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "c067dfb6-c3b5-4ed9-9c7e-f4e188e79fa2",
        "cursor": {
          "ref": "8b470575-5cd8-4545-8e81-797ebbc61f2d",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "2a79505f-c4cd-4682-abc9-a57bca66ba74"
        },
        "item": {
          "id": "c067dfb6-c3b5-4ed9-9c7e-f4e188e79fa2",
          "name": "credentials_issue"
        },
        "response": {
          "id": "e3b1e06d-c743-4dc2-9083-b6621df5c419",
          "status": "Created",
          "code": 201,
          "responseTime": 236,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "27489d50-1a08-4402-8edb-7d2384674d35",
        "cursor": {
          "ref": "e2d1d6ea-9289-476e-b2d6-3f7886a588df",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "346beafb-1d78-4819-89c3-23f56aed54ae"
        },
        "item": {
          "id": "27489d50-1a08-4402-8edb-7d2384674d35",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "7648d603-1e8d-4383-9899-d90317f77e2f",
          "status": "Created",
          "code": 201,
          "responseTime": 225,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "59e0e53b-9671-49ce-bd66-874b52097780",
        "cursor": {
          "ref": "6aa45229-808e-40e6-995f-7214fa36754e",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "ada94948-9b7c-4d6d-80b7-306cfbefc841"
        },
        "item": {
          "id": "59e0e53b-9671-49ce-bd66-874b52097780",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "531a216a-d96e-415b-b177-bbb76f4c6d1a",
          "status": "Created",
          "code": 201,
          "responseTime": 222,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ff8f3c3-1583-4814-9d9b-5e62120b70fe",
        "cursor": {
          "ref": "9fad860c-cea2-42be-814c-96b72574566e",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "ff8e25e4-7ac4-4aa7-acdf-980cda96c7ae"
        },
        "item": {
          "id": "9ff8f3c3-1583-4814-9d9b-5e62120b70fe",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "67a13d80-52a2-4cb7-8965-56ba1c8f1fb0",
          "status": "Created",
          "code": 201,
          "responseTime": 216,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "8668e338-6e12-4861-b3f8-7efbf20460f3",
        "cursor": {
          "ref": "4bebd1bc-6a90-4178-b8b6-a78d91b06216",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "126f93f3-3b9d-48f9-bbd6-9434a65db473"
        },
        "item": {
          "id": "8668e338-6e12-4861-b3f8-7efbf20460f3",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "c2ed97d8-d148-4ac6-8eb2-9470e2b2a1e1",
          "status": "Created",
          "code": 201,
          "responseTime": 299,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-04-03T00:34:32.510Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-04-03T00:34:32.510Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "48a73e62-02a3-4cff-84a4-2cab5a4a32eb",
        "cursor": {
          "ref": "6e79f24c-d819-4a8c-8535-7891907e5d32",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "fa23af21-cdf7-402a-8e97-66769574e8bb"
        },
        "item": {
          "id": "48a73e62-02a3-4cff-84a4-2cab5a4a32eb",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "b8e69218-cb36-49da-8e21-8d3f0b62715e",
          "status": "Created",
          "code": 201,
          "responseTime": 219,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8861e13f-79ee-4557-9953-88f6a4cef681",
        "cursor": {
          "ref": "fe4ddf20-d14c-484f-b739-ee4dca50d690",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "468620a1-88f4-4a0b-b8ad-14f510a5e6be"
        },
        "item": {
          "id": "8861e13f-79ee-4557-9953-88f6a4cef681",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "6bfbc275-5cc1-46fc-89d2-9a83745be942",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dfdb989-fe70-47f5-9109-8bae0156d8d0",
        "cursor": {
          "ref": "1230dddc-3344-4709-9681-f58182a84df1",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "bd11d0d7-e87b-4a87-98fb-28f30b35b6e6"
        },
        "item": {
          "id": "9dfdb989-fe70-47f5-9109-8bae0156d8d0",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "a2686228-158d-4010-8c1d-ca377599a896",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb239705-3b00-4356-90a9-42d9d4352ba8",
        "cursor": {
          "ref": "c550765d-a483-4967-ad21-f68f3860a824",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "7db1cf06-8a6e-4b21-9c21-7140127c714c"
        },
        "item": {
          "id": "eb239705-3b00-4356-90a9-42d9d4352ba8",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "995f0d9b-c3d5-413e-8a66-c36a09c16903",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "292c7e46-08a7-4c71-856e-f786b5e6bcd9",
        "cursor": {
          "ref": "1f4048c6-209f-4ce9-8ede-4f54a2572437",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "16ca9dde-bd34-4534-aa06-ab208b90b20c"
        },
        "item": {
          "id": "292c7e46-08a7-4c71-856e-f786b5e6bcd9",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "c3adec67-c1ec-4281-89b3-f4fba4028d9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be539fad-3a77-4643-8a4d-712e887d141c",
        "cursor": {
          "ref": "1da74976-1b93-458d-9080-b04d55f2d243",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "e1f53c57-4094-4409-891a-9b9844cd6667"
        },
        "item": {
          "id": "be539fad-3a77-4643-8a4d-712e887d141c",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "8669d415-f828-4042-8af3-13ede3212008",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eed8989-0ced-481c-bf19-cc5a2cd2e748",
        "cursor": {
          "ref": "36162f99-e61f-4e01-be09-7f91b59c16d4",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "20a1b49d-00cf-438d-abbf-70702a27099b"
        },
        "item": {
          "id": "3eed8989-0ced-481c-bf19-cc5a2cd2e748",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "107fa0ab-83e5-4c03-b4ff-6c98cf94ec7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3997946a-050d-491d-af36-e6af7708c302",
        "cursor": {
          "ref": "77cac537-afa3-4993-a062-1850fb839428",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "e05d316d-3f30-4528-a3fe-c1c2cbb9845b"
        },
        "item": {
          "id": "3997946a-050d-491d-af36-e6af7708c302",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "071b376a-9ac3-4c0b-9e33-a062a0e6bce7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1071954d-e43e-41a3-a72e-af63fde0336f",
        "cursor": {
          "ref": "58ab0d50-5c1e-40aa-8154-1c487d526c0e",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "58f956c4-3ba6-46ea-87f9-3d10d08957ce"
        },
        "item": {
          "id": "1071954d-e43e-41a3-a72e-af63fde0336f",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "efc571d6-0b97-4cef-b56c-c34f224f25d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3899026a-f8d5-4cf0-bbb1-e786e3c07dc0",
        "cursor": {
          "ref": "4c35ea72-6281-4deb-8ac1-f03c1a2ca0f0",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "095e0b48-8f41-43e0-bc41-4a5a21341718"
        },
        "item": {
          "id": "3899026a-f8d5-4cf0-bbb1-e786e3c07dc0",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "ab021ee9-3534-47f1-8311-247a7cfb5fdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efdc9259-a7fe-4bdf-ae57-26e75d01f624",
        "cursor": {
          "ref": "c5b36b1f-f898-469b-b6ac-54844f5bcb4e",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "7e659c2e-373b-4a5c-b056-b88fada72225"
        },
        "item": {
          "id": "efdc9259-a7fe-4bdf-ae57-26e75d01f624",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "4768654e-9abd-43bd-83f8-297a39a772b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a9a75bb-1486-4d32-8a9c-96f635c440e9",
        "cursor": {
          "ref": "3044f0be-6435-4939-b584-d791a895344c",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "d6eb602c-a24a-47d5-8763-b0207f9d0593"
        },
        "item": {
          "id": "6a9a75bb-1486-4d32-8a9c-96f635c440e9",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "33a6cdb7-5e3c-42d5-92e1-e51d8ea5f7c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "348ac081-9cb4-483c-a67a-e8820031c7fb",
        "cursor": {
          "ref": "e1573c1b-7360-4fd4-a027-c2d4b8e19c12",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "ddd98574-32e4-41cb-ae09-bd297ed0ac93"
        },
        "item": {
          "id": "348ac081-9cb4-483c-a67a-e8820031c7fb",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "93322824-8d24-44b8-b919-8f40e8d6c93d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b131f64-132c-4b5b-82b6-dffa5990727c",
        "cursor": {
          "ref": "8efae2df-6fb9-4b7c-b3b5-0a8810be3104",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "d96ce5ee-9e6d-4086-b3e8-653f474097fc"
        },
        "item": {
          "id": "1b131f64-132c-4b5b-82b6-dffa5990727c",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "73d129e5-995a-4105-aeae-6073aa2fe2ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91bac27a-495c-4d8b-965d-88a6f5ea8807",
        "cursor": {
          "ref": "945f829f-f3a7-45fc-a67a-f451fcae3229",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "6c579079-d6c0-4808-8693-de5509520444"
        },
        "item": {
          "id": "91bac27a-495c-4d8b-965d-88a6f5ea8807",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "75b49011-2e35-4542-9f5a-cdef38ba169c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "5ba70f86-ace3-4816-bd38-ebd61ea10a08",
        "cursor": {
          "ref": "d7e18a0c-b6f3-4778-a3eb-16c77cac8cd1",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "ec2e9c4b-8d16-46c4-b84d-41bb13d3d421"
        },
        "item": {
          "id": "5ba70f86-ace3-4816-bd38-ebd61ea10a08",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "2bd7c1ca-24d0-436e-8096-495c935b82e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "972b9088-d76f-428e-90b4-78e83f33ea9b",
        "cursor": {
          "ref": "270c3953-89c7-4efa-8aa3-b1ce6243f4f8",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "72e6c333-9dab-42ff-8fcf-8881ab02ff2b"
        },
        "item": {
          "id": "972b9088-d76f-428e-90b4-78e83f33ea9b",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "b8620131-29c7-4236-a083-2f73c9e5410a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3073cbc2-f974-481d-afc2-fb6a68b51f17",
        "cursor": {
          "ref": "1a7d3e18-dffa-4424-96b5-2729a206f355",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "7c692597-de82-4fff-9ba5-3b5b349b3f38"
        },
        "item": {
          "id": "3073cbc2-f974-481d-afc2-fb6a68b51f17",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "eb5400dc-153e-49e9-822e-922427fa668d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6638e4f-cf99-48ae-b3dc-709ae2e176df",
        "cursor": {
          "ref": "731b4c58-58b5-4356-a6c1-f8866aa8056b",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "1d0d38ce-316c-48cb-8473-cba4b89f3092"
        },
        "item": {
          "id": "f6638e4f-cf99-48ae-b3dc-709ae2e176df",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "04162de9-37d8-4497-a049-0754a835cfb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "346d5170-3014-4f29-a410-afb0a14190fc",
        "cursor": {
          "ref": "8bf44d37-552c-4de4-a7a5-391214a52bbd",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "e5613f4c-e2d9-4094-b278-638a53836e5b"
        },
        "item": {
          "id": "346d5170-3014-4f29-a410-afb0a14190fc",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "e79d32a1-25d9-4102-940e-1a1306a60e5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b887b4b3-6ef2-4e67-be00-35ddeb4217ec",
        "cursor": {
          "ref": "8a2a535a-4f78-45dd-8c1e-e45e3407242d",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "f410db56-0f28-40e8-884c-68b1921129c3"
        },
        "item": {
          "id": "b887b4b3-6ef2-4e67-be00-35ddeb4217ec",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "59936ee2-bc05-4992-8928-d3b7cd8805ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "023556f8-dd50-4669-a532-05757fc5d868",
        "cursor": {
          "ref": "bd102b42-379a-44b7-bfaf-44edaa30e341",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "1e3712f3-5b94-43ef-9dfb-8113528957da"
        },
        "item": {
          "id": "023556f8-dd50-4669-a532-05757fc5d868",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "b5784303-9880-42f3-a0f8-a4f53c906b8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "872b31c5-0f07-4ac2-a467-4600049efeed",
        "cursor": {
          "ref": "a28d8d63-a090-4df9-ac44-2db22dd0dd28",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "4e42b812-e6e1-406e-b929-4eec4319ae14"
        },
        "item": {
          "id": "872b31c5-0f07-4ac2-a467-4600049efeed",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "948e210e-1e73-4674-8d71-347bf01011de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "309fe609-1ef0-4bdc-8e40-383efbca3d4c",
        "cursor": {
          "ref": "004d2c70-8425-4a08-8ce7-a33735159f88",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "eb26041a-cb47-4039-abd2-c4bb154fb637"
        },
        "item": {
          "id": "309fe609-1ef0-4bdc-8e40-383efbca3d4c",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "909c8f3c-20f4-4367-b504-8d4dcbc820d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dccdfff-54f9-48f9-8118-26d8837bf034",
        "cursor": {
          "ref": "32ae6fa1-f8ee-4b96-847a-3298d59c9d74",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "d290e891-3dd4-462f-b1e3-a5d5e8106803"
        },
        "item": {
          "id": "6dccdfff-54f9-48f9-8118-26d8837bf034",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "62e26412-0ec1-4a85-9290-e9cfe095e794",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6eb1863d-a7f5-4c30-b47a-41f5ee35cce3",
        "cursor": {
          "ref": "f393af23-fbe9-4c61-a94f-47ca0a30869f",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "2691f44c-19ac-43d8-8fe8-c515ca76fcfe"
        },
        "item": {
          "id": "6eb1863d-a7f5-4c30-b47a-41f5ee35cce3",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "4f8e3763-1f20-4814-a5a7-a788920a7de1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ad683bc-91eb-4176-90e3-c1379a2e295a",
        "cursor": {
          "ref": "c69ed9bf-22c1-4c00-9274-594efdfa6089",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "a0b90907-1297-4212-afcb-c16f62be8005"
        },
        "item": {
          "id": "6ad683bc-91eb-4176-90e3-c1379a2e295a",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "8851e5d8-92d7-4395-aa4a-e7570b86f9f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b87f79fa-c220-4c87-a41a-8063ba38ecd6",
        "cursor": {
          "ref": "092435cd-e604-42b6-ae6b-a8bb2770fc36",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "f1299136-c952-4e3a-a5be-6e08aa2a1c82"
        },
        "item": {
          "id": "b87f79fa-c220-4c87-a41a-8063ba38ecd6",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "35460564-bfa9-40c1-89d7-119351f031bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2fd5617-50a0-40d2-bcd3-ceffe95806fe",
        "cursor": {
          "ref": "3bac08d1-910b-470e-abd1-c17bac0526c2",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "9ffbf97c-1c01-4727-9f88-12abde7bd388"
        },
        "item": {
          "id": "b2fd5617-50a0-40d2-bcd3-ceffe95806fe",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "3384f4d2-998f-4c28-bda3-c8d74f83258b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e750b67-f260-4f36-a841-1fdb1f4c500d",
        "cursor": {
          "ref": "b38ce256-1781-4cc3-981f-7708da298a70",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "f0a6de04-b734-4137-a97b-ecd8aa0eabcb"
        },
        "item": {
          "id": "7e750b67-f260-4f36-a841-1fdb1f4c500d",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "d53e23a8-cf26-4776-80c6-9d4dba7fedfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55767799-802e-4814-8050-5b3b3dde3ef7",
        "cursor": {
          "ref": "84f90527-82e1-45f7-a377-31799ff2083f",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "0d40cc06-64aa-4e41-abd9-3517d236d4c2"
        },
        "item": {
          "id": "55767799-802e-4814-8050-5b3b3dde3ef7",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "567c84b0-4ec8-4f3b-9d3d-5c2c6c112a13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0d8bc4c-7a64-410f-8baa-8310d5b2a5ed",
        "cursor": {
          "ref": "d884e61a-ddc8-47b0-a79e-b882f1a8f844",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "34c34834-258d-46ae-bf47-50111a24926c"
        },
        "item": {
          "id": "e0d8bc4c-7a64-410f-8baa-8310d5b2a5ed",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "8a32f868-9525-4363-875c-ba588472f4dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1f36273-dbff-4330-9a79-d57d5939eb88",
        "cursor": {
          "ref": "a2c7fc2f-a8d8-4d40-90f8-4b9be444cd15",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "8c7adb84-2911-4f41-866c-97349b8b5ed7"
        },
        "item": {
          "id": "f1f36273-dbff-4330-9a79-d57d5939eb88",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "3daeca70-e9b1-48fc-8151-e679be92252e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d6161ea-32fb-472a-9e66-a82b8cf44d23",
        "cursor": {
          "ref": "f673cab2-5b7f-481e-a49a-d19c5394cfe6",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "abdcf544-b32d-45e6-bddc-6784681ffb45"
        },
        "item": {
          "id": "8d6161ea-32fb-472a-9e66-a82b8cf44d23",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "c56d0ba4-d456-4cb8-91e7-0f1a43152eef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ae88c07-55ce-4047-8b99-4fea892c20b6",
        "cursor": {
          "ref": "27d94aba-5fcf-4d0e-9348-0d8b729b8d1e",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "ef9f3b4f-781f-410a-b8a1-0bb8534c8d48"
        },
        "item": {
          "id": "1ae88c07-55ce-4047-8b99-4fea892c20b6",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "8a7ee66e-1321-4467-82d7-d77546e20e17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85064515-0850-4f77-9f24-0cf7e21a917e",
        "cursor": {
          "ref": "bf350789-acaf-4ea1-b7f9-6f6fd07b9681",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "89f7a27a-b506-417f-9e7f-dc2a193e0511"
        },
        "item": {
          "id": "85064515-0850-4f77-9f24-0cf7e21a917e",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "b444deca-c1ab-46e0-a691-8c0407cf00a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b38bef9e-9a77-43f9-ab08-e66751f9bac7",
        "cursor": {
          "ref": "c3efb0d3-9f03-4e27-a3b9-81b1832e1563",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "6444b174-848f-4e63-8be9-484aa710738c"
        },
        "item": {
          "id": "b38bef9e-9a77-43f9-ab08-e66751f9bac7",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "7f106318-41e7-46f4-8910-869c9cd40695",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fb83948-9185-4b2b-9c8c-e631cc16a884",
        "cursor": {
          "ref": "50304c28-bda0-493f-9035-9e4321991d7c",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "21413338-557a-47a2-a81d-d695432b91fe"
        },
        "item": {
          "id": "7fb83948-9185-4b2b-9c8c-e631cc16a884",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "96264741-34d7-4b14-adfa-47dadea82c79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f89bf23f-5e9f-40e5-83c8-041da4edc146",
        "cursor": {
          "ref": "608db5b6-5e55-4191-80e4-2addfc6690c2",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "3a7bbc74-8181-4809-836c-17d202b53d34"
        },
        "item": {
          "id": "f89bf23f-5e9f-40e5-83c8-041da4edc146",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "6a882dd2-a3ff-4a82-a04a-c2a7d7d3fbc1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76bd1039-dee3-4158-9461-e601f99a05b3",
        "cursor": {
          "ref": "bcf31744-338f-4319-939b-908117657bf8",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "6f2ae973-e5e8-4f26-86a0-dae98d0f43a6"
        },
        "item": {
          "id": "76bd1039-dee3-4158-9461-e601f99a05b3",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "1ff3f906-e24f-4a30-8166-3a95255acfa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "622652f9-9ae4-4a38-88ca-d6415ad1957e",
        "cursor": {
          "ref": "5b446c51-4def-4017-94fd-c5b9f0966265",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "19897471-d1ad-4b4b-9dbc-a346e2e247a7"
        },
        "item": {
          "id": "622652f9-9ae4-4a38-88ca-d6415ad1957e",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "1776a768-c86c-47ed-9bf2-9e17c531ddbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01b475c0-4888-4aef-8357-a4bc7cfce047",
        "cursor": {
          "ref": "b855d6cb-3971-4290-b9c8-c394b269e141",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "b17fd90e-5c02-432f-925d-588a96172745"
        },
        "item": {
          "id": "01b475c0-4888-4aef-8357-a4bc7cfce047",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "d585554b-a6df-45fb-8369-a6e6dcdb6f0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d29444fc-1693-41e1-90db-069b637989c0",
        "cursor": {
          "ref": "8197e8b7-883e-4009-8c94-2e14b539bbc8",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "ee2bb6d2-3cf2-4763-8908-7effaa4c8048"
        },
        "item": {
          "id": "d29444fc-1693-41e1-90db-069b637989c0",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "2b87f8ca-26dd-4796-a1cd-c5e7ff845d30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca9202d2-3536-467e-b119-a0620421e4a1",
        "cursor": {
          "ref": "2891b755-7a50-4638-b67e-74a97d67a86b",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "d3804b66-b7a8-46a6-8af2-c9a5347729c1"
        },
        "item": {
          "id": "ca9202d2-3536-467e-b119-a0620421e4a1",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "b111625f-a100-4a60-9e4f-de5bc7b5d760",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "849008a7-63ba-476f-88e2-20174a34acdf",
        "cursor": {
          "ref": "42f92728-ad4b-47b9-aed4-2a56d585c2a7",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "d3b6df22-5c64-4ca1-9fd1-0981d31ed8b8"
        },
        "item": {
          "id": "849008a7-63ba-476f-88e2-20174a34acdf",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "d1ff2d14-d5fa-4a2f-8632-74f3a08d9aad",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "f1fe3a5b-ac23-4d78-8c28-d54a5122c835",
        "cursor": {
          "ref": "c90bbe3e-df16-472a-9596-4a5a62834a58",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "543dbc73-0163-4726-8d7a-a65b8aea501d"
        },
        "item": {
          "id": "f1fe3a5b-ac23-4d78-8c28-d54a5122c835",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "fc43a235-8637-4d09-880d-271047404f7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6346929-ee16-43db-a259-7d4009ae3be3",
        "cursor": {
          "ref": "ebac45b3-6e0a-4f79-a02f-a4616d3c32ca",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "d88ff7f2-8352-4367-b80f-455b7d1f2bd1"
        },
        "item": {
          "id": "f6346929-ee16-43db-a259-7d4009ae3be3",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "ee1e8f72-dac8-4ad9-a5cf-28feb8dffb0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f86aa162-c153-4634-87d6-b42608dca3f6",
        "cursor": {
          "ref": "92ccad93-20be-4cbf-8722-118c83057424",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "76fd6176-ac38-49b0-a08e-2f3903b9f2f2"
        },
        "item": {
          "id": "f86aa162-c153-4634-87d6-b42608dca3f6",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "51eab859-fedf-40dd-9b24-22231990856e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24bcb459-cd62-407e-939d-441f30c1622f",
        "cursor": {
          "ref": "2b595145-b1fd-4745-9d48-1fd0de016ef0",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "aa7e2edd-91c6-4b49-a325-5c19b24f3b5a"
        },
        "item": {
          "id": "24bcb459-cd62-407e-939d-441f30c1622f",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "1429c405-f2ec-40c1-918b-876795bc18cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "892d3b46-08ca-42d1-ad55-d8de7ec20726",
        "cursor": {
          "ref": "a5a84009-a82b-4610-a732-64effd93004d",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "6fd3ae65-d443-4015-83e5-6feedcf31ca4"
        },
        "item": {
          "id": "892d3b46-08ca-42d1-ad55-d8de7ec20726",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "d6218d1b-e727-4914-8a59-0477cbd1493d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5c084d7-52e5-4bc8-bb87-b18193bd10fc",
        "cursor": {
          "ref": "402c9d12-aab0-43b7-9bcb-44679d19e6a0",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "fc5ea73f-98c1-4977-98a0-5438e818bc6d"
        },
        "item": {
          "id": "d5c084d7-52e5-4bc8-bb87-b18193bd10fc",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "7955e340-3d3c-4bcf-a615-5e2bff5f42a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "520ed717-7add-40eb-96a8-2fc2295abf55",
        "cursor": {
          "ref": "a9232069-5890-46d4-90d6-77475cab27bd",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "12de18e0-9533-41a2-9cba-c04da5601c8b"
        },
        "item": {
          "id": "520ed717-7add-40eb-96a8-2fc2295abf55",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "eaee2fef-a70d-4017-bfc8-165059ca5a1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5171326-f1de-4613-9bee-2e12a8cb0648",
        "cursor": {
          "ref": "ebf14d29-1715-478e-ade0-99759b9857da",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "298420bf-dbd5-43a0-85b6-6c70671394fc"
        },
        "item": {
          "id": "b5171326-f1de-4613-9bee-2e12a8cb0648",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "6f3a29b2-a390-4717-aa9e-8d86c05d3435",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bf012c4-2130-4442-af47-4bb4f8683355",
        "cursor": {
          "ref": "f6680c03-64b8-410e-8296-435263ebef0a",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "0a63076a-e377-4e63-9dd4-825baa97ff1a"
        },
        "item": {
          "id": "1bf012c4-2130-4442-af47-4bb4f8683355",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "87f71eb1-9f9a-4b42-b395-9a4e456f6eeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05116cd0-1078-4a9f-b16d-f3270d09fa32",
        "cursor": {
          "ref": "abcfe131-74f7-413a-a23f-74e917497304",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "87ff5409-d87e-4a66-8b90-9229e4467b65"
        },
        "item": {
          "id": "05116cd0-1078-4a9f-b16d-f3270d09fa32",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "ed64ad23-d1b1-443e-866f-be4f5fa01efe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d939dac6-6ab5-47aa-91a0-140c57a3289a",
        "cursor": {
          "ref": "d8c56657-3805-410a-a979-af61f1a019df",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "5f1f306f-2fa9-4e22-93c8-5809be8806df"
        },
        "item": {
          "id": "d939dac6-6ab5-47aa-91a0-140c57a3289a",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "57fba0f4-1fef-4ba3-a774-702ba5fb90aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b970dfd5-e9a4-417c-88ca-4c4acb5c8632",
        "cursor": {
          "ref": "df7e5033-14f6-4740-a57b-78b1b08e5da5",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "fcc7bf68-f84e-42a6-b790-315ee254d929"
        },
        "item": {
          "id": "b970dfd5-e9a4-417c-88ca-4c4acb5c8632",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "b5b9e8ee-f153-442e-8f41-b750342b22cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29359125-89db-48ba-aaac-5828e9bbce7a",
        "cursor": {
          "ref": "08235cd3-0cbc-41ec-aa2e-275cff69ca23",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "d0f6a615-8efb-4dd6-b3d0-a95337435a25"
        },
        "item": {
          "id": "29359125-89db-48ba-aaac-5828e9bbce7a",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "fd20473c-b9a7-46c3-9b07-61456fb7ccfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7824349-9b75-4b1a-82cf-52b628ee661d",
        "cursor": {
          "ref": "62f1482b-2129-46aa-a69f-f378b2b061f6",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "2e184fd3-93f1-4691-8392-1fde0437894c"
        },
        "item": {
          "id": "e7824349-9b75-4b1a-82cf-52b628ee661d",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "48046378-ff97-4b38-8716-458dc18d4896",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdd17708-6818-403a-9866-5ce8941a6c88",
        "cursor": {
          "ref": "2c519f22-6ceb-4f8e-bcd0-780fdbc312bc",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "45c6b552-8861-43a0-ba85-8df408b2d9e0"
        },
        "item": {
          "id": "cdd17708-6818-403a-9866-5ce8941a6c88",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "539d7dd8-5709-4cdb-934e-11043b81037a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e57a853-8c5d-4c93-83f8-521e849cfecc",
        "cursor": {
          "ref": "0b52cdab-8e56-43d8-944d-63f274e1330c",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "8c385b1e-0994-4cb0-94c2-28947c1bd435"
        },
        "item": {
          "id": "2e57a853-8c5d-4c93-83f8-521e849cfecc",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "c22a5c01-68e7-4fdb-8887-46a7ffd40dff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6643763b-5a14-45ef-a95e-1ad0a60962b5",
        "cursor": {
          "ref": "8a5dd8a1-b666-407f-9609-27c535ab81ff",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "bb012d9b-bcea-4fd8-b128-5331133cc3a8"
        },
        "item": {
          "id": "6643763b-5a14-45ef-a95e-1ad0a60962b5",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "0bd97f7f-1eb9-4c1f-acd2-fd6f4f7e84a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d86d6eb0-00ca-4297-9dd4-f7d2d7b768dd",
        "cursor": {
          "ref": "b0dded74-0fce-4b2f-9b32-f9026c94ec72",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "070709a4-0156-444d-9b60-c7d3bfdc487d"
        },
        "item": {
          "id": "d86d6eb0-00ca-4297-9dd4-f7d2d7b768dd",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "dc7950ff-7f25-4d41-b67a-c185b2d3adea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6785301-229b-4b18-978c-425850b0ffc2",
        "cursor": {
          "ref": "e28941dd-2797-4f24-8ea3-fa6c340f33e7",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "eba8d473-df9f-4a76-bb91-19bb71018880"
        },
        "item": {
          "id": "f6785301-229b-4b18-978c-425850b0ffc2",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "ec62b167-0c68-4a3b-861a-5be1fab53394",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a52e3c22-f01c-4996-832f-a94bc6a158a0",
        "cursor": {
          "ref": "34e4cfad-b95a-4487-86f0-af9b5d23e5e5",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "fa4d8f36-df86-46b6-aece-830fb72b32e2"
        },
        "item": {
          "id": "a52e3c22-f01c-4996-832f-a94bc6a158a0",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "29e2fe87-b3fa-4d5d-a702-06af1ec23f10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d15ff367-ba27-4830-95d9-08259f730c2f",
        "cursor": {
          "ref": "7394394a-8dd1-4df8-b670-56839f30302b",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "0b15b320-0868-4c74-b10d-8d41d59f8fce"
        },
        "item": {
          "id": "d15ff367-ba27-4830-95d9-08259f730c2f",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "81392b4d-9dfb-416e-b888-8ad4226ca443",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91e8bdad-93e0-4d4a-a935-fd3a38c957a1",
        "cursor": {
          "ref": "36c3f2d4-e11e-489a-8887-d63e90e4e436",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "4f3770e8-f811-4348-9570-379812157b3f"
        },
        "item": {
          "id": "91e8bdad-93e0-4d4a-a935-fd3a38c957a1",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "ab42e653-1fb4-41c6-937e-598f7fdf4bdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8a867a1-7805-4415-ad7f-4e0b653b2951",
        "cursor": {
          "ref": "8e6015f3-33db-4c5d-8f80-c58bc2347089",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "922434af-efca-4be2-b205-a3b573debfa3"
        },
        "item": {
          "id": "b8a867a1-7805-4415-ad7f-4e0b653b2951",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "f7371685-49f9-4ff4-92d4-369fa058ab46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ad9a4a4-8d49-42f6-a5b6-c5be38866f48",
        "cursor": {
          "ref": "70721bc6-749a-4fea-98f0-f8d38dc07679",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "971f8165-8b97-4bbc-96d1-61ae5a1d53fd"
        },
        "item": {
          "id": "5ad9a4a4-8d49-42f6-a5b6-c5be38866f48",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "a0ee48dc-21a3-47fb-bb35-ca468a09fbd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b670782-1646-4a72-8eb3-9fa55d45dae8",
        "cursor": {
          "ref": "9e38fa50-c2f1-4de0-a6ea-fbeaf3c4a180",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "d9d20fc3-efa6-4b4f-8b60-4f644d2f6d29"
        },
        "item": {
          "id": "4b670782-1646-4a72-8eb3-9fa55d45dae8",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "709bee8e-d130-4ac9-b878-4818b3c32bfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95519107-f59c-4037-9c79-5b2b32011c38",
        "cursor": {
          "ref": "7b0d7e2d-fde0-46db-9d43-92fc70d0dd84",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "b1be3903-a7f6-41ec-82e7-64b95d604351"
        },
        "item": {
          "id": "95519107-f59c-4037-9c79-5b2b32011c38",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "2b5a04de-ea2a-4215-ba5f-d9cd43aeabc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e933243-313d-4d56-8715-7e058d476d4b",
        "cursor": {
          "ref": "cc67d32e-2123-4269-866b-c17fc32ec536",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "316611a1-1ecc-433f-83df-7f695c917b82"
        },
        "item": {
          "id": "2e933243-313d-4d56-8715-7e058d476d4b",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "ae5e2d18-2490-4519-87c9-fd418387e838",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "affe8043-9932-43eb-8666-cfb80519b308",
        "cursor": {
          "ref": "63ba1e60-4790-4810-bdb4-74d1bcfcc45c",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "928e9415-768b-4ec6-b71b-39296bcf6d02"
        },
        "item": {
          "id": "affe8043-9932-43eb-8666-cfb80519b308",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "dbea829b-e7fe-40d6-90c9-1b683f0bd2a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a540eb85-c03b-450e-83c0-adf3917f7b83",
        "cursor": {
          "ref": "ee3ceaf7-7641-4ea9-90ca-5a28c85f0de6",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "e7b2a6a1-efa0-4929-ba8a-9bd639162a27"
        },
        "item": {
          "id": "a540eb85-c03b-450e-83c0-adf3917f7b83",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "eae484a7-bf3d-4eb1-825d-a845e0b24277",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94be74e5-a2b3-499a-8f81-5bef4fd9a51d",
        "cursor": {
          "ref": "994a4787-c366-414e-92c5-f7b6acc39417",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "3bfaad6e-7f5b-41e8-b573-e7688ab0321e"
        },
        "item": {
          "id": "94be74e5-a2b3-499a-8f81-5bef4fd9a51d",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "c110fc0c-9af5-49ae-bffc-1e78f5c9d519",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "19ad0a61-a573-4aff-a4d5-4dedcb7668be",
        "cursor": {
          "ref": "31130e61-1643-4cb6-b6b5-53153009b938",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "78960bd5-743d-4230-9d63-c8cc51f31f74"
        },
        "item": {
          "id": "19ad0a61-a573-4aff-a4d5-4dedcb7668be",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "a8605595-7730-40fa-9ef1-ea8b84d562e1",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "53d0e48c-0997-4425-aab3-abddbd6dd6d6",
        "cursor": {
          "ref": "f1f80299-868b-437f-9fb5-060c6ba17018",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "bf28a71f-a84c-4b31-8272-cc4350c82af8"
        },
        "item": {
          "id": "53d0e48c-0997-4425-aab3-abddbd6dd6d6",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "c1c9cbc1-9023-4fd1-a172-fc391e48fcd6",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "cd2a3af9-63d7-416e-a60d-5e896f649515",
        "cursor": {
          "ref": "348bcfff-791d-4668-a6e5-9d328820164a",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "47b86c94-3cc8-4288-bf52-b0f2a5f92fa2"
        },
        "item": {
          "id": "cd2a3af9-63d7-416e-a60d-5e896f649515",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "f6a7c5da-daec-4211-8ad6-6a05de207cb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f95f017-79ab-4904-9eb8-81956fc48b94",
        "cursor": {
          "ref": "faa2fe6e-7055-4233-92c4-e380e2d976e7",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "af5555be-950e-4f93-8e6e-7011e3fd2817"
        },
        "item": {
          "id": "1f95f017-79ab-4904-9eb8-81956fc48b94",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "c1977c0c-9284-405a-b0f1-778d1b1bee6f",
          "status": "OK",
          "code": 200,
          "responseTime": 166,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "434a317a-4dcd-4102-af34-78553f24c66c",
        "cursor": {
          "ref": "09fa620a-45fb-43a1-9263-5b840610166b",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "11190bbe-ba4a-4298-91af-349d6cdaf756"
        },
        "item": {
          "id": "434a317a-4dcd-4102-af34-78553f24c66c",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "82213b2e-57ef-48f1-a7fc-c60be8c2d114",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "6b3c4bab-4c21-49dd-8119-2f75526f0af4",
        "cursor": {
          "ref": "dca41e3a-fdcc-4902-9f59-db6db22e4e48",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "cf41e458-0ffa-48f5-a068-67777ac9b1b1"
        },
        "item": {
          "id": "6b3c4bab-4c21-49dd-8119-2f75526f0af4",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "9f3f34a5-f40b-401a-8e12-1a2cae26ad57",
          "status": "OK",
          "code": 200,
          "responseTime": 100,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "9e077cce-5018-44c7-950c-f4ff92fc1988",
        "cursor": {
          "ref": "8d6c664a-baa5-4aa9-9cd1-cd459c120300",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "599c50e1-f286-421b-8d55-9519b7e7f553"
        },
        "item": {
          "id": "9e077cce-5018-44c7-950c-f4ff92fc1988",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "7d322e53-cf9b-4011-a9cb-90f5965ef2d6",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "cc617de4-ca59-4fcf-85c3-b4aa1a7bba8a",
        "cursor": {
          "ref": "da109659-2c3c-4b2a-826b-02ffdda9861c",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "6f2563e9-309f-4ee4-b078-cf89ef9a13c5"
        },
        "item": {
          "id": "cc617de4-ca59-4fcf-85c3-b4aa1a7bba8a",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "d9bb4c53-380e-4e2d-a6cb-6ee513f66add",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "6854c271-6968-4f74-944e-9999e578eb82",
        "cursor": {
          "ref": "5df3f64e-bd10-4330-83f3-1cab450dc88d",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "c02981a6-d176-448e-ae5f-4a5d08301a22"
        },
        "item": {
          "id": "6854c271-6968-4f74-944e-9999e578eb82",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "ba93c952-7ebb-4203-9372-17ee50eef97d",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "4a327a4c-4833-48d6-99ca-98a111eab4c4",
        "cursor": {
          "ref": "64eb537a-3598-4c0d-9f4d-0aa4a5097318",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "8ae7e2bf-c65c-44b0-9f9b-d78da5348a87"
        },
        "item": {
          "id": "4a327a4c-4833-48d6-99ca-98a111eab4c4",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "b32b08a7-42ec-459d-84a7-91ba5bcd779a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96705b41-fbaf-499a-9cae-f83319d5d9cf",
        "cursor": {
          "ref": "aa96cb36-f14c-432a-884b-820dd3baeb21",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "77020a4d-1896-43a7-80ac-d8b8bf382dd5"
        },
        "item": {
          "id": "96705b41-fbaf-499a-9cae-f83319d5d9cf",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "5bac5612-8bc5-406d-8756-2da29b230d6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "027b6b2b-570b-4e53-bac3-2e743af6d3b1",
        "cursor": {
          "ref": "f98adbc4-efdd-41f8-a912-152dd36070d9",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "4ee0a985-8c16-4382-b5fc-8aa0d5e41303"
        },
        "item": {
          "id": "027b6b2b-570b-4e53-bac3-2e743af6d3b1",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "17488a8d-83a0-4b2f-94bf-2cde027dc92c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82c682b1-b94b-4ca9-a7d3-64a94fbdc302",
        "cursor": {
          "ref": "97357c23-c01a-4b69-8183-bab7f70af193",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "6a179370-3a4c-4893-a4b4-96d2ae51c1f5"
        },
        "item": {
          "id": "82c682b1-b94b-4ca9-a7d3-64a94fbdc302",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "a781a901-148e-4cb2-b24f-5625be566ba5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6def08c7-f595-4c3e-bebb-a4c42c5a2741",
        "cursor": {
          "ref": "fd580060-a585-4e00-aa81-d5ddca669d8e",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "13182d0d-9ad0-4f73-84d6-cd0690102f88"
        },
        "item": {
          "id": "6def08c7-f595-4c3e-bebb-a4c42c5a2741",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "1932c641-15b3-413b-be02-c1135c442089",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "175e9dab-cec4-4bd2-b029-96028a15809c",
        "cursor": {
          "ref": "a8dc0acb-7217-40f0-8597-33f9fccf8fac",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "bed9ff9d-ba2a-4a8e-8e9e-4501aa32286a"
        },
        "item": {
          "id": "175e9dab-cec4-4bd2-b029-96028a15809c",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "4f865de9-a067-4f7b-83c5-c8404902a999",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8eb0b031-cc96-4acf-a147-1d42b0a55e81",
        "cursor": {
          "ref": "129c8d0a-e284-4dd3-b5ab-008a8608b87d",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "cd5dd167-153c-4f0e-9e1c-25402fa86953"
        },
        "item": {
          "id": "8eb0b031-cc96-4acf-a147-1d42b0a55e81",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "f1172cb7-6a4c-4f63-a983-3f9f2120935e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9782c06d-eea0-4ac1-87ca-8da9fed0d119",
        "cursor": {
          "ref": "b4995da3-d842-4f3c-bb64-cd4cd6105554",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "4e6a4acc-a899-44bd-ad22-ea7e24ffbe14"
        },
        "item": {
          "id": "9782c06d-eea0-4ac1-87ca-8da9fed0d119",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "7d097164-aa9b-45f1-aecf-02cdb2291353",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "434cb5ca-fd37-47cb-a201-0fd2ad946169",
        "cursor": {
          "ref": "8307e3cb-a39b-49b3-8b1f-15599f9b3e5a",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "c4b3c9dc-4bd8-4cd7-925b-0358c335e6a2"
        },
        "item": {
          "id": "434cb5ca-fd37-47cb-a201-0fd2ad946169",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "4af8d6c1-066e-4e9a-af4e-5c449f83933a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d88b921d-4369-478e-8926-3a3662dcbde5",
        "cursor": {
          "ref": "e9c4b56d-9e6c-46dc-87ec-f7370c57d7f7",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "88c97c26-c951-453c-af91-ce9c0a69c926"
        },
        "item": {
          "id": "d88b921d-4369-478e-8926-3a3662dcbde5",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "9d9a4c0b-bd04-47bc-b8fa-3c671d1215e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1169c38f-bcdc-4fce-8464-b23737657aec",
        "cursor": {
          "ref": "b5055655-9f64-4f94-871c-77715563dd82",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "64c213c4-42f4-4327-88a6-7b4e35e45b4e"
        },
        "item": {
          "id": "1169c38f-bcdc-4fce-8464-b23737657aec",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "7d92c1b4-892b-4484-b186-299fc06145d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21b7123f-0e4b-4868-9234-a805b01683c6",
        "cursor": {
          "ref": "3293258b-e5ca-45dd-8885-b5265a61446a",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "cef40a25-dacf-45f7-99f1-926daf2791f8"
        },
        "item": {
          "id": "21b7123f-0e4b-4868-9234-a805b01683c6",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "2eb7422c-c891-4c28-9b4c-d901048be9d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c38a21d7-7f74-474f-974d-6aac7b301b14",
        "cursor": {
          "ref": "3ecca786-6ff2-4e69-afa9-80c92aec5a1f",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "09e9eaf9-7e38-4e81-9513-53b0b71c57fd"
        },
        "item": {
          "id": "c38a21d7-7f74-474f-974d-6aac7b301b14",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "72fbff5a-bd49-48d1-8b5a-eef1c160496e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7a43472-a315-400e-86ab-4de696f976e9",
        "cursor": {
          "ref": "1230f61b-7b3c-49d0-ba0f-b00730474b1f",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "210aa95b-f4d4-45b7-836d-585c50a9d702"
        },
        "item": {
          "id": "a7a43472-a315-400e-86ab-4de696f976e9",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "a13f504c-4e12-4c2f-9901-d424a4024c21",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "fc1a9e30-d5f9-495a-a84e-7189927d952f",
        "cursor": {
          "ref": "ca2d29c7-f8bc-40c3-b7b9-2e89f600ff87",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "56132b08-4ec2-4f22-92b2-6ae8585c7501"
        },
        "item": {
          "id": "fc1a9e30-d5f9-495a-a84e-7189927d952f",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "ab2916ba-969b-45d9-bb13-5825a0770d47",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "1a0951eb-2069-45d4-bb1b-2719897ee354",
        "cursor": {
          "ref": "c8f0e8bb-1f86-44a1-90e4-5d45e1c2246e",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "d2081f73-84ac-40c7-9c73-835861560fc6"
        },
        "item": {
          "id": "1a0951eb-2069-45d4-bb1b-2719897ee354",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "3b0c80c7-f4d2-4032-80d6-69da5baf8593",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "f70ea3ce-31a2-43b9-846b-c4439a0c3186",
        "cursor": {
          "ref": "775185aa-e34e-4bc8-9717-23085bd8f7c9",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "8f553dc6-333f-44e3-9aa5-3ea2390da65f"
        },
        "item": {
          "id": "f70ea3ce-31a2-43b9-846b-c4439a0c3186",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "82bae50b-fd8f-4b6a-85ee-05e9f1829dec",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "2a39c12f-abe3-493b-99c7-603a2d3dba51",
        "cursor": {
          "ref": "0fc1777a-186b-4de4-b18d-3953b04971a5",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "33108256-db2f-44a7-b53a-1d18397c5709"
        },
        "item": {
          "id": "2a39c12f-abe3-493b-99c7-603a2d3dba51",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "44a958a3-e00a-4ce6-b820-1a1cb6317ffb",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "120df404-26fd-4fc4-9969-fb64d68e810c",
        "cursor": {
          "ref": "c62699b4-888a-4638-97a7-1238b0c30033",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "a1fe24a8-ace3-45fe-a695-6e82d5b06832"
        },
        "item": {
          "id": "120df404-26fd-4fc4-9969-fb64d68e810c",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "1f843e0d-8124-47f9-a5e5-67c4a08cd5be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1358e68-3032-4059-aaa3-788f6d879ab1",
        "cursor": {
          "ref": "92505ea0-00cf-4d0c-98f2-fe7d5e766f35",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "cf87400c-1539-4d74-adc7-19e01587be3b"
        },
        "item": {
          "id": "b1358e68-3032-4059-aaa3-788f6d879ab1",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "d151926c-134f-4d99-8377-1dd3b75fb064",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f9f88cb-32ff-44ff-aada-65d16521980e",
        "cursor": {
          "ref": "f1cb44b2-c2cb-4dbc-b8b2-db81479bb2a4",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "ae4c66af-818c-4982-9b35-ef3b975c9a14"
        },
        "item": {
          "id": "4f9f88cb-32ff-44ff-aada-65d16521980e",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "28ae7c8c-6b19-4230-979a-df52bcce20a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a35501b0-f7b0-4f42-847e-ed9e85718317",
        "cursor": {
          "ref": "71896c9e-a633-4236-ab8f-273e6a270efe",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "cf064721-4013-41f3-859f-9675c5f6e22d"
        },
        "item": {
          "id": "a35501b0-f7b0-4f42-847e-ed9e85718317",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "879c5fa4-5f46-4967-8f3b-5ca20c69643e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3015b3d-2e00-42c2-b177-c1b407cfaea3",
        "cursor": {
          "ref": "59e56aa6-1397-4e0e-9f1c-e845c6d81e22",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "7de72f0c-358d-49b5-8d1a-b23542636a47"
        },
        "item": {
          "id": "b3015b3d-2e00-42c2-b177-c1b407cfaea3",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "401a383e-e1e4-41d3-8667-e0521f9bd3cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93983f1b-a2db-4a46-90de-74dae73b6222",
        "cursor": {
          "ref": "4dc1977b-44f5-4e22-b1d3-08466b3ef33a",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "18e39658-1716-487f-b9f1-bac236233c7d"
        },
        "item": {
          "id": "93983f1b-a2db-4a46-90de-74dae73b6222",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "dd8088a1-34f1-4423-858e-ac6bca69bafd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "954ab890-17bf-489e-a5a0-3c9ad9124c12",
        "cursor": {
          "ref": "83471f41-2c99-4974-9b6d-bc2e8c35ae77",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "a89df9d8-6ae9-4882-bf67-f3537b697b2e"
        },
        "item": {
          "id": "954ab890-17bf-489e-a5a0-3c9ad9124c12",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "520bbeb5-1f52-4c7d-a693-6c6c8673bafd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ab9e1cf-aa5a-4188-b51e-b0968d422a21",
        "cursor": {
          "ref": "f65f21b4-4ced-4a63-a9e9-8241def422f1",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "42144a18-4630-4b2f-aabb-efbadd895b83"
        },
        "item": {
          "id": "2ab9e1cf-aa5a-4188-b51e-b0968d422a21",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "a2bcf3f5-ca78-46a6-8e85-77afd772446b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a56228a-f5b6-4605-a3fb-388258c6977f",
        "cursor": {
          "ref": "c319e238-f6e8-4770-aa4d-12d849c58c39",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "1bf383a1-628f-4047-85ec-6a2ec10063ce"
        },
        "item": {
          "id": "7a56228a-f5b6-4605-a3fb-388258c6977f",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "c2c03ba2-ccf1-41e4-8cae-42ab33b38f42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9de36fb-be92-4e85-88e3-e400f683bde1",
        "cursor": {
          "ref": "6709b476-f4e7-4139-8dc6-13ab1bcb8efb",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "ebea1373-ba5e-4e2d-93c9-8cdb1da15487"
        },
        "item": {
          "id": "d9de36fb-be92-4e85-88e3-e400f683bde1",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "b8ca0d95-aa59-420a-a474-323b190e1a59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4344a95c-a8c3-4e59-bb06-227223de6e51",
        "cursor": {
          "ref": "e3af989f-0e8f-44f6-b4e8-e0d9217354d4",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "87056505-e269-4a54-b447-749474de9600"
        },
        "item": {
          "id": "4344a95c-a8c3-4e59-bb06-227223de6e51",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "8cfb51bc-ef43-4415-a7a5-642ac852def4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad097e28-3915-435e-8be5-7c20b1a5c03d",
        "cursor": {
          "ref": "ced4588a-0ed2-4183-bd7c-641cd9c5ed05",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "72ad598f-45d9-4c53-8da4-6427fc7dcb8c"
        },
        "item": {
          "id": "ad097e28-3915-435e-8be5-7c20b1a5c03d",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "40587cf5-06d9-4923-a607-84e1a5cbddf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e33b5a2c-3b0f-44ed-8b4a-563112b41306",
        "cursor": {
          "ref": "0a77afa6-57af-4440-aedc-8736db953dc9",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "210251cc-8f17-4344-a58b-9c24ca45f614"
        },
        "item": {
          "id": "e33b5a2c-3b0f-44ed-8b4a-563112b41306",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "b7d0187f-bdeb-4741-a7e7-59d18f671d03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efddbea3-1629-43d6-9803-bc80806ce05d",
        "cursor": {
          "ref": "bcf5c0b1-1451-43e2-942b-e5729509afe2",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "ed64be22-a983-4d1e-8371-48a6472c55c9"
        },
        "item": {
          "id": "efddbea3-1629-43d6-9803-bc80806ce05d",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "b2d63477-26c9-4e1d-ae9b-d762570cab61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e667224-e621-4c51-87f8-d71b9cf770a0",
        "cursor": {
          "ref": "1aaa8fda-b115-4742-90cd-3bde1c022cf6",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "29e2939f-91d1-4bac-9772-f6350222a8fc"
        },
        "item": {
          "id": "3e667224-e621-4c51-87f8-d71b9cf770a0",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "fc408b2c-68eb-4787-a60d-900d991b5cda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7748206d-39b5-42d3-9d5a-e717b981df85",
        "cursor": {
          "ref": "4388d41e-4435-4d2a-b6a9-8617ab7ef42d",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "5e36c7e9-8b30-4161-9d8c-74e7dc11b3ba"
        },
        "item": {
          "id": "7748206d-39b5-42d3-9d5a-e717b981df85",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "148ef774-7960-4789-b863-2b18ee6ec842",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ae3431b-fc1d-43ca-8171-6a7773c082c6",
        "cursor": {
          "ref": "23dafee3-d5f3-4e5b-8aed-6f65c6162677",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "e7f1b7e0-b7fd-46a2-bdcb-3784472699eb"
        },
        "item": {
          "id": "2ae3431b-fc1d-43ca-8171-6a7773c082c6",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "13457763-5fa5-4e46-8d21-a3777f2e6170",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84260653-9e58-44e1-bec9-f90357ec3abf",
        "cursor": {
          "ref": "43d64035-a55f-4603-83cd-bb3d8d63d835",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "c40b4d7d-0c58-4a8b-a563-df08f860ee69"
        },
        "item": {
          "id": "84260653-9e58-44e1-bec9-f90357ec3abf",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "6c4b4791-69da-4e1f-9e89-7dc7e1961185",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "720dcf9d-6300-4ae3-9dd3-10df3a991ce9",
        "cursor": {
          "ref": "9a320a70-f8ea-46aa-ac19-a4b23a4cfaa1",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "faa68aa2-1c57-41ee-992c-08fa638cdd9a"
        },
        "item": {
          "id": "720dcf9d-6300-4ae3-9dd3-10df3a991ce9",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "80c5f069-f347-45ec-bc56-040110667d54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed2cd876-b05d-454d-aa7b-11ca73241a93",
        "cursor": {
          "ref": "241f1917-fd6e-46ed-ad49-dc09754a9b63",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "c1cfa9d8-fcc4-483b-930c-d532acee8c2e"
        },
        "item": {
          "id": "ed2cd876-b05d-454d-aa7b-11ca73241a93",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "8ba15334-7acf-4274-819d-c532a0807c4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab6133a2-9f63-41f0-bb0d-05c845214b25",
        "cursor": {
          "ref": "492f10c6-effd-48fd-ace2-8c976d30c100",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "b7eed25b-3b76-4e19-acec-e09893800af4"
        },
        "item": {
          "id": "ab6133a2-9f63-41f0-bb0d-05c845214b25",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "f1056f7b-35ca-4ee9-a3fa-1e08845a18d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb78d4a7-25ca-4563-8036-88d286575f85",
        "cursor": {
          "ref": "116652a0-0547-4803-a27f-a8a05a3dc8be",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "a9d6823d-83e9-4fdb-8b06-918e6fd1e1af"
        },
        "item": {
          "id": "bb78d4a7-25ca-4563-8036-88d286575f85",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "4ac015c3-08d7-493f-ad40-acb11092ac6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b4fc538-c784-4b3b-aa2b-8f3dd1e6d541",
        "cursor": {
          "ref": "3c0d961d-2091-4da9-b9c2-e653d90f5fe8",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "3e9781d3-c13b-4b99-918e-9e9a3b21c47c"
        },
        "item": {
          "id": "9b4fc538-c784-4b3b-aa2b-8f3dd1e6d541",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "5992f6d3-1411-4fd0-9757-c90c3a5d61af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a71d53f-4547-480a-a2b5-aae1c57961a8",
        "cursor": {
          "ref": "f4ac15f7-1da0-4e54-a553-9dc06a8afd81",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "dbae7e7c-d6bd-4de5-9365-6cedb5c94fe2"
        },
        "item": {
          "id": "2a71d53f-4547-480a-a2b5-aae1c57961a8",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "9b3f11ba-22a9-475e-a4fb-93f1bdd46bf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e6cf514-32f0-4286-91be-d8c2d9940feb",
        "cursor": {
          "ref": "5d73af5e-5e6f-415c-85c4-edb5e4725785",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "09b5ef3d-d786-4639-a4e5-861e4d543cdf"
        },
        "item": {
          "id": "7e6cf514-32f0-4286-91be-d8c2d9940feb",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "01c840da-ae0e-48d2-885b-f32b3d7dc82d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4382b731-6506-4e8a-bf4a-020cb37edbe8",
        "cursor": {
          "ref": "6ac248ac-3547-4f20-babf-49c51e952cb4",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "5cf25e46-4fe4-453b-9257-68c3b3fbddc4"
        },
        "item": {
          "id": "4382b731-6506-4e8a-bf4a-020cb37edbe8",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "13399313-0a46-422f-9ecb-4cd4c20955df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be1ccf37-9c41-4eef-977b-e7abeb18a21a",
        "cursor": {
          "ref": "8a4c61a9-a641-405a-93e8-bd0d628b4e76",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "d69227fc-c872-4d07-8c91-340e46540521"
        },
        "item": {
          "id": "be1ccf37-9c41-4eef-977b-e7abeb18a21a",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "56480263-309e-44ec-a9bb-787e678f5202",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd8dc966-16fe-4e36-ba3d-7b265d478147",
        "cursor": {
          "ref": "ffdde6f7-4b88-498c-a5cf-ecca5f27af06",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "1727a129-4b38-4c1d-9c6f-2995d3caccd6"
        },
        "item": {
          "id": "fd8dc966-16fe-4e36-ba3d-7b265d478147",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "5f091e07-086f-4154-bca1-4b0c10168022",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "390b90f6-702c-49c9-b8bd-e158599b9b9a",
        "cursor": {
          "ref": "e2297174-8c24-46ed-af36-fcd2432ac108",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "730880d8-c6c9-4532-b746-2fdd93c65906"
        },
        "item": {
          "id": "390b90f6-702c-49c9-b8bd-e158599b9b9a",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "7ec6017c-02d4-4399-ad73-c8e58b0581e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb55f98d-e0cc-45ce-b005-bf6bc7164ba8",
        "cursor": {
          "ref": "3b6a163e-fd8d-4794-ac0a-8579ee4e4cb3",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "a037491d-1721-40ce-b1f0-7dec5302ab3e"
        },
        "item": {
          "id": "fb55f98d-e0cc-45ce-b005-bf6bc7164ba8",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "ad71335f-d7d3-4558-9af8-ab9566c38618",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75d68e57-9e07-4475-93a2-c1ced9bc7d23",
        "cursor": {
          "ref": "f255d6ed-1f3b-4aef-abc5-a2fca4e8cfb1",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "8d9a1ac8-f0fc-43a8-ab26-aefb904c99ba"
        },
        "item": {
          "id": "75d68e57-9e07-4475-93a2-c1ced9bc7d23",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "44053a47-5dbb-4a95-9b85-ce6b61248c61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97926076-9679-4bdf-b2bf-35f0d16364de",
        "cursor": {
          "ref": "ca98fdc5-0861-4cf9-9989-e773aabf146c",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "c4f0bbe4-881d-48c4-9c76-41d5ffcfdbef"
        },
        "item": {
          "id": "97926076-9679-4bdf-b2bf-35f0d16364de",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "5b360457-5e7d-401a-badd-592be10b95c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8414f93f-3360-4b6a-a4ee-a5b053ea6fe5",
        "cursor": {
          "ref": "816a7ee8-020c-4270-abef-18365a59b3ce",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "0119d0b3-fd87-4f45-a923-d3b12cfc1f63"
        },
        "item": {
          "id": "8414f93f-3360-4b6a-a4ee-a5b053ea6fe5",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "f89c12f1-4f7b-42c3-8fd8-db9104d2c332",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03b6668e-7bcf-48f2-80ef-f0d2195c01de",
        "cursor": {
          "ref": "206da7fb-1764-42de-baa9-97345a99bf07",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "ae049961-abec-4ca7-8c7b-d3d0026fed5a"
        },
        "item": {
          "id": "03b6668e-7bcf-48f2-80ef-f0d2195c01de",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "821be52a-1d23-488e-9f16-9e6267ebf89d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1411cd97-ada0-497e-9762-d93f2f61a82b",
        "cursor": {
          "ref": "d202c61f-8f27-492a-a59f-10c0a4a2c8e0",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "34e3cc5e-73d3-41e8-ba06-551b8cd56744"
        },
        "item": {
          "id": "1411cd97-ada0-497e-9762-d93f2f61a82b",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "88b37712-0196-4cfc-bff8-78f6f9878f60",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74edfdb4-3097-4bcc-a214-8b09bdf16783",
        "cursor": {
          "ref": "fd3a702d-5097-4c9b-99ff-03c05d54f4fa",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "2bd25a94-cac2-4a7c-8d67-afece74d89ce"
        },
        "item": {
          "id": "74edfdb4-3097-4bcc-a214-8b09bdf16783",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "071c7f24-b291-4b2d-a57b-0d34199ea33f",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "c540ecc1-cce6-4aa4-ba2c-eb1d0bb7ea9f",
        "cursor": {
          "ref": "76f773a7-1369-4dbf-ada4-45b6ce913a92",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "d9aae844-9ec0-4814-bb31-1be2c74610e7"
        },
        "item": {
          "id": "c540ecc1-cce6-4aa4-ba2c-eb1d0bb7ea9f",
          "name": "credentials_verify"
        },
        "response": {
          "id": "2ad01036-d518-4231-ba08-303bd17655e9",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b36e02f-d7c3-47d0-ac43-86dc03574f24",
        "cursor": {
          "ref": "8db5a750-bebb-495d-8e29-faf3184b76ae",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "77ae54e0-d310-4286-a616-b8b2769155f5"
        },
        "item": {
          "id": "8b36e02f-d7c3-47d0-ac43-86dc03574f24",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "fbca3a2c-fa3a-4c37-b62f-a720e0a0d18a",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8b27ca0-700f-4e05-b0af-5d998103de92",
        "cursor": {
          "ref": "dd1637a7-6fd4-4238-8e0e-ff240a459b0e",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "21a607f7-a5e7-4480-83aa-f9faa95ab74c"
        },
        "item": {
          "id": "e8b27ca0-700f-4e05-b0af-5d998103de92",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "0f159a85-5a0b-449d-bc8b-be446c8647cd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8b27ca0-700f-4e05-b0af-5d998103de92",
        "cursor": {
          "ref": "dd1637a7-6fd4-4238-8e0e-ff240a459b0e",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "21a607f7-a5e7-4480-83aa-f9faa95ab74c"
        },
        "item": {
          "id": "e8b27ca0-700f-4e05-b0af-5d998103de92",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "0f159a85-5a0b-449d-bc8b-be446c8647cd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0d6a1f5-c4ee-4146-8fca-e9964c75e1ae",
        "cursor": {
          "ref": "1317b8bd-0b94-4b64-84d0-88b9a500ff51",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "3109f65c-2f49-44ab-8ace-fb1cb7c7cb8a"
        },
        "item": {
          "id": "c0d6a1f5-c4ee-4146-8fca-e9964c75e1ae",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "ac4d270c-f79a-4f2e-a19f-7fdd6c37df4d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a52d1d7-1df8-4497-bd29-65df04807eff",
        "cursor": {
          "ref": "891be6e5-0e66-4d2b-9bde-9dfa4726324d",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "d5d69ff9-21a2-4261-9380-99fbaf2ac011"
        },
        "item": {
          "id": "0a52d1d7-1df8-4497-bd29-65df04807eff",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "aa9ccaea-cd89-4ae0-a3ad-2c322990b3a7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}