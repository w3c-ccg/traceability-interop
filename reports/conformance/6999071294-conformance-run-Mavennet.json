{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "b5489743-c413-47f6-9fae-640527d3dbce",
        "name": "Clear Cache",
        "item": [
          {
            "id": "597e8339-8e69-47f2-aae2-d0a3bba5c85d",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "082b2e5e-9aee-4114-87db-ac286aea222c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "8aa2198f-31e8-4622-a1c4-bdf7d2bb76c1"
                }
              }
            ]
          },
          {
            "id": "d6473fd6-3557-476d-b830-be86dc990f1b",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "19ee8b40-0e9a-4e4e-b00d-31ed22627cfc",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "89d560ca-b657-48d3-b061-70528bb00cf8"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "fc71accc-1f7e-42ae-a243-e0443cf34009",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "b1ac4e7d-2099-414f-b6e6-7a18e1936ed9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b0ec77e6-8b28-488e-9d6c-d0bad3806f4a",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "20a2cfbf-2c34-47ad-9051-5f0eb0a38b5a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3e739638-4a09-4fbf-8f3c-f97750834af6"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8f0f7738-9127-4751-ada9-ceba7962fd04",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e9fa2ac5-c4a7-447f-a351-5844d67bf574"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "30c062a9-de25-4807-a5eb-fd8bde22ae7a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "68d8b4b5-d980-489b-8e65-506cdd8d1539"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9d87ab53-38d3-4099-82ae-4d3e249a56f0",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "da9a8ca7-9021-4f4f-9f7e-eed8b11ad113"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cebb6d48-2726-4a38-ad41-c870f28b2918",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7c81297a-0dab-4dcb-a884-7c9bf1732b44"
            }
          }
        ]
      },
      {
        "id": "b6902628-4742-45f0-90b3-ae7aed26f403",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "d4adb0bb-2ab4-450c-96a4-ad38bb5698d8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3571a6ad-2c4b-472d-abcf-2079554cc450",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "98001be8-13f2-4ce8-9fa3-2ebbf5687065",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "890dda2c-6120-41a0-b436-a4c41a9d6831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7ea326a5-bc3b-4793-bbe2-2cb9d81e919f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a20c0a71-3d85-460e-bc9f-aa452e54b3b5",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "954597a0-2ffa-42db-b07e-68b18eec8f01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2f5cdb53-4b60-48da-9d65-fd61d14ff88d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93a2ea14-69b6-4180-844c-c6acba3a7a67",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a22b3284-cfd2-4e36-b9db-4f9511ba59a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "07409c45-a7f0-4e8b-8368-598950627924"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8fe0433b-cd80-4466-a525-0cd4551401f4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f2f08b72-2584-4eab-8fca-dea3770f1b7b",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc80030d-dcfd-4bf3-aee2-b0dd30bb6d76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5c591373-a4bd-4a7a-b55d-b7075b4adf7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8de76998-9a0b-449f-b8cd-77cff98c670c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfa51547-32a9-425f-8c92-f7f8a3f78b2f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "17bd4efa-2726-46b4-933a-8c07c1a0dca9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a0b2f0d0-f8f3-420a-99ca-61c4c3db84a1",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fce8791d-a5a4-4906-a9a5-27b55fddb0ee",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "3d6a0a68-a243-47f0-b217-1217bf5e6bc7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "003ca0b3-9c22-4696-b8b2-725eb49c4f12",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "a587e1b1-cf9c-4402-a9a8-b464d377c75e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8012f106-438a-41b4-aa2b-92681f3e8ba1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d53c6e9d-ba17-4608-bee8-ac685e638dc2"
            }
          }
        ]
      },
      {
        "id": "4cd03e70-918e-43ba-aa16-2e0699cce5cd",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "9b5e346d-76ac-4b93-8aed-275bb03f2943",
            "name": "Negative Testing",
            "item": [
              {
                "id": "81fe6712-1a6b-44c3-8467-27d4312bfbfb",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "43e35f71-132f-47d6-9a51-709391da05b6",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5838e362-3da7-4fc7-bb08-04b324f27696",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c85cf4f-23e9-444a-96fe-377f5b1dc439"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4bb6951-2ba0-4af8-8b8e-7e30a1225487",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cbd9c783-c8e3-44d7-afae-5b8394dea8ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de93e497-7dc7-4ba3-aaf0-504a81403bfb",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5481b7af-c261-4bcf-a9a6-dc0a1218990b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69942cbd-9e43-446f-b739-f359b89cb281"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "405306e4-46a8-4d70-ba30-0002f1a6e3cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c24734ad-66f0-4943-bfc5-4222ef475961"
                        }
                      }
                    ]
                  },
                  {
                    "id": "422cb78d-f05a-4236-9236-78fb136edcb5",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db02bb3e-dbe7-449e-9ac6-59094e53d387",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b307af3-0a55-4a92-ac47-6b94179ae134"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e25eb487-3fa2-4781-8973-68cbd440b897",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a2739d14-1182-4ae2-810e-9459ea93f3b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "619d05de-717a-409e-9c16-0fe3f347ec30",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28ca63c8-67ce-45e0-94db-12494c3a6833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "598faa49-d1dd-4bca-ae75-6877634ea3f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50e91d29-92b1-444f-ba99-629484ee72d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dbd6b67e-9672-4f45-9c07-3b110a67bdd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f9daa91-e7f0-4ce7-8024-831f855de8ad",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d522f85b-837a-414f-8175-9c6cbee836de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5e752ca-33ba-4de8-8f18-0ee433cbe888"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e37fe5c0-a9cf-4c5d-95ee-e1de306f88fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e0e0f26d-9d41-49e0-845e-7bf3e2be160d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfbcbb34-bd27-4121-9f39-ad7e907695eb",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cda21123-3db8-4121-9ee5-e66be45d8013",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75d5f10f-1309-4f0a-96b8-b3eeb5f7dbf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3fbc868-197e-4d1d-bc97-09b771294279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7d68b929-ca1b-49aa-adc8-cc9da8013565"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eebaae67-a2e7-404c-a3b8-1e2d31770f9b",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1900cf5-d037-4a85-8462-8415dac0cb0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "088c4710-8c9b-49b9-9d0c-aa4d396d378c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a436af5-5222-4c83-8de6-903755a905c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aaa9ddbd-8b58-440f-8d4f-0975dc2ce0a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02790c70-e5ef-45a7-8bda-ac044c0be8a7",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a75482c2-06d5-496e-a8c8-18d8697c337c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac8e03af-4dd7-4792-8277-44ffc075603a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed45376b-ba61-405c-84f0-b61084e7f13e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3c765b75-107f-4fc9-9222-3510b1f3cd15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db551242-5aac-4e58-a66a-8654eb1edf76",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7777a771-dc6a-48b5-827b-e21a2b83766b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11b349db-c6e5-46c8-9d61-833471973980"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b4e8124-5912-462a-90f7-46bb327c2161",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2e25dc87-3b52-46e0-a2f3-15bedf1b8239"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3ddf7e5-ad72-4985-b443-e32b6c213f42",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "282540c9-14dd-4513-8fe3-4236e0c46070",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2ee0ab4-237c-410e-a3c8-a01ae1d66272"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d28de43-0250-475f-93c3-c83549aad1ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b70d96dc-0f5b-4192-a4fe-5155031c4c78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd4fcc70-0b5a-4620-816d-921aa9bfa878",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0045603a-43e7-437f-a3cb-45220d9e44e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3e18d02-2e1b-4964-9781-d9949da83a09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a545a4f-803b-4130-b998-62cf1acc4b25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "677b08ef-98ba-4621-b4fb-e32c4558c9a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a04f22aa-16da-4cf5-a394-1913a470d66e",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be9ae94d-db51-4a84-b772-82a7d5d8b646",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d08ed9b0-055e-44bd-9948-1a32b9583e3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90cd4a2c-7e3f-4972-a6ec-122fac5bccbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ed681f28-abb8-40d4-b039-6ab17ce07937"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e2b55f0-2321-4b7e-a61d-c323a85ad82c",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34d0ae8c-88ac-4637-be65-52f992f6a3f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26cede19-5267-4a9f-bf95-afa7750925e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2047dd4b-3a55-4ad0-a3c3-8886e3afa93f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3171e6df-de84-4f44-b463-e1c3fa3d2004"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41d439c6-3047-483a-86ae-66b28cdf48e1",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51929898-369b-4b9a-ba3e-6648ed702daa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20cff34c-6033-4923-8743-00ed958e35b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17dd2502-ad19-42d1-aa43-a83e0a92935e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "71f5b659-414c-4430-b09f-ff1654176ce0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb0768ae-373d-4153-94ad-52e73ee789a4",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03e57d3a-b448-4a97-a6c2-4fec92af212b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd8aa205-ec1a-43f4-8ab2-e8c226ce95a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1066ade-b18b-4305-8013-809859811b84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d0038c88-4c68-42a3-801f-ee9c05a8ef0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fc285f3-5a1b-40fa-8206-01ed89590114",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd1dd71e-5f4e-4e37-859f-6d5cc11de4a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ab06b76-2574-4712-bc26-59910deac2a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19f1bd46-1e03-45d5-8fc5-02a0af7dae67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "079b22d1-2de0-44de-9517-8bd5f08cd6e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f9bb34b-4228-4977-8738-c60833ed3962",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ac97c0a-5d68-4708-ba53-5cdeab37549c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7e49e25-95ca-4849-8b49-2284752f9ee0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "636d7a09-4cd8-4fe8-85d8-bd8f1688fab2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "72ea68d5-3bad-46ea-b6b1-f7156af18bc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0002fbe4-f1b6-4596-8d58-37cfd26c3857",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45dfebda-85f3-4478-989a-0ee66cd06f97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a22400c4-6ce0-4a94-8ea9-70700bcfa4e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9836ab97-617d-4dc2-8b78-3ee7520634e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "36e2a3a1-7ca2-420f-b224-04ca1e21c907"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a48847f5-ea15-42cc-bb47-4fc298c57998",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50dac59b-e594-4059-99c0-e8bb44480730",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33d67eca-5c8a-40dd-9dba-1c4aa66df4c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7946ec1e-2230-4123-b4ef-9ffa4c49cb12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f5aa6ff-e944-460b-86ce-582842c8c3ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "077cf90b-5b2c-4f16-9ef5-a29b7295f288",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31c28cc8-54e6-40ce-b0b6-7358814e5196",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39764b25-ab69-439c-b9ed-1601847c17b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aacd7e6-96fb-42b9-931d-cccbff8f044d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb5cf2d0-3ffe-4bdd-927a-4fc07bb2aae6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f3c1d09-3c19-4c3d-81e8-6c97715cac9f",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fba6926-4ab1-4c6d-a177-a4fbe219a3f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4109ed1-6e62-4ad2-a877-cfaff2a14d39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a4c7736-9469-429b-bb8b-c83e65efe90d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8d2765f-7f8a-46cc-b4d4-d98c3b82efe9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "347f7ece-8b8b-4d90-9f71-49933f0de938",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8242a697-36dd-435c-82e6-751c2c9a0801",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f956a474-e351-43b0-bf8c-6ad1f2ee0c7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "562c7b7a-a48a-471e-ab92-fe76e32cd3d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1f09c432-fc7a-4010-b0a4-6e3e9e9eb4e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1ba1a2f-0b5c-4392-8ff5-7b4dc7b1b7f8",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e988f3e-a6cd-4530-a2bb-16bc4454e7ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e16fcc19-dc18-4b92-8120-786ef5b75f0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c948074-f9f6-41cc-b38e-be77d780fee8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c628fb70-1c59-4d19-a9e9-ae83e27fa56f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83361c7b-382a-44fe-85a3-6c1060609cfe",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fee0a55-100d-4b9a-b7ab-95df72ff683f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ad1fb32-daa2-4ba0-947a-bccf10bddfcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20716af9-8d79-4829-a5fe-7847c2448a5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "591f06e6-ebbb-471d-b577-ef8f2290520c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d459769-ecea-45a7-ac2f-39a388e54a3e",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05ebf062-39de-429d-bbe6-004156504d79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7372bf6b-4088-4af1-bbb7-7e5ac4624c8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4dbe1ae-2526-4290-bff2-842726185291",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9dd0725-86f1-4ba2-9b6b-2adf14e8b2c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d05ac644-a76c-4137-9d8d-1a57be621781",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d3cd265-62cc-49aa-a661-54657eb95ec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b5deb2c-eebe-4409-b256-18b2ef7d97cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6416c20-4716-4280-8741-8298cf13a8ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "973fe317-8270-4978-a0f2-72bdfaef6b00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88144494-e766-489a-b43f-9f4414586cd8",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3817c618-11f8-46f2-94ce-63ae8e71cf36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba574626-7298-4d3f-9fe4-e78b88b8ebe2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58862ac9-4ac3-45ed-8e98-9db35faae780",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa090018-a71a-4f98-80dd-699bc05892ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1d0592b-6c12-4739-a60f-9d76e19e5fb7",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6d403f9-a6c8-4135-aed8-08c4657da522",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fddd4d84-133b-4453-9eee-eb082bf853af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bfe3681-58bd-4537-a8ec-f39af673f617",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b51265a-b02b-451a-b272-2b758c20fb41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78f0b0ed-9726-4794-b973-89b6c740d332",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7c3d6f5-74bc-40c6-918f-3eae08df36b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eaf159f7-f62d-4db7-ba61-e21b5db55252"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0d17223-bef5-4f14-91c5-7291fa36dd08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5ff70a6-294f-463c-806f-163972aea23e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c87566f-5de2-4d4e-a9c0-5d58210d42fa",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f69fdb2-cf24-45da-8fe7-fd789d7f12b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f99badfb-a02e-41fa-8b78-1b4c6c6bc923"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e1a56b8-2280-474c-b26e-83885c895bc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ca61a9f-834f-4cd9-a56b-0ab1e8d872aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1944f959-6925-4e3c-af42-fa8f61f32376",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41321986-fe6b-49b7-8b12-9efb9b76f60d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b59b3d21-755e-4f8e-8312-cdce9578cdff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "353784db-79f6-4b79-938a-50d7ab56f485",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "49614fe1-f9f6-4366-acf4-01de3653c6cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50d85922-4471-461a-8b66-45d15a34bfbe",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ac035c1-519a-4119-a168-b88af0f13764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb9dce71-4431-4214-a560-3c0b09f3e5c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aeb24a38-229c-4839-ae7c-fa64497ecdc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "151539bf-2f3c-4efc-b7b2-ca431fc13139"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87670284-1545-407a-afde-61ad413be181",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13268eb0-1468-46a0-ac3a-5b9db2352615",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "384736bd-6105-460f-bf10-a11702fc41f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d923340-7a11-4682-8bf9-df660a2a92eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4329e91d-76c2-4875-b040-cfc9115cfa7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3831ae41-120e-49c5-b65a-df22b785695a",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f36bbc05-0a46-434a-bc63-2e0303c7a78b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40a833d9-a953-419f-8d33-97137328fd5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14da4c62-1d44-4e42-851d-fc483d5e6d3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "36cc169f-4f31-4ac5-8e62-55fa9a854597"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e9d122f-3961-4e66-a21a-464050cc9fe9",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34a030fe-cc50-47da-b2ce-a1bc67455850",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "627cadcb-88c5-4be1-a2f2-810d0938be4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fccc82fb-37c3-4e9a-99f9-783cf80262e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "1a351a05-ae42-48cd-b06f-bc609ccdd65f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b614f47-a43e-4845-be10-2ca8512901a2",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95968c85-8591-4c7d-be78-838bb2cc5e09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3dd48b74-2a07-43ca-9e90-5ea9cfcb6adf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2817faf-5098-43bd-bb55-f13bc03e3167",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "453489bc-d7a9-40e8-8a41-8bdd3caeee68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56691700-01cd-40c2-ad62-99d8b83a2a22",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76ac129e-f9b3-4cfb-bd87-129a751124e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22b96cbe-5947-4e98-bc47-67bed8f7bdc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00d5607e-a1f1-4352-afd1-682d51efc05d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "11a67e37-4b13-49df-9070-8e59c929d7c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a237d4b7-45a7-4d83-8efb-0b743fdd2a7f",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4db56739-1450-4fad-81b2-e82d5371d5e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "920e846f-959e-46ca-b7f0-43f817d95e46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ff93a6d-15ca-4349-b4d7-6b161fb12253",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9408cfc9-9733-4eda-b79b-5fc644db596b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b218ad6-38a1-456f-b8e6-e3eae37fa91e",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4ff69ec-b903-48f4-a8fd-b00eaeaf5197",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f4f635f-af1f-4088-a946-3da93efcc8bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a93186d0-d7ec-4e8f-af45-4bb902456ef5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6a9fedee-994b-4687-acd8-036d34ad169a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f20b4fd-747b-49ca-8b53-e576dccc5497",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc713f5a-39d8-49ed-8c83-ae582a9f6cd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6c9bd10-e1f1-4067-a597-447c64df4b77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afcfaef2-be5b-4c8c-a1d3-14f4d95507ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "9d9c05a3-8e0d-4e4f-8d09-5cbf8bf17907"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62762d8b-9dff-42e7-b0bd-5282162d4b3c",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0af5f7f9-d951-48e5-a6a3-be033febf30c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59669b0a-e4df-4583-9c92-18bdc3e6bcd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a36ced39-c34b-4bb6-82ae-8477d989adb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "37716178-47b6-4b57-b641-0cb98b416d5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a968524f-be26-451c-afcc-4b26006e86cc",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b497e356-ed01-499d-af3f-f680f8d8e800",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fcc6430-5d4d-4b79-820b-f9b89f7fa9c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c444608a-0099-4151-8814-1c79dbcd6cd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "556bdc57-25f3-41a6-b882-cb49653ae0df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4672c57-e4af-42b8-be74-47d69cf9c33b",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efd424ac-a53f-4866-8b51-80dd50c3eecb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d73676a9-2f0c-4214-93a2-2d0cafd63c40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd2236cd-c117-4011-ae81-a1e3b255235f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "1d640af2-d71f-45f3-9276-eb9486efa157"
                        }
                      }
                    ]
                  },
                  {
                    "id": "762a841f-1d20-4f78-9553-fab2d498b1e9",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5046b4af-b7c8-42f9-bafe-a034992019f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b6bc990-dbc7-436e-929a-0e45d5d63cea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a37dd87e-c6bd-4dfa-ab7f-8b4c2d9e1b89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "7db75171-fbbf-4161-b2f3-44c85c5c6767"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f36084b-8cb6-46e2-90ef-b6dae06894ba",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64cdc22d-f2f5-48ee-a0ce-8017cb550994",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02c24384-698f-457e-b9f8-92055f670837"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce6631f3-0cce-4d93-859a-c2036b43c9f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "68c4a761-6891-4f12-813d-a435df665f63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3ebacee-5bc4-44b7-9e92-cbc3433d4cfb",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "815749d7-3d93-445a-bdfc-b3e79e75fe54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a97c30fc-57db-4ba2-84f6-20854e5899f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "728d422f-6da0-42d1-bfba-7b89ff58984a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f91986b4-7ba6-4b42-b44e-8ab3190ef435"
                        }
                      }
                    ]
                  },
                  {
                    "id": "962ae36d-1a78-49c5-a4f2-84b20e70dac5",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "157f9628-e073-48b3-8454-4587fcd4e851",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10d3ce15-9887-44e8-8c68-46338a083c02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7706996-6747-4be9-950f-d284606a4f4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c6a7f071-b7c8-45ea-8300-c662b08d49f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "222adb30-a386-440f-ad43-89a994f5b3e6",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf5e8706-f3bf-4148-af2c-de2f56aaee4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c6cc329-1168-467b-bda7-d02489f382d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da50abbd-56dd-4bf6-88d7-dec5abb99d02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "febbdfa8-3bd9-4b1b-98f9-4e8c84f0310a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abcc4865-fb80-41eb-a8cc-0b8dfec016a3",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2449f9fa-40ba-4ac7-b3d7-0054a03801c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60d8ad3d-9872-42f0-b011-4acbc24b12ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b5465eb-b343-4cba-83b4-6946a8f6b7f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d5acb1ab-dbc0-4fc4-b93d-e341a87cb1d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39807860-b2ac-40d0-a786-926a48f5d8ff",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba5691a5-a3e5-4bbc-aa66-154e698d4ddd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bdee946-6f95-4ea9-a97b-45c28a5b7dcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6732f5e8-cf72-4613-875e-aa3b5a69cf43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "04348133-7f19-417a-96c9-cc495f91d994"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c9cba66-178c-4e5c-9462-92c5df9f63c6",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11fdd68b-8ad5-4b78-aa2c-aae2fd690c14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "171f3002-d334-4909-8144-6bf00013767a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02fd6d2a-ba13-445f-b85f-dca134ab8f9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf0b4a42-37d9-4883-b770-444122bc2bd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19335fee-c993-4fb7-b23d-b8668cd5440f",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed7ebc37-5e44-47cb-a3d9-abed09f1b11e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70718ff0-7c82-4c1d-b92d-49cf67f47982"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2a92a4a-9dd7-4993-8b20-b6e89cdd2ab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "74c51095-0afc-489d-9e0b-8253f5a86970"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e41050d5-cdee-44f4-91c6-9938eb35e93c",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0c7f38b-b6aa-4cbd-af9a-c331370a1d02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aea126dc-ed80-4478-944a-937fc98ca067"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "971a28cc-b5ed-40b6-96a5-095e76bff8a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9f23da5-9c69-4b8d-a636-c25bc5297170"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d541b3d3-b0e3-4e21-8c34-4517b2dcfc61",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c2eb7c1-faf9-452d-9021-bb55c7b54f4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecee1780-9377-4445-a28f-aa0f323805fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68f53236-8f93-4106-9be7-881e82db4701",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea8e9958-8d20-48d0-8423-ded07b4ff2ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d66b521b-2a3a-45be-abce-41776e1a4c9a",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39cd3c51-650a-4e81-8137-3493141244db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c32f574-3fc2-476f-9110-5d61572fc43e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf11898a-201a-4375-af19-dbabf28f9c30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca3e1a72-6750-4f4e-8ee4-3fce14e793e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59c3c94a-3ea4-4faf-bfcf-f7bf5c82aa15",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9add5a3b-6635-44b4-9e92-a5c12c3ad3df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d52b3312-494a-4de1-9e6d-f48b5dcb8cf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99bb416d-f5a4-4a29-b9d7-ffadbffd4940",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "5376738b-f1aa-4f8f-972f-afee8affd9ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7ce7e38-6086-4921-a7ac-f7ade9d6e63c",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "320cee67-5e7b-4dac-b8b7-f0254e0134eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ce15d27-c5cf-43ff-97e6-3f8992d3937d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5023fd7-d95b-4926-b74f-06db4086a537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ac21093f-45c7-4b22-8658-b6caf92d1e24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8512dca-66d8-4f30-ac3f-a34c05d61cd3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e266f44-4285-46e8-ad57-c0d7136df7ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a31159d8-46a7-4263-9590-b328940cef84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2be775e8-8810-4d94-8d5e-cbd0e5d15b7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7eaf28bf-a115-4f6c-af03-7843fa05c4ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbc1f61e-5b7a-4fd8-86f3-8fe3e629a308",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a4f95f4-d750-4229-b5e0-4e364d364166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dbe30b0-db03-42ff-acad-6a8857f0d54c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "345e8cb0-874d-4633-8e91-dc578a30081f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e75b08de-28b2-4849-bf87-6f6a0ced45bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5e523b3-147f-461c-9257-cc2fd115b3ac",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67c01c14-42d9-49d5-8729-095874e3676a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd949fdd-cc4b-4ec2-a593-1e28563bed6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2433985f-7090-4c19-87e4-c51e7bfc2e5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a7d92adb-b7d3-4d3a-8599-edc4c68126ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0412ece5-6cb8-4015-800f-58c7e3b69476",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "578526c6-2959-4d6b-bf47-3611ed1f361f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8fb9ee5-6cb1-471a-84eb-1d99ab44cde9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24035071-133f-4151-a96a-3103de4ffde4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c59f160f-c709-47f5-97ba-baa0fe7d0247"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8c33475-f308-4011-a4c8-2dd978906f84",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abe8e930-5e0b-41e6-a5c7-db9d006bc3b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e6330aa-fb2c-438f-9e5b-09c6305292d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a707999c-5e58-4068-b314-1725060c7cbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c72c103-60fd-462e-87ce-21b6ecc72eba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cc9eff1-0581-469b-9a08-ced0963f4ad4",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a89b5339-17ec-4fff-befc-5c71fcf4172d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8df0095e-a8e8-46d1-8bda-bd570cd58322"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7a724a4-25a0-4eb4-907b-d05ccc7b2681",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b33339f6-87b4-4cdb-adb1-ab736bb2c541"
                        }
                      }
                    ]
                  },
                  {
                    "id": "411ba8a6-e4a7-4f58-8674-fba2379b3dad",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b2d037a-dd94-4c14-a03e-063568b950ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f352124b-eaad-47da-9e1f-988593a2645e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efffdd06-fded-40d3-9328-1a6b63022bcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b6477a3-ac7e-4f2f-a093-c89eef44ca46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98f290ff-60f1-4668-9f0f-07ee275a428a",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0557eae-dfa1-4318-9ff4-467f7934b8b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34729424-9a74-4700-9407-a7d9eb353a9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa665a9c-abb8-4159-8af3-6743d87f7f53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "338a35a8-e0b0-4e73-a8dd-e6714598f39c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9792b5fd-860f-42dc-af9c-291e716f902e",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "872ff260-c4ce-4b0f-9173-3fafc64ee62b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c191d5db-b5d5-4ca5-b04b-088ef7608bf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9a29d88-deed-4849-b133-6bcbbadeaf6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e45e4494-187d-49b5-afde-d685ffdff959"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53a3f1af-b29f-4254-9211-588337c0b4b5",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "082f1ec9-29a1-4b9a-b05b-67518bc918f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f27da730-081b-4f23-b064-ab58ff42fd78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6e0cf81-f3e8-46bb-b6f1-304b107f709f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a638d3f0-ef51-4ff5-91f9-ec0a26c03ec5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74381d94-f621-41c7-824a-4f8aeb2b8661",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c03ccda7-9b09-4ac7-9183-b8724b4f5621",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5141a844-03ce-47f2-a0cc-681bf45d6ad1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74f5aa17-ee4f-4629-9bbb-890efbf37201",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "be89ac39-a024-452f-a75b-19c06645fb76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2d80f72-2a2b-4f18-9469-5edb808ac001",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61eca6e7-e9b2-441c-8022-b666f5623a03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e95658da-0795-4103-a7ec-854f2176a5d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d32d8a8-fa68-43ee-8795-9ec19fab9566",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "81964978-5d40-48c8-b657-3ea1fe72ac26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8271cf6b-0369-4dfe-ac61-f0a51b3e71a7",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e537f47c-1f0d-42b8-b008-f7e2d1a73c07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2b4fdc1-edbb-45c8-9542-ebc3c2aeb54f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0de60a6-5914-4639-9621-1a3b94182d37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "da4d738a-0f86-457f-af81-f625b75fe5e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c689e017-352c-405a-8c2f-a1e75c01b7ea",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f22d4de6-111f-4a97-a5f3-1bbb2f552561",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69be4133-b48b-42d9-9cf8-ff419984c74a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb0aa7c5-dfc5-4d92-b526-272044997558",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "770fc062-362e-49a7-bad3-0bdd8a870f41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeef1ab1-eb96-4c14-b4fb-58e7b4bf4876",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9084a68-42b3-4bcc-b360-f5d7d6760efb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ccdca2a-969e-4e0c-b5ce-27260d8f917e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f184f78a-c3ba-4b73-9818-cb32639a0a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4771df1-b4c7-46c8-b4ac-96c3600e89bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ffc00bd-33ed-472b-a413-c5131e5a99ef",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "129e8985-680e-4c76-9028-2e2133bf317e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "297171e3-898e-4bf8-ae14-986f82edc505"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e2871ff-9454-4331-8b3b-00e5b5ed9cb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fddf4042-bd72-4a13-8569-a84f7816edba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fd8ddab-6614-4a9a-a950-dfbd697ca612",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c169ab55-87cf-4501-9c2c-c5d37b54bbf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3245176-b8ed-4420-a62b-062933886c19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a2a2141-e5c3-448e-9626-7ad93df02584",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c8c8f281-dd65-4d84-b48b-7c6a2d499379"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41d072c2-32b3-4399-8f0a-43411e9e1ecd",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7296410d-4586-461d-a528-0dc69e48aaa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "090c46fe-1efe-444f-9ce9-cc679cf07450"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f22b6e84-6328-447d-ae1e-785e77e708a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c2fe03a-24e3-481b-b5cf-c013c6a3c393"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f902a6e3-5250-475c-bdc0-71da1521ff5e",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c73cdeec-268c-4a03-998c-7b0bcc2f531a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b00c9572-8d35-46cb-b525-1bda439de70c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20c4af36-68f5-4171-8f9a-b559435505ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0b74406-bf65-4fb6-81c7-21bbf863785d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a893accc-6940-4349-9f25-f308b1cf2c94",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4bb323d-9581-404a-a631-837e8ed39e47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f38b095-c622-41b9-a634-1639630002a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09855c9b-1f52-4395-8046-541515cf1e09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3417e7aa-655a-489a-935f-bbe97cc5f550"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b87da8d-37ce-4aad-b5a7-98f000e89a88",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01b5d985-b943-4c5e-b6da-8b6362a16212",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5236b87-1258-48b0-88e6-607c5c8cccb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab99c7b3-f7fc-4ce8-a8ac-05ac226e50e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d48e885d-7a24-4004-aa17-4c1eb5b2a996"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7afc7384-f322-4fb1-9245-c092db551ab8",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ad6d345-b11d-4fac-8cbc-e91c185dcb93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d409e741-04b6-4d6e-9763-1405ab10f2cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aaed40f-b958-4184-90ee-206deaf2be43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0479a0f2-fbe8-423e-a755-47f33603aa85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d07c6951-bfa2-4433-acc2-c289f586d298",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b40b1bf-1ed5-4836-8b3a-e3ffb70f803f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcacc60c-2bd9-4283-a2c4-25550c24c24d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "493d96f5-4f0d-4ad0-8424-4961e08eb296",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b831de8d-9f3d-4bf0-86c3-559bb5ebe6d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f777dd07-837a-4b51-bc67-f4965a92ae42",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "069edb1c-052a-4532-b5a5-e7c0fefa5312",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6925cff4-7174-4fe4-844a-1829d43fe80c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65e26c9b-5403-411b-9230-073a0d0a9117",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9dfede06-7724-455d-bd59-7768b55b55f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5066c2a-fa44-4c8a-a496-6c080674e38b",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddfe3bef-d4ad-4b8f-b139-f4588996a36f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "791ddc1e-eb07-4774-bcd6-9e2f4ae1d1a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ce848df-c19b-43e2-b80b-a916db6c3f43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e5499fb5-5b04-44e2-821a-353470d455f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd007794-28f4-48fe-8821-74dd011118d6",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6592721-38a3-4fa8-887e-41016d4083f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10283a6b-fe24-4ce9-9697-6e18116af335"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0c3a465-0708-4e44-b259-391ae1985cae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1bd9cff-f4d2-4f35-9095-9729955a3091"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e3a260b-469c-4a8d-be24-9ab3cf9d6d41",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "829b0fee-bd19-479c-b6b5-b0e572ab7381",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf5d713d-f52d-452f-8623-f1d7e7087151"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "787f27b5-ee16-427f-9383-09465f4f9321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "281fb07b-7b5f-4dc3-b9ce-cc7cd082e2a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40eb9ae8-0324-412d-b74d-c0874a939a63",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc3f6b34-d031-4751-9f7b-e976d4e1d247",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58fe9800-71b4-4478-82fb-17873f822bec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d16398f-7719-4f75-8d5a-965d4f0e4eaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a0f70263-1fc2-470a-b38c-9fa726e3038a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50389324-1f35-4a48-a294-286f22d4185c",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e763820-4b26-4378-8444-544c6918b7eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6270f39-046d-45f6-a92b-aba955b73bfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78ceebfb-6da5-4e06-8f3f-765589d8b4cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a6062cc4-0adf-4f20-b3b1-58ebedaf0596"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e58621a-d701-40d4-8569-26601ebbb403",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b518864a-9df0-422e-88ea-68d4e17d7375",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3437829e-8b59-4167-b957-a29a23e7f859"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84f7e2de-9a99-4150-b048-de0b7fcebf9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "57ed2f2c-3924-48af-8429-2b8e203e2660"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eefe5543-8ece-43a7-8aee-9cc6f8aaff89",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcc22a4a-508b-4c3d-98bb-497940f38b86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0449f24-358b-4ab8-aee0-6ae5a544adfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59abf5a3-0293-4227-beb1-b60072368ae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "70c9d6dc-12f3-40b4-a454-0fa050a6ea3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e52606e8-d3a8-4b11-b3e5-ce54a7cdfa48",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1720f6f8-17b8-47d8-82e8-4efbb5ccaf50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f1b518b-91a5-4659-bbc1-cef14896ef30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2ac2efc-f220-40f7-86f0-1d07f7abe921",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c5cefe0d-5809-4c7b-8018-0747ac729968"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5fab008-def0-4ff8-88f0-c6a80da344e7",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35339919-0c95-42bf-af57-4f4125b80273",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1feffcc3-e58b-4b02-959b-83fe82e54cf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69740ef7-aa6d-454b-a763-02060a4af8c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7bd36b86-abc1-4ea6-9cf2-a1b85cb75a00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75ce6e7b-547a-403c-a1e1-8febcf26c16b",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba0adcf7-a263-461f-8bb2-0115b7611247",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5040f9c6-696f-4523-b79e-07de223362e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "317cb6f4-dad2-4ddc-b034-6e0c3a71b6e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "f42cbb4a-2589-493c-82c0-29562e7f7e45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd9d47e9-01e5-4c3f-9802-d82ee32830b9",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c4f87ec-25f6-4fe2-b0db-568c25e0ae90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "6e1b83c7-6eb0-4dfd-958a-90213643acc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ae07f10-a97f-4661-bc64-906917dbc5a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "ddc02f30-e87f-4048-a341-537483ef8f64"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d190ecfd-290a-48b9-a7d9-335128ee6703",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "85411083-5948-411a-b127-a460b6e3d86b",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a25716e-8a47-4a9b-86c0-d8806d222f26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "00a4f6c7-bfb6-4921-a357-cec64bf0b0dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f84ad9f8-8852-46ec-a04e-3c716e704ced",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "18a47e30-1621-49ed-810a-15e9d3778995"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6b0e8aff-667c-4411-a173-1fc4e6cd01b3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "058fca22-07fc-43a7-87ac-c9be648ab5d1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bf639f47-db8b-4f89-89f6-212748787351",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f3b16c81-f3f9-465f-8332-3a45f9a73c04"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "67b8085c-7e83-41cf-9cef-8f9909aac90b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "727ddb13-ddfe-446a-bdfe-0c41706a466a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9c88a1d4-6c02-4235-80e4-1f8aa7104651",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "039c74b4-2ff6-431c-b401-028753442e74"
                }
              }
            ]
          },
          {
            "id": "948c7e98-823e-47a3-8c5e-340a5bd19c64",
            "name": "Positive Testing",
            "item": [
              {
                "id": "82892326-0dd4-4f64-932d-350650983251",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "673ae008-5f14-4333-912c-4ddb8d441c52",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bf60582-530d-4924-8f51-b05175d34f3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "6814677f-ed58-4d7d-9c9a-b36ec3e5db54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5259341b-ac21-4fc5-9ce8-0e45f0f74ac4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ab97e5b-944b-48ba-9842-962092a312c5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2f8a7f51-04e7-4c26-8c9e-c851d2fccf2c",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ecad758a-3dd4-466a-922c-894d22afdbbb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bde67550-b09a-4713-95dd-3c16461842ed"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "51b6ed6f-fa8b-41ae-ab19-7ed975978c3e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6d3415cf-1e7d-46f9-8486-5b8a6d003265"
                    }
                  }
                ]
              },
              {
                "id": "dbb7f615-abc0-4570-9cb3-1cd995cd8e0a",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a3ec9839-c201-423f-a91f-30dcb99a7b88",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f110069e-acd5-4285-9e15-443ad7ef2bf8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bb0ad0dc-d937-4caf-a5bd-827a335cae9a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4c7a5a89-b6bc-4f64-b591-e8c23adf550b"
                    }
                  }
                ]
              },
              {
                "id": "49a2a0df-dc52-474a-b268-c43d84d802be",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "aec370f6-e4cb-4aaf-a79e-8eaa3171a771",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "adb20a37-6e0b-4ead-bd95-e4215634aebe"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dc41202f-7555-4c36-8d3b-92711dad9b9a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4013f73b-5f45-4160-b816-7b0c6310ae6b"
                    }
                  }
                ]
              },
              {
                "id": "7608560f-df67-44cf-86f4-8f78e87a49c4",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "03d8bf1e-c7d7-484f-a6a0-fb2e4dcd48dd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "524faac0-ce14-4f59-ab29-82150e4ae833"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0804f02d-d03d-449c-8eec-e9839588ffa0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "7b901fa1-3d17-41cf-8e76-74aa67e4d0a1"
                    }
                  }
                ]
              },
              {
                "id": "80655f90-bdff-4b25-a329-4652922a5e44",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "55101b05-18da-4432-b9f5-4aa63533ed89",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "58064835-0d39-4715-bf8d-8045b544ca06"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9e748b0f-93eb-42ce-8101-7d780e23d9c4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "a0d5e25f-ffbb-44b9-b281-3ebf98ee0f1e"
                    }
                  }
                ]
              },
              {
                "id": "b0d664e3-6af5-414f-859c-5f892a7b2337",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ddda0b92-e412-42eb-8b51-e94f46d8ab2f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8a38b117-cd3e-4ae8-9b49-e90c147d1b6c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "57fe1658-d399-491f-951a-5320832acb67",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2767b02b-3710-4e9b-a1fd-35015c1164dc"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d8f2e082-8bfc-4d92-a6f7-c5979fa871ff",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7fe0cd1f-eaed-451c-b2da-d9bf672cb145"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0938c5bc-eb81-48ea-b4e5-020355ce1cb0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "42242d10-3404-487e-a9b3-8f5e7096b312"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ba6be9e6-d938-4e69-b9cd-e7c01c558aea",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "dbc41eaf-36b2-4a41-8d06-ca8bca6b5467"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d3a832ee-a10d-481f-bec1-21a6382bf3f9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "09f0fb3e-cdb5-4bee-9298-61729700e1bd"
            }
          }
        ]
      },
      {
        "id": "2507d321-0e85-4604-b2cc-d57174c5ff2d",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "4a51b3fa-d179-4c0f-86eb-e059bf871960",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c0564c78-9794-447c-8eb2-e5bc4761a7b3",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0da8e2d8-21bc-4434-b1e3-b12f2f335ea5",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8368029-06e6-451a-8650-0801f22e8689",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc037e86-79d3-4d90-8d7b-f44fea77b7fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8110437-3fc1-4bed-ab00-ff1723dd9da0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb16dd41-2862-49e1-9b2f-e389b4a5b75a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09177215-1566-4938-a831-cf4ebcc8d776",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7adbeaa2-965e-4b5d-9559-307a2e4bd1d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d770ce5-734a-4b22-aa95-b90db588ecb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1582a7e-c2e7-4baa-8c50-d78279989c0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8cb2d10f-406c-4824-b2f9-4f4dd0cfb2fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a96d1069-0fd9-4595-8656-2bd446d6c682",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48af6f03-4163-4a30-b0d8-2b57e6b34c25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "661a97bf-b1d6-4795-8296-39eb57842ae0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7abb939-1f67-444e-916a-dcf96aa41a9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0df623b6-ea39-4f81-a0f6-012057c9a5c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54df25e0-0b8a-48c9-a03f-9b1e4a873fca",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "880f9d1a-4007-473c-8f21-b0cfb26f56c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a128df9b-03d5-4c0e-85d0-6417f9ebb4c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7db5dd49-3f20-4bb3-a8a9-b2d14ad48eb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a2fe1a2-b326-4545-a4d9-8bef9cc3ada1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09da12b8-a717-4fcb-81b4-1aa9d7f941a0",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87dbcb33-8064-4130-b9e1-5d572c29e2df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79dbc4f4-29ec-45c5-915c-f5c6626b64c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1343bea5-000a-446e-951d-48d574b31de9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6fe1e8c-b120-40ce-8ad5-8a0b18137813"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e86e5dd8-ea26-40d9-adf7-70d52e468def",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64d627c6-2f48-4baf-8c7e-6a52a8bdfa6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5777b555-1f55-4c3e-847a-e28fa7c07946"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77b3c2df-66fc-4737-b7e2-a6d081f1be22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7c6076d7-b297-4000-a610-3a41914f476f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6c05ebf-2d2e-41db-bf81-de72a61a57a1",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18822ab3-687f-4f9e-adde-cce9c18a6364",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56aa959f-8386-4aff-8ace-59fab332d16e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "114b69ef-7238-4f87-8d5a-5c54f533f284",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "f68ee036-efe2-41df-aecf-4946381fbd86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "090fcaa1-6a0b-4dd1-b36a-ec8e04a2b1b1",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08f55689-b402-40f3-a172-85cf0662fdee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "435ebe11-af24-42a8-bec9-8e604fa9442b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "576e36b0-137f-4477-8a48-3a2f7423cfc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fba57ab7-1c97-41d3-a3c3-0890c3bcec0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09ea3bd0-d9f1-484d-9473-549097668136",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "637c017a-2453-4289-b781-ca9766965246",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03c56b2a-ff6d-4578-b6f4-e75fa4639046"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ed4bdb0-be3a-479d-b787-3f7ac07fbaf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ff125f4-9c35-4f4b-b1ba-227a8eb62411"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9969a3bf-54a1-4a2f-9617-ebfeafea4e40",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5baa1d7-0649-45f3-b9d5-d22ee61ec6f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89544231-a77e-4c91-9436-b1193de12787"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39f1fbe7-7ac9-452a-8089-6ba9ea304b67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4585bf1-4c63-410f-9609-436a0caad823"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15e732bb-05d6-4dc5-86d3-4f6595a27e52",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01d5aa43-ce9d-4287-b697-f3e030670d6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc1011c6-8378-423d-adf6-7a9b0f4146c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3ad63da-0f2c-4741-8899-2d0a8fcb1171",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "62a27e66-c786-4ffd-8f21-8908e73660cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22520313-4003-4579-90e5-e3539fa70726",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a337d7dd-6261-49d7-81c6-68f716e576bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58dea389-c93e-4d0c-8e8f-90efe3a7999d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a49be64-16a2-4950-a290-9997ad4ad713",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e7e7b8b5-dea4-4dc4-a9f7-02133d05aebc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e94c0e3-6cf3-4ae5-ad8b-f7543992be7a",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64691222-c329-406b-a7e5-c7cdd9746279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31d5f0c2-fa03-4c19-8377-b9b17938133c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f58cee82-8c5d-493e-89a8-5d7c2a27f224",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4e883bc-ca85-48d1-a3bd-ae71996c3ccd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ae27137-e5ed-4304-be4a-3d615495b0ec",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d857f4c-5fa9-4f09-964a-e10092abe339",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d99edb41-52ba-413d-aa13-85f19dacea1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d274780-566e-4b13-8418-b692391542fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "7df83125-1b1d-43f7-bb88-775f839bef1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5a8e393-9c42-4a27-b278-c94ebb07633b",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b964aad0-64c6-4fca-a079-ffa872e4d277",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3587c342-fb62-4ec0-ae96-7a44881e0d38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4224f916-fcf3-4f62-a6c8-228c1e1d8f0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8707b14-8c22-4cdf-ae58-39a6c558e713"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52685d9f-b8c7-46e1-b133-f71e9e31bdf2",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eb35083-b753-4f4f-ae41-46144de051f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92b22a74-3e1e-4c11-9c13-8533937441e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8187402e-ba30-4207-a9c1-9051753cefc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "eeec143b-cb74-439c-a8bd-ce89827b6930"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d99de99a-7712-4401-85f6-d08b40d9d30b",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16f2fa87-bb74-4fa1-bc07-37bdaaeb8bad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d626331-cabf-4c6b-947f-944cde477cb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54b2c3f1-819f-49d4-b2c5-2d37a66efad3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7e67fce-b963-406f-95cf-888029e77e2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a44f383-7742-4ed9-890a-1ddbdaf7ef24",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f99e32f8-38e3-494b-9d19-e4c94ee91f6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38282232-e90f-4d59-b59a-3a759bf32ef5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41f3ffa0-57a8-4558-b81e-8dd331e29791",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9a01bc6-b241-469e-b60e-7827ac961196"
                        }
                      }
                    ]
                  },
                  {
                    "id": "832e38cb-6003-4393-b834-feec3497fc73",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56e62a5e-7937-4266-852b-9c3c17c3be25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9385663-45f9-403e-8bf3-82e29c50b990"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0f85c34-4f52-43bc-97ee-9702c94030cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6853d983-8968-4e84-bb75-be9e8bfe41eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c66ca437-4961-44a6-8242-b015dad7ce23",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9041c272-b57b-4102-b9da-0c1fe80792ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a99d92bc-bde1-4d9c-aa17-1f2efd28f2e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20eb4452-989e-4e11-8c56-baccf5fa0930",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d603641-3ece-4853-ad45-e1fc1eef7f46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d9d09dd-9333-4bf2-8d78-8f5f05ffbebf",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d57544d-9774-4ee7-ad89-37e34c134b03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "caeee980-0c4e-49fd-980d-edafe93f3593"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7eeb422-824f-4883-ae6f-a969a98ab4bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ee575a5-03cd-49d9-ba37-d77aabced1b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e9634d3-3580-4924-bb5a-69463fcf05b9",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90ce29ba-c7d6-4112-886b-9f1aa8fffbe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa1b93c3-878f-4ed1-be69-9e1de8273d4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fa74c5c-628c-470c-b0b3-3ed93b70d219",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "000c566e-8a5b-47e4-8642-0312add5d4d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a05cdba5-1374-4dd6-b54c-7c061343b461",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "014dc4d1-25fb-4384-a1a6-780318b97d5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37409f12-bb2d-41f2-9c39-387fcac8e361"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a488e6f2-ebba-4b70-a7ae-7ff158b74145",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "91c3686c-6aff-49d3-a254-738025b7a0d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b91522ad-2e75-4b79-8e80-a8d54a6b543d",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "079ccf62-1e5b-44dd-b9ce-5e5bc1c4bd1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25c90bf6-3baa-4a9a-b505-d1de6056d77c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c1c639a-573b-419b-b46c-0a39524cba7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec913152-0218-4140-8f87-77a17aee3fd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "113d6ecd-d8c1-47aa-bb37-27215fde68e7",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59978186-c650-459e-82ae-8375fa6360f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "202ea7b8-da28-4057-bcd5-e558f572e499"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b8815d5-d7cd-4319-81ac-637defb3127d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3cc71fe5-b59a-4199-8747-1f7e252accc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e92e864-63fc-42f5-940d-c2056095be97",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06b16271-e2a1-4636-999b-3ebb9a4579d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9535456e-610e-4489-a10a-25d3dd61fd6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbc29276-1f31-4fa2-98ba-236adc054f97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d59342c-9f03-4900-9130-0a488f533a79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84474560-18fb-469f-9b62-f1cded48607d",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f60590d-bf6d-46e1-854e-00954228d77d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f68fcf9b-01d8-4a28-a2ee-53a64067a71f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "742de38f-ee92-4e1c-b83d-f54981b53198",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7393e878-93b4-4f9c-926e-1a45e4b6b66c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64e9d79d-db20-49bf-a15d-6ca0a8ea199b",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c70d6c2-87eb-40fc-874c-97bd77881a1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95347e05-f9d1-4e3f-94a1-9dbb41a9add4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce6f8ffc-ee0b-444d-9fd8-5bac52c4f3a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "61cf2cdb-60e7-4e95-bc7a-19de256b0b36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be7e94b5-a97d-4b9f-a9ca-4e5196ed9989",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36ae9a71-0fca-41e8-aad6-12cc2ba564ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "740164d5-55b9-42c1-ba66-4e2e679c18b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e02d3fde-570c-45b6-ba80-142ea774128d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "510720ba-443c-4f29-b604-f8df06f1dbc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "255598f2-bb3f-481b-9fa8-de77a8ac7b42",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ea5e285-a5a5-4d8d-ab61-9f709fd6bd7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95385adc-dfaf-4a9b-9f50-219c30b74449"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7592812a-756f-4bfc-bc44-de5dd1a5aab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5834d40d-f4cb-4281-8d8d-f6517543266a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66048e44-8494-46c4-b0c9-8f821a27d98f",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acae2d88-d262-48bc-b86f-7a7d1debd0c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52579517-d8b7-443c-aed5-25730dd1849c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f57302f0-e1dc-4b89-962f-03c997c2e270",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f23613a-944a-4700-bc15-fb684aacef86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb115440-0863-4360-bfd8-bf030be84910",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b05294a7-de6c-4328-b308-206216a26124",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e83e17d8-6d12-48d5-99f5-7ad32141198e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf3a6883-e9b4-45d5-8fb1-3f65a61b5fc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc58f51f-0c6c-4125-bd89-e706d7715c6f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "41823e3a-32bf-4338-8cba-69f779e0be6f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "dd69ded8-9500-43e3-9b45-d26bd06226f8",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33b03751-1e4b-473f-abb9-9c43f147c248",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "61298eea-4afc-4579-9bef-361d89721eb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14122d4f-bfb4-4ea2-9313-de08aefb234e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ea462082-997e-46ab-873c-42342511b2bb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d8333974-e59f-4fb0-a40b-8ca25fc0a6b7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7087542d-d952-43ca-9475-d82a6eaa351b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "703a63c9-09a5-4ffa-b9c6-b7fc2d39ee8d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "13c6a74e-8187-44fa-bd37-231b06f1e05f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "400dfe0d-27d2-4e41-b380-9e2d440c9ac3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "eef7ba4b-9f94-4cdd-ab93-6a8f030f3ce6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "641628f8-bb98-4b88-8c4b-d68599a47b17",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fb387c97-bbbe-45f9-b0ac-a1d410435cdf"
            }
          }
        ]
      },
      {
        "id": "f444dde3-3df0-4275-a978-e4adb187ec40",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "0cdff112-b6dc-4296-9794-a75ad36ab1a4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ff8b712a-87f8-4eb0-983b-e3582dd04914",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5f7b9d83-a98c-4a08-9192-6cf77ce27a55",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c358b5cd-e104-4195-9911-44d2eacc95e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95e460bf-536f-44e1-8778-d6b2970f46d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81961e04-17a5-4ca0-9693-fb8fc5b092ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7281042-72cc-4fac-8ecc-dd4c500018de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc22582c-15a6-495d-9494-780bc61aff30",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ecef2a2-8d0c-4e72-af0e-14e5b5ee74bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b79822c-184d-47c2-8c26-cd357a1ea148"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abf2acdd-6a25-4936-a196-b34fdabe367c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2998a499-776a-4772-8fc9-c1453c50ce34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94f8cb16-f123-4d15-bd7e-879d526dda45",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb3eacb3-52a8-4102-b7d9-055c743ebba6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29c14dc7-4c52-43b6-81f3-57dd434d1c3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c6e4509-a192-4edb-9ec1-96f486cd34ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "918947cd-8d0f-44b8-8fbc-37e99f72e1a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca6a2b1d-6e6a-44c0-89c8-0e67d98fd0f2",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23d1b04a-8b48-4254-b527-2467216a59a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3ec1815-60c5-469d-bf12-aea6462896c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d63785e-231f-4f6e-9876-a6ed440be2bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dbbff484-f6a9-4877-8efc-a4eebdf224e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19145081-7b72-4bd4-b010-14f80e249257",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fbb047f-13d6-41c4-83b6-c6314e5f93c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9616a2f6-cbc2-497e-ab77-6fef9c776c74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84ac809e-ac9d-449e-b780-a2c903a55cb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f9f23ec-8796-4bbf-aede-a75e59c75ea9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5476f388-516e-41db-a85d-975d960e0330",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a5a708a-0f82-4f3d-98bb-18f75173e857",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e589d3ff-c77c-4517-a75e-57b1037f9cbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c0c7a79-4196-463b-a9ce-027847e66898",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c9991b6f-6e6f-4306-8ed4-5123fe07b75e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51334be7-49c3-4fca-bff1-4c588807883c",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06ab2617-669f-459d-ab23-0e73bc47d4cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f863ad4-a190-4d61-8c03-152e5a754300"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f158259-db67-4083-bd67-1e15d48d4992",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "49758c59-8a6b-4eb1-a338-92eb9a462615"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a5a420b-dd95-4ef5-9cc7-fca182520ef5",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13447c7d-8aaa-4694-824d-e632b31cd718",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4315fc9e-dbf2-4285-b999-b939723869e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83f39926-b2d1-43ff-b996-43d7a8b8c15f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c25907b1-9b7a-4cf4-ae06-e1d5a3135b19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe6dd5e4-1785-417a-b3f9-5225c0ab86b6",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f73694d-422c-4479-9024-112222aacaea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7e1c8bb-424a-4809-87ea-cef435abb5c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29321951-91a5-42b8-b2f5-1b38c1267710",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f8007fd-a87a-431d-b3be-8b6d8bc4ad44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5b250cb-fd48-4f8b-8913-9efcefc9df5f",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b228d49c-de30-46bf-9c93-e17f77f7b8a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "726faddc-4cf6-4470-87e9-a137051befab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9db8a6b1-fd80-49f9-ab8d-3200e4f1a849",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4beae7c5-d8ca-4307-bc17-ed1a52a5cf64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8384f6d-83e5-46c4-97c3-784d3793276f",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60bd8585-fe4b-4dfa-8144-f67250b5605a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d70a8b4b-67ad-458d-bbf9-9670f2253fc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "323bf663-99cb-4fd4-a49c-8747e6d366e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "8b192253-8649-4216-ab94-946e656bf6e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "312e292d-7193-44f3-8eb4-031c5662dff5",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "882fdbcd-2ef1-4a51-b90c-cff9334f4f1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2841c6e6-b98b-4df3-966f-0e986d9e3aaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e65d212-b408-4a64-938e-667011c76874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "22d1e76a-61d3-45ef-bd90-c59b9c520ac3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ccfcf3c-37b8-442d-903d-13f6911b340d",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4e4ac19-a0dd-4195-bb3d-14754c09ae96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67170575-b20d-4095-a9ab-e5cd26f126a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2810c28e-0b0a-43b7-9a22-f706cd815b1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c15bb510-87f9-4ca6-a07e-67f0e18bf606"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc4cb050-7239-479c-b707-2532a0b1ff78",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b39441e-0be4-4d39-be6c-a085e51e6fac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f15d36b-451a-40e7-a12a-1089f9079cb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89f428b8-9b37-4765-9216-305d3e3f22fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c7977ba-da15-40e5-8a90-e36d9e5e61c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cd962d2-2505-4f95-adbb-733177514f1d",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "210e7cb9-53c5-4f34-abb9-7e27296a84c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0d14508-1758-42ff-9254-938416a0e532"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a529d3a6-c41e-4bee-98f9-c3d24355efc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe7e58c5-707d-44fb-9daf-1861a7ba67c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52183c81-1a78-42fc-b711-9c838ee8753e",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06aa054f-e473-47bb-8834-5d3ddf9e5a45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "447750d0-f87a-41e3-8ea6-9df1d52cadae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75e0475a-e2fb-4f17-8b05-252481fd55f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b73536c-5bdd-40f9-930c-31902d8fbfe0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40f8d509-1fd7-48b9-a3d7-8d589ce2f9b9",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5390e2d2-f686-4a4b-9d24-8745c0223c5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8fe1751-8e0e-48e7-9709-747ac1ad1c6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bde9b832-bd30-491b-b53b-04aab4860003",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc84b63f-9481-4800-8e81-67330aafafb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "302778a7-04c3-4372-aaad-fd64f18e9e2e",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c35d58d5-7769-4a74-8ccb-b084dc40afa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b81edfc-f244-4fb6-aca3-b03b5ce93808"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05d5f7b9-f99e-40cc-b439-95320ea33af3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d4ae664a-c956-4a01-9cf4-088ea830fe94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b98b529-8067-4046-947c-efc0038ed75b",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1eefb56-9da2-4a4b-b2d2-c9af2f870b2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0d737f1-7554-444b-a348-1bdf772df02b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed695d20-5bbc-497a-b354-cd7511697883",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "08abe3ce-b1ac-4976-9e9f-189101e388ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6127fc91-db91-4ef9-a785-8b6df92e38e0",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "681b6aa9-e82a-42b0-9607-1625ad4a3589",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb0351fe-3ba7-4761-a828-f36f5944f5a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7401525-67ac-4370-a1ee-bab8b55b3b45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa684bae-d7e6-4216-8048-a2d71e7ee3b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "918c02f4-1f95-466a-a154-a550ceee5bac",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "759b8ae0-0a12-4ef2-a3aa-d441ef0b0c74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40de15d9-4247-4733-9531-edbcb647d963"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8dc946f-9d8b-444b-b12e-4a1ddf84264f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a92fe120-60d8-4d68-9419-cd8fb12f04ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ed408e0-6469-4bc9-9335-719b96559b3a",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0b29150-9935-426f-bc0e-531827cebc47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a95885b4-172f-40a3-934a-d41b4e7934dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ec059e0-aaf9-43c5-89ba-01eacb1a41e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c7e3649-6757-42da-aaf4-73c8cab15ec0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dab43afc-71f1-4339-b9fa-f772ed44f1e1",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae1fa6c8-fd7f-4e7f-9d9c-1bc06b62d29b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c956167-3882-4fae-bdcd-44d7e186357a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c821a8e-6d83-4de6-b858-501a28089f55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dcdec9b5-989e-4a5e-b058-8097e26cfbfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a679e759-5f3b-4d0b-bcef-b0ac044bf6eb",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a49d693-da49-41b4-9e1c-13871239d0b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e9c0023-ddb8-426c-b8fa-1b5b69b9c31c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "887155b6-307b-4f08-b0f8-5297eaa046c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb223ba6-ecf6-4d3a-b8a9-f9775f227756"
                        }
                      }
                    ]
                  },
                  {
                    "id": "991ee0cc-66e6-4df0-b11e-09d5f9f97b02",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dd45025-1323-4d72-a154-35860fd3e47b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7414a812-c616-40ae-b3ec-c16668b1a40a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a776c5ce-7a42-4b9b-8d2e-876e2d13ac59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6179d964-d98e-4063-b037-ccdf10c3ff65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47066632-fe53-4e73-8a7a-0302163fafcd",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08d65d06-1570-4aa7-b34f-ece077e4ac53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3918a4b-3da0-4360-baf3-04b1e07ea458"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c706139b-0b30-41a6-8dfa-12b958d1683d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "15b804f8-aa4a-4ee5-acdf-8e7ad060f84d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d5323bb-fb16-497d-88f4-3496b36e9597",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57c225f9-aeef-45ac-a3a8-b58d848705bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4608ef69-a878-43ec-9ff2-a8c75868b009"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04c41abd-a09c-4dae-baec-e5dda896b72e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "247d37b3-8a9d-45a4-9cc0-c668bf22ca57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f23553e-d739-4ff5-8911-e120584f7068",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db864585-8f08-45b7-85fd-7c8c339f8526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63b71ecb-47b4-4338-91bd-8d47c075b421"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b822e23f-e464-4fb1-8006-ad9a945f90fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb441ef7-a6a4-4ff1-ac92-68e81f3e1724"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba1733a8-003b-4056-a96d-d0cf4a2004da",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "194d361b-8bbb-4170-9e8d-7e487a2d6ba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a9d51cc-81d8-49a2-83b6-047655cb24b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f2bdb3b-9905-45b8-abdb-0f086b149269",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ea6955a-7dac-4576-8bdd-9db506dd3989"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dc80b6f-87ac-4783-b709-0f1e1df77760",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fad5ccbe-b313-4015-8905-0422b9cce658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "919a7e55-d382-420d-bef1-106bf656ece7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9758a4a-b9dd-4d4e-83ee-85651d3edd9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f279591b-5694-4f62-bd64-738283594e49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60506b3a-e011-4e57-9168-5c73606626cc",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5d59ead-a329-416d-abbe-8c093ca62b76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f69e8ea5-6f93-4dd3-8bdf-23a9456038eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da4fe06a-4a69-4e11-8561-bc5911078a44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cbf84875-63bc-45b6-9376-68558cfaa4dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5938f85e-7bed-4fc7-9eb3-995b69eb027f",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4aa4d673-5064-4c83-bd65-f327b0ca2ae0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f146d95-1e14-4c4c-aa6b-753177ad24ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "930996e5-93e6-48b6-818e-d117bece9208",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4bde305a-519b-48e1-8de3-36947c2f18ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0e5a9f7-a3ca-4487-9f23-cee0124f5822",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc945cba-02c0-4746-99f4-d2f91bf8dc59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53356fae-1b99-4e16-ab0e-ffd4cf117070"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b6a04e8-d56e-4679-8246-0d538d93f1f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f4fe1ae-6c5b-4ec1-b94a-2e717307b551"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfa5be12-ded3-4d37-b3de-d51cd80aa14a",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbad88f9-da11-4537-bf0d-1011d524eb9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d6faedf-04ac-46bb-bd8c-f9ec84ddb15b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "944276c8-a3ed-423f-b326-363f2c84b928",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d50197a-e18a-4bb6-ab21-f08eb07acf22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aab2b264-2518-41fb-b9f8-6827da5c4681",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06f6b826-5b10-440c-a3da-e8250af2002f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abc66ccf-395d-488f-9b1c-5d42978b35e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35a85b48-6eed-408b-9cb1-247e7d502f23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "515372b9-a38c-4ad3-86b1-677c68b08ed2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18a863f8-1f79-477e-aa50-00b7c214915e",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8388924-9679-4293-9478-3d1e07972152",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8fec64e-b3cc-417f-a2e7-42f0d8af0858"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c685f7c-9c97-47ae-b112-1fa3636b697a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c6a4488-cb10-498b-bcdd-c644ffb827d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6902962-c8f7-4922-a921-35b7694b7748",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cdceb15-15cb-4434-8753-02798f883c03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccaf4477-cef2-4c89-b562-be983cf09369"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49d4d40a-dfda-4c72-b059-606a1bbd16ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d77b2bd-022b-4bb4-9d9e-b15d5ea31a87"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ebba2bc9-6d56-43b6-bbc2-35c8b7fd2165",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "20fc199d-ef6e-4881-b46d-87bb73f2ff90",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05b31147-1841-462b-af84-e07189ea8d19",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "1f5456ec-abae-4f55-8ac3-ed3be1feb530"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39d9dbc4-9868-4e48-b0a0-936eac993850",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c5861614-c8fb-41de-8d1b-35600d1d3693"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cb127ca3-43cf-4e82-8849-34551444c746",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "80bc65b6-1232-4b7b-986a-c15e0bc8800b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "582b6cbb-69eb-4fc3-92ea-d83b46d18f48",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "103004eb-cf04-43a2-a52a-893157ddcb6d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1a32fe31-5f26-41fc-8b4b-b71f3fcd8b3f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "9b09087e-5d4a-4864-b4ae-f0349588277d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6624765b-6e1a-402c-b9b8-e49fd96e9cd5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3798fda2-4eaa-44a3-bd57-5a6d08e99c14"
            }
          }
        ]
      },
      {
        "id": "4689a92f-97be-445d-be05-c052feb618ef",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "a3aa7aac-fff9-46a2-ae39-4f3732a64254",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bf05cadd-b447-45e4-ab1c-5bfe44e3df90",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6024b256-8049-405c-9f38-b5e0be2d8544",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09b7bcdc-3935-4dd1-afbb-8e9ef163ae04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb5cf8b7-266f-45ae-bdfa-3ba673755be3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f346d982-e322-4674-8e01-00fc6e0ce59f",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be5d7cb7-1148-4ff4-a648-53dcf2f61af6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79b5d810-ae46-47e0-8473-3c3c408adffb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1068a9c4-4147-41f3-89b1-3c2df42046a1",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08e4f3ea-0d3d-48a0-9158-0414c8b135d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a8aca25-5e80-4c1f-9d1f-bfd7491c6d66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "342b1d1d-7066-44e6-8726-4e9ff2620ba1",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fdd1e4f-d829-430e-8a7e-5ac1e21ac7ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c4fa442-4d6d-400c-be15-6cda6f44fd87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1af18598-e513-4806-854b-bec6adea5d4f",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4ff1f03-abcb-445f-8f2d-ef927586ecf4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b14ba691-2989-419d-afcf-d9bb9600896f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc38fd58-048e-4231-af04-e1d5060b9f94",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9339a1fe-19cb-4f11-991d-c0c0bfdef5bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81f3280a-582a-4af2-bb00-dd6edefaa380"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb3a2452-3623-4937-81e7-1bbb7b9fbf9f",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2299878f-b9ff-412e-998b-9bb476d17176",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fd78bf4-7a0a-4558-be96-f5b42d81190d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "720ce23f-9f9b-40e2-aaa5-929e088e375c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da4e479c-efb3-484c-ac73-d2589533faa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba1da7e6-1a68-4ef8-94e1-8d38374cae99",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6acc692e-4adb-4ddc-88c4-33a63794a608",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97a4229f-863d-40ef-8bce-67317b60529a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57fef9e7-af6d-4e9f-b6e7-e4e6e901acaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b36de7d2-0f8a-4ad3-a6c6-abb1f26c3f26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7621ff2f-aebf-46a9-a28a-4e466136a839",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f31c6bb-b10e-42d9-8ecf-d8567ef146ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46e5c917-e210-4d4d-959a-684d40a13064"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57a8ce46-1df5-4693-abf3-cdf4fe32a90e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbd2e1c5-72fa-40d0-a161-84848384bc1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42e67a4d-047d-484b-825b-109f9e8c6381",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26d0c906-c65f-49af-9274-7d47418b4e39",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0cdd0284-f68c-4980-811f-92792e621efe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b68c7f7-87da-4c40-834c-dcb25d2bea9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c286af0-6cf3-4bd3-abaa-673cd58f6020"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07b8864a-b7f9-4ff7-b226-749954b4e02a",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa8bb638-3dd6-4b5b-bb8f-9589afb8968a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9af7b28b-181b-4dac-97da-013d7a8a0149"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55b38cdf-b030-4a00-be33-42c538bd209e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33e77810-7ac8-4a7c-811b-dd5d77a1f8ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7a013ff-ee81-4bd5-a1f6-7d218c28fbc3",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cee0fe0-9813-498e-b4ed-5b317c7a9602",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1be301db-d5a7-4f59-80c5-cff2999fb65f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df60fc91-b629-4810-8ad3-378a3b3d0e9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1d6ad89-ffff-4769-aefc-00f09925ccfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28ac3752-904a-46c2-b47e-b83ef3390c15",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cda9991-323c-4632-89fb-4e9f161bc3ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57ad7645-7f3a-423c-a60c-82a91e24e41c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a3ce89a-0704-4dd1-a6bb-43ed15c840b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3519b92d-513d-4175-953f-8203dee5fa07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a578ef9f-70d0-49d2-b8aa-0cd9e4fbb44d",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75232821-1224-4c0c-9636-06c2adc019e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d55ca24d-fac0-4ab3-a057-f800f39a5efc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a484018c-5ac9-46bf-9d28-a9f397a59524",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9f44d00-64c6-493a-aad6-93f1e30d61c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a03ef24d-c188-46fa-aa7e-0be49511a8f4",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5202cd13-a671-4e7c-bd03-ac6546635882",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7aee3d53-bc20-41a7-8d1e-114f2877990d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d878bacd-2ca7-48b4-8b13-4de2ccf883a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "769bec57-3beb-4168-948b-d73243330c0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1be1bc96-e308-4d39-99db-0129ef41c102",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa95217f-cd2f-482c-885b-eabfd6c30163",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4672c479-30a7-4a60-a4d1-4c977b479e49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31c2c8b5-1690-472b-a0cb-07e30d42b09c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de83067e-41ab-4f9b-90fe-5ff8f95677b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "366538df-e2bd-47e3-8a73-1f2f18653eb2",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8db020b6-2d4f-44e4-a0dc-fc6930a14ee0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5350768-2e89-441a-b4f7-82546de1c6d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f43a7cc8-e717-4756-8933-f64e99306ae0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "500ca337-d2b0-44c1-9af5-1610655bcc84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "280a86de-8420-40c4-b695-d9de9c62b45a",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d65c6d48-e4da-4430-b717-e308c4a79d0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25e638e4-ddb9-4aad-aeaf-38f0286055e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b61000cb-42af-42fa-8bb3-757a5b384efa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbb6ab57-a79a-4883-8319-5d19c97b7b31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57a250ef-ec91-403a-a207-859ec75f9eac",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acef9bfb-9bc0-4c54-aea8-ba8b77887853",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5fb0d13-820f-4a0b-9af4-e756ba9c94e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "886e58af-830a-4ed4-a06f-9e71bd299352",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc31be78-c1a4-4c51-9f81-a2410e85de9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8c8e8dd-1a71-4814-8683-5403d5c9af0b",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0322b55e-3773-4f94-966f-2207636a4804",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69376a4b-4e0f-4d4e-8e46-b39abb2497f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a0bff8b-7668-405f-854f-ea1c21965ea1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92cbf4ae-501e-4bba-a438-ac8921024842"
                        }
                      }
                    ]
                  },
                  {
                    "id": "728aa91c-3ef5-49c3-a0f4-a7e2d0023091",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bb469ad-5585-4d5e-8cb2-a46eb40f6836",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50364486-0a1d-44d5-a6c8-ff2f7411da6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95fabc1b-2a0e-4088-bcca-73a256a47558",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3609673c-8108-4dbd-ac2d-4e5e723f6bb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6edbc10-80a4-488f-ae6b-db6d2c21301e",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7319cdf-dece-40a9-a622-104e5e1ab5fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42a12913-e871-407c-acc3-d2ee0f01b7ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11e49a00-36cc-42e3-8554-04ef9cc31184",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a55d0255-7fe9-4ea3-b097-340421becd55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58e40b0b-acd5-466a-b804-45cbeb15ab4a",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50fbf029-faab-4826-8441-aa2601f817ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de8f06f7-1031-4fab-85b5-b3042fb4a32a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae970102-d601-41c5-b92a-929272341bfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fed40b39-d3f5-47f7-9cd7-1ea0921325d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e503388-c23e-48be-81fe-bd5113826cc8",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89a9a1b5-4d4f-457f-a9ef-ce496ef76556",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c1e9839-86cf-4acc-b1bd-706d72557285"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bbadadd-780c-40ab-b36f-5224fbdc7ae3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfb17e19-abcf-4d84-9850-2ea8e69e0bfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80a431f4-a362-4f08-a9ec-0040e142a408",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f7e4e60-688c-41e6-9dbe-623c450dc7ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9caad98c-2628-4a96-a807-24445cff62a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aba15fdf-6a42-4c17-ab36-aeb37000bc07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4fe2f0b-29ee-4a8c-a7fe-1d2b31f6ec14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fd88458-d683-4563-8c32-6845a6dc0bd6",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8d3452d-a4b8-4809-849c-cada436612c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f7243f4-436b-4c77-915f-405c6d25ad6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb387591-ee0d-4034-8fd1-00b1b51b80ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae232cdb-6cbc-4417-afc0-60007f8afce7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da55771a-5224-4ded-a896-0b7cf0e3d6ae",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2f6a364-8935-4ac1-9b95-2908e9de18ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bfcbb71d-6c4d-444f-bfe9-e7685cd614a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0a3d829-6053-49dc-8ddf-12ffee0a6a48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e371ef9-17ab-48bc-89e8-f60450da267a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d506309-6e07-4833-94fb-0aa44613a01c",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ff842ac-28ab-4c25-a1f4-47edf1edcd18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b99ef3a7-ca42-4ec0-aa98-1fef3efc626e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17756093-b37e-4329-95a1-222ce2cc1658",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5946028-ab10-485f-aaa4-6d545876857a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8789611e-d5c2-436e-a037-6f832dc206b3",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34822fdc-7b3e-448e-bd53-72ba87ea38f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5efa4962-15fb-4edf-948e-2f1aa3be22b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f00a2589-ff96-4963-811a-c98cf6b036ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "160f6b6f-5e96-440a-b88b-93702d7b4ad0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee49f51a-f078-4f47-bfb8-b744d25a2176",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d65dcdd0-2880-4102-a047-498d0d590295",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79fd3a26-c711-4da9-a897-54701071e7b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e53afee-5186-4e33-9bed-a0f5c9697056",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d80c4ee0-575a-4f68-bc91-79ad418333fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fc4a834-4ab4-4e26-8db5-0552b00d30d1",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92a06c06-4ddd-4cd1-bef1-8dab4a17a981",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e308903c-6a4d-468b-acf9-dc2de6fff542"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef81845b-5811-48db-ac7f-7a119ecae1db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e270666c-7f49-405e-ba9a-e554922d85c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd8b306d-497f-420e-a116-339caf370b2d",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acb41901-ed0d-498c-9d02-44140e4013a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3087fd6a-27d7-4d9a-981c-72a573cf6af1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e0a6453-7497-4b5e-8581-1b167eecea31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "481182d8-7209-4b03-8e87-db7ba3362d29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "238674a7-db69-4ae8-86bc-3471f810ef28",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ea4907d-e289-4b5c-9126-5324cc46d782",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93f9d636-0ddf-4a99-a267-76fb5ac86430"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b91d4e17-0f66-4e55-bb8c-c01cb344938c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcf11636-a1fb-4c23-99db-734041cde738"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eba055c0-0fd3-47a2-ba39-961fffddd21d",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dff46627-18cb-41c5-97a1-43e0f0f74d72",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5477744-3150-4ecd-8ae9-d4df2fb2991a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a27e3d85-f797-419a-917c-1c1c1323dec0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cebf4f4f-293b-4696-b204-d0e854096333"
                        }
                      }
                    ]
                  },
                  {
                    "id": "706274c0-1205-4f6e-87fc-e420fc575d15",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9029486-6e51-440c-a0ac-632d49919e2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e0cbb74-f7bc-4878-9b34-0a8e5991e15f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4247e27c-8ed9-4754-992a-4da305b2df5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64d63420-e361-4995-a69f-79257b1c0a4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dfa3d53-1a97-44a1-86b3-6e1be6f2a3e1",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d990500a-5bc8-4075-a497-85b0298fd5e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7b66ac1-5ea7-40da-97da-9dd7f0517a54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d963984d-7603-4d98-a522-4379c112695a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fd8c054-baaa-4b37-87d1-9424fa462b89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d36d2a84-5f34-47a0-baa0-a0e43cba14c2",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce764317-bfad-454a-ae44-4e16b5feaf9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "065b9949-fe5d-49c0-ab45-28e2beef4e9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6434ad5e-52de-4c0b-9cb6-bc0ea8121c55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b0fae52-b769-4044-9498-aad9f68ea8e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82a6de4b-0f88-4f8c-b392-3526e690ba81",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b58af255-2e8b-4f6d-a13b-79bb0d368634",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68e8d83b-e12a-4989-9cf2-a9d2f7c6c84d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cc6c975-2d5e-43eb-a4f9-4d108004ef10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94c9361c-c3d1-416c-a5ea-852d507406b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1aef337f-80d1-4ad0-b435-aac78a001ce3",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "172d3c75-a5f2-4113-828e-f22d5a376e64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f37afbb7-052f-42a0-aa03-14304d32f720"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee38046f-2e06-464d-ab4a-a584c4e15381",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "605ca882-8691-4464-8a73-5f18db83e3fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3258d97-c78e-4730-ae38-03d5ace3dfc0",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b3567f0-4b3b-4eff-9b6c-e5eb9e50bb46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1c28b51-7c1d-4d9e-b74d-38a39d1f06ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c2ddc91-867b-4352-ab08-7bf12bb58f3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e8661c3-75a8-4041-8d3b-ef2c01c2290a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91cd42d7-ecc9-454e-b18e-35b11db68ca4",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81211942-6d0e-4b61-8de8-c7f8e52f2904",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20e496df-ca53-473d-bcfe-0729bb990e83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddf89460-19e4-46b8-93c8-5acc8404c4e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a97695c1-e076-44aa-836d-efc5e87b03fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51107d47-8d59-4e1a-863a-6368a2632e89",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c9b5114-47b3-43d1-a3c5-b69a49297e86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fe0e436-e173-4df8-b11e-af4265b4dfb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "faa39bb3-ae10-441c-8c4a-cd32c18fe9af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a58abdfa-1958-4d3a-b090-7515bcfbdf41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "306762f2-38b7-4b60-a67c-f0876fa01fce",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b05cb2af-1ff7-4a9e-84c8-973419c441f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cba9cf3-e394-4d75-b208-c3a589b5c2cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ab8e6f5-81b5-48cc-87f1-edd8d9aaa3ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d581f27d-3762-4ca5-ac46-8d06ed26eb47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d7a4c61-d3a1-4d93-87b3-1ab25836bdef",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b54ecaf-b5b0-4b37-abda-803d92751ccd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9ca1892-43ec-434e-a2ed-4640247f0852"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34fef713-df3d-43d5-b59b-b130b0e66857",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "607da76b-481b-4fcc-8bcc-dc9b0e218ea2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbce7233-1ee2-41da-b702-aa40048116c8",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b739624-bb00-423b-8565-de5a41ac5035",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c4fb4c1-4921-4a9e-b1c1-370f23274ffd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e2b08df-d126-4cac-a0c4-6bd92301fc61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "873f3795-bff8-4c27-a776-2bf64d1b140d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baffcabe-3128-4981-ab1f-31e863ff6817",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6432a60c-5d87-46bd-9860-b414af7e7c0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eefdea31-b46d-41f6-94b7-7f1c50f1a6db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a550aa9-d41d-4d9c-9d02-148d6dd85840",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2233536-ef96-47a1-8d9f-7372a5e249cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bdf484a-e59a-47b2-87e8-594d4b61ad86",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da76e303-7f20-40ea-bcab-1a19618b537f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbbcfc8c-7f65-4477-99dc-f744ea867a4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a7d4a33-29e2-4c89-b5dc-5d22d3d88a77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcfa33e2-15db-4435-b3ce-fe3fcd5a5c27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3f6ded0-72f4-4459-95be-2a46bc4d0376",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca7c76a7-57c3-4594-9599-90fdd7c907c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5081d28c-329e-42fe-beac-3ab8af4e5a9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d30a225f-19d5-4a93-a0d4-ac1a18f1df0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88a19eb7-8ccd-46d1-a17f-d5fc00ec3120"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9577790b-1aab-4980-bb8f-a752da4527ab",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58ffba85-aef1-4aa0-bd5d-61b41e383e2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b87b34c-264f-4cd5-8681-dac4361f2844"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce4958e6-5031-487a-abb7-caa966ef4057",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d64c526c-97bf-4eea-863b-327076c13235"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc775542-5fcd-414d-bac5-d25a45a6619d",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5267ead-55b9-490b-a5ca-717755eddcdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcf7ce44-5103-483d-a4f9-cdb752ef3597"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90cec4d4-8ac5-4478-bbfa-6e080dabae3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "598723ac-6f30-4852-8791-cc9a04d275d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8dc896d-3464-41b2-be2d-da0704414da4",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c04feda1-3906-4aee-8e1a-8772786dda57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f229c43d-4b43-4baa-8755-b45f72a75976"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7da3b28-195e-4b50-8225-971acd78d181",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "383bdbf7-5e33-44ed-b110-83c109b3ca58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "668c0077-25a2-4fe6-8cc0-30dc82ed4177",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf5d709e-6b4b-4061-b1eb-51c914fa21b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5526719-a1e2-40e3-afe4-20d0b3b389bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3c1515e-c426-429f-a9d9-55f04aa76b4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a172751a-b209-4d2f-9158-918f3b1a6cbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa6f4a60-59e8-47f0-8dea-396b8d1c755f",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65d0a1bc-622d-45b1-a545-27ecb800311a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93db5672-c88b-4d34-9947-d322ab479bfb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40e73f7d-5033-4c56-aa0b-f15e7f99ad1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27980dcc-5b63-4f40-9f3f-16aab789fdf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2936d3a3-01db-4be4-89fe-497e88fa173e",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28ed19d3-5664-4e5c-99a7-7d60962110f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e4a93f2-b040-4265-94da-737c0a3f611b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f4c15db-319f-479c-9243-6c0250aaa23c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "075ac2f7-088d-474a-8a4e-481f824b5ff3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b378c90-d755-418f-9e9a-347c7f5b63f8",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d58d59a1-0215-4d4a-b2ac-d1c11275ec8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "690ebf1c-18e5-4f81-95e6-eab73f2f6ea8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "884ded22-9d22-4794-b4cb-2c3b103ddeb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64c9825e-b277-451f-a91f-59f0ba56881e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c2d1da2-e6ce-4ba6-9884-7adde11c3622",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "077d7da1-8f13-4414-a525-3663e0c0fc72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b18759bd-1038-4f05-8a9e-42c86bf28424"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfc2cd0e-1098-4a02-a9c4-779e8355369c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bd9d6bd-94d7-4e15-a7ab-8935c144f2da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e6de710-18fd-4a50-84f9-6a68091e9511",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad6ed347-6233-4a22-8064-af54dbe26cb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6193f6b4-8726-42e3-8d7b-b152f37450e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d042cc6-7ad8-4ad2-bf81-9d8f0b910d92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae946fdc-8dd6-48f0-9fce-91a0db1c7f52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e35260e9-8d54-4818-be09-151baaca5882",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb684c61-41af-44f2-9a97-85f481bc3755",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cfa852c-5b6e-400c-961d-9e20a7697a8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "901830ba-af9a-4090-8a88-0ea4219ba822",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9f3e412-ec4c-45a0-bfef-80da816dd2a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "518e46de-25cf-4eec-a1b8-58d0c335c00e",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbf0584b-e5da-4bd2-b04e-4b813ea1d937",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "497e8232-a956-405c-a440-c38035ef3146"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4f03bc5-c43d-410e-96d6-4ba977479024",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37286b7f-fdac-40e4-8025-211a74362459"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52d9842f-1b7a-49c7-9020-2a11c0028522",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e9c9cb3-abb1-4120-b129-c524caec2916",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74369493-9d83-419b-80ee-639b162532be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd89d77a-e633-494b-9bfe-be09cb046565",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06225f42-dab9-441c-b18a-ccd62c9633b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0923b5b-6fad-4891-b3b6-e427709c01f5",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90388687-f1f7-4f35-b5ad-006f5a33424e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5c43a50-3c31-4cc4-8807-17321bba6f14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06de82bb-1390-4d8a-8a6b-9ae11cc2f535",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f049e1eb-f9e3-4f39-a6ec-c7341ca59a41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bab3a34-6fb9-46b2-8460-31fb0fa37ce4",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a11302a-c829-4e3b-9b92-33a08f4ee122",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93e93f03-6aeb-4a24-9f6a-38d592f1ce9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6057106-9993-488e-aab8-c6c59557b4b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8784457-6f4c-4f55-8322-2749d8a1d16f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8856dbe2-8247-4219-92d8-44815bb1ab25",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d292fc0-f80d-47c7-a8a6-2cbe1fabe7e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00410d59-080c-44f9-9048-15b78a5002bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d230f40-76f8-456d-82ae-36edf66280b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4377cba9-fc24-4662-bc24-98dbf0180443"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80fe31e3-b74a-4e30-946a-dae45a70b9b9",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "374ea51d-746b-4b5c-88a5-b0213ba18ca2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af27aebb-c80f-49b1-b07b-437b85ead8ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a5fe3a2-3aa2-44ed-b8de-30ca3ae4cc2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f16a3ec4-1676-46f3-802e-de9e8c0ad38b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75099fbf-c283-41d0-b5ac-b7534f797586",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e15cef6-4144-482b-9690-24ede65ceead",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43d7211d-15fc-4540-b162-3c7b556ad1ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9cc1fd6-136c-47a6-8ff4-4fa394247d9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe452476-ed2c-496b-b958-f69988e5e076"
                        }
                      }
                    ]
                  },
                  {
                    "id": "110ef3d4-9d9f-47b5-bec9-bd8adb731ebb",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d10bf0f-33c6-47a4-8f25-1ed8793b751c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "405f0c82-843e-4f16-abdd-6e5aa295283b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1039e232-ca16-4ac5-bb86-822c1fa21f97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63a0b518-b330-4686-a9b0-05cbdfb378bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27a61551-7568-4978-864e-7901485f5b31",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93725c1f-601f-4ca9-a876-19a631eb1bb6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06b3121e-2032-42c1-9234-58ccf5d59d3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b645e95-7b5e-48c3-89b4-d6affe9a178b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de726648-8dae-4bb7-9a5a-fef55360e5b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4767ceb-07e4-4c12-bc61-39d49fd0e6c5",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caad4f06-ad23-4877-8270-ba6d4c7feeaf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba4589db-e8b4-4403-ac27-4d71a03b7c77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4d5fe1b-c225-44e6-8593-f894583e6eef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82dd6843-0e97-468f-a9b3-4721e046ad4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71d9b9d3-fff7-4ae6-9fe8-688dff3df91a",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da8e0668-ce24-457b-a5a8-595b23f3dfed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9b770c9-64b3-419f-8df6-4c91d7da9217"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56e4e3bb-ceae-4f44-80ff-41287cc539ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a92f31a7-15f3-4b0d-97fb-2403522b1ec5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb940336-7863-4c96-aae2-1463ea415a9c",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10006810-15f7-4cf8-be1f-c964cd8428e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac4a2bf4-8ac9-4952-a4d4-f4ecdd52cdb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf28846c-9ff4-4044-b1cf-c18040cb551d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68b952aa-4377-469e-930e-f25b784d4bfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "003bc61a-fee7-4dff-a2d6-c6ddb2a6463b",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de1e9c23-4559-4c67-9f36-94ed5173d9e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0be1bf17-715b-4069-9351-27026af0a9c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "faec6f76-350d-4de6-8286-d09782e990af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be35a783-1f42-4ebe-8671-68f52a57225f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c26bf7c-0a6a-466b-9b62-9a54bdaecd52",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76881ad9-b7cf-4d98-805d-7c9339f73f54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4e46865-a35d-4d1a-bfca-c6c7731cf1b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff34879b-7004-448b-919b-1a1cb2d7ce85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69b961ea-c3d1-4bde-a036-caae1ab6967a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a71c4a66-f01c-42e2-98f4-39a64550b81e",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d05b1c6-ec61-472a-94eb-07fd94719ac3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f895f03f-cedc-4e20-86e1-fbc14af1e2a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd9a03d3-374d-47a6-af63-1e4aeb548831",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9acb4d5e-eb69-4151-adf4-3dc52e53394d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9a95c05-329e-4323-af24-d1a71149a945",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccf9562e-2559-4bc3-9481-879e65f9165a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2369c380-b986-4e76-87ec-b96804a05297"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5bc9135-afce-4d15-ba74-071a3e2c0dd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02312d48-1c2d-4a74-954f-f0c04e393da2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c67c0552-5ade-4df1-aa3e-57a3ce26900b",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4882352-b8b4-4218-b263-a2b8e5173165",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c101a725-be09-4645-b4dc-878ad5a4a6e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91774434-aeb7-4fea-9a7b-909f1f2dd68f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ed3d9d3-ce3b-4139-98ca-4b50b91f5ec7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83419ff2-8ed9-494d-b82a-b31b25528d95",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "055d3540-eb03-4628-b45e-ae1ac6943ba6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e2734be-779f-4105-9098-c84f11a26e5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e996ce24-027b-41b9-a3fc-c19715b599e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3e766b9-0d07-4832-9af9-7cf13c360a91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c636cf67-bc72-4409-bf29-b8db8da7f1eb",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ec1c6ab-c1e9-4cc4-8a47-e3260b45cd04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c09951bf-a985-4c47-83f4-6300cfc42398"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af26cdf2-3bb1-47a8-a197-184a8e324b73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "483f8488-c1a7-47b0-92b7-0489a3778e3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bed22982-8937-4ee1-bcde-84d8c85c6550",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cf73a9c-f0cd-4148-a7b6-503c12539dfc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a98a066-ce50-428d-97bf-158589f01759"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3001dc9e-94b7-419a-a517-8b127a7cb76f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ce38979-57be-40e2-ba7f-0f062aa3f7de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a00baea-9b56-43fb-ae91-796ae9cb8a3a",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea789c45-a174-4615-99ea-b24c15d879ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1eacbe7c-4877-46cc-9f43-7db8da76b590"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9d7f243-2936-4d01-bdb4-7bc8202d6e7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "252fc3aa-4a66-4148-a555-18ad905e2bb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67625083-8b59-4112-8caa-b2981035e867",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36d2ba71-f183-4014-b943-32962b28c5da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a966c3a-7083-4dd5-8625-ef93bcc74545"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63d8f0dc-0190-46a1-8753-34c8c4718316",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44967ef0-fd05-4911-948a-1d35c24428b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "992fa37d-1d50-4922-8aeb-032d42c7ce7f",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2c30242-429d-454a-822d-768c20d64c62",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4dc05978-d1f9-4346-9349-f87f9cfb29cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbe27cf6-402e-4a69-a54b-0c602de3fdb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d296c75-7922-429b-99d3-6055c699b4e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbe219ec-d569-45b9-ba6b-0d2c483dd6a1",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "462600ee-ad7f-45f4-923d-d6f20ae06bb6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e418597-e492-472d-917f-c00b9affde0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e515cf98-b4bd-4162-b81f-a12dead10fa3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b69e97b-03c7-40f4-bd8c-0fb18be15c75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b87bca3-f7e3-40c1-a3d1-fe9804726c43",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61d123f4-d73a-4d6d-a48c-b6b748486fd6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9324118a-8544-4348-8694-35283dd33f7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77ce4f52-c79a-4eec-9fe3-98038ec4f944",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bd10486-f898-4342-a114-80e96cb74b82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36c4fb07-75a1-43ad-8d9a-a39a79e5cc0a",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88d3941c-e29b-49a8-bfa4-bc9b1da213b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a738fb2-c3ab-4765-80ae-8e8bbafea793"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f87a0dd8-3e73-4d07-9c46-890838341ae7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f5cfb21-8e09-4582-a1c3-ce90e4d86a9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de23a4fa-0005-49e5-b33b-f254858a9d53",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f99c209-d1cc-4a3d-9d37-e45bb6979948",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5009f956-1b24-49b0-879d-5645d1d06813"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e66a7da5-de23-4f11-9ba7-9297cce6c15a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50a3aa95-3c15-420a-855b-54f6ba46b490"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6de7ea7f-fdf6-4b8f-b1e0-8638828f0bbd",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fafd671d-f42d-4d07-8eb5-afceffb87f6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab2e1f00-1296-4165-b887-3d44e291dc6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aa3cd2f-26ce-4f45-9cbf-06b7fd17df26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f349e57b-3a06-402d-a98e-2a4ce2443f59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4aced4b-b42e-4fc5-8496-dac43e727bf6",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d241926-1f2d-416e-b622-a4d06c1471d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a4b7905-142b-4bb8-8cda-dedba4a18037"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e88caa38-ab10-465a-8e35-5ce534607a6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed9c812c-833f-45e9-bf47-3fce71a1630a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45e51938-0f63-4b4c-b125-2f9ae7cecf97",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ec3c077-87ea-4455-8575-69bba11bc0dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9962261-aa17-45ef-91bf-7dc4e11d66eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29a8b952-817e-4092-997b-d2dc994c7f82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cee9058-ccd1-4b65-80c6-00755527a53b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94f4e395-1644-4273-baa4-ed43dd7ddbf1",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3605f2f-a6d5-4764-bac1-1e1864949cc4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b559ca2-d36d-4860-8b9b-224fd0448300"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e75d8d99-2887-431e-8939-d0486e42c906",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9648f197-ab37-4a04-af87-3c9cfaf8e60a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cd70d76-9eaf-4249-8d34-6bb3991d2a89",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0c81e46-4952-4217-abb0-adf5b9c5179b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "825b33c6-e410-4ef9-862c-87b059e2d04b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92880524-f55c-4ab3-9549-bbe2f8ac1d1c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "489caf07-190a-4913-8b81-2e43e475eb56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93ee1fce-3b66-4058-afbd-114ed6b6adcb",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a727e95e-33c5-4418-b31d-0f7a0ae51dfc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d6e07b7-1cf7-4add-ab36-179077946c71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a2d2981-2bde-4ed4-bece-f4d697710326",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abb313fc-5520-4aca-bf08-93b2c6b42da3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a28c0d60-8f88-4681-9287-17b084a0f039",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "362c6b6c-8911-468d-86d9-3aedd24a6cea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b6eb261-e611-4838-926f-5485cdd1e6b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebb5c9e0-3e7f-443f-94bd-e9cc9a0184bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8c5d3fd-e5e3-47e2-9925-8b0d17435282"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52d6753a-4b4b-48f5-8378-887926b0b949",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "659c7f5e-1c76-4e6e-9f78-fae3de91566f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f6228c8-ab74-4156-b290-4a9cfee1166d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86f0333f-0020-42bf-8db6-ea6c35067cbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9300c3ee-a5ba-4d9f-8378-cfe9f1fffcde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a263fdd-550d-4b38-8688-30a558a3d76c",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c79e8e38-c13b-4a0c-b3a4-e86b018b07d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "549e453a-45ab-4a37-aa77-5812f3f6f085"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ee3a669-81c3-4c5e-81b1-e7c3971826dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee6bd5e2-63ed-4a78-874a-fc504691c9c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cdd8c99-58ea-4ef9-9120-b993f0405766",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66e22a2c-83f2-41ac-a824-93523f80ee48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7012dec6-dc1f-45cd-a2f2-94eb0e2f93aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d9e5004-7143-4d46-be9f-96f12c5674a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4f1abd0-0a2b-47a9-aba0-7aaa1a27f23b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da0b298b-6500-4cdd-9d01-16ec363ba356",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92cb8559-6030-4e61-8dfd-9e9115009449",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f9647d8-105b-47a4-96ba-33b4a578b418"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "253d2200-a411-4a66-8cd7-562a2100c52d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "464c42e9-6701-4ffc-b732-c4839251e338"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02eb3999-74f3-40cb-987e-80691a18a5d3",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77bd2e4b-e778-4e53-9ff3-fdda943b538f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b6ceea1-f402-47a8-8154-76301d45358b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04d1c14f-fa7a-47cf-9c8e-7be28cbb80da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03c313b2-4cf5-4997-a2e3-ebca43e130fb"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8f68bc9a-3a9d-41b3-a4fc-4379ca8c198e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bd667695-1f32-4bf8-bfdc-1587f147da9b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "06200942-0b0d-47ad-9727-fe7883caff18",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "28202a17-42db-48ff-932f-63b05cf50ca5"
                    }
                  }
                ]
              },
              {
                "id": "6ed38bde-4433-43c9-9316-40209da71ff4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f86cdb3f-5f63-45bc-9cdc-8561aefb6f99",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de664c10-26bc-4465-b12e-37e1124659df",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "2d17ea2f-aba4-4434-a026-4d24d46b0ed8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38fcf4aa-ae60-408c-8b63-fc85075aa427",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "469ee1ac-cbe1-42e2-8666-88aeec7bb592"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "72c36327-f517-4ecd-a5ea-344332603127",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3a67f563-8f64-4ad4-ac82-5825eccd5218"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "87da41e3-de61-40c4-ae4e-cb1019b8c68f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c05d26ff-df28-493c-bee8-e4050192804e"
                    }
                  }
                ]
              },
              {
                "id": "fb75e8f1-239c-49fb-b637-345bc3cfe327",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "10a08751-ce03-4b2e-91f2-39beb70e3c5b",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea40ee2d-57b9-41c3-80e5-e7b95aedf9a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "7c141d74-63fd-427f-a6c8-be796943033f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "801630b9-29cc-4b46-8c87-266784b6e99f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "933831d1-04fc-47dd-a16d-e51816417cd3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b0fc2141-57db-407d-ba3d-030766a93667",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8e800013-0094-4e7f-bca1-4a29dd46d7ca",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "aea0de4c-30eb-4e70-af54-6254fe1a0f1f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "0e08f279-fe0c-4b01-8bb5-1813590b1abc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f964e8ae-a786-4722-8c72-ea7434f2e8c7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a16bee77-6ace-4540-96d4-7e7c1653d541"
                    }
                  }
                ]
              },
              {
                "id": "5009280b-c11f-4678-b5f7-a67f5caf1b17",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1541b067-0b15-41c8-a34a-6cb6ddaf191c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "9e26b3b5-78f0-482a-a967-b586d16144a9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "53a2c44f-461e-4379-97ae-fb24e85b5904",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7381d1ac-8510-4c8f-a72a-7051be483c5a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4d3b7577-6521-4bb4-b55a-8c850019143f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "713566f7-4250-4f44-9b8e-1a2aa8f5fe80"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1e2b8581-cc2e-4859-a56b-6d3286983c91",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "64389267-7ebb-48ab-9c77-5f8176988e40"
            }
          }
        ]
      },
      {
        "id": "61b909df-8e29-4d9e-b002-ad11c49f83f2",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "7b0f553a-0307-4ece-b662-3b9f0113fd59",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9d098cc0-d479-4da8-b067-61f5c2ce9cc1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "709e47fa-c581-47d4-9fb0-d1baa54df892",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97c937da-2092-4a7d-8d12-c2c99771a56a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "721dac83-2748-4371-aba8-e05c839547d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b002f07-980b-4e38-8478-281e326a2e08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f621f72b-2998-4a27-9379-4c306750d8c5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cfcddb60-183a-4f07-a2cb-baa75f57f81c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9e5a96ef-0b08-44a1-aafd-e2df4a7e08fb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "82e8ae53-9187-45ed-88ed-c4719e5fe611",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d837e0d6-97ea-4a60-9901-f7633908cec7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2bfe83e9-4d00-4d05-90c7-5fd41c75d268",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "1cc65058-9096-4a5f-b591-1ee14e8addc9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "67203d6d-83c2-41e0-b792-15bdf747b1cb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2becd761-589a-48e2-b681-f662533c66db"
            }
          }
        ]
      },
      {
        "id": "3b8d4f4c-23cc-4da5-8f02-c3368542e895",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "5cdb485d-ba12-4e02-9ea2-bf16aed255f6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ed49ea6f-d837-48df-a31e-00fd935d7e74",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d95af5af-f79e-417e-a901-8a283c6be1b9",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e43f295-bd8b-461b-a490-dd051e1a2042",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "28066f61-ae0e-437a-9781-6b0f8e26caa3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "315193c0-6487-4d36-a7cb-02e19d3044de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "336858ad-baa5-47fc-b7e1-fd6e2c8e72d4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4e90c602-cc46-4b16-b065-4f4bb538f4a8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8ff40b1d-491b-433c-a9a7-94fa3b6dc3d2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "63a20b1b-3b86-4e7d-a9d6-0fed2a0a047f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d7d9af2e-70e1-46e6-b016-8fb9b41cd85c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b4fe7e75-da59-454a-9ce9-121f58c68acd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e18e215c-af68-4839-be81-c7e11e30dbfa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fae69a77-70d8-4936-9978-4f15e30d59ef",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "03db9903-f4d3-49a8-afda-49d8e5ede842"
            }
          }
        ]
      },
      {
        "id": "004278a6-4a8e-41c8-99d2-f5d3edfd2431",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "deafadf4-da98-46e1-ad77-6a985ead4539",
            "name": "Negative Testing",
            "item": [
              {
                "id": "056863e3-6b2e-45e3-8743-b06317b0fb35",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c569351e-e6dc-45f8-9a99-dc9e35edc5b2",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "598357b6-a497-4e89-9783-2fef8b2acba6",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8a14a193-217a-4986-aede-14ef05387d4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc20e5ff-d5cf-410a-87a5-3264d17f3139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "821c2da9-8c4a-4a82-86fd-50402f781944"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "39d3cab0-6fc1-4794-a679-69f2ca373f49",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c41b98a4-34c1-46eb-9db0-323961b0a470"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a60edccc-b22a-4103-b3d8-3c15c54bff2e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "860f7652-15d3-48ce-828c-ed1288e70aa2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "22a16e2e-09d4-47f5-ac66-ba05e31a307a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "74eae71a-707e-4b49-83ed-4e6a0c4e81df"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7b59b190-a4f2-4095-95c7-10c716f71edb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "03673ed8-9dff-4d5b-bc57-c93ab66d9e90"
            }
          }
        ]
      },
      {
        "id": "881b55ed-9f85-4434-8e23-6329f31990e2",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a3cdbef1-747c-44a4-9cf3-08daf8c23133",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1ebae12d-c028-4fe2-b5f9-94e91aee86a4",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "8c926102-2e04-45ca-a96b-ab094ec40135",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "24795985-502f-4486-802a-9e3974cb3b65",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5d1a2e13-3594-4a6e-9f8c-fc3d3641715a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 57.22807017543859,
      "responseMin": 6,
      "responseMax": 628,
      "responseSd": 73.24590103946296,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1701045362421,
      "completed": 1701045387960
    },
    "executions": [
      {
        "id": "597e8339-8e69-47f2-aae2-d0a3bba5c85d",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "adbe4639-e88d-4356-99c1-8348e9cd36d3",
          "httpRequestId": "189c4b3e-5991-4750-9da8-826e77173e67"
        },
        "item": {
          "id": "597e8339-8e69-47f2-aae2-d0a3bba5c85d",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "c03d6b16-46ff-44f6-9e7c-330ca690338e",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 0
        }
      },
      {
        "id": "d6473fd6-3557-476d-b830-be86dc990f1b",
        "cursor": {
          "ref": "101d015f-b1ff-4e50-a1fd-a0cc41c645f2",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "f4b10f1a-1c66-4354-8187-fc87ff08af82"
        },
        "item": {
          "id": "d6473fd6-3557-476d-b830-be86dc990f1b",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "ec804464-bf60-41d3-adc7-71f86507b818",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "b0ec77e6-8b28-488e-9d6c-d0bad3806f4a",
        "cursor": {
          "ref": "b0289706-573b-4b00-bfba-8c6fba617c47",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "4a471a8c-c6c8-4167-a901-fe6523c4a2bc"
        },
        "item": {
          "id": "b0ec77e6-8b28-488e-9d6c-d0bad3806f4a",
          "name": "did_json"
        },
        "response": {
          "id": "ed5e7723-a5c7-480a-989d-493188cf9d16",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98001be8-13f2-4ce8-9fa3-2ebbf5687065",
        "cursor": {
          "ref": "17ff3f59-6950-4b41-b87e-e0e196d39b6c",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "cb9b1df2-8c3d-45eb-a186-af9955c9534d"
        },
        "item": {
          "id": "98001be8-13f2-4ce8-9fa3-2ebbf5687065",
          "name": "did:invalid"
        },
        "response": {
          "id": "1e8050a1-eb42-4084-b701-fd734365261b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98001be8-13f2-4ce8-9fa3-2ebbf5687065",
        "cursor": {
          "ref": "17ff3f59-6950-4b41-b87e-e0e196d39b6c",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "cb9b1df2-8c3d-45eb-a186-af9955c9534d"
        },
        "item": {
          "id": "98001be8-13f2-4ce8-9fa3-2ebbf5687065",
          "name": "did:invalid"
        },
        "response": {
          "id": "1e8050a1-eb42-4084-b701-fd734365261b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a20c0a71-3d85-460e-bc9f-aa452e54b3b5",
        "cursor": {
          "ref": "a47be605-f81b-4fe9-8ca2-33891fbebc66",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "fb9901f4-666f-4bd6-af4e-f65fa18613e6"
        },
        "item": {
          "id": "a20c0a71-3d85-460e-bc9f-aa452e54b3b5",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "759a2e76-4ce7-420e-a72b-58a99a32d7b4",
          "status": "Not Found",
          "code": 404,
          "responseTime": 85,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93a2ea14-69b6-4180-844c-c6acba3a7a67",
        "cursor": {
          "ref": "0dc1e6b4-23de-4023-baf2-2f8e118e3bc8",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "bb795ab8-75d2-439d-94c8-02482bcd19f8"
        },
        "item": {
          "id": "93a2ea14-69b6-4180-844c-c6acba3a7a67",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "fc1a578d-9c83-4cb3-95d9-fba66e074430",
          "status": "Not Found",
          "code": 404,
          "responseTime": 37,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2f08b72-2584-4eab-8fca-dea3770f1b7b",
        "cursor": {
          "ref": "309ab94d-bf60-42ba-9c47-e742179fccf8",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "8af3d496-75c4-4d9d-a311-f67e9cc37f30"
        },
        "item": {
          "id": "f2f08b72-2584-4eab-8fca-dea3770f1b7b",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "dd1f0228-2f13-4f3e-ae5e-7e31e6446839",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0b2f0d0-f8f3-420a-99ca-61c4c3db84a1",
        "cursor": {
          "ref": "1969ada3-5faa-4ed5-8d0d-66830e74992b",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "d56d5a03-d5bc-4ed2-9a51-8953590b3dcb"
        },
        "item": {
          "id": "a0b2f0d0-f8f3-420a-99ca-61c4c3db84a1",
          "name": "identifiers"
        },
        "response": {
          "id": "a25281db-37f8-42a7-a115-a4a97aeb6283",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43e35f71-132f-47d6-9a51-709391da05b6",
        "cursor": {
          "ref": "483ed4ea-dc4a-4744-89fa-dd679540031a",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "68d27e31-bb96-4833-b129-7c99f568cd3d"
        },
        "item": {
          "id": "43e35f71-132f-47d6-9a51-709391da05b6",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "ae7013da-cec6-402f-82c9-052c0b008a96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de93e497-7dc7-4ba3-aaf0-504a81403bfb",
        "cursor": {
          "ref": "9e3ea7de-3e1f-484f-a635-67ffd5087b87",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "74716244-6791-4c3d-8f68-5f033645640f"
        },
        "item": {
          "id": "de93e497-7dc7-4ba3-aaf0-504a81403bfb",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "1159bf9a-e61e-494f-bbd3-b769b644d4c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "422cb78d-f05a-4236-9236-78fb136edcb5",
        "cursor": {
          "ref": "12a7cbbb-c21a-4258-85db-bb549aab4afd",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "2734a71b-99bf-413c-bf44-3675c999fda0"
        },
        "item": {
          "id": "422cb78d-f05a-4236-9236-78fb136edcb5",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "7a4ba0a0-7f46-4a41-9cad-2952c275e78d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "619d05de-717a-409e-9c16-0fe3f347ec30",
        "cursor": {
          "ref": "5ac73a85-c403-4ed2-8a7c-5cb1ae9a6155",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "761a504b-9ca2-415f-8d3a-bd48ca1c90e5"
        },
        "item": {
          "id": "619d05de-717a-409e-9c16-0fe3f347ec30",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "d856ec98-ab55-4d87-a744-ef6fb1a1badd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f9daa91-e7f0-4ce7-8024-831f855de8ad",
        "cursor": {
          "ref": "15db90ed-4493-4de2-a611-0cc162366cf1",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "f009eae7-d5eb-431f-b8e5-e52b32627c29"
        },
        "item": {
          "id": "7f9daa91-e7f0-4ce7-8024-831f855de8ad",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "bf2a0b64-c326-4c44-852f-a4aa02fedf10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfbcbb34-bd27-4121-9f39-ad7e907695eb",
        "cursor": {
          "ref": "97bb5fd5-c9ec-4026-b6a0-92fcf85de172",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "eff64036-d47b-4925-8833-c9f16fbcedb7"
        },
        "item": {
          "id": "dfbcbb34-bd27-4121-9f39-ad7e907695eb",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "c91a8e47-2874-4326-98fa-3e97ca292fec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eebaae67-a2e7-404c-a3b8-1e2d31770f9b",
        "cursor": {
          "ref": "74fb7463-eee7-4275-bb00-75526fbd7713",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "d845880a-8b97-45da-a805-25591569fb72"
        },
        "item": {
          "id": "eebaae67-a2e7-404c-a3b8-1e2d31770f9b",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "57fa0972-92b9-42da-9ffd-8bb8931ae8ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02790c70-e5ef-45a7-8bda-ac044c0be8a7",
        "cursor": {
          "ref": "13061815-6819-43ee-b418-2171036e83ec",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "49d3fe89-986e-4661-9405-e2b72c0f12df"
        },
        "item": {
          "id": "02790c70-e5ef-45a7-8bda-ac044c0be8a7",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "deca303c-a0b2-4295-86a3-f45c262c86a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db551242-5aac-4e58-a66a-8654eb1edf76",
        "cursor": {
          "ref": "45109e78-e733-45b3-8a2c-d862b266c61d",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "7ccd3e50-cd59-452e-8153-76c44cfb79f9"
        },
        "item": {
          "id": "db551242-5aac-4e58-a66a-8654eb1edf76",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "038145dd-f8fd-48e4-9094-7d69e50e6368",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3ddf7e5-ad72-4985-b443-e32b6c213f42",
        "cursor": {
          "ref": "1654f0c1-f24e-4beb-a66d-107e37956944",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "9dae88e6-eab6-4bc6-8591-4edf13591cc7"
        },
        "item": {
          "id": "d3ddf7e5-ad72-4985-b443-e32b6c213f42",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "8876c952-edbd-49e7-821c-6f610a23be84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd4fcc70-0b5a-4620-816d-921aa9bfa878",
        "cursor": {
          "ref": "cc6ea9a0-f301-4f3d-890a-515f9e2f36bc",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "530b477d-5e48-4f0d-b0ba-fcf3c6ce4c98"
        },
        "item": {
          "id": "bd4fcc70-0b5a-4620-816d-921aa9bfa878",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "522039a0-1455-4a75-9d6e-5745be47034c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a04f22aa-16da-4cf5-a394-1913a470d66e",
        "cursor": {
          "ref": "6a22a7ce-c767-447b-81b6-680e78fb3760",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "5a84d58d-f6d0-45bd-9738-276f752f5e04"
        },
        "item": {
          "id": "a04f22aa-16da-4cf5-a394-1913a470d66e",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "3bb0bf20-e917-44b7-864b-0e0642a42cfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e2b55f0-2321-4b7e-a61d-c323a85ad82c",
        "cursor": {
          "ref": "07d7bb02-1154-4298-b458-e80981002623",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "a1d785b0-d0fe-4cff-b164-67e82f90b5a6"
        },
        "item": {
          "id": "9e2b55f0-2321-4b7e-a61d-c323a85ad82c",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "749f7780-da99-46bc-b48b-e4ab77ecd8df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41d439c6-3047-483a-86ae-66b28cdf48e1",
        "cursor": {
          "ref": "6fa0200c-0408-4790-a694-93233922d83c",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "797da52e-4037-41b3-8126-462ee916ac77"
        },
        "item": {
          "id": "41d439c6-3047-483a-86ae-66b28cdf48e1",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "102d7bc5-aa00-44ee-9575-41a11e69526d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb0768ae-373d-4153-94ad-52e73ee789a4",
        "cursor": {
          "ref": "76c4bee7-0b8c-414c-9fe4-8d83f6e93b35",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "36becb1c-cc21-4cfa-9e89-643f656d68dc"
        },
        "item": {
          "id": "bb0768ae-373d-4153-94ad-52e73ee789a4",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "d51fed51-c66d-4e42-90a4-d2379826d54a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fc285f3-5a1b-40fa-8206-01ed89590114",
        "cursor": {
          "ref": "715755d1-e4b7-4c92-9144-e3786a5d9117",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "a83d3839-73e8-48ba-a48e-df07f65566f9"
        },
        "item": {
          "id": "7fc285f3-5a1b-40fa-8206-01ed89590114",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "e065514a-d219-42d5-85f8-fd314ad14b3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f9bb34b-4228-4977-8738-c60833ed3962",
        "cursor": {
          "ref": "0439bb9e-63ef-4a67-b126-3ce6341dae14",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "2a213dbe-d036-42cf-8f58-2206a96aca16"
        },
        "item": {
          "id": "9f9bb34b-4228-4977-8738-c60833ed3962",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "a6d7443f-370f-4be3-bdfa-b790fa80fad8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0002fbe4-f1b6-4596-8d58-37cfd26c3857",
        "cursor": {
          "ref": "c00f4b28-eb4b-4b00-b95b-387fb0eb7bda",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "7a66bfa8-0c84-418e-ba24-ebaf283aa2be"
        },
        "item": {
          "id": "0002fbe4-f1b6-4596-8d58-37cfd26c3857",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "30981425-92bd-4a1a-a104-bc35e2c68b0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a48847f5-ea15-42cc-bb47-4fc298c57998",
        "cursor": {
          "ref": "a9010014-b078-4c90-a15a-7827770807fa",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "d3220520-6cfa-4738-af4a-ecbbb3c125b6"
        },
        "item": {
          "id": "a48847f5-ea15-42cc-bb47-4fc298c57998",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "721fd0d3-e29c-406c-a3b3-c899d2e0ee5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "077cf90b-5b2c-4f16-9ef5-a29b7295f288",
        "cursor": {
          "ref": "064d8f0c-7f34-4bec-b8a7-7d1929e943ed",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "d21f19ed-611c-4191-894f-85dce71ed99f"
        },
        "item": {
          "id": "077cf90b-5b2c-4f16-9ef5-a29b7295f288",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "3c484aef-1167-4301-9935-bcfb395c7a3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f3c1d09-3c19-4c3d-81e8-6c97715cac9f",
        "cursor": {
          "ref": "a79f7a67-2cd5-49ef-8f92-5d1af91e796d",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "22cd8717-0934-45de-950b-2450b86d698d"
        },
        "item": {
          "id": "1f3c1d09-3c19-4c3d-81e8-6c97715cac9f",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "488e70e5-24cd-4f89-ab79-ef6e7b55e758",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "347f7ece-8b8b-4d90-9f71-49933f0de938",
        "cursor": {
          "ref": "69eff718-0f96-441a-9b33-4ba892a2ede1",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "2f51f0bf-c420-4e07-a8c0-ca3b2dbcbd2e"
        },
        "item": {
          "id": "347f7ece-8b8b-4d90-9f71-49933f0de938",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "423a9b3b-a950-488b-9b98-0eb9c8f54cc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1ba1a2f-0b5c-4392-8ff5-7b4dc7b1b7f8",
        "cursor": {
          "ref": "2d7c8745-bf70-49ed-a609-d1e484afb297",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "4f44db26-d703-437a-aece-613a154f5465"
        },
        "item": {
          "id": "f1ba1a2f-0b5c-4392-8ff5-7b4dc7b1b7f8",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "105e5195-c6d0-4a8f-a7cc-11df3500d3d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83361c7b-382a-44fe-85a3-6c1060609cfe",
        "cursor": {
          "ref": "9eebad44-8799-48d0-a60e-638337345bc8",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "1b3a1481-298f-49c2-9f67-eeb4184df9bc"
        },
        "item": {
          "id": "83361c7b-382a-44fe-85a3-6c1060609cfe",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "a0711049-dce3-4f76-99a7-2fabfe618aa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d459769-ecea-45a7-ac2f-39a388e54a3e",
        "cursor": {
          "ref": "7db6827c-b291-4752-b516-553c8b688d52",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "0790f241-4682-4254-a98b-f7cb168d0ec6"
        },
        "item": {
          "id": "2d459769-ecea-45a7-ac2f-39a388e54a3e",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "0e4ce661-c66e-45ad-98ba-9a98d4d8b2a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d05ac644-a76c-4137-9d8d-1a57be621781",
        "cursor": {
          "ref": "6a63a021-c514-4757-a424-582665a8e4c2",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "91d713d9-f84f-4836-8563-8f4e7c868671"
        },
        "item": {
          "id": "d05ac644-a76c-4137-9d8d-1a57be621781",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "d08929df-a046-4159-8c5a-3ca1cbaa6743",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88144494-e766-489a-b43f-9f4414586cd8",
        "cursor": {
          "ref": "143938e5-a95d-49c7-bdc9-4e9673ac8111",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "b18e6e50-4069-43b6-b1d0-a76b5d050e6f"
        },
        "item": {
          "id": "88144494-e766-489a-b43f-9f4414586cd8",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "2beb47fc-4d69-46f5-8641-fd79a75a50bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1d0592b-6c12-4739-a60f-9d76e19e5fb7",
        "cursor": {
          "ref": "5b252b24-b9ab-4763-888f-65960efa6caf",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "954cafcd-a8d9-4890-9e1f-90e0f288b7d4"
        },
        "item": {
          "id": "e1d0592b-6c12-4739-a60f-9d76e19e5fb7",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "4edc7223-ca86-47d8-b1a7-50bf4c35cb00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78f0b0ed-9726-4794-b973-89b6c740d332",
        "cursor": {
          "ref": "e08b1951-e75f-4c18-a505-78bbe511ebe6",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "7e73ec1f-da12-4675-97fd-a372310a59da"
        },
        "item": {
          "id": "78f0b0ed-9726-4794-b973-89b6c740d332",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "6658ebdd-efe8-4f1e-8f8e-e1b6e350c16b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c87566f-5de2-4d4e-a9c0-5d58210d42fa",
        "cursor": {
          "ref": "6fc1400d-9bae-4e36-989e-3fdc8dffe881",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "49e507e1-4a29-4a97-b70d-e26984e92692"
        },
        "item": {
          "id": "0c87566f-5de2-4d4e-a9c0-5d58210d42fa",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "1127fd8a-a1a8-4e04-92f6-baba7339a2be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1944f959-6925-4e3c-af42-fa8f61f32376",
        "cursor": {
          "ref": "6b3fb134-8cfe-41d8-85c0-919cc6345df7",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "b090add0-5f65-4155-b4d2-b210c621320f"
        },
        "item": {
          "id": "1944f959-6925-4e3c-af42-fa8f61f32376",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "276ef242-d501-427e-9945-a3d291c6f68b",
          "status": "Created",
          "code": 201,
          "responseTime": 628,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "50d85922-4471-461a-8b66-45d15a34bfbe",
        "cursor": {
          "ref": "53dd0b48-82f9-4f02-a928-d6647c224f5e",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "41cde4be-81b7-4e9c-b84f-a75fd8cf8635"
        },
        "item": {
          "id": "50d85922-4471-461a-8b66-45d15a34bfbe",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "45ca4977-4917-4faa-a2ad-48371afb943a",
          "status": "Created",
          "code": 201,
          "responseTime": 255,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "87670284-1545-407a-afde-61ad413be181",
        "cursor": {
          "ref": "30835ce7-3812-430b-9307-2f02361885fe",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "1b21ca6f-148f-4165-94eb-2dc0b062d023"
        },
        "item": {
          "id": "87670284-1545-407a-afde-61ad413be181",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "755ac954-3260-4184-ab01-b661f5e87e31",
          "status": "Created",
          "code": 201,
          "responseTime": 317,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "3831ae41-120e-49c5-b65a-df22b785695a",
        "cursor": {
          "ref": "7a8340a5-da9f-4f24-80d1-0812b1af72ae",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "0d419ed7-aa7e-41ba-85fd-260c734ec113"
        },
        "item": {
          "id": "3831ae41-120e-49c5-b65a-df22b785695a",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "87892f13-1723-48b3-b491-675f0009ea25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e9d122f-3961-4e66-a21a-464050cc9fe9",
        "cursor": {
          "ref": "e8b481f8-d2e1-4281-966b-d97a8e3ac520",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "57c1817f-271a-458c-a03d-65e46db8912e"
        },
        "item": {
          "id": "1e9d122f-3961-4e66-a21a-464050cc9fe9",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "d2f34496-e242-4320-aceb-95b228a9bb54",
          "status": "Created",
          "code": 201,
          "responseTime": 267,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "0b614f47-a43e-4845-be10-2ca8512901a2",
        "cursor": {
          "ref": "2b8494af-af03-44ce-ad7c-38fb9c8960b6",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "eef59b7c-a20c-4579-ba52-37f50227c4e3"
        },
        "item": {
          "id": "0b614f47-a43e-4845-be10-2ca8512901a2",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "7cdebcbb-c08f-411c-9650-b566489e7ad3",
          "status": "Created",
          "code": 201,
          "responseTime": 269,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "56691700-01cd-40c2-ad62-99d8b83a2a22",
        "cursor": {
          "ref": "e9e4f79f-e31b-4e20-ad5b-8f0f80ce9587",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "3eb42ee1-faf8-46f5-b666-d3007d474869"
        },
        "item": {
          "id": "56691700-01cd-40c2-ad62-99d8b83a2a22",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "bddac55a-8f3d-4353-a9ec-026352096bac",
          "status": "Created",
          "code": 201,
          "responseTime": 262,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "a237d4b7-45a7-4d83-8efb-0b743fdd2a7f",
        "cursor": {
          "ref": "412331d7-2537-4eaf-8b35-e7dcf6d1d359",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "e8152255-4177-4937-b89b-75f297b0025f"
        },
        "item": {
          "id": "a237d4b7-45a7-4d83-8efb-0b743fdd2a7f",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "b2dbd35a-5b28-4f14-8f66-967a8d3941fc",
          "status": "Created",
          "code": 201,
          "responseTime": 406,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "1b218ad6-38a1-456f-b8e6-e3eae37fa91e",
        "cursor": {
          "ref": "f4708766-f34b-430b-a337-c59fef95b4ca",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "43882f1a-f8bb-4760-95b6-653477de0972"
        },
        "item": {
          "id": "1b218ad6-38a1-456f-b8e6-e3eae37fa91e",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "39fb06d1-520b-44db-96da-0bac5548bcd0",
          "status": "Created",
          "code": 201,
          "responseTime": 258,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "3f20b4fd-747b-49ca-8b53-e576dccc5497",
        "cursor": {
          "ref": "80589caf-238b-4b9a-8453-2850f3d52f73",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "0def7ec8-6a03-47e1-af39-9b0c920797fe"
        },
        "item": {
          "id": "3f20b4fd-747b-49ca-8b53-e576dccc5497",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "425918be-22f8-44cc-9119-bdcdf2bcfd0f",
          "status": "Created",
          "code": 201,
          "responseTime": 260,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "62762d8b-9dff-42e7-b0bd-5282162d4b3c",
        "cursor": {
          "ref": "c70fed0b-d69b-4b64-be99-81fac5bd3435",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "03d2d670-65e2-4cdd-ba39-74db65acb8c8"
        },
        "item": {
          "id": "62762d8b-9dff-42e7-b0bd-5282162d4b3c",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "a9556cfe-40e7-4a11-a0e6-2d3a8bb272d4",
          "status": "Created",
          "code": 201,
          "responseTime": 294,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "a968524f-be26-451c-afcc-4b26006e86cc",
        "cursor": {
          "ref": "5a680cda-4f9a-424e-9b84-f04062eb4875",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "5ae0819c-98f5-4296-a587-017567163269"
        },
        "item": {
          "id": "a968524f-be26-451c-afcc-4b26006e86cc",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "0e629a43-6e31-4607-919d-90d0ae6fe34a",
          "status": "Created",
          "code": 201,
          "responseTime": 255,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "f4672c57-e4af-42b8-be74-47d69cf9c33b",
        "cursor": {
          "ref": "b823a64e-4de6-4763-96a5-0d8d6e38c40b",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "6e612306-b804-475e-9900-626ee97cf4f5"
        },
        "item": {
          "id": "f4672c57-e4af-42b8-be74-47d69cf9c33b",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "4be05791-783a-4d2f-98b2-138b142806f8",
          "status": "Created",
          "code": 201,
          "responseTime": 257,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "762a841f-1d20-4f78-9553-fab2d498b1e9",
        "cursor": {
          "ref": "2fa330ec-e5a4-43dc-bd59-02251bda0a2b",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "b8eb7bd2-d08e-48fb-a14b-a9e2530bc915"
        },
        "item": {
          "id": "762a841f-1d20-4f78-9553-fab2d498b1e9",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "dc86860b-a25e-4e2c-a41e-38cbef940e2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f36084b-8cb6-46e2-90ef-b6dae06894ba",
        "cursor": {
          "ref": "7d670c18-422a-496a-bfd6-5d9578e67c52",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "05e43e1f-3c85-4739-917e-18219a0dc6b5"
        },
        "item": {
          "id": "9f36084b-8cb6-46e2-90ef-b6dae06894ba",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "55d07e57-1c5e-4696-a17d-517e8dc9516b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3ebacee-5bc4-44b7-9e92-cbc3433d4cfb",
        "cursor": {
          "ref": "8aaa82b4-246a-468c-962c-71e44caa6efc",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "86b8fc90-6a77-4141-9b7e-14f8998ed643"
        },
        "item": {
          "id": "f3ebacee-5bc4-44b7-9e92-cbc3433d4cfb",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "def55de3-8164-4b2f-a5ab-e7ea586b6088",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "962ae36d-1a78-49c5-a4f2-84b20e70dac5",
        "cursor": {
          "ref": "a7bd91ab-576f-45a6-9084-dd820d96d9c8",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "7d65a54a-48db-4eb3-b731-ac6b93dd16ad"
        },
        "item": {
          "id": "962ae36d-1a78-49c5-a4f2-84b20e70dac5",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "af4138de-4019-49bd-bbb8-fd6b555f03ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "222adb30-a386-440f-ad43-89a994f5b3e6",
        "cursor": {
          "ref": "7c225447-ceed-43d1-b245-12386e01c2ce",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "6c2fd2dc-f64a-41ec-9069-088d6d5f4ec0"
        },
        "item": {
          "id": "222adb30-a386-440f-ad43-89a994f5b3e6",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "cf9e3410-8930-4531-aff7-06813c86e03f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abcc4865-fb80-41eb-a8cc-0b8dfec016a3",
        "cursor": {
          "ref": "87ec7813-139c-4992-9f31-028bc68f79ed",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "d3c218fa-977f-40ac-9b18-11654ca6b482"
        },
        "item": {
          "id": "abcc4865-fb80-41eb-a8cc-0b8dfec016a3",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "76750ccf-4155-40d5-b436-82518a2f85ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39807860-b2ac-40d0-a786-926a48f5d8ff",
        "cursor": {
          "ref": "3db49f25-1568-4a4b-8512-af9b4f4cdba4",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "793f66a2-4de9-469e-85bc-97283495b9ec"
        },
        "item": {
          "id": "39807860-b2ac-40d0-a786-926a48f5d8ff",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "0cde180a-a17e-4f50-9e5e-d0bbbe2ba459",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c9cba66-178c-4e5c-9462-92c5df9f63c6",
        "cursor": {
          "ref": "7fa69995-9628-4145-b452-5b20aaf49b14",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "03143b7c-fed0-4860-981c-a178ccb17295"
        },
        "item": {
          "id": "3c9cba66-178c-4e5c-9462-92c5df9f63c6",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "1e8071d7-cc23-40a9-9c4f-0b286821423a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19335fee-c993-4fb7-b23d-b8668cd5440f",
        "cursor": {
          "ref": "777d25bc-2101-42f7-9b9b-038d902d6de1",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "06e97fb6-89b0-42ae-be33-f7e0d1203716"
        },
        "item": {
          "id": "19335fee-c993-4fb7-b23d-b8668cd5440f",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "093ea5d0-dc76-4247-82a2-9c5aab86757b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e41050d5-cdee-44f4-91c6-9938eb35e93c",
        "cursor": {
          "ref": "ab3aaf9e-5f8b-439b-907b-1f8167428491",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "890a408a-d1ff-4269-9e80-f4900b7c6dc5"
        },
        "item": {
          "id": "e41050d5-cdee-44f4-91c6-9938eb35e93c",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "d6673616-3a6b-42ff-b475-6dc7efabdd75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d541b3d3-b0e3-4e21-8c34-4517b2dcfc61",
        "cursor": {
          "ref": "612a7122-591f-40da-b9bd-f7a81741106e",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "37241c56-9d46-4ec7-9cbe-80e8ef0ce6b5"
        },
        "item": {
          "id": "d541b3d3-b0e3-4e21-8c34-4517b2dcfc61",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "da346e4f-64d5-4c29-aeaa-8d2837f1e778",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d66b521b-2a3a-45be-abce-41776e1a4c9a",
        "cursor": {
          "ref": "0c80884e-21fb-4c0f-8945-9f67ebbed958",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "c843c45d-b846-499a-83b6-ae6d7136db5a"
        },
        "item": {
          "id": "d66b521b-2a3a-45be-abce-41776e1a4c9a",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "8a570329-9701-43ca-b346-3fe65ef9e76e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59c3c94a-3ea4-4faf-bfcf-f7bf5c82aa15",
        "cursor": {
          "ref": "42cac3c3-9990-4866-a277-a0ae0fe1badd",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "94f78f3a-9a83-4742-8aff-e2eaca3a2b69"
        },
        "item": {
          "id": "59c3c94a-3ea4-4faf-bfcf-f7bf5c82aa15",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "290e1128-8eb5-4af1-b9bd-dc93ffa6a81c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7ce7e38-6086-4921-a7ac-f7ade9d6e63c",
        "cursor": {
          "ref": "e5d5caff-f83b-42fc-96dc-1ec719f236e3",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "4a6fe3b3-a6cf-4575-8bf4-17e79ba14236"
        },
        "item": {
          "id": "f7ce7e38-6086-4921-a7ac-f7ade9d6e63c",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "844d93ad-c796-4695-8c7f-0747ea5911b1",
          "status": "Created",
          "code": 201,
          "responseTime": 247,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "b8512dca-66d8-4f30-ac3f-a34c05d61cd3",
        "cursor": {
          "ref": "f5e8e4f9-4280-459d-886e-feee67f1537e",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "98f90ef0-2092-422d-9bea-4468f1c83076"
        },
        "item": {
          "id": "b8512dca-66d8-4f30-ac3f-a34c05d61cd3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "76202ca3-7aa7-46a7-baef-08f1cc9e0491",
          "status": "Created",
          "code": 201,
          "responseTime": 239,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "dbc1f61e-5b7a-4fd8-86f3-8fe3e629a308",
        "cursor": {
          "ref": "c51bc164-5769-4c14-bf66-3ca0d9a4de53",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "9e6e8f45-d687-4f95-8b5f-91362aa15e01"
        },
        "item": {
          "id": "dbc1f61e-5b7a-4fd8-86f3-8fe3e629a308",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "207347ec-2ba7-4e0e-9208-bbb9c698495d",
          "status": "Created",
          "code": 201,
          "responseTime": 260,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "d5e523b3-147f-461c-9257-cc2fd115b3ac",
        "cursor": {
          "ref": "fafb053b-1e5e-4d36-8e71-7a5eeb935852",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "9d54d28d-36ac-4037-b69d-052ef4edcd3e"
        },
        "item": {
          "id": "d5e523b3-147f-461c-9257-cc2fd115b3ac",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "61df43e1-f824-47d4-9ef7-4ab8e9d19c6e",
          "status": "Created",
          "code": 201,
          "responseTime": 247,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "0412ece5-6cb8-4015-800f-58c7e3b69476",
        "cursor": {
          "ref": "1ca67f5b-dee4-4b0f-9909-a0af6c1dfb5d",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "ce9537ce-6c5c-4357-960c-48b4c00c07d4"
        },
        "item": {
          "id": "0412ece5-6cb8-4015-800f-58c7e3b69476",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "8a292b15-aa63-45f6-8d59-2c5e5bff9bba",
          "status": "Created",
          "code": 201,
          "responseTime": 235,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "a8c33475-f308-4011-a4c8-2dd978906f84",
        "cursor": {
          "ref": "85a5e233-f59b-49c5-b9ad-fbbd1fcf6197",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "ac0b353c-a220-4b54-82e8-9ccfbc002c97"
        },
        "item": {
          "id": "a8c33475-f308-4011-a4c8-2dd978906f84",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "e1fd1d9b-29a5-45ad-adae-d535c20e8510",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cc9eff1-0581-469b-9a08-ced0963f4ad4",
        "cursor": {
          "ref": "a56000b5-46f8-4c8c-a7de-1c066f09d923",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "645fc759-6033-4953-877f-82eade9891d4"
        },
        "item": {
          "id": "5cc9eff1-0581-469b-9a08-ced0963f4ad4",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "2ec9a9e4-f8cb-4e96-afbd-ab58c1a59f0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "411ba8a6-e4a7-4f58-8674-fba2379b3dad",
        "cursor": {
          "ref": "2c23c561-3d79-40ea-921c-d8e10fd6affe",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "5d6abb87-c75d-408c-9d77-561f2bb437fc"
        },
        "item": {
          "id": "411ba8a6-e4a7-4f58-8674-fba2379b3dad",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "fc8a9741-ff81-4620-b4a4-92f357816982",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98f290ff-60f1-4668-9f0f-07ee275a428a",
        "cursor": {
          "ref": "d884b016-4185-4e24-9997-6cde59d32316",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "8e6cbde3-a3bb-4e64-949c-aefdcb1cefbb"
        },
        "item": {
          "id": "98f290ff-60f1-4668-9f0f-07ee275a428a",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "91d58c79-fec8-41d0-a19f-dc7e9aac88f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9792b5fd-860f-42dc-af9c-291e716f902e",
        "cursor": {
          "ref": "28087656-0910-43ad-9d23-1a4e32b56468",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "90c84aa6-862a-4d2e-98cf-fe3f630646bb"
        },
        "item": {
          "id": "9792b5fd-860f-42dc-af9c-291e716f902e",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "ecf781d3-7a00-4e65-8e30-8c479fae5a7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53a3f1af-b29f-4254-9211-588337c0b4b5",
        "cursor": {
          "ref": "f3896f1f-528a-43e8-8a8f-ab18843991fe",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "0c313c77-ac8d-409b-a091-ef44ae442c2f"
        },
        "item": {
          "id": "53a3f1af-b29f-4254-9211-588337c0b4b5",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "af4a2098-5936-4c78-a64a-3509d2ddbcfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74381d94-f621-41c7-824a-4f8aeb2b8661",
        "cursor": {
          "ref": "d198bc2b-4aea-41a1-9be8-986bee7ed9e8",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "80f466f1-7687-4d46-abb6-47cdd9034e46"
        },
        "item": {
          "id": "74381d94-f621-41c7-824a-4f8aeb2b8661",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "ecd5130f-daf5-48a3-94b9-b99b7c691e7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2d80f72-2a2b-4f18-9469-5edb808ac001",
        "cursor": {
          "ref": "181041a5-d48f-43a4-bd44-6770170512f3",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "9ee908ec-1263-46e9-b09e-c7ef0387a5e8"
        },
        "item": {
          "id": "f2d80f72-2a2b-4f18-9469-5edb808ac001",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "5b08235a-aee5-4644-b0ff-7d3121b62a9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8271cf6b-0369-4dfe-ac61-f0a51b3e71a7",
        "cursor": {
          "ref": "4cce6bd5-2e7c-4838-9696-c47ce395ddd0",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "65e6ccc0-a2cb-4e8b-9365-1d3c89bfdef3"
        },
        "item": {
          "id": "8271cf6b-0369-4dfe-ac61-f0a51b3e71a7",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "d58b61f8-5361-474b-868b-a4dc15f6df37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c689e017-352c-405a-8c2f-a1e75c01b7ea",
        "cursor": {
          "ref": "f69610ef-e606-4302-84d9-9e3c8419af96",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "6deeaf5c-9c50-4fd1-a2e9-a5448a9404a5"
        },
        "item": {
          "id": "c689e017-352c-405a-8c2f-a1e75c01b7ea",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "7216e701-1088-40a1-93da-6c378f6b8997",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeef1ab1-eb96-4c14-b4fb-58e7b4bf4876",
        "cursor": {
          "ref": "fce2f82d-5550-46e0-b5a6-785c94e8ff8f",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "6b883c74-8c16-49d4-88fe-ef1e8befcbf4"
        },
        "item": {
          "id": "eeef1ab1-eb96-4c14-b4fb-58e7b4bf4876",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "54888fd9-bfeb-4b71-ac16-0e00c442e394",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ffc00bd-33ed-472b-a413-c5131e5a99ef",
        "cursor": {
          "ref": "33b75fc2-0378-4096-aaba-6e7a4925442b",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "964081ed-9feb-4d0e-b8d2-89d29e7ba852"
        },
        "item": {
          "id": "9ffc00bd-33ed-472b-a413-c5131e5a99ef",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "dc34c82b-6ca0-43d6-aebb-bfb906bbb97a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fd8ddab-6614-4a9a-a950-dfbd697ca612",
        "cursor": {
          "ref": "eb7b6df9-8a89-4573-8214-01f99db5185f",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "9426a52e-1a7c-45d6-8828-935f73dd49cc"
        },
        "item": {
          "id": "8fd8ddab-6614-4a9a-a950-dfbd697ca612",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "1a30ab66-e4d0-48b8-b609-d9e99d0b8343",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41d072c2-32b3-4399-8f0a-43411e9e1ecd",
        "cursor": {
          "ref": "473f653f-17a9-4718-bc70-5d12804c8549",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "b103fd21-391f-4300-915f-89ab885b13af"
        },
        "item": {
          "id": "41d072c2-32b3-4399-8f0a-43411e9e1ecd",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "2a122a5d-1a5d-4edf-afa8-52a821cc56cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f902a6e3-5250-475c-bdc0-71da1521ff5e",
        "cursor": {
          "ref": "13837d18-ee73-43d9-bf4b-c0db97e189c2",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "51b8b080-e4c0-4a2b-bafd-e228ed3f118e"
        },
        "item": {
          "id": "f902a6e3-5250-475c-bdc0-71da1521ff5e",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "80d13a54-dd09-4f5a-89cc-eb0b90265913",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a893accc-6940-4349-9f25-f308b1cf2c94",
        "cursor": {
          "ref": "e028ee16-cbe8-44e2-bebc-1f054a5c0d3e",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "6ee20aff-8189-4ea3-8a9c-75ea8b01414f"
        },
        "item": {
          "id": "a893accc-6940-4349-9f25-f308b1cf2c94",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "2acb77c2-d901-414a-93de-bdb902b4207d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b87da8d-37ce-4aad-b5a7-98f000e89a88",
        "cursor": {
          "ref": "46d5f3d9-dacb-4deb-98e4-25cc953c587c",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "03f24ab4-484e-4aa1-93da-60fbc2954241"
        },
        "item": {
          "id": "2b87da8d-37ce-4aad-b5a7-98f000e89a88",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "85c51811-a362-4407-b7cb-9a64b01808bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7afc7384-f322-4fb1-9245-c092db551ab8",
        "cursor": {
          "ref": "b166d15f-5493-4ee7-a56b-536db363765f",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "0171223a-6942-4a0b-83fe-c4cf5e65f6c0"
        },
        "item": {
          "id": "7afc7384-f322-4fb1-9245-c092db551ab8",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "d9efd6d9-3936-4bfb-a0ab-e1de62ccea4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d07c6951-bfa2-4433-acc2-c289f586d298",
        "cursor": {
          "ref": "f73c6784-1080-4ca5-b568-96259f11afaf",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "4ac3cc4b-4538-4963-b9f5-61ba6efbfddf"
        },
        "item": {
          "id": "d07c6951-bfa2-4433-acc2-c289f586d298",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "f87c0034-ea66-483d-9468-880dac2f46b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f777dd07-837a-4b51-bc67-f4965a92ae42",
        "cursor": {
          "ref": "79fc0133-3729-4843-8e38-d0fa4ce23095",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "7cad572a-f522-4cf1-b48a-31a4df8f84d5"
        },
        "item": {
          "id": "f777dd07-837a-4b51-bc67-f4965a92ae42",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "783423be-f974-46a1-828c-0ef698fbc227",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5066c2a-fa44-4c8a-a496-6c080674e38b",
        "cursor": {
          "ref": "962a5f8f-f934-440a-8c1f-1742555c45ce",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "fc566587-6840-4d7f-87d3-abf784fe1aa7"
        },
        "item": {
          "id": "c5066c2a-fa44-4c8a-a496-6c080674e38b",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "df92aae0-f096-4f80-876f-a137c0e34934",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd007794-28f4-48fe-8821-74dd011118d6",
        "cursor": {
          "ref": "9e51ecd3-4b37-4200-bd0f-ef6cfddf5d06",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "d469e2fd-3775-4c7b-b20b-c344ef7e8bd0"
        },
        "item": {
          "id": "dd007794-28f4-48fe-8821-74dd011118d6",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "c990defc-9390-49a8-a2fc-5bda67800cc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e3a260b-469c-4a8d-be24-9ab3cf9d6d41",
        "cursor": {
          "ref": "d09114ac-ea1a-4843-ab01-7bdd7477950e",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "944822f5-2953-4f76-955d-acb8bbeb69db"
        },
        "item": {
          "id": "5e3a260b-469c-4a8d-be24-9ab3cf9d6d41",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "75582539-dd65-4d98-a03a-f69328a2684b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40eb9ae8-0324-412d-b74d-c0874a939a63",
        "cursor": {
          "ref": "d057c351-7adf-402a-8749-2ed69fa8d6a0",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "0574b1c3-2cc0-416f-ad70-8e77ee02b9fe"
        },
        "item": {
          "id": "40eb9ae8-0324-412d-b74d-c0874a939a63",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "72ba2a25-ee4c-4906-9126-8dc953e08995",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50389324-1f35-4a48-a294-286f22d4185c",
        "cursor": {
          "ref": "3672cc7c-de54-4bc9-ba90-1df0090f7187",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "1ffdc134-f793-4d36-9c88-def764d0f748"
        },
        "item": {
          "id": "50389324-1f35-4a48-a294-286f22d4185c",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "04a3ff46-40f2-4e00-bcf2-28b8d0ea0f8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e58621a-d701-40d4-8569-26601ebbb403",
        "cursor": {
          "ref": "55630736-668f-4182-b751-a4d4ae4adbba",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "40b5e7e5-89d0-4df6-9c99-630ab43a45cd"
        },
        "item": {
          "id": "1e58621a-d701-40d4-8569-26601ebbb403",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "bec0a4be-7650-4b05-8086-51e0835d93a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eefe5543-8ece-43a7-8aee-9cc6f8aaff89",
        "cursor": {
          "ref": "bd70da64-0043-4748-b431-4decdf5b7250",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "0f638d1a-a677-461b-8f4b-77508e1fc9be"
        },
        "item": {
          "id": "eefe5543-8ece-43a7-8aee-9cc6f8aaff89",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "86c636ca-1a93-4904-9bd8-de3980c87673",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e52606e8-d3a8-4b11-b3e5-ce54a7cdfa48",
        "cursor": {
          "ref": "42dc3c73-5100-475a-94ef-84e89dda40be",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "8311072a-ca7d-48c4-89a9-5218a572999e"
        },
        "item": {
          "id": "e52606e8-d3a8-4b11-b3e5-ce54a7cdfa48",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "27044074-fa1d-4077-8ea9-3fff7da04e3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5fab008-def0-4ff8-88f0-c6a80da344e7",
        "cursor": {
          "ref": "7529d485-1aa6-47e0-8edd-8493e2d3c81c",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "770bcbb9-7060-4402-a7d4-989c79cf5043"
        },
        "item": {
          "id": "e5fab008-def0-4ff8-88f0-c6a80da344e7",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "00db83c4-ede2-4bb9-a044-0c64c1e6bce9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75ce6e7b-547a-403c-a1e1-8febcf26c16b",
        "cursor": {
          "ref": "13d93552-f3a0-41db-bc1a-e5a8867c74e2",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "02e4f7ff-9331-41a0-aabd-dc6dd9d9d04f"
        },
        "item": {
          "id": "75ce6e7b-547a-403c-a1e1-8febcf26c16b",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "bd421017-ef83-4901-83e1-5b0dae91d53c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd9d47e9-01e5-4c3f-9802-d82ee32830b9",
        "cursor": {
          "ref": "e94a3109-ba49-44ad-9792-4f67a5f42dd4",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "32226676-547e-4b23-bbc8-39f8f715ff9d"
        },
        "item": {
          "id": "dd9d47e9-01e5-4c3f-9802-d82ee32830b9",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "2c28a72d-1f17-4023-abfa-55a17d45c5bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85411083-5948-411a-b127-a460b6e3d86b",
        "cursor": {
          "ref": "63286fdf-a559-4e82-8c66-e48882c2c4ee",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "f053855a-c1df-40da-a94e-2e178bdfc7e5"
        },
        "item": {
          "id": "85411083-5948-411a-b127-a460b6e3d86b",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "c6c8dceb-eb15-474a-903c-c591ff076d5d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "673ae008-5f14-4333-912c-4ddb8d441c52",
        "cursor": {
          "ref": "4790462a-b1d2-4314-9c6d-39d2111d2b09",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "7850093c-b6ea-47a0-982e-e607454b2bd6"
        },
        "item": {
          "id": "673ae008-5f14-4333-912c-4ddb8d441c52",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "c0416010-bb1d-4157-9f65-4807f9c82fa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "2f8a7f51-04e7-4c26-8c9e-c851d2fccf2c",
        "cursor": {
          "ref": "65adfe39-b512-46e0-a9a8-1e3b51fefd7a",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "d1db40ca-4956-4222-b0bd-e8ebc720ceae"
        },
        "item": {
          "id": "2f8a7f51-04e7-4c26-8c9e-c851d2fccf2c",
          "name": "credentials_issue"
        },
        "response": {
          "id": "6339c556-e5d8-4dee-b6b0-ad7e14f9343f",
          "status": "Created",
          "code": 201,
          "responseTime": 259,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbb7f615-abc0-4570-9cb3-1cd995cd8e0a",
        "cursor": {
          "ref": "852f010f-2316-46c9-bdbb-d58dfa1e7a87",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "2f4e8f1e-0597-4953-9ce0-fba8ecf40649"
        },
        "item": {
          "id": "dbb7f615-abc0-4570-9cb3-1cd995cd8e0a",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "7e518382-01c9-48e3-ae30-9d797d03cb62",
          "status": "Created",
          "code": 201,
          "responseTime": 268,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "49a2a0df-dc52-474a-b268-c43d84d802be",
        "cursor": {
          "ref": "46a9e0a1-4e2a-43cb-abc6-72fd9b1aa022",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "060c4b86-9a75-426e-a0ea-0711d0a73038"
        },
        "item": {
          "id": "49a2a0df-dc52-474a-b268-c43d84d802be",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "6e4505db-728d-4f6d-8778-2be03d3b6d81",
          "status": "Created",
          "code": 201,
          "responseTime": 253,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "7608560f-df67-44cf-86f4-8f78e87a49c4",
        "cursor": {
          "ref": "b89df874-15e2-4bf0-b5c3-7d1e3dbd7ce5",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "ee9173fc-65d9-4170-91b4-fd60dc3e7365"
        },
        "item": {
          "id": "7608560f-df67-44cf-86f4-8f78e87a49c4",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "0ff6a8a1-30af-4cd4-a0ad-b3e41ef1517f",
          "status": "Created",
          "code": 201,
          "responseTime": 247,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "80655f90-bdff-4b25-a329-4652922a5e44",
        "cursor": {
          "ref": "2dd6b328-09be-4004-ae99-7d0894fdb7a8",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "174d4fb8-19b2-4dc2-959a-16646831528b"
        },
        "item": {
          "id": "80655f90-bdff-4b25-a329-4652922a5e44",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "9da28901-c02e-4265-95be-2611f6db6bdb",
          "status": "Created",
          "code": 201,
          "responseTime": 241,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-11-27T00:36:15.560Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-11-27T00:36:15.560Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "b0d664e3-6af5-414f-859c-5f892a7b2337",
        "cursor": {
          "ref": "6aa37cf0-4e5a-48e7-99d6-29edf0594a2c",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "93752cf9-9623-4b07-91d1-60da2d5a42a2"
        },
        "item": {
          "id": "b0d664e3-6af5-414f-859c-5f892a7b2337",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "42fe83f3-c63b-4d65-827e-a4362da330b0",
          "status": "Created",
          "code": 201,
          "responseTime": 260,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0da8e2d8-21bc-4434-b1e3-b12f2f335ea5",
        "cursor": {
          "ref": "6c7598d4-e708-431e-8ed8-9211ae624bdd",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "4051ef12-29bd-44d1-83f5-7e19a700da41"
        },
        "item": {
          "id": "0da8e2d8-21bc-4434-b1e3-b12f2f335ea5",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ea526b59-375b-4169-b5c6-9fe2e156ebf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09177215-1566-4938-a831-cf4ebcc8d776",
        "cursor": {
          "ref": "daeb0405-5213-4f3c-8b83-de5ddc1d25da",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "f27df9d3-341f-41cb-96b3-d72a37cff5b0"
        },
        "item": {
          "id": "09177215-1566-4938-a831-cf4ebcc8d776",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "08de9be5-82d5-4126-be9b-7ff0486234b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a96d1069-0fd9-4595-8656-2bd446d6c682",
        "cursor": {
          "ref": "0b549292-8ab9-4086-90bb-6b120de2cde1",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "99a39d5b-6506-4084-82c2-79e17a4d0a69"
        },
        "item": {
          "id": "a96d1069-0fd9-4595-8656-2bd446d6c682",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "d5ee88f5-9d66-4d03-ad3c-0a8492362600",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54df25e0-0b8a-48c9-a03f-9b1e4a873fca",
        "cursor": {
          "ref": "82c2d849-2749-490e-8f78-e6b6b99eb3c8",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "6b51789e-8b66-478d-a5dc-ab796fc292d6"
        },
        "item": {
          "id": "54df25e0-0b8a-48c9-a03f-9b1e4a873fca",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "b856cffb-8deb-45d9-844c-837d5bc31bd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09da12b8-a717-4fcb-81b4-1aa9d7f941a0",
        "cursor": {
          "ref": "c0c8e5f3-e6f0-4905-80b2-7a2b1bd7bfc4",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "89cc6aec-021e-44ea-99ea-34cccc299d0c"
        },
        "item": {
          "id": "09da12b8-a717-4fcb-81b4-1aa9d7f941a0",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "4cf2f223-7990-405c-a56e-4db2db6d77d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e86e5dd8-ea26-40d9-adf7-70d52e468def",
        "cursor": {
          "ref": "a83e679a-7093-4073-be9b-325f7cf5bef1",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "b969e100-477d-46b5-ac9c-7dbf8811e0e0"
        },
        "item": {
          "id": "e86e5dd8-ea26-40d9-adf7-70d52e468def",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "db9e8c76-d28f-4098-a603-4db8fac60274",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6c05ebf-2d2e-41db-bf81-de72a61a57a1",
        "cursor": {
          "ref": "061d14fc-cd67-4581-a9f0-27c431c1a726",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "48c39718-f35b-4505-a0e9-de7c93577a08"
        },
        "item": {
          "id": "d6c05ebf-2d2e-41db-bf81-de72a61a57a1",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "f51a5e5a-e608-4008-a992-780ada72bde6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "090fcaa1-6a0b-4dd1-b36a-ec8e04a2b1b1",
        "cursor": {
          "ref": "765e854a-6a3e-46c7-b95a-900b4ad34caa",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "6809741b-a43f-4ac9-a2ff-ac37559c4578"
        },
        "item": {
          "id": "090fcaa1-6a0b-4dd1-b36a-ec8e04a2b1b1",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "56471dab-2d1b-4832-b94a-5c1ecf4a73d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09ea3bd0-d9f1-484d-9473-549097668136",
        "cursor": {
          "ref": "9bef3024-b05c-46e0-a2d1-13f9f3a43232",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "11faa5b3-8b4e-4d89-8a4a-a57b9eceaddb"
        },
        "item": {
          "id": "09ea3bd0-d9f1-484d-9473-549097668136",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "c9dc9f59-30bf-41ae-8585-381f6c4706a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9969a3bf-54a1-4a2f-9617-ebfeafea4e40",
        "cursor": {
          "ref": "b341e7db-8577-4422-93d1-3a653d7b132a",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "9afa2d9f-3243-4bde-8cc9-2959237a643c"
        },
        "item": {
          "id": "9969a3bf-54a1-4a2f-9617-ebfeafea4e40",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "abce75f1-93f2-470f-9708-9ebee031c3f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15e732bb-05d6-4dc5-86d3-4f6595a27e52",
        "cursor": {
          "ref": "5c76bc4d-f4f9-41db-8b19-1a6fbceaa488",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "5d8ab0eb-2b64-4b9e-ada5-b421cf09436d"
        },
        "item": {
          "id": "15e732bb-05d6-4dc5-86d3-4f6595a27e52",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "4a6dda0d-b82f-4623-a9b3-d10cd0793af4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22520313-4003-4579-90e5-e3539fa70726",
        "cursor": {
          "ref": "7c41c00a-abdf-46d9-827e-5662f12a2cc7",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "58032ba7-f12c-4df4-9db2-d6708f6ab7ef"
        },
        "item": {
          "id": "22520313-4003-4579-90e5-e3539fa70726",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "6462a2aa-14a8-442a-ae06-202944cecc13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e94c0e3-6cf3-4ae5-ad8b-f7543992be7a",
        "cursor": {
          "ref": "621b4177-7c61-4987-bbcc-c0d08614ca4c",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "6e4a9e08-7b5a-48da-a1fb-bce6da6b6063"
        },
        "item": {
          "id": "2e94c0e3-6cf3-4ae5-ad8b-f7543992be7a",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "f7a73129-4e5d-4492-9cce-847a4ee55032",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ae27137-e5ed-4304-be4a-3d615495b0ec",
        "cursor": {
          "ref": "e96e4f04-9e34-42bb-906c-a6c0e55e2b8e",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "b58f9e93-dd5c-4e15-80cf-9f0169f44d8a"
        },
        "item": {
          "id": "2ae27137-e5ed-4304-be4a-3d615495b0ec",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "71fb0e94-cdde-45af-82f6-660354231a52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5a8e393-9c42-4a27-b278-c94ebb07633b",
        "cursor": {
          "ref": "74b31904-6a9a-4301-8ad4-8ae7ddc40636",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "9fb658e8-d0f9-4467-8189-37a82829e842"
        },
        "item": {
          "id": "c5a8e393-9c42-4a27-b278-c94ebb07633b",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "671b6612-95ec-4782-a9d1-afcdd3480823",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52685d9f-b8c7-46e1-b133-f71e9e31bdf2",
        "cursor": {
          "ref": "72495a87-9053-4e4b-baf8-89e287121e5b",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "99518dff-7d4d-44a4-b628-b7024da6b581"
        },
        "item": {
          "id": "52685d9f-b8c7-46e1-b133-f71e9e31bdf2",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "9c1d0eb8-d3df-441a-833c-59bba57b4f43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d99de99a-7712-4401-85f6-d08b40d9d30b",
        "cursor": {
          "ref": "cb42326b-b0a6-4d21-a42e-a5eb83118244",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "77f04aca-b1b1-4d3e-a80a-d4e74af0ecd0"
        },
        "item": {
          "id": "d99de99a-7712-4401-85f6-d08b40d9d30b",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "4534bc30-f7be-4128-b927-a00e08001ba2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a44f383-7742-4ed9-890a-1ddbdaf7ef24",
        "cursor": {
          "ref": "2454b330-011d-4a93-9ea3-67497334e015",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "ed43a4db-8a00-47e6-9f8d-7c5275b845f0"
        },
        "item": {
          "id": "5a44f383-7742-4ed9-890a-1ddbdaf7ef24",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "0cbdbe82-1356-407e-853e-22d17f25cce9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "832e38cb-6003-4393-b834-feec3497fc73",
        "cursor": {
          "ref": "621f6eff-510e-41d2-b1f5-d9fd45a9fb25",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "1cbf5bc0-ff5d-44fa-8a55-832d971ed8bd"
        },
        "item": {
          "id": "832e38cb-6003-4393-b834-feec3497fc73",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "e563758b-6f59-4e70-86ca-d5ce2628c2ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c66ca437-4961-44a6-8242-b015dad7ce23",
        "cursor": {
          "ref": "0ae7e31b-4605-4fd5-bf7b-992a3930a2f1",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "7e379de9-aa67-4c99-bde6-1daf374c9044"
        },
        "item": {
          "id": "c66ca437-4961-44a6-8242-b015dad7ce23",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "daf5987e-48c4-4b42-a620-3b0bf32e8e81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d9d09dd-9333-4bf2-8d78-8f5f05ffbebf",
        "cursor": {
          "ref": "1517eaca-5f90-4910-b7a1-8cc460bd1a43",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "79e631ca-80bd-408a-a729-a94abf0c3b3e"
        },
        "item": {
          "id": "0d9d09dd-9333-4bf2-8d78-8f5f05ffbebf",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "12f6c961-644d-4cfe-a8c4-105c0205d5f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e9634d3-3580-4924-bb5a-69463fcf05b9",
        "cursor": {
          "ref": "14f04d2d-d250-4736-9f4c-644584d825b6",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "065d83b0-4384-403e-beec-604604b593db"
        },
        "item": {
          "id": "9e9634d3-3580-4924-bb5a-69463fcf05b9",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "f294626c-4179-43d9-b90b-1ed17b8cc4bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a05cdba5-1374-4dd6-b54c-7c061343b461",
        "cursor": {
          "ref": "452cf421-58b0-4e49-978e-2321fb471c70",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "2e8c276d-5b34-4d84-a9ed-4d17e773ad2f"
        },
        "item": {
          "id": "a05cdba5-1374-4dd6-b54c-7c061343b461",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "e64e67eb-7698-4b69-a540-23635281f9a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b91522ad-2e75-4b79-8e80-a8d54a6b543d",
        "cursor": {
          "ref": "1b0f3f00-d5d2-44f1-b245-a9d690a3a679",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "70306b77-3b50-488f-ba18-ea183287ecc4"
        },
        "item": {
          "id": "b91522ad-2e75-4b79-8e80-a8d54a6b543d",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "974de51e-6ab7-4d9b-9b48-fc903bab2f83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "113d6ecd-d8c1-47aa-bb37-27215fde68e7",
        "cursor": {
          "ref": "6a0f4ad6-5f2d-435a-bc82-0a4488cd1b7e",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "09f1cd2c-1099-4f7d-a7cb-8dafad334194"
        },
        "item": {
          "id": "113d6ecd-d8c1-47aa-bb37-27215fde68e7",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "9ef37f62-5046-4a21-a760-e19b77974142",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e92e864-63fc-42f5-940d-c2056095be97",
        "cursor": {
          "ref": "520f0701-76a5-4520-b0ae-6a3a3904223d",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "6071879a-818a-429a-aab6-4c6710b8a53c"
        },
        "item": {
          "id": "9e92e864-63fc-42f5-940d-c2056095be97",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "27f2d82d-1892-4d6a-9094-0e548ea4d3da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84474560-18fb-469f-9b62-f1cded48607d",
        "cursor": {
          "ref": "babdf431-62ec-406c-b1b0-77657ea4220c",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "afbc7d2f-b2a6-41c1-9ba1-0710451ea211"
        },
        "item": {
          "id": "84474560-18fb-469f-9b62-f1cded48607d",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "3fa58a19-6db7-4108-b461-98a052f22059",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64e9d79d-db20-49bf-a15d-6ca0a8ea199b",
        "cursor": {
          "ref": "3d9d648d-b5ec-4727-aac4-9ab3754ceb50",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "2f002e33-f5f0-438f-8b9d-73aec4664d40"
        },
        "item": {
          "id": "64e9d79d-db20-49bf-a15d-6ca0a8ea199b",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "a469c1e1-9ca7-45f4-820d-40aeb50ddce2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be7e94b5-a97d-4b9f-a9ca-4e5196ed9989",
        "cursor": {
          "ref": "626a6975-7236-4e74-85d7-2db27fc9c29d",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "e1af6576-2445-4e13-9f9e-f69ee21c942c"
        },
        "item": {
          "id": "be7e94b5-a97d-4b9f-a9ca-4e5196ed9989",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "fda0c163-d51d-4252-8cab-0621094770ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "255598f2-bb3f-481b-9fa8-de77a8ac7b42",
        "cursor": {
          "ref": "90680030-f3b6-4f8f-a66d-0dfd77a1a802",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "d4f0feec-78f1-4e9d-b3e7-b20fdc0e9e18"
        },
        "item": {
          "id": "255598f2-bb3f-481b-9fa8-de77a8ac7b42",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "788ccc0a-8d76-4532-85e6-443a883b5926",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66048e44-8494-46c4-b0c9-8f821a27d98f",
        "cursor": {
          "ref": "48e494ea-f5da-4b09-8a52-f3cd6a7708f8",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "bfedca99-97a6-4822-af2c-b6597c7d01ac"
        },
        "item": {
          "id": "66048e44-8494-46c4-b0c9-8f821a27d98f",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "1f4fe0a7-7b81-4c9e-94f6-a3e5b22c530a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb115440-0863-4360-bfd8-bf030be84910",
        "cursor": {
          "ref": "d67cf4cb-7dbb-42a6-bfde-3625671bad2f",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "cf15416d-ab39-405e-adb4-ebe601acfd85"
        },
        "item": {
          "id": "bb115440-0863-4360-bfd8-bf030be84910",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "02a50ea3-f5ae-47be-bcc9-466a0a285d41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd69ded8-9500-43e3-9b45-d26bd06226f8",
        "cursor": {
          "ref": "6e7851ec-cd69-46d5-ad8d-9dbebc4334c5",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "d722d586-229d-46f3-bce7-a1a74e5146e5"
        },
        "item": {
          "id": "dd69ded8-9500-43e3-9b45-d26bd06226f8",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "30889a5e-ad32-424a-a69b-40428fdbd68b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f7b9d83-a98c-4a08-9192-6cf77ce27a55",
        "cursor": {
          "ref": "033f5864-bea6-4b42-a819-9aad7a92ab4b",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "383bd4a1-b3db-4fc9-b52d-d891b6d12c82"
        },
        "item": {
          "id": "5f7b9d83-a98c-4a08-9192-6cf77ce27a55",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "11c82f0a-7cad-4759-a0e5-8b0fbd575ce3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc22582c-15a6-495d-9494-780bc61aff30",
        "cursor": {
          "ref": "483d5d59-4aea-4ab0-be72-bab715815b44",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "cd4ef74d-f460-47a4-8c70-44d90ae0e228"
        },
        "item": {
          "id": "bc22582c-15a6-495d-9494-780bc61aff30",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "c1341ef6-86f2-4199-86df-fa3aa93d182b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94f8cb16-f123-4d15-bd7e-879d526dda45",
        "cursor": {
          "ref": "4fdd1c6e-8f4b-45c7-b0b9-f145bf398c47",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "a0a5e7c9-47b4-4e09-aec5-8275439f08f9"
        },
        "item": {
          "id": "94f8cb16-f123-4d15-bd7e-879d526dda45",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "9b190e4e-6e79-4873-a8c0-4fee6a1cd861",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca6a2b1d-6e6a-44c0-89c8-0e67d98fd0f2",
        "cursor": {
          "ref": "8a838bb4-89d4-42a9-8a1c-d084d45554de",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "f347f292-dc78-4bae-9ea0-5e68f1563443"
        },
        "item": {
          "id": "ca6a2b1d-6e6a-44c0-89c8-0e67d98fd0f2",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "02342db4-3b0c-4a84-82e3-8117b5283000",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19145081-7b72-4bd4-b010-14f80e249257",
        "cursor": {
          "ref": "4ccc6a29-773d-4d0c-a86e-d03456bbd959",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "d41fb25e-d4df-4312-9c62-7a065b97a782"
        },
        "item": {
          "id": "19145081-7b72-4bd4-b010-14f80e249257",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "f759f808-9cd9-463f-9111-3b3a1ad3f79c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5476f388-516e-41db-a85d-975d960e0330",
        "cursor": {
          "ref": "557c0cba-f53e-49be-b363-b57f575a9090",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "9313e1a4-7144-4a4b-a08d-be1050ee00d5"
        },
        "item": {
          "id": "5476f388-516e-41db-a85d-975d960e0330",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "417a0f43-abdd-4ce2-b374-67fb740282b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51334be7-49c3-4fca-bff1-4c588807883c",
        "cursor": {
          "ref": "0de350eb-a263-4cfd-9a4e-21bc244ee0f3",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "3f632291-2c3e-4279-8c4f-f60039bbd278"
        },
        "item": {
          "id": "51334be7-49c3-4fca-bff1-4c588807883c",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "a6851b59-824b-43ab-990d-b1fc7180bf54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a5a420b-dd95-4ef5-9cc7-fca182520ef5",
        "cursor": {
          "ref": "b00b0b52-77fa-4737-adba-2010a65cc730",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "7132ef28-9dd4-4db5-9786-f265dee535eb"
        },
        "item": {
          "id": "1a5a420b-dd95-4ef5-9cc7-fca182520ef5",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "23caf329-e200-4dad-9118-3db7635a37bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe6dd5e4-1785-417a-b3f9-5225c0ab86b6",
        "cursor": {
          "ref": "e9583b58-f254-4f4f-a95a-346534bd04f4",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "c7367ea2-272a-4ea0-98ef-3269b3a6a8e3"
        },
        "item": {
          "id": "fe6dd5e4-1785-417a-b3f9-5225c0ab86b6",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "bfe7595b-2fd8-4fe0-b856-fbb9dab4ef70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5b250cb-fd48-4f8b-8913-9efcefc9df5f",
        "cursor": {
          "ref": "de55148e-dfc5-478a-9e14-c8664dd87ff8",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "0f20f540-0415-4015-95ab-bc4f57180fa5"
        },
        "item": {
          "id": "c5b250cb-fd48-4f8b-8913-9efcefc9df5f",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "46e037f2-101b-47fd-b1b1-271a09a2dd93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8384f6d-83e5-46c4-97c3-784d3793276f",
        "cursor": {
          "ref": "ae5083a0-dd9d-4af6-9255-ec51a804d6cc",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "7e9e8c96-bad0-4abc-9092-46c674ea45dc"
        },
        "item": {
          "id": "d8384f6d-83e5-46c4-97c3-784d3793276f",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "891fa5ca-13f6-4c1d-9f1f-f3679a8fc1af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "312e292d-7193-44f3-8eb4-031c5662dff5",
        "cursor": {
          "ref": "8aa30f8f-d22b-47a1-a94e-dbb81ca946eb",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "cc57a2b0-eb09-4020-a3ba-fec2268cc391"
        },
        "item": {
          "id": "312e292d-7193-44f3-8eb4-031c5662dff5",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "a3d30477-ebd0-4122-a571-cc608896808b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ccfcf3c-37b8-442d-903d-13f6911b340d",
        "cursor": {
          "ref": "c88f89b5-1396-4bb7-817a-15112acc41c4",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "3c38d7df-6e3f-42c6-872d-b7d92e1cc95c"
        },
        "item": {
          "id": "2ccfcf3c-37b8-442d-903d-13f6911b340d",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "29bf006d-12d5-4368-aacf-c4b2f683e425",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc4cb050-7239-479c-b707-2532a0b1ff78",
        "cursor": {
          "ref": "ddaa0003-8cf7-4f5d-b25e-382af15dc1ea",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "076ee3a9-d1ca-4750-982a-31fc2d844cb1"
        },
        "item": {
          "id": "fc4cb050-7239-479c-b707-2532a0b1ff78",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "974a8d98-d416-4858-829d-c8b7289730b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cd962d2-2505-4f95-adbb-733177514f1d",
        "cursor": {
          "ref": "9c56b95e-5145-44e4-adc0-c234885d9a1f",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "c70cf910-f422-4248-873f-ab0dadc76b48"
        },
        "item": {
          "id": "5cd962d2-2505-4f95-adbb-733177514f1d",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "7738add2-e7d5-4478-87f7-8e39a186a45f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52183c81-1a78-42fc-b711-9c838ee8753e",
        "cursor": {
          "ref": "5d5a9acf-75cc-4c02-9364-2ff330ca0090",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "1acc891d-a69e-45df-8677-b52845d0cf57"
        },
        "item": {
          "id": "52183c81-1a78-42fc-b711-9c838ee8753e",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "11f94ce7-f177-4902-a171-b1fb3d1bd115",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40f8d509-1fd7-48b9-a3d7-8d589ce2f9b9",
        "cursor": {
          "ref": "8c1aa4be-7fdc-4515-a66c-98d1da24d32d",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "8eadcdca-8451-4862-9944-6903f7699113"
        },
        "item": {
          "id": "40f8d509-1fd7-48b9-a3d7-8d589ce2f9b9",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "db7277d1-4e0a-48fa-b929-52fdf2f6add4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "302778a7-04c3-4372-aaad-fd64f18e9e2e",
        "cursor": {
          "ref": "77858ba7-e047-4688-b669-3ae3630053d7",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "4bc77093-d6dd-4acf-8ee2-d16f1f95b194"
        },
        "item": {
          "id": "302778a7-04c3-4372-aaad-fd64f18e9e2e",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "d14b7cfc-3233-44e5-9977-cf15bb36d560",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b98b529-8067-4046-947c-efc0038ed75b",
        "cursor": {
          "ref": "3677b368-b032-4504-bdb3-39f0f430251e",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "3f8011f0-8c85-424e-ba1b-bd58bda29dba"
        },
        "item": {
          "id": "1b98b529-8067-4046-947c-efc0038ed75b",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "60f07013-c1cf-47d3-bdce-48aa429fadbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6127fc91-db91-4ef9-a785-8b6df92e38e0",
        "cursor": {
          "ref": "e435325e-2f4d-48d5-b998-d592f9c04e04",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "d3f53eec-5a9f-42e0-a6ed-300596773c01"
        },
        "item": {
          "id": "6127fc91-db91-4ef9-a785-8b6df92e38e0",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "671004a5-62d3-4e27-bcdd-c4938609d89a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "918c02f4-1f95-466a-a154-a550ceee5bac",
        "cursor": {
          "ref": "c46f1672-3d93-4867-a5de-5c6f620ee995",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "11b16e97-c392-46db-a64b-8cdf29462923"
        },
        "item": {
          "id": "918c02f4-1f95-466a-a154-a550ceee5bac",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "ad593f31-1444-4f76-9671-83347443b2c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ed408e0-6469-4bc9-9335-719b96559b3a",
        "cursor": {
          "ref": "a07dfdd3-ac65-470d-bc76-5cafd7dce5ca",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "333943f6-ccea-45d4-82fa-43bbb3f93283"
        },
        "item": {
          "id": "8ed408e0-6469-4bc9-9335-719b96559b3a",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "735a0bba-6c83-435e-973a-d636a1a2281b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dab43afc-71f1-4339-b9fa-f772ed44f1e1",
        "cursor": {
          "ref": "ad38bdb5-53e0-46db-9529-8e5a0e2e98ef",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "f2cd0d28-dcf6-46b7-adda-09d4e3879d86"
        },
        "item": {
          "id": "dab43afc-71f1-4339-b9fa-f772ed44f1e1",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "81b3611d-b731-43d5-811e-2d1580a3c06e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a679e759-5f3b-4d0b-bcef-b0ac044bf6eb",
        "cursor": {
          "ref": "a6a6bd3a-b05a-48e4-9392-38d0802d57e4",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "7f163c15-921f-4c7f-8dd6-e5baa52492e3"
        },
        "item": {
          "id": "a679e759-5f3b-4d0b-bcef-b0ac044bf6eb",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "e26cd09f-6fe6-4e06-bd19-991a601935ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "991ee0cc-66e6-4df0-b11e-09d5f9f97b02",
        "cursor": {
          "ref": "f52c4863-89b3-40a4-a7c9-727354445252",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "774bb04f-9ec3-48bc-9870-a65dbf62edc4"
        },
        "item": {
          "id": "991ee0cc-66e6-4df0-b11e-09d5f9f97b02",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "a80ffd99-b072-40da-b539-13445ac93008",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47066632-fe53-4e73-8a7a-0302163fafcd",
        "cursor": {
          "ref": "43f2ce15-5b7c-49b8-8789-7307c6a0135e",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "c2124bda-37cc-49cb-910f-5e85e1298c01"
        },
        "item": {
          "id": "47066632-fe53-4e73-8a7a-0302163fafcd",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "1b18af39-f633-4248-8a86-5f51f613f099",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d5323bb-fb16-497d-88f4-3496b36e9597",
        "cursor": {
          "ref": "d53e2169-c7b9-49fa-a0e0-f17b958f8657",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "03bd2414-d530-4be2-b35c-d4f9958c6824"
        },
        "item": {
          "id": "8d5323bb-fb16-497d-88f4-3496b36e9597",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "f95a0b5f-a997-4da9-a17d-dba8a2c97466",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f23553e-d739-4ff5-8911-e120584f7068",
        "cursor": {
          "ref": "ffb7b9b8-f677-478d-bb76-b3b6ebca9fa0",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "228b11d1-9c48-471d-ae56-e3869f723ad4"
        },
        "item": {
          "id": "7f23553e-d739-4ff5-8911-e120584f7068",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "8f37eaaa-5755-42d0-a0f2-02cc236e8123",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba1733a8-003b-4056-a96d-d0cf4a2004da",
        "cursor": {
          "ref": "7ea9de82-ee4f-48e5-bb32-d271fe6ffbbe",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "c430b4c0-d90f-4053-8152-2e549af7cca0"
        },
        "item": {
          "id": "ba1733a8-003b-4056-a96d-d0cf4a2004da",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b7865001-cd26-4f73-85ec-d7d30b68f136",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dc80b6f-87ac-4783-b709-0f1e1df77760",
        "cursor": {
          "ref": "a5826a76-d39e-4e14-9cdb-dd023fd8fd89",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "da21fb45-f7fe-4eaf-8bfd-24afc73fc396"
        },
        "item": {
          "id": "9dc80b6f-87ac-4783-b709-0f1e1df77760",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "5771094c-b95f-4c5f-b773-37d476b3dc0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60506b3a-e011-4e57-9168-5c73606626cc",
        "cursor": {
          "ref": "d84fb176-23a3-4c0f-9801-2002953a324c",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "a85c8366-c092-407e-8fed-7e8a3fe3c4d9"
        },
        "item": {
          "id": "60506b3a-e011-4e57-9168-5c73606626cc",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "a4165dfd-11b9-4e8b-b8e8-5443db0c0746",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5938f85e-7bed-4fc7-9eb3-995b69eb027f",
        "cursor": {
          "ref": "77288214-9c68-41e4-8dea-81a9757ab5e0",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "73e9ceef-2050-4ae9-87de-609d9295077d"
        },
        "item": {
          "id": "5938f85e-7bed-4fc7-9eb3-995b69eb027f",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "a6d3705e-96ac-4384-9f6a-f544dab3c7e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0e5a9f7-a3ca-4487-9f23-cee0124f5822",
        "cursor": {
          "ref": "6f8067db-bb5e-4e2d-8621-2ff52f5650b6",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "eea370c3-d804-4b03-8bb7-17a3df26e6a7"
        },
        "item": {
          "id": "b0e5a9f7-a3ca-4487-9f23-cee0124f5822",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "a3711544-f795-4240-a0a0-1910b35b6940",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfa5be12-ded3-4d37-b3de-d51cd80aa14a",
        "cursor": {
          "ref": "cf36c79d-880d-4fe0-b6a4-7d420ef60846",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "4742f9da-1ee0-4005-8ef1-118aecbf0d24"
        },
        "item": {
          "id": "cfa5be12-ded3-4d37-b3de-d51cd80aa14a",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "d0e80c74-078b-4692-8ece-b0f8c25852f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aab2b264-2518-41fb-b9f8-6827da5c4681",
        "cursor": {
          "ref": "bd022434-ab3c-436b-8b03-084bd77a442a",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "98a9e126-0e27-46d6-92e8-22edf2a040ab"
        },
        "item": {
          "id": "aab2b264-2518-41fb-b9f8-6827da5c4681",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "121096c1-9f07-48fd-9b0f-d53590713415",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18a863f8-1f79-477e-aa50-00b7c214915e",
        "cursor": {
          "ref": "c6464b83-22c2-4de5-9eac-2e34aeb09c00",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "901a0107-ae46-4489-8c62-ce63f6dd5397"
        },
        "item": {
          "id": "18a863f8-1f79-477e-aa50-00b7c214915e",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "686366d7-d76f-4b62-a458-9c6340c1e261",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6902962-c8f7-4922-a921-35b7694b7748",
        "cursor": {
          "ref": "690a8fee-3b15-4d9c-877f-3ebecf4a2e99",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "94b0ea1d-4d51-41c5-8cf8-a2879431f94f"
        },
        "item": {
          "id": "c6902962-c8f7-4922-a921-35b7694b7748",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "f3e24f88-38b0-467b-8099-c9f34a7a0dc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20fc199d-ef6e-4881-b46d-87bb73f2ff90",
        "cursor": {
          "ref": "f4152ecd-d6d7-4a8a-adb0-6d5e53735e46",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "2875af21-596c-4cc8-ae69-4f59df95c720"
        },
        "item": {
          "id": "20fc199d-ef6e-4881-b46d-87bb73f2ff90",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "9c4b4af1-22ec-4d97-95a8-837f10b25a3f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6024b256-8049-405c-9f38-b5e0be2d8544",
        "cursor": {
          "ref": "2ac4cc09-d4c9-468b-99af-67863a679c1c",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "82ee3049-7600-4173-8a20-e71f74d9b5f1"
        },
        "item": {
          "id": "6024b256-8049-405c-9f38-b5e0be2d8544",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "5e4b7371-29fe-4d0a-bf5c-9c4793a493d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f346d982-e322-4674-8e01-00fc6e0ce59f",
        "cursor": {
          "ref": "8b888f73-9735-41ec-8dd7-8494284486e0",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "9ae72ddf-4db2-41fb-bac0-3e4dcb2f293c"
        },
        "item": {
          "id": "f346d982-e322-4674-8e01-00fc6e0ce59f",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "57d4b219-19b0-4418-8bd5-3ac5181ba642",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1068a9c4-4147-41f3-89b1-3c2df42046a1",
        "cursor": {
          "ref": "8bb7b89b-6705-4670-876b-6c831a6ad657",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "0b94fb71-ef93-4788-a0ef-45fffde26087"
        },
        "item": {
          "id": "1068a9c4-4147-41f3-89b1-3c2df42046a1",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "d76b6841-9c3b-4d4f-a7d2-178166e61c1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "342b1d1d-7066-44e6-8726-4e9ff2620ba1",
        "cursor": {
          "ref": "b6797531-6fe0-40f9-a441-93cbdf6e26ae",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "d49f10f5-a82b-4ab3-a912-95f0b631c6e6"
        },
        "item": {
          "id": "342b1d1d-7066-44e6-8726-4e9ff2620ba1",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "27bbad44-8613-42d3-9161-f31609daa19f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1af18598-e513-4806-854b-bec6adea5d4f",
        "cursor": {
          "ref": "e23d50f4-2a06-4a41-86d7-e8a1fd4d3724",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "9e3c132d-30d7-4bbf-861c-b45ab2dd2ce6"
        },
        "item": {
          "id": "1af18598-e513-4806-854b-bec6adea5d4f",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "8dd2f882-7819-4879-ac77-79743d59c95d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc38fd58-048e-4231-af04-e1d5060b9f94",
        "cursor": {
          "ref": "da4f7caf-be5d-450e-a4f3-1e5d69b0a41b",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "f8199536-98fb-4fc5-bd3a-2d742e3e6bcb"
        },
        "item": {
          "id": "bc38fd58-048e-4231-af04-e1d5060b9f94",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "eefb96a2-c911-48a8-9692-53feb7512e4d",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "cb3a2452-3623-4937-81e7-1bbb7b9fbf9f",
        "cursor": {
          "ref": "7f6c0d55-262b-413f-9c9d-f0cee5931a00",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "885c8cb5-fd57-426e-aab5-533da1b39c33"
        },
        "item": {
          "id": "cb3a2452-3623-4937-81e7-1bbb7b9fbf9f",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "4092d9a6-5ee5-4a57-bfb7-dbdb8a777e7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba1da7e6-1a68-4ef8-94e1-8d38374cae99",
        "cursor": {
          "ref": "6c520f79-247a-4e42-b145-eeb5c9a8233d",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "8094286d-cb38-451a-ac08-3cc180429116"
        },
        "item": {
          "id": "ba1da7e6-1a68-4ef8-94e1-8d38374cae99",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "8b2fd423-2636-4642-8c02-ef55352d38f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7621ff2f-aebf-46a9-a28a-4e466136a839",
        "cursor": {
          "ref": "8f491df7-a596-4605-b21c-446b78e39030",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "4f360f68-f68d-492a-8ac2-90748831a239"
        },
        "item": {
          "id": "7621ff2f-aebf-46a9-a28a-4e466136a839",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "037661a3-1ca1-4b90-b505-87d19911b196",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42e67a4d-047d-484b-825b-109f9e8c6381",
        "cursor": {
          "ref": "daff10c5-d8df-4db6-9291-b67068d3e905",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "cdfb1d2a-0fc8-4c00-a7fc-8973150dcdf0"
        },
        "item": {
          "id": "42e67a4d-047d-484b-825b-109f9e8c6381",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "7071cdf2-c4a4-4834-a51a-68081e6f7654",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07b8864a-b7f9-4ff7-b226-749954b4e02a",
        "cursor": {
          "ref": "07a7a9a1-c595-41bc-b9d4-bdbe381e548d",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "4d1d5d05-fcb5-4dd2-9898-0b1b445d6aef"
        },
        "item": {
          "id": "07b8864a-b7f9-4ff7-b226-749954b4e02a",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "b5ddec67-bc4c-4b4f-9aaa-b2244f83e3f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7a013ff-ee81-4bd5-a1f6-7d218c28fbc3",
        "cursor": {
          "ref": "cf7514a3-3786-4665-a23d-f78a75b9c0c9",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "edfe74a5-b388-4432-b983-893744db4b97"
        },
        "item": {
          "id": "c7a013ff-ee81-4bd5-a1f6-7d218c28fbc3",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "638e8328-5dc4-41db-859b-45d13e3a0167",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28ac3752-904a-46c2-b47e-b83ef3390c15",
        "cursor": {
          "ref": "e0ec3715-49b3-4abf-8a41-8e8a5879003e",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "d6820d1f-5b68-417f-b0df-5f53e0a074c1"
        },
        "item": {
          "id": "28ac3752-904a-46c2-b47e-b83ef3390c15",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "563901db-2716-46e9-854f-24a8f2aea3b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a578ef9f-70d0-49d2-b8aa-0cd9e4fbb44d",
        "cursor": {
          "ref": "ba78913b-5c1f-468d-b8b2-3b1048f45827",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "2f4e6a9e-34ab-4447-a829-4c74a7ad902e"
        },
        "item": {
          "id": "a578ef9f-70d0-49d2-b8aa-0cd9e4fbb44d",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "f5daee5e-3f7e-45db-b4f2-3b2348eb7fb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a03ef24d-c188-46fa-aa7e-0be49511a8f4",
        "cursor": {
          "ref": "8e2fb328-5784-42a1-8fd7-099e501e8a38",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "cb65a33e-b5e9-4f71-82ff-269fce411ecf"
        },
        "item": {
          "id": "a03ef24d-c188-46fa-aa7e-0be49511a8f4",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "6fb94296-927c-47d2-8203-be2876f4ba16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1be1bc96-e308-4d39-99db-0129ef41c102",
        "cursor": {
          "ref": "519694c9-0ced-4f30-9053-74a7f8cb514f",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "91edc9b3-6c1f-4af3-ad95-d2c58cc5b4f5"
        },
        "item": {
          "id": "1be1bc96-e308-4d39-99db-0129ef41c102",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "9bf7ec78-22dc-4b2b-8176-eb253efc8392",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "366538df-e2bd-47e3-8a73-1f2f18653eb2",
        "cursor": {
          "ref": "d7c250d7-2de3-4aae-87ef-22019a626e06",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "bd672986-beb4-4366-b0cc-d28975754d15"
        },
        "item": {
          "id": "366538df-e2bd-47e3-8a73-1f2f18653eb2",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "f1376495-ed31-4315-9022-a41108aac79a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "280a86de-8420-40c4-b695-d9de9c62b45a",
        "cursor": {
          "ref": "9e7d7d3d-3962-4bc9-bc5d-cb226c5a9146",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "0488a0bb-85af-409c-8edd-9946a0f0988e"
        },
        "item": {
          "id": "280a86de-8420-40c4-b695-d9de9c62b45a",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "31e65a6a-a2e8-422a-ad9c-5e2b156c4fff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57a250ef-ec91-403a-a207-859ec75f9eac",
        "cursor": {
          "ref": "27211b16-bfab-404f-bb98-31c25c913797",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "e2c7e6a2-40e3-4ffe-a6cb-14a83565908a"
        },
        "item": {
          "id": "57a250ef-ec91-403a-a207-859ec75f9eac",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "14cbaef5-ed9c-4a82-93f5-739733629d5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8c8e8dd-1a71-4814-8683-5403d5c9af0b",
        "cursor": {
          "ref": "c73e44f2-caee-4c59-9085-1c3b633ae23c",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "d072001c-37bc-4fc2-bae3-717836403cb2"
        },
        "item": {
          "id": "b8c8e8dd-1a71-4814-8683-5403d5c9af0b",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "312a2daf-e910-47b7-be6f-2d41f1490de2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "728aa91c-3ef5-49c3-a0f4-a7e2d0023091",
        "cursor": {
          "ref": "9bca2504-e366-4613-8046-f947f9157dff",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "4933191f-6e7c-45e2-af42-3ff5c9d4a0b7"
        },
        "item": {
          "id": "728aa91c-3ef5-49c3-a0f4-a7e2d0023091",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "e102f8a2-870d-428e-a483-32d43b695ff7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6edbc10-80a4-488f-ae6b-db6d2c21301e",
        "cursor": {
          "ref": "60001655-2f09-4096-9d8b-a14da0fed8f7",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "76da6a3f-329d-499c-aac3-3efe109bc179"
        },
        "item": {
          "id": "b6edbc10-80a4-488f-ae6b-db6d2c21301e",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "c58de0c4-17a0-4f6c-bc9f-f3562e7a13a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58e40b0b-acd5-466a-b804-45cbeb15ab4a",
        "cursor": {
          "ref": "521a3587-98eb-4ce0-8b3d-5b1d35141c40",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "83bf16c3-cfa3-4371-b9bb-f018160699eb"
        },
        "item": {
          "id": "58e40b0b-acd5-466a-b804-45cbeb15ab4a",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "fb0cd49e-e14f-4ebe-ab45-bf846e146d8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e503388-c23e-48be-81fe-bd5113826cc8",
        "cursor": {
          "ref": "03e0db87-a739-415c-89df-9e9bda4921fa",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "ca7bd2cd-36ba-41db-944d-1cfd2d7d8bc7"
        },
        "item": {
          "id": "7e503388-c23e-48be-81fe-bd5113826cc8",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "a070789c-6b62-49de-9a57-294665d56eaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80a431f4-a362-4f08-a9ec-0040e142a408",
        "cursor": {
          "ref": "f9e8a228-6fc2-4fee-89fb-7e4addfafe0a",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "86a5f3d3-1bb1-4221-89b7-d6090ebb3012"
        },
        "item": {
          "id": "80a431f4-a362-4f08-a9ec-0040e142a408",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "3178c642-89ae-472d-abc1-e6489980f98c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fd88458-d683-4563-8c32-6845a6dc0bd6",
        "cursor": {
          "ref": "7e930302-2b63-4a61-b23a-8b6c04881f3a",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "b389481c-a0bf-4322-bb36-13e3dba1fc56"
        },
        "item": {
          "id": "0fd88458-d683-4563-8c32-6845a6dc0bd6",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "0579526d-9c42-4a65-80c0-656422c95ebf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da55771a-5224-4ded-a896-0b7cf0e3d6ae",
        "cursor": {
          "ref": "1fb43f02-89d1-4ea4-9b47-41e17e982a5c",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "8a8f8612-b34a-4b03-a60c-06b8d4a6574c"
        },
        "item": {
          "id": "da55771a-5224-4ded-a896-0b7cf0e3d6ae",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "c675b89d-a717-4615-bc6c-b6e22a9612f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d506309-6e07-4833-94fb-0aa44613a01c",
        "cursor": {
          "ref": "df9e9291-855e-4078-85fd-f21f42f7b80e",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "72bb943a-8356-4c3e-a55d-d6eaa198784d"
        },
        "item": {
          "id": "0d506309-6e07-4833-94fb-0aa44613a01c",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "53cd2620-c60f-4df3-9421-b26aedbef9ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8789611e-d5c2-436e-a037-6f832dc206b3",
        "cursor": {
          "ref": "8a7fc9b9-0244-4f48-b802-b6ef2c3b2397",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "e241882a-abda-492f-b7fd-23af3d9c1ed2"
        },
        "item": {
          "id": "8789611e-d5c2-436e-a037-6f832dc206b3",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "9eaad83b-0be0-428d-8f84-6085ba55d938",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee49f51a-f078-4f47-bfb8-b744d25a2176",
        "cursor": {
          "ref": "0bde57ca-7908-4801-af94-a119fd305287",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "2a3b595d-efd9-4cf5-af43-c86c7f307dbd"
        },
        "item": {
          "id": "ee49f51a-f078-4f47-bfb8-b744d25a2176",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "7d7a8f03-e985-404d-ae96-e9cfa42eb76e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fc4a834-4ab4-4e26-8db5-0552b00d30d1",
        "cursor": {
          "ref": "dbd26e09-6668-4110-b0df-cdd0726ece98",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "d7ee26aa-a0e3-4dac-9667-1bcfe8aed7b9"
        },
        "item": {
          "id": "7fc4a834-4ab4-4e26-8db5-0552b00d30d1",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "b0c9f293-3b6c-4eec-97d5-b775a6f6bb88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd8b306d-497f-420e-a116-339caf370b2d",
        "cursor": {
          "ref": "0b9d7fc8-97f2-4034-ad34-87d6c1efaa6e",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "3e29a9db-188b-4d77-aa4d-b751e88e2cd8"
        },
        "item": {
          "id": "fd8b306d-497f-420e-a116-339caf370b2d",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "de6dcff9-776a-4ad2-ac4b-33a4e59a58fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "238674a7-db69-4ae8-86bc-3471f810ef28",
        "cursor": {
          "ref": "2b9dc654-7a5d-4c37-b7c3-678cdb58430b",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "1f096ca2-fe84-4a53-b50d-be2e4348228c"
        },
        "item": {
          "id": "238674a7-db69-4ae8-86bc-3471f810ef28",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "93f01c0a-0cc6-483a-8c8c-322bc60a4a36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eba055c0-0fd3-47a2-ba39-961fffddd21d",
        "cursor": {
          "ref": "b27342ea-0400-4a34-9c32-3e1a9d8fe1b6",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "c9506e7f-928f-428a-baf7-11ec65c99524"
        },
        "item": {
          "id": "eba055c0-0fd3-47a2-ba39-961fffddd21d",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "d4a271e6-600d-4980-a809-ab995851f438",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "706274c0-1205-4f6e-87fc-e420fc575d15",
        "cursor": {
          "ref": "17d563ea-7354-45a1-b0fb-dbf4c5ddf89d",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "fd22f0d0-e7eb-47fa-aa57-942f70abe1cf"
        },
        "item": {
          "id": "706274c0-1205-4f6e-87fc-e420fc575d15",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "aa5c32a1-a268-460c-99bd-89596e47b5cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dfa3d53-1a97-44a1-86b3-6e1be6f2a3e1",
        "cursor": {
          "ref": "1ad2b61e-6176-4d53-8186-2e5b60842eb6",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "c56dc778-2f0d-4e6e-88e9-20b2e7857356"
        },
        "item": {
          "id": "3dfa3d53-1a97-44a1-86b3-6e1be6f2a3e1",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "cd654d8c-3935-4530-ab24-a9930b9dc126",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "d36d2a84-5f34-47a0-baa0-a0e43cba14c2",
        "cursor": {
          "ref": "412f5d4a-b1dc-4945-8077-025fe54f8235",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "e9a6f543-cc3b-4d2f-8699-57e3b01eacee"
        },
        "item": {
          "id": "d36d2a84-5f34-47a0-baa0-a0e43cba14c2",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "8d8a2a76-fd18-4bb9-8e6a-e66cc42e678c",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "82a6de4b-0f88-4f8c-b392-3526e690ba81",
        "cursor": {
          "ref": "9e302ac9-0bbc-41dd-915a-4f3ed32946c5",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "8dda6ead-7d41-462f-ac2f-98ee25b28bb0"
        },
        "item": {
          "id": "82a6de4b-0f88-4f8c-b392-3526e690ba81",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "8d48b38d-13b0-4799-8b5d-e33763e6815b",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "1aef337f-80d1-4ad0-b435-aac78a001ce3",
        "cursor": {
          "ref": "f449a556-6f36-462a-8108-91d1b37cc8d4",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "79ff381b-877a-4b02-a24c-d0eb36bc6a17"
        },
        "item": {
          "id": "1aef337f-80d1-4ad0-b435-aac78a001ce3",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "23236b09-fdc4-4935-a60c-dc76730839f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3258d97-c78e-4730-ae38-03d5ace3dfc0",
        "cursor": {
          "ref": "52c28f56-02c6-4061-8230-6c20c96e5c1f",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "c0f04ab8-f37f-4897-9368-e4b3208187d3"
        },
        "item": {
          "id": "f3258d97-c78e-4730-ae38-03d5ace3dfc0",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "bd6e4b23-f09a-4073-97e1-d67cfa622ea1",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "91cd42d7-ecc9-454e-b18e-35b11db68ca4",
        "cursor": {
          "ref": "d377b80e-5860-4000-92f5-ed25e38174a5",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "89866a1b-0564-4851-8e65-b8b9ac907b72"
        },
        "item": {
          "id": "91cd42d7-ecc9-454e-b18e-35b11db68ca4",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "6329d51b-3736-4c00-a9f2-826b5b1ec7f7",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "51107d47-8d59-4e1a-863a-6368a2632e89",
        "cursor": {
          "ref": "23608e00-a454-4297-a29e-82bb56164ac3",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "cb69f8b5-6446-4d03-a310-3cfee2c0ad6e"
        },
        "item": {
          "id": "51107d47-8d59-4e1a-863a-6368a2632e89",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "62d6abbd-6d0b-46db-963f-00fdf6e777bf",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "306762f2-38b7-4b60-a67c-f0876fa01fce",
        "cursor": {
          "ref": "376e1249-656b-4b46-a241-e08b00aa5768",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "f640e84b-47ea-40af-97c2-ca9dcf1970ae"
        },
        "item": {
          "id": "306762f2-38b7-4b60-a67c-f0876fa01fce",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "749bbdf6-2af4-49b7-a7ba-522d4b2c1ade",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "4d7a4c61-d3a1-4d93-87b3-1ab25836bdef",
        "cursor": {
          "ref": "ec59c150-cdc9-46ec-b630-52d26fca1b38",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "9d43c1b1-c739-4a10-8953-93d39ffa4056"
        },
        "item": {
          "id": "4d7a4c61-d3a1-4d93-87b3-1ab25836bdef",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "c1132f74-3165-4979-9c85-2f72a7c61147",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "fbce7233-1ee2-41da-b702-aa40048116c8",
        "cursor": {
          "ref": "b9ae2610-a59e-42c5-824f-502ab0379a75",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "96069136-b4cf-4172-a197-a2464dd1c6b7"
        },
        "item": {
          "id": "fbce7233-1ee2-41da-b702-aa40048116c8",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "30a31a4d-ecce-47c9-8ef2-70c9df95dd76",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "baffcabe-3128-4981-ab1f-31e863ff6817",
        "cursor": {
          "ref": "1b7971e0-9020-423a-972e-54a210952cbb",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "531029a8-119b-477e-bb14-ab09a9c15004"
        },
        "item": {
          "id": "baffcabe-3128-4981-ab1f-31e863ff6817",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "948acbd8-9658-45a8-90ee-29394ab146a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bdf484a-e59a-47b2-87e8-594d4b61ad86",
        "cursor": {
          "ref": "139efed9-c79e-4df9-89c1-32bcc5b22f68",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "436d4285-e229-4156-af07-0ce0e7112501"
        },
        "item": {
          "id": "5bdf484a-e59a-47b2-87e8-594d4b61ad86",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "6d85f4b3-6e68-4bc7-afee-1b81259d1d7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3f6ded0-72f4-4459-95be-2a46bc4d0376",
        "cursor": {
          "ref": "137881a5-583f-4c25-9486-b6d7a3c6150b",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "043a5de7-5cfc-4dfb-a662-17278fe4eb59"
        },
        "item": {
          "id": "c3f6ded0-72f4-4459-95be-2a46bc4d0376",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "a829d0dc-f406-4e60-8970-7353b541f173",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9577790b-1aab-4980-bb8f-a752da4527ab",
        "cursor": {
          "ref": "06fc1e43-11d6-489f-b2d3-b74bd65c5791",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "2141cf01-f363-4d81-89a3-cd5440cbacc8"
        },
        "item": {
          "id": "9577790b-1aab-4980-bb8f-a752da4527ab",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "86c2f114-8b79-495c-ab64-020489c04ae1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc775542-5fcd-414d-bac5-d25a45a6619d",
        "cursor": {
          "ref": "23f0f142-bdcc-4d9f-9ebf-8b86a98e0e45",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "a41ac87e-80bf-4527-bd52-48e70f042dff"
        },
        "item": {
          "id": "bc775542-5fcd-414d-bac5-d25a45a6619d",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "a9802e70-82f4-4184-9f9e-119353f7aaf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8dc896d-3464-41b2-be2d-da0704414da4",
        "cursor": {
          "ref": "5f72e533-fbef-485a-8954-c5efa3be8c90",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "59a650ec-6b6f-45f7-b9db-0359ae5508e4"
        },
        "item": {
          "id": "a8dc896d-3464-41b2-be2d-da0704414da4",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "300d81d0-b6f5-45ea-adf0-5f66d5afd2c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "668c0077-25a2-4fe6-8cc0-30dc82ed4177",
        "cursor": {
          "ref": "68aef51e-c839-4aa7-9d52-fcbd5a4d1403",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "62e2ad2d-3b3a-4670-ac0b-ddd45baa0f62"
        },
        "item": {
          "id": "668c0077-25a2-4fe6-8cc0-30dc82ed4177",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "70adf22e-b7a8-4b63-8a66-8e9e12e51829",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa6f4a60-59e8-47f0-8dea-396b8d1c755f",
        "cursor": {
          "ref": "7a7b90da-126f-4505-9df9-b49829b2e8f7",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "4e240c4f-bcaf-4b67-947a-b5dc937be6fa"
        },
        "item": {
          "id": "fa6f4a60-59e8-47f0-8dea-396b8d1c755f",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "c86aa2b1-3aee-4d46-968b-5fff7a0e5997",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2936d3a3-01db-4be4-89fe-497e88fa173e",
        "cursor": {
          "ref": "842b0850-0a78-46a7-9193-0e6f44737cf9",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "cd0a2c51-1851-48e6-8cd3-0b6fbbc0a04c"
        },
        "item": {
          "id": "2936d3a3-01db-4be4-89fe-497e88fa173e",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "c23ec1ff-9781-47e0-88bb-9eae8387c7a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b378c90-d755-418f-9e9a-347c7f5b63f8",
        "cursor": {
          "ref": "21db8d40-8637-4ada-a905-c6f80f4ec871",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "1008ec05-b91f-44af-90b6-d2579c643c5f"
        },
        "item": {
          "id": "0b378c90-d755-418f-9e9a-347c7f5b63f8",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "84e2d4f6-ef51-4a87-a956-128dbac4eb96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c2d1da2-e6ce-4ba6-9884-7adde11c3622",
        "cursor": {
          "ref": "53019298-ff7f-41bb-a215-1caebf86ba3f",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "d31f02fa-261d-4438-8e2b-13533f535c75"
        },
        "item": {
          "id": "0c2d1da2-e6ce-4ba6-9884-7adde11c3622",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "a651e503-8025-471c-8b59-4aff49e62e80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e6de710-18fd-4a50-84f9-6a68091e9511",
        "cursor": {
          "ref": "f045ea32-b9f9-4a2b-9daf-e13a16076ccb",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "7e23dacd-3269-46ce-adf1-bc960fe2599c"
        },
        "item": {
          "id": "3e6de710-18fd-4a50-84f9-6a68091e9511",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "0e1700db-d41c-4352-9993-d8716fe87b85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e35260e9-8d54-4818-be09-151baaca5882",
        "cursor": {
          "ref": "ab062994-742e-4f76-83f3-a76017a16aa9",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "79d441c2-60b2-4d0b-b0e7-d133112e3e81"
        },
        "item": {
          "id": "e35260e9-8d54-4818-be09-151baaca5882",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "043cc79e-59de-4a66-ba2a-1e0e3d41b546",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "518e46de-25cf-4eec-a1b8-58d0c335c00e",
        "cursor": {
          "ref": "41385ef7-8016-4dd2-8dc8-74ad3fe015f2",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "0b5dcb81-2c18-4396-87e6-3dc454c3f814"
        },
        "item": {
          "id": "518e46de-25cf-4eec-a1b8-58d0c335c00e",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "07ec8bb7-7dc0-4789-8a8c-2fe2b722acac",
          "status": "OK",
          "code": 200,
          "responseTime": 184,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "52d9842f-1b7a-49c7-9020-2a11c0028522",
        "cursor": {
          "ref": "4006b3cb-0921-4826-9fa7-165b36c3fc2c",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "3273db26-7dc6-459f-8024-ca9e23a281d6"
        },
        "item": {
          "id": "52d9842f-1b7a-49c7-9020-2a11c0028522",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "65158086-a877-4894-a43d-0135a50a225f",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "b0923b5b-6fad-4891-b3b6-e427709c01f5",
        "cursor": {
          "ref": "400c0c01-13ca-4854-8a74-272bc5917311",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "70a63eca-bcfc-4216-acb8-2c7529c208c0"
        },
        "item": {
          "id": "b0923b5b-6fad-4891-b3b6-e427709c01f5",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "6d302f75-63f6-4048-8ef6-f1756dbf4801",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "3bab3a34-6fb9-46b2-8460-31fb0fa37ce4",
        "cursor": {
          "ref": "c2400494-199f-402e-8113-0b58098197e1",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "40d77d1c-27c2-43d3-99bc-343ac6dc29b4"
        },
        "item": {
          "id": "3bab3a34-6fb9-46b2-8460-31fb0fa37ce4",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "5fafcc3f-371f-4bfa-8ad6-d20f03f0ed86",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "8856dbe2-8247-4219-92d8-44815bb1ab25",
        "cursor": {
          "ref": "6f24506d-431e-42d1-8c6e-36613db84069",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "264a9123-55ac-4467-9a4b-f541662147e6"
        },
        "item": {
          "id": "8856dbe2-8247-4219-92d8-44815bb1ab25",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "51943a46-15de-44b5-a4ff-eeb7ebbc3928",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "80fe31e3-b74a-4e30-946a-dae45a70b9b9",
        "cursor": {
          "ref": "16511068-0c75-4611-b535-169bf6a314d6",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "dbf24b80-2c5b-40e1-b221-455294d2f620"
        },
        "item": {
          "id": "80fe31e3-b74a-4e30-946a-dae45a70b9b9",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "dfa9a9c2-f3b4-485b-ab51-7683464270cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75099fbf-c283-41d0-b5ac-b7534f797586",
        "cursor": {
          "ref": "cccce206-0297-44ec-b39c-1fe31fb58e7c",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "f2a533cf-7f68-4ee2-add3-a397a840736f"
        },
        "item": {
          "id": "75099fbf-c283-41d0-b5ac-b7534f797586",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "5debec8a-b876-4aca-bb3b-c7e4f84164cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "110ef3d4-9d9f-47b5-bec9-bd8adb731ebb",
        "cursor": {
          "ref": "6522f7c6-8606-4a2b-a383-3f06eb30a826",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "005b166d-671b-4ef1-97a2-ddaba69c7711"
        },
        "item": {
          "id": "110ef3d4-9d9f-47b5-bec9-bd8adb731ebb",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "3b6c236e-e5e2-4588-a49f-d7ebf948b9da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27a61551-7568-4978-864e-7901485f5b31",
        "cursor": {
          "ref": "f09a70af-c056-41bf-847d-02289c860608",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "68643211-bd20-4baa-82b5-b66d3fbd33ad"
        },
        "item": {
          "id": "27a61551-7568-4978-864e-7901485f5b31",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "403c2022-f6f7-469c-b5ea-dcac4859f13a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4767ceb-07e4-4c12-bc61-39d49fd0e6c5",
        "cursor": {
          "ref": "3542feeb-90b3-4963-8757-4e989d654d15",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "e39b691e-a489-4055-ad7e-ed345b9f2e9c"
        },
        "item": {
          "id": "b4767ceb-07e4-4c12-bc61-39d49fd0e6c5",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "fad36850-9f6d-44a3-9118-a98d97d8a788",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71d9b9d3-fff7-4ae6-9fe8-688dff3df91a",
        "cursor": {
          "ref": "ddb7826f-b6fb-430c-9e5d-cffff6aab6f3",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "4dddd83a-7c6b-430a-aeca-6f077ede095f"
        },
        "item": {
          "id": "71d9b9d3-fff7-4ae6-9fe8-688dff3df91a",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "8ec84888-399f-4b27-8920-eb43320da109",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb940336-7863-4c96-aae2-1463ea415a9c",
        "cursor": {
          "ref": "8d961acc-5ad1-43d3-b24a-eff669a1c450",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "5f17395c-9e78-428e-8455-61c46229b81f"
        },
        "item": {
          "id": "bb940336-7863-4c96-aae2-1463ea415a9c",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "0b9dd45a-f34b-4319-9f8c-74ad4067e64f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "003bc61a-fee7-4dff-a2d6-c6ddb2a6463b",
        "cursor": {
          "ref": "3e2cc2b8-4fd4-4e7c-81db-28ba2b0d47ef",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "449bb629-65da-4c37-9a6b-a528d50c5a39"
        },
        "item": {
          "id": "003bc61a-fee7-4dff-a2d6-c6ddb2a6463b",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "07520bef-d1e1-4de5-ab06-2ecac3bd88eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c26bf7c-0a6a-466b-9b62-9a54bdaecd52",
        "cursor": {
          "ref": "f978c99b-57f2-464f-a7dc-5af2eb251667",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "080f6acc-58a9-4aaa-97fc-4a934ecdc3a0"
        },
        "item": {
          "id": "3c26bf7c-0a6a-466b-9b62-9a54bdaecd52",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "27c746de-de5f-4057-b7f8-741b3e1c6654",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a71c4a66-f01c-42e2-98f4-39a64550b81e",
        "cursor": {
          "ref": "aa0690a4-af28-4190-9f3e-71f07e389693",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "615bb9cd-03bc-4497-bcb3-87f0aff6f52b"
        },
        "item": {
          "id": "a71c4a66-f01c-42e2-98f4-39a64550b81e",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "a1cc0189-42d8-4e82-8eef-507a148667ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9a95c05-329e-4323-af24-d1a71149a945",
        "cursor": {
          "ref": "2605cfc1-9b49-4d6a-a1bc-bcfb8addcbd2",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "ac745ffe-b17a-4000-92d3-585036ddd563"
        },
        "item": {
          "id": "c9a95c05-329e-4323-af24-d1a71149a945",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "3aaddbc3-46f8-406a-8a9b-7b2675e0d1e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c67c0552-5ade-4df1-aa3e-57a3ce26900b",
        "cursor": {
          "ref": "be405856-5d19-4702-8dff-5f0f2b10db93",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "57b31328-538e-4522-8ee9-90ed7d00375b"
        },
        "item": {
          "id": "c67c0552-5ade-4df1-aa3e-57a3ce26900b",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "7ab8dd4c-da6a-4091-9c77-cef31fd69019",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83419ff2-8ed9-494d-b82a-b31b25528d95",
        "cursor": {
          "ref": "507c6b5f-12a4-4d73-985a-cd50d86467c8",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "9fa8d338-de5e-46fe-bdb2-26061f989a48"
        },
        "item": {
          "id": "83419ff2-8ed9-494d-b82a-b31b25528d95",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "726abb75-d3d1-4c03-b076-85306900e5ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c636cf67-bc72-4409-bf29-b8db8da7f1eb",
        "cursor": {
          "ref": "d0ec2f52-b181-4bc1-bef1-54189cadee4f",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "bb0d9800-5272-45b4-98f0-895a44f8a7a7"
        },
        "item": {
          "id": "c636cf67-bc72-4409-bf29-b8db8da7f1eb",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "a466c257-ccc6-48ce-91e8-f56d9425c455",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bed22982-8937-4ee1-bcde-84d8c85c6550",
        "cursor": {
          "ref": "64e9fa74-335a-461b-81cf-57ccf11b2d18",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "021f38e3-5b2e-4414-af50-327cf36daaea"
        },
        "item": {
          "id": "bed22982-8937-4ee1-bcde-84d8c85c6550",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "f1f34edc-7395-488d-b2c8-7af60e26c720",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a00baea-9b56-43fb-ae91-796ae9cb8a3a",
        "cursor": {
          "ref": "87259d50-ca13-469b-9172-c3457ddf7878",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "29956483-2ef3-4a8c-bb72-524211c44575"
        },
        "item": {
          "id": "9a00baea-9b56-43fb-ae91-796ae9cb8a3a",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "f32b895e-2c9d-48c4-9916-34d8e5fde74e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67625083-8b59-4112-8caa-b2981035e867",
        "cursor": {
          "ref": "224f138e-cd47-4672-9f84-1ef23b608757",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "bc62fada-3ebc-46ec-b220-662a752887b7"
        },
        "item": {
          "id": "67625083-8b59-4112-8caa-b2981035e867",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "dc434b3b-c76f-4b26-91f5-e6be44b763e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "992fa37d-1d50-4922-8aeb-032d42c7ce7f",
        "cursor": {
          "ref": "3542edfc-77e2-4b9a-a541-2cc55d9d71fd",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "8bd8ba38-b7c9-4aa0-9b43-b9f5fe871a49"
        },
        "item": {
          "id": "992fa37d-1d50-4922-8aeb-032d42c7ce7f",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "c1dcef8d-0014-4069-800a-7b0d2baa027a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbe219ec-d569-45b9-ba6b-0d2c483dd6a1",
        "cursor": {
          "ref": "3ec10a8e-fc5c-41a8-ba93-f6c7deb5f01e",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "e273deda-29fe-45ca-9673-b71e68b71c2d"
        },
        "item": {
          "id": "fbe219ec-d569-45b9-ba6b-0d2c483dd6a1",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "ef69c3c4-2e65-44c1-9a44-615e2466c598",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b87bca3-f7e3-40c1-a3d1-fe9804726c43",
        "cursor": {
          "ref": "372ecee6-21ef-49c1-83ac-4b05ea9f98a3",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "7579cc91-b478-472b-916b-6cacce8939a5"
        },
        "item": {
          "id": "6b87bca3-f7e3-40c1-a3d1-fe9804726c43",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "64d38561-e1a9-40d4-a04a-d1cd097f69e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36c4fb07-75a1-43ad-8d9a-a39a79e5cc0a",
        "cursor": {
          "ref": "85549c2d-c97e-41bf-8539-94a15aa26435",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "a67bc202-1d07-4d0d-92c4-3f696a54dff3"
        },
        "item": {
          "id": "36c4fb07-75a1-43ad-8d9a-a39a79e5cc0a",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "3f996e8c-a881-47c1-ae97-d6c06ee63670",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de23a4fa-0005-49e5-b33b-f254858a9d53",
        "cursor": {
          "ref": "c12dfb15-5262-4f1d-97c7-c084ebdb5856",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "4aff8372-a7bc-459d-b7f7-52a1d4a01437"
        },
        "item": {
          "id": "de23a4fa-0005-49e5-b33b-f254858a9d53",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "be80ba55-df1a-44b2-8910-c669df8ac25e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6de7ea7f-fdf6-4b8f-b1e0-8638828f0bbd",
        "cursor": {
          "ref": "28f04ea5-d0ab-40c0-abf7-504ca2dd688d",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "cec350ca-0757-4d6c-ac0d-7eef144e545e"
        },
        "item": {
          "id": "6de7ea7f-fdf6-4b8f-b1e0-8638828f0bbd",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "11c944e1-0dc7-4984-beba-ac5014a4fd95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4aced4b-b42e-4fc5-8496-dac43e727bf6",
        "cursor": {
          "ref": "127e1638-3441-4d4d-912a-c457c3c4cea8",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "0d3eb37a-d795-4430-a977-b25897c1ab44"
        },
        "item": {
          "id": "f4aced4b-b42e-4fc5-8496-dac43e727bf6",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "33f28843-1576-4a5c-b3fd-913a0bcb861d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45e51938-0f63-4b4c-b125-2f9ae7cecf97",
        "cursor": {
          "ref": "86494e0b-dd18-4add-b1c1-93cbb0490236",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "6dafb208-f03d-40ce-a347-3e945ae05d9f"
        },
        "item": {
          "id": "45e51938-0f63-4b4c-b125-2f9ae7cecf97",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "68223374-0aa1-44df-a25f-30137bddcf6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94f4e395-1644-4273-baa4-ed43dd7ddbf1",
        "cursor": {
          "ref": "80719d23-44b4-488a-b586-57a8dfed2b01",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "1a3b10a2-a5a9-4b57-86a5-78e085ed4bd8"
        },
        "item": {
          "id": "94f4e395-1644-4273-baa4-ed43dd7ddbf1",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "7007cf92-16fe-4289-b50b-8ea9d89f424d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cd70d76-9eaf-4249-8d34-6bb3991d2a89",
        "cursor": {
          "ref": "b1cdb5a2-5ef2-48da-a107-4f9c5f389f29",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "20e9f8d5-cac3-4602-a101-ac85567cb17e"
        },
        "item": {
          "id": "4cd70d76-9eaf-4249-8d34-6bb3991d2a89",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "cee9da6d-dbd7-401d-8a11-fb6d566f2a51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93ee1fce-3b66-4058-afbd-114ed6b6adcb",
        "cursor": {
          "ref": "d7b984f2-a626-45a0-8321-4ce6680d361f",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "555709cb-155a-45ed-beef-658bfa36705b"
        },
        "item": {
          "id": "93ee1fce-3b66-4058-afbd-114ed6b6adcb",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "5e3e2bfd-6a50-4976-b802-7f3de98e3f7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a28c0d60-8f88-4681-9287-17b084a0f039",
        "cursor": {
          "ref": "b34e4087-d2e9-43d2-9619-4ede54e74c89",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "510bb437-3f70-40c5-a10f-c670f81ec1de"
        },
        "item": {
          "id": "a28c0d60-8f88-4681-9287-17b084a0f039",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "52886d8d-6695-47b1-95e0-492618b4e5cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52d6753a-4b4b-48f5-8378-887926b0b949",
        "cursor": {
          "ref": "7e03db02-9bfb-4a47-b818-d92d8aa8b60f",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "23e151e7-2e69-4978-9002-2af2350f79c7"
        },
        "item": {
          "id": "52d6753a-4b4b-48f5-8378-887926b0b949",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "f1a70e5f-85b5-46a3-9335-1ef0127fc5fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a263fdd-550d-4b38-8688-30a558a3d76c",
        "cursor": {
          "ref": "629d5ec5-aded-4944-a8fe-7aa7b1ac1621",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "2d3c4244-0002-4a13-b122-2072fb657163"
        },
        "item": {
          "id": "0a263fdd-550d-4b38-8688-30a558a3d76c",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "81568022-4628-4c8c-8ecf-c1f28448ae1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cdd8c99-58ea-4ef9-9120-b993f0405766",
        "cursor": {
          "ref": "94e3e608-741a-41a9-a62b-1898f306320c",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "6786fe95-c343-4466-a407-515b1d0e88e3"
        },
        "item": {
          "id": "6cdd8c99-58ea-4ef9-9120-b993f0405766",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "df10a260-ffc8-4c54-b956-dc93db4f545f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da0b298b-6500-4cdd-9d01-16ec363ba356",
        "cursor": {
          "ref": "9a26a3f5-84ed-442f-8d22-0b2648c07268",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "f755a613-2a0e-4559-af06-7ff34e75cf2e"
        },
        "item": {
          "id": "da0b298b-6500-4cdd-9d01-16ec363ba356",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "b9d677da-be9d-4e85-82af-a1189ea5b5b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02eb3999-74f3-40cb-987e-80691a18a5d3",
        "cursor": {
          "ref": "3f10d4ea-bd60-45e4-ba21-db7f9e27048c",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "f4318fea-e1f1-44f9-8bbe-41081e52de4d"
        },
        "item": {
          "id": "02eb3999-74f3-40cb-987e-80691a18a5d3",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "02291e33-75df-40aa-8db5-1bdaf807d444",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f86cdb3f-5f63-45bc-9cdc-8561aefb6f99",
        "cursor": {
          "ref": "8779ab61-76f9-4c6d-9f09-fb089a0baa7e",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "3409c121-97a3-44d5-be46-a308ad71d70b"
        },
        "item": {
          "id": "f86cdb3f-5f63-45bc-9cdc-8561aefb6f99",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "254ce82f-573a-4a6f-8635-fe625d9083c5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10a08751-ce03-4b2e-91f2-39beb70e3c5b",
        "cursor": {
          "ref": "7456f16a-c970-4af1-9d22-3bfb2a1f67a5",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "5f7e62c8-ca6f-47f4-bc24-72c6314d54b1"
        },
        "item": {
          "id": "10a08751-ce03-4b2e-91f2-39beb70e3c5b",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "a1599f69-bfb8-4890-8ca9-7b3ae4a64750",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "8e800013-0094-4e7f-bca1-4a29dd46d7ca",
        "cursor": {
          "ref": "42b92305-4900-4aeb-9e65-0a4637be44e3",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "ad359238-7601-4df1-a79e-c64f25c20265"
        },
        "item": {
          "id": "8e800013-0094-4e7f-bca1-4a29dd46d7ca",
          "name": "credentials_verify"
        },
        "response": {
          "id": "ebc0b994-5168-4c52-88ef-40a1655b73e8",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "5009280b-c11f-4678-b5f7-a67f5caf1b17",
        "cursor": {
          "ref": "d0302608-6c68-4cb5-9f00-55bbd3ae0c2e",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "8af76e8f-8014-4c34-80bd-15ef6f3b5474"
        },
        "item": {
          "id": "5009280b-c11f-4678-b5f7-a67f5caf1b17",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "c33b0d43-4a45-4214-beb4-8bda9ffba25a",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "709e47fa-c581-47d4-9fb0-d1baa54df892",
        "cursor": {
          "ref": "e3b0cb63-db8a-430d-9cf9-57451215a78b",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "adcaaffc-66df-48de-90fa-c01dbefceedd"
        },
        "item": {
          "id": "709e47fa-c581-47d4-9fb0-d1baa54df892",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "ac9ce168-c866-4df1-8859-528045e1b831",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "709e47fa-c581-47d4-9fb0-d1baa54df892",
        "cursor": {
          "ref": "e3b0cb63-db8a-430d-9cf9-57451215a78b",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "adcaaffc-66df-48de-90fa-c01dbefceedd"
        },
        "item": {
          "id": "709e47fa-c581-47d4-9fb0-d1baa54df892",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "ac9ce168-c866-4df1-8859-528045e1b831",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d95af5af-f79e-417e-a901-8a283c6be1b9",
        "cursor": {
          "ref": "1a3c6e11-c78f-4009-9e16-bdb2656fcd36",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "2beac6f0-6609-4066-905f-b9420cbbff8f"
        },
        "item": {
          "id": "d95af5af-f79e-417e-a901-8a283c6be1b9",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "2a0b0346-4c8a-461f-8122-988b06a43e35",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c569351e-e6dc-45f8-9a99-dc9e35edc5b2",
        "cursor": {
          "ref": "1a3ba725-b0fb-4813-8b7c-c9dedb4c17b4",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "884e602e-a3cb-4f63-8744-d1f2528ace5d"
        },
        "item": {
          "id": "c569351e-e6dc-45f8-9a99-dc9e35edc5b2",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "bfbf095f-e39c-4b59-ba02-814d96198c76",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}