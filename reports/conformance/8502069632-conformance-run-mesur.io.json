{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "4b0bd225-e4b7-4459-80d4-2cd013d6f4cc",
        "name": "Clear Cache",
        "item": [
          {
            "id": "077f797c-d0cc-4922-b247-ad9579df9bc1",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "58caff07-97cc-42c7-a00f-87a0fb30e007",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "5af9c5a2-6d1e-4e70-b757-78dbdadf595b"
                }
              }
            ]
          },
          {
            "id": "7228e128-252c-48e8-b0a3-ce5bce85de09",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c6d9250a-f3ef-4013-b7a9-557887db5e93",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "c60f7b3b-8805-4255-8c87-6c50a3b144b9"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "27cf072a-11e4-4903-86c9-4722f93b4f35",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "68b9d4e0-50e2-4f8b-a1b7-41671dc0fc4e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "561811ed-d421-4f72-b600-763fe89ed0d5",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e8070fec-8354-4a95-825c-2eb470a4d0d6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "445d8341-7dfc-452c-bc6b-113b64504abf"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3cc02845-9703-4778-8208-63789144531b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a05149ff-c775-469c-9c36-a6528144ae87"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3fa492bf-4058-415e-b3fb-2f10ca74082e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "82b5724e-7554-4c45-a72f-b644f12722ad"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b4e28a2a-73ab-4243-8d73-b9b9b90b03a2",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "27314bb4-1f1c-41cf-bb42-08f700e3499d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5e64efe1-b556-4ebc-a074-abb4eab7a5c3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9eb8a278-d32b-4a92-9ebc-d2bb78bb566f"
            }
          }
        ]
      },
      {
        "id": "d27621ab-1e63-4bf2-ba60-fb393874283e",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "4f727cf4-6266-4760-9bb0-ac96b3cbe413",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fffd5d7c-9b81-420e-8e72-f99e1c6ef12a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b1a0b561-9264-4b7a-a006-81fd0864873f",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bbd483f-68ce-4b38-835d-f33a14e39120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e9711fbe-d1de-4d11-bbb6-7ef90d7c2b72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dc5eb48-70e9-4d1b-99c5-e4c3982b2910",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55a416e4-279b-468a-aff2-c0f27c033bb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dd4c7aed-f634-4668-a232-4bf8885334ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ec409ff-5083-41c2-9265-a2b6637fd721",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae391e24-152d-470c-be20-73939e725326",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8feaa8bb-278a-43e4-a947-e8bfad3a13f7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0cf36dc0-ceea-4006-8310-6a6c29b57794",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d2ef0b1d-cbaf-4d9d-bb5a-0e7e04618c26",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80c0837a-f2a5-41e8-847f-0546aa510e93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dc19debe-6cc7-4205-904a-9c9a6bfa790d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f77012aa-3694-45f7-9e12-b02d6fc08403",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "492b57eb-fe95-485e-9fea-5687289c0baa"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "7bfb60f6-f6e3-4185-9c41-c36683de399a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "aa2468e9-4c57-4c75-83e7-892c676ebcf7",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "68a43daf-e438-45e2-9a9c-e7d4048afb92",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "8a9a7fc6-826a-4981-9305-71e4132fc55c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2ac24ed4-7104-4900-8767-5951624fbc36",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "46fa9056-9870-4a81-b133-0c3a24ed0728"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c52b17a8-b283-4473-8e42-33bddc4a4eb4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ff764523-8944-4c49-8edd-97b448876ac2"
            }
          }
        ]
      },
      {
        "id": "6979e490-a91b-4532-9190-1173bc47b40c",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "87369124-4ac2-4386-b8e5-599a6f309a9e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "75cb9202-2c86-4ceb-99ca-e31bc44c639d",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "e76ad0b8-0354-4431-8c9f-b64f7f1e515c",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b655a4de-751a-4d34-82b7-1db1d9df5331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95b06f88-8610-4f2b-a562-37cb10e117d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b343826b-468f-4805-8d5b-b88fad554b1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a642f48e-0d3b-4cf2-9586-2665c379205c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c870717e-4479-4abf-b9d0-f72acf0992fd",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f8b5b80-aeb7-4e00-8bf5-0741b6eb1f4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ab2b87c-8586-4023-ab3b-5d592fd42dc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e71d5f1b-edb4-48d4-8a3a-b6bafa09eeb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dfe6d6ce-6c8c-4fa9-9687-0e0c1bd15df9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1aee46e9-69b1-4a86-8ed7-46d98a1db9f7",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8734ad87-1b1c-4aa7-ada5-9c32646ecd9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55fc07e2-30d5-437f-b75f-b9491537c4b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16ab6efc-f5f8-455b-93e5-35f78aeb333c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b96d7bac-97f8-4a60-bc62-663be457bc07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca0d0c72-833e-4338-a4b7-5bc9e155252c",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a29ea90a-1c00-4b7e-b0b9-c30a09098653",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79f79e84-25ac-4de4-96a5-b498e929a60d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7cc3b09-b352-4c6e-bdc5-36a6959180a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6646165e-2252-44bc-a257-6c66b078f1b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "645c8e8a-0471-429e-86bd-24b3aea16ee9",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b225a3ed-741c-4716-a5d6-3a5d8307029f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d41a1d4-2e19-4870-9f5a-18aeeb2249ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "580ed1eb-3572-40b2-acec-64103a0bb952",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7cc18d73-8b90-4ac2-9732-34b0968704ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a509960-1b73-40d4-bad3-9b3db5925ed4",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b79de9a-7cfa-4439-b6b5-a164ff688488",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa82ee27-8b6d-470a-af27-3373dbcf6b34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3892f6e6-a050-4c29-8b06-f4e105a098d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c87ce7c5-2ee3-4fcb-9bff-569b16bac751"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe6334e3-b15b-48eb-b573-50b144d40814",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ea91fdf-46dc-469c-b91e-4ad037b0b89b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f149c955-507a-4088-9bb4-75d30a514f4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a83c247d-5d8c-4f8e-b829-55dae841ef49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2c29ebcb-05b7-4a37-bd79-2f0f1e8d2d28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e09c7b1d-b05b-432e-909b-52fd484f0ee9",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a29fd758-5708-4e78-90a8-cf8e572b01a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3861b5f3-bdfb-4d52-b06f-b66767a339d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6064625d-da9d-4228-8ce6-8a812d04312e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aee5deeb-ed4c-4100-aae0-ec9d83d7e2e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fd52140-a805-4b4d-9773-78e08e2a2224",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5560fc1-0d53-42aa-81e6-463958ed78b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ccbbab1-a7ba-481f-92bc-89626c8fc938"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9dee30a-4f48-4dab-ba62-52afdc404ac8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6be368ff-820c-4f53-a30e-10d8df3676d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d0b427a-2a97-482b-96e0-68b353e1daec",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bb38bf8-d583-4e6f-b713-0e614be5d09f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aeb0f8c2-24da-4969-ad9e-731bcfbcca96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b09c70e-c4ac-41cf-945e-6ded72ea04e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1302dda9-8857-4ff8-b644-f6926882c390"
                        }
                      }
                    ]
                  },
                  {
                    "id": "452fe829-7b55-4a99-a3f5-d16dbcbb6122",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f749fd3-1617-4563-9f34-2a3c319e9f5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2377f64-4ed4-402a-b04c-a9dc9fb2f6df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35f1040a-db1a-4396-aa86-7946eadc4639",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7b8295d5-fc5a-4d2a-8891-5b49d1a02c65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8914e99-59d9-4dc5-84c0-2fbe814ab744",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef37af4f-7be0-47b4-8046-3aec088f646f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4051a5d9-f49b-497d-870a-b30174ae42fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0ccbf37-13be-48ef-9299-9d81467db865",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "086ea0ae-30a5-4129-8d5f-77735191d879"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7b95278-a8ff-4f04-a41c-ad069bcaae73",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c44ba746-7259-458f-992f-f9130c87cf6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acfb7d96-f6f5-4fff-b9d6-2fc7cde2af1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee8340f7-103d-4dd7-b682-1a1ddbca95ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "81a78f66-e28f-4f37-aadc-b0d7199cbdce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8852e700-9d12-40d8-9677-232d086b0e2d",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4f63af2-1734-47cb-81d2-2bdedd47a240",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6a3f2af-c7f6-4be3-8eab-0241cf784e83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20666ea6-09af-4391-8350-b8abde830bbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "af65454c-1fcd-4242-a216-94bf2b0b20f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7023f3f5-2bca-4ea4-af8c-f499782095eb",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "807f6eeb-d0c4-4599-b202-b449179c756b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1eda340-650f-48fd-80d5-529ef5c159be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6269709-4771-4fef-a99c-33e293df8a46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fd9a86f3-1156-4d51-aa28-263d7b9b5e01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c9c0957-c402-4ef8-b894-71bef1c20c46",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f0d8019-d415-4246-ad9b-acc125b9c7fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94ae09ba-0e02-4fb5-ba12-9fcf58f6128f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ea050c0-f953-4aa5-8552-785ec3989dff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1db01759-0635-4eab-923f-160125d31c4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "872ee9d5-a2e7-48a3-9a77-b1ebb31d84cd",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "287c297a-cae9-4e2b-a025-b5def450580c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2721c497-d37b-4ba9-93c7-a97edece7bbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00ae1c1f-1228-4bb8-82dd-0dce0bc90cda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ce998ecf-bd53-4383-b5b1-341379cd26bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abd6442d-b475-4c67-98d2-d85dcc8b2a51",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa633513-0e53-49c2-8833-f3e356e70f02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4149e5f-201d-4cfb-bdb7-a8f9cd974203"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0178461a-86e8-42b7-85f9-5b598bd15a3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea6b1a3a-80dc-4ad2-bb94-078c45e5cd6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63926304-162e-41f8-8c73-cbcf295d14a9",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "443d41a9-5c9f-4e2f-a862-1fd39a45fe7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97085f3b-b454-4c5e-8cce-82424365f70c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b685e1d7-506a-4f00-80bc-0a45534b2b7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d232806-9947-493d-98d8-40b0e259dd00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3525569c-f583-496e-a01c-0f42a3c1daef",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7980868f-65a7-447c-9431-c64d023659d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "092af272-de51-44e6-b870-dfd57475e18c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23501ceb-61bd-4fa7-b19e-4b8ebeace419",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5fceb05-97d9-4578-8abf-17557d2a83fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "728245ed-cc2e-46cc-9160-3f16589c9a07",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "227a5732-de06-4cf1-85cf-e558197a60fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a30bb74d-c4b0-4e8c-983c-6a90635ec05c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d15ad772-9bea-4f7c-be37-7a9282c2d61b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "44c284a1-7192-4640-ad2c-889b10f7ee71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51c1c406-dd8e-4633-8168-387c277554ae",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26eb65ac-b955-4f77-a730-149066b44131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35831390-d848-462e-8985-6714f1609b1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f5b240b-b4a9-4a0f-a17b-1ee1e2079628",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6521091c-4e3c-4c72-a7e4-988da5487edd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ae82566-dece-4415-a824-ec78c315b811",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c62011cb-1faf-48f4-b547-5eb05fc22c4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bec8530-3bef-48b0-bfa9-a762139a7f91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c86f433-74ed-4c99-984a-49afcfa42277",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1b8f05c6-7a72-458d-bfd5-c530c41ff742"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54848519-867f-4508-b987-ed7e581d9501",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93ffdd7e-d443-4bf9-81fb-cbc5749b8aca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37288404-2aaa-4a5a-aae0-e0c281b16c8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d18976e5-f782-4ec7-80f6-10e90d127f09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "03b3a697-b885-4ed6-a28c-07ea411a0e6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "932c9b0f-f692-4751-86b5-25f970e0249e",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5496750d-63bf-48ec-91a8-ee3555f0dab4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d64a4c81-e61e-44de-a515-8ad891b19171"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76171214-e30a-479a-a937-40e111ed35e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f0035071-686e-446e-a9bc-a0dc72335421"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc1eb347-0cd1-4ac7-9d8f-0ba7fe7ad301",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b049e38e-3c71-4c13-83a1-7b20b4b74ce6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26572fc1-9cb7-467c-b1df-610973e880d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f88fae8c-a5d5-403f-8422-9c5f9d9eed68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "40d25a4d-87cb-4046-b7ef-c4fa23919aff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9524834c-e7aa-420f-821c-c8dfbbdc278f",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b4bb7a9-16ef-4575-89b1-869183e5434d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a020ad3-ac3f-49a0-a8e8-8c4763572d0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5075658f-c1f2-4b61-9de3-18b5e395c07c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9242d097-d1b9-40d8-8615-5ea79312958b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a52752bd-a031-418a-9a29-b660277602e8",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5610a5e3-808e-46d4-acc2-4c994165c801",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1b44536-31c7-47f7-b134-3e3bfd07dce6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9743076a-c04d-4d44-b135-0d36b0a0128c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3911225-0983-4493-89eb-e21e987d53a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d84e9787-529e-4501-801d-2351295777ed",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e514df2a-19e4-4e72-b69e-14e6958a20d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06bab403-c230-4719-b2fd-1dccd64d0bbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a217380-3799-4a0d-be6c-3f2c3bb67f1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "10d748ca-375a-40e5-bf02-d905cdf08614"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfaad70c-8a79-4724-9df6-acdcba0086ff",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "531f289c-86a3-4579-9ea7-e3b8c2e64c47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad964492-c664-458f-8175-7e4fb881a260"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cd0709b-f7c3-4998-9cf2-00b3b7e8252b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "776f50b9-c2f9-4d6f-bf10-4c7002189cb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15881d60-2204-40ea-872b-1a4d71f4f8e1",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60db5ddd-1c7d-4791-baee-6374eaef9b13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fd4eab5-205d-4dc5-8a5f-a5d73929ba27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "761a01ba-1aa5-41b6-b6fe-07dcbe26e844",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4dec047c-2070-4e78-bde0-f365bd7c6d97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d804030e-0e8e-411f-9360-5dfe755a9091",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2df251f8-0730-4bb7-8d5a-08028c4e1ba9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e1d1735-5cbc-4b72-9533-e482c1a8a671"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21144600-8c9c-496f-aa0d-2694e886a037",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c836e959-c526-4032-be24-b2cf00a42431"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07abccdd-261a-4e2e-a989-219cd091bd78",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01de6289-3d0f-41e7-bd03-76a8551c05af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6a92a44-72ed-461f-bc18-d5d0abb1f8ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fb08621-2af8-4f25-bd8f-f546a47f5a54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "83b9b891-947f-4a92-8b5f-6e8e958e7e3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "510d07e7-84c8-4a42-a9e2-4847ac864f8b",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8db8f47-08ee-4314-b15a-ab7b8e972bec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46b685e7-90e8-45cc-bd01-08507bb45a65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "495a7360-f40d-4196-831f-7c9eb88afd98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "db7caca6-2e20-4cc9-826e-fa43b5d85f60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8993b94-d2a6-4600-ab2a-7243315cab43",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "513cdc21-80d1-4883-8f91-6abd88048341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dbe0d34-4834-431b-895f-da5346afc072"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f04def07-3a16-4ab9-a6fc-f9108cbc1afb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "10e9e857-51fa-42bd-bb2e-9f68c4029f9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2929689e-b6a1-49e8-a67c-aaeff45a4a4f",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7bd1546-924d-4e6e-a00c-82ff66e1b849",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "caacf308-1f84-4bc2-8d22-01576da6f9ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02973b30-9040-4b13-a258-7e4602d5775b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "af655242-aa54-4e41-bdfa-797a80d60a25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9931817-367b-4330-a5bd-62ebb4daf15d",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8e2e316-8027-4cc2-9d20-40bb4e9fbf02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3a33c16-76b0-42a0-8287-2ea47514e34b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c4c768c-9ffa-4a91-b06e-a9b334d9a405",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "24719131-0942-4dc6-b4b3-c97b41698893"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f92abc5-2451-4eab-ac7c-9429eea4fd41",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2123585-1a4d-4573-9f8f-a7e702b4993b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2acd6d47-60a2-4317-8359-7cdf31aa96a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51987215-9b28-4269-a327-6090cc2abe63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8e258d56-812b-42f3-b773-5fb764550e67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28d97e7a-0adc-416c-9b80-03031c6694a1",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bf69cd2-03f6-4268-a19a-78e0e2ac5e82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a56f580a-ad24-444e-a4e3-ae67a2d0cf88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a4dee26-d6fe-4477-98c8-8a5e1f8e94bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "089c429a-4ba8-45db-a48d-b8abe6b78fea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2374efaf-baa1-4bab-aa75-9ef05738d7d3",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89804306-01bf-4e90-97a6-283d34281599",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39edd152-2784-4485-9228-e5ef466f97f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4807578-bf51-4e44-8e3e-287e364a4322",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "db986a64-c674-4007-84fa-c7f34abc8680"
                        }
                      }
                    ]
                  },
                  {
                    "id": "714b9775-94ea-42cd-90e1-621c4ee41db5",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09eb9a15-9b3e-4086-a9c6-01dfb1b40ad5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b7191ed-61b0-4486-bbb8-2074c7355250"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a8b06ed-ce31-4849-bc0a-ca2cdbbed41c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d84284ac-9506-4f8d-b20d-de9a031278c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd3a7676-499d-4690-8d32-d03e83d18a0b",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8427dcec-20e6-4b68-8772-00f3a02ac1de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4aad377e-1038-408a-b79c-69485518f4fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce27d3c7-5c05-4af8-a22e-8aab32b5467d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "83c8e7dd-a589-4260-987a-0e3153bbfd21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49422f61-e2ca-4f6d-bb8c-2d1dbd95e7ae",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3371fb5-6e14-4696-a95f-f054ea9c66bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "606249c2-f1ed-4591-ad54-b896433da911"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa6776aa-3c9f-4081-9d45-f0f08b81584f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "eae83321-2a06-4ddd-b231-b1e0a7aa5f0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d4f5974-a25e-4e03-b9e0-925cd00dacff",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95cdd79d-f2c9-4086-8039-314310908e93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce788407-ce9c-4409-9ad6-0486b827eb66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad249188-a5d1-4cf2-935c-d731162faecd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "225048ff-9275-4b8f-b4d4-efaff842d197"
                        }
                      }
                    ]
                  },
                  {
                    "id": "987b7aa0-2b0d-42bb-8d94-be27f76d77e4",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e35cab53-44df-4707-8857-14ee4c589c94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fee2d6ac-757d-4363-a4f1-5425a82c202b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14362cc3-355f-4d6e-86df-0dfe22d533e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "37eaecde-933f-4d54-9d4e-4395cdf06599"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89c8a046-3977-4662-9b6c-216048dfcae1",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25b3afad-701f-44a3-8b2e-7794841a3ce3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3492b635-60d5-49c9-945f-48707e2d9a10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c4db965-2585-4826-bfe5-ad426602e9d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "36e7a7eb-6243-4043-89cf-08781a917313"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89560354-8317-4a11-99fb-b6bf740caaad",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7554d7d-2498-4e38-b246-9f3fa62499b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1e676a2-95a8-4673-ad8c-14955e19c97c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1940648-8e58-48cd-8ff1-b235beaca6ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "44d5d078-bae9-4181-8581-d037ce2705a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90f9e088-ee66-46d0-bc92-74558fa7f18f",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bccec24-9215-485a-8350-af0e5365fcb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54aeb021-9ac2-4b7c-9a45-c95d17debd30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7087a380-ec14-4de0-b829-423e008094c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d786f06-4182-4c9c-b9ea-2a72fc597176"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09f90f65-0544-4b91-845f-ffaca50e14eb",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b914431-501d-440f-b9c2-baa74ca06748",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa138d04-94ad-4898-96e5-1ffabe6c4bbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6e95cf7-1616-4664-814c-4fb537b16d43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a7b0b022-3693-4bf0-85d6-b3bfb6c6ab81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "623e5db5-7717-4ba8-a139-d312a329c0dc",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85927ce1-43e1-47fd-be19-d54f586f377e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b6b0c5c-f64c-4d89-a2d5-f3f77f0ba397"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb4a4e38-4dfd-4f8f-8208-ad31daa30060",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5b42dda4-735d-4618-9da9-6dbe7420d6e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6282d2a-c489-4afd-a86f-855f995ff465",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1befeda-2e4d-45eb-976b-206b6f5c857d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f11006fe-e79b-4288-95b7-6029a53be025"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9b88a2b-4008-4783-8f6e-4e8b6f80dcf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "eddfac44-a2f3-40da-9663-452beb4f6d55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7c52546-4b42-4f23-bd45-9e2e8a5e33d8",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9a61281-9f77-4e75-ab82-262056199721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5333b631-c91f-4303-9c5c-3e2e374ace47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f6bf043-e23b-4510-bcea-bc6ff147bbc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a698ecd7-070e-479f-989f-f1b91e421bb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86e7ba54-15a9-4846-93db-cd582e1687c8",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80baff5d-5036-46ab-8040-b5e8249ffabf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "461e43a2-f2a5-4029-83b4-df5658ac0826"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b688ee1-b1df-4860-b11a-c2ec0a6fab37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "03f4ed30-d1e6-4592-8866-5b9a6661d2e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7144c509-8b8e-4237-93e8-f16c9d695cb5",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "111bce6e-fe78-4b64-b19f-98b1bc9af3bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70d34520-10aa-4966-a795-df1fc1628039"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eab0354b-a78d-42e8-a241-a7da5376cdd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4379e0c-c706-4078-bb0f-ff6808f9bfc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "505d4427-86c0-4fa2-8051-abffe155e165",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dda49b87-c974-4a4e-9e26-a7cfe09994d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50c54e81-41c2-4bb2-b185-2c1670e0f844"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de2337ed-0559-437c-909b-2ee7ddc644da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e12a8495-2384-4123-8afe-e2f319118c74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cb3dcfa-f80b-47a1-a529-fb543adf1e81",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfd08f4f-71c5-4cce-b59e-c55694d864ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40d8089b-92ee-4c6b-9569-ec9c478329e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b05aa43-934b-41d2-9991-268d72e81640",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "b4e3447d-8311-49c3-abf9-59563646914b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57d89f78-5b82-419c-9aff-20c4e5a79419",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74d67079-e3ff-4965-b858-2f43c70da522",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a5be685-8456-4f5b-8fc6-c74862c4e206"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90198f56-8225-410d-b141-9b006634fa09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "56c9e9a7-7c3b-4c6d-b13d-5dded4735adb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2b59322-0db7-4ca3-9a52-698bfb877332",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f40945b9-5e72-4088-b78b-d41fb5b6dfe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "701bf19c-7077-4dff-af54-b4b7991589e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ad18faf-5331-4d2a-b891-541ae6c23911",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "436d1b0e-5a4f-4f68-a814-4b2c9f1a0bdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3bf099e-0d78-4de5-a2e2-3dbc103dd272",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f002a89-7b26-4240-9cb8-64a27fc19811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4dcab725-383f-4e7f-a067-48324196e7b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebcfa16a-147c-402f-9eef-6aaf56e7cc72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "165633eb-3e1b-4ac3-ae50-8b210ca084bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9152b244-ca1f-4a30-a194-355ad4d4eff6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fb2d98f-bddf-423b-a071-34be1d98283b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a36afc95-e946-42ab-b7aa-7bba654c357d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "475ce405-3099-47ad-b979-fff7a02b5ede",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a3fba743-a0a2-4288-bb45-d1e66200f9e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df49764a-3a63-43b6-a320-f381cdd98947",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "017a2228-965d-48ab-bc07-2ac776ea9e24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df52a8fd-520b-4a87-a207-f3de40b7afe2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43aedf97-1ae2-4135-a132-dcfd3ca9aeb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "e715b2b5-5b73-40e0-b17a-d18759bfe7a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29f1221a-f1e3-4a5b-b9f0-357816f7c29c",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdf881e0-01a6-46b0-90eb-c5828de84c99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8522da9-2f46-4e3b-a822-ae298864f05a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56befe54-cd63-4c3c-aead-ef99de1f08e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f039c23-37b3-407c-9dde-1f4a5e1d8b64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12913dcd-24cb-491d-aaa5-83c4a730706d",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d6fc29e-ab54-4d0d-a130-b366a12b33a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06879ca9-199d-476d-9b83-06595891469a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dd92833-c671-47bb-9935-99dcd85afbaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9f70108-81cd-43be-b37f-9fea12e8b86f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf7417e0-8b9c-452b-8583-96522c83d260",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1c9ed27-dd33-4cf3-906c-2449408c9469",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6a5d1fa-58fa-43d6-863c-83e427e7056d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b90545b2-ce07-499d-92c0-5a9bbfbb58a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a5552c95-45b6-45ec-95c8-bdce2aa5f5d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "228db69b-5407-4d53-bd89-c27a91099a25",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c1d7f85-1d7a-4cdd-bbb0-93d688caad28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bfbfef3-83f0-4795-ba37-28989ce14107"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6d42451-fcec-416c-898a-f8a4b9bc8046",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd16efe2-8a55-41c1-a554-5a9ec5c832eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60a3dc34-f2d8-45f6-a400-1aabed27db2e",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf0ea145-2539-4db3-83a0-06bebb33a4c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aaa81d3d-e895-45cd-8246-b3db9c0ca054"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6524347d-5a95-419d-9ce8-211ed1607bbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "07f04eba-b11c-4dc6-a06b-f66d5b867793"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4594a42-b1dc-496f-9c79-eca300168783",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e039dc65-97d7-4128-8657-1bc934dbe300",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99540bf6-d525-4169-87e7-845288b57929"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "998ced1e-34a9-4d0c-97c5-aad1e986b789",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "16759a6c-f7e1-4f82-8b9b-d3dc826b04c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcc6243a-5a9a-4429-a4fc-636dafa3ee45",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19b2d76a-b0fd-40a1-b383-c91ed92496aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b650b89-0c0b-4852-a2ea-fd152e3927af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7394b245-d3ac-488c-9dc1-49c39b3669ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "3fc0d390-d6f1-4793-909e-ea086061ff07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d2b963f-d939-4980-9b77-890d0f756d5a",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9efca91-156e-4c9a-b16a-8058ce21ac4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cb12b4d-51a2-4686-92fa-57e203103af7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65ec8fa2-61ae-415a-836a-922eb5732489",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1088dee-26a4-4ae6-b58d-0ab6bf589c77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60de726d-0f22-4eac-bc75-af8c5d580b48",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b8a4a08-cc89-49a6-932b-f2dde13eaf59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55aeca13-ab18-4da2-818d-085cf139b35e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b4293de-aef1-4dff-b0f5-50737c6b6a11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0eb2e03-c422-4cda-bf37-385c1f43ac27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2bedde9-7576-4614-b7fc-643dd83308d9",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a63e1bae-b34e-438d-a94f-8bcf214a37ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27a0e5df-1306-413e-8525-ce2b233fc21d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba557222-a6a4-4b95-890e-d107e8935cc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "84241457-3c2e-4ab3-b0de-a60f124c9b49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5b39448-fc40-44cb-8a23-172cb0ca9ebc",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "146a5e6f-9757-4898-9f01-ed32e86eba42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4c63ce9-58d4-49bc-a702-b84bb99dc568"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11ce8345-7d66-403a-8d74-221d8ff355bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "31a919f2-3dc5-4ce4-a849-a586cd82bf84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec8fdf65-3521-4c36-873c-bccee3d6e9ca",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "567df868-6373-48d0-a524-0f512cf1e7f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "870f8ff7-3078-49c0-8547-cd8ec021a952"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2607dfc7-c7ae-48a6-aeac-910c01a53d28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7effd4a8-a0d5-4109-87a0-c79edd99fa1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb4bd710-2ddb-4aa4-9991-83b6f320c59f",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "236352e9-5797-4a68-a2f1-3548e64215a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1684fee-e4ac-4d94-9cab-9d57c5e1ab4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "154a9dec-2463-4b1d-a111-c55edff4f773",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "64562f72-2d5a-4e19-9b42-a6e8a9ce54b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6041de84-5962-4476-930e-d9d6cca12baa",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7803c1f0-586d-47f3-8acd-9d4e13d1c5df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efbf13d5-0239-4e4c-9dba-07ee053b1cbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6574d20b-ef83-4eb7-93cb-f16a9803f1dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c2151a5-e37b-4142-921e-260ec50500cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d85bc696-9d15-4cc5-902f-7f5ac7aa74ef",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f9a1f05-5c4b-4860-8b30-49bee60ddb84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7bdac56-2bb7-4d4a-86f0-a2efd975dcd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64f13b95-ac05-4575-9809-36d9f82b3c6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "556b2708-5db2-46ae-8574-1308f8f17959"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2357f1f-3bbf-41cc-b3d2-0faba880e6a9",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fba25060-5b34-420c-ad7f-4a2236ca1643",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc2355cd-ee56-4c61-84fe-9317d1519bd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ef3c931-259b-4111-a2af-fc3e58f27188",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c16e713c-6bd3-424e-a1ff-9ef7e080893f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72b0bc5f-bdcb-44ab-8443-3c8081d60843",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12cb9ce8-78e6-4e1d-8472-3ef2cac7633e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eeb8fecf-d78a-4fbe-b7fd-2291dd92db13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96fde561-58e2-44a3-be3e-6f82a2bca7e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c09df78-5487-4e32-91a8-115bdbdc6ab1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ecefae9-9c62-4df7-b60b-d036a7500b5b",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00b43d0a-1dab-43a2-8e96-1d8d485ae6b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53ddc190-cccb-4474-a357-17a8fc5403a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6e0262a-6956-4fd6-bea2-d22e10e42d1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f431fbaa-3550-4ee5-8513-b1ea1df10d6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57f8800c-ca34-4532-8fb1-f4150e0a8388",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2fdba18-68ef-40a5-8090-763e8ea3d360",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2ae299e-08d9-4eea-b368-16b1a65eb56a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42f90116-47bf-4c66-973d-131047ec7b26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e328498c-46be-4214-a470-3c3b4f1b034c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5859a985-b433-46a5-b4c8-1b10ead946e6",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eacb6f23-059f-43ec-8d67-6a5bf2a69a75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8b18504-16bf-48f9-8619-59dd208dd4cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e68646c-a040-4a32-bd3b-48f9a138787b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "89d9858c-d3b1-4131-9af6-1aca2274fd03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9df1fed-e74d-4d1e-96e2-27b023d56c0d",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0ba4feb-5548-4c4b-a291-b4bac3766898",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "710e01d8-7c24-406c-8a1a-4f9251833a2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f358975d-d8cf-4b8a-9c44-ef65899550e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "89628767-692a-4d5e-9add-82fb85c1d8f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dd2d0de-0c6d-4916-8a70-cb163bf072f4",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bb2b290-5d33-4a67-90e3-550518949146",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "991bdb3c-029a-4533-abf9-57ddd76e2c95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e42d6c21-c5ba-41b4-801a-4e16331c3249",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "46cbe1c0-6f3d-4f19-876d-0146ab2be76d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01cceca2-ae2d-46c4-a4f9-6c1e5f8d47ec",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2e7fe75-a810-4c14-9ef5-3817e3302d58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d28644bd-98f2-44aa-8b5c-716786f5d6fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "195880be-6267-4386-8ff7-b916b9b01588",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4339e4e-1385-4cf6-aabd-43746bc3119b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e0834de-551c-4581-94d2-00ae96815f7c",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88701598-d94a-42b3-ab12-6a1e8fd9254d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d17b03f3-5cba-499d-9267-c6156199d9c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd4e7e1d-92b7-4231-9cc8-a2b3bf96ab7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "481719d1-37ec-496a-9094-fa9d357eccfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d223a045-00e2-4a66-a19d-f5aa93cf1253",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b1117a7-fc6a-48d3-935c-6e623a788e18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d4ee890-a47b-4935-aa78-d8509c6b084b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d883f226-1bfe-4703-905b-d3f528856467",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dd101d2a-36c5-4112-920c-1cfbab182ae9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "929b36f8-30d4-46f0-bad7-00d43eb2fe36",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6db342f1-c18a-4a8a-9ca9-8b449158f4f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9574e251-f0b1-427f-a84e-c2d55588fae5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22a9f5c2-12f1-45a0-8d6d-d462b380337c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "642b6112-3195-40eb-a22e-767fce6ef542"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d6aec4a-7e2b-4dc5-9c23-0128a58c32e6",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d0ca03f-020e-4fd2-832d-8dfa94d3b1e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "191c5dac-73cf-4586-a3cf-c1ccb4134b15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d23cf09-60d2-4192-8405-652543e12df7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2849e93a-ce35-4dae-ab86-120f27a64163"
                        }
                      }
                    ]
                  },
                  {
                    "id": "697ebebb-43a4-4ef0-ba55-1844664b8b48",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22042681-1957-4eab-9c13-9ccf5d2e6bc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af68fce2-6673-4329-bb68-66b79d5b26a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68232be1-1fa6-4156-9417-d3dbad7fded9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d6a10b65-1769-4e0f-befb-94b1551f1246"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c6e968a-c1c1-4c27-8495-45e0c0afa79f",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "898e830e-6589-46b3-9746-deacc7259c3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09b0b1e0-8542-4d6e-aee8-93fb5b593848"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e30d3730-ab5a-4b29-8d39-c58dfb8ee9a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4a51bc25-6834-47a3-925c-7eccb1106360"
                        }
                      }
                    ]
                  },
                  {
                    "id": "376c22d3-b27d-41d7-b819-68293c4359bd",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "757e9c63-1731-4ff0-9c3d-a50e8345e615",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb6b1690-c4dc-4bf1-8550-6b14ca3fd6d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d48e5410-3698-4942-af1d-082ffc70a9f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "b3f0f2b0-6579-4752-b51e-3f84b9623762"
                        }
                      }
                    ]
                  },
                  {
                    "id": "007dc22c-7fab-4088-b189-5bd51470bdf0",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6db054cd-8ebd-402f-8962-b2225688e6b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "dce33bb9-bbf3-4f73-8e7b-1923cbf93d98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d21474a5-b736-487b-8585-def483f16170",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "09988abb-785f-48d3-875c-3bdf35fa2cb8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c8e1bb46-a2d7-420e-acd3-48ebf0997fc1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ba056995-36e6-4dfc-9e49-e87bb143651a",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "491da52d-dc20-495a-a0c7-67cb85bd4043",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "97421dcc-dc41-430b-9690-a81143074695"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ee118e6-510b-4f72-9ed0-c7472fd04bbe",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "34616e3a-5e0d-4eb8-9680-d4586c54acfa"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "17813926-e8a5-4900-a3c2-ec8ae100096b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "237b8627-6dac-4bd3-afc6-a2ba82aca882"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3c9f234a-9f57-4bbd-bc67-f9826864790c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "090f859b-3215-4b0e-9d0a-c71619d2a224"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3ad6a93f-267f-4344-8321-dbed989861ab",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ef5118fa-cf34-47b1-9619-64d6c90d622e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "60396a39-38bf-48fa-a472-f06b738de364",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5cc9e12c-a705-4378-b19b-7095249d9ac8"
                }
              }
            ]
          },
          {
            "id": "14955fa5-9bd5-4233-8fbd-8bb219badc20",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3d90d4ca-cbe4-4fb6-b568-7756c9792eff",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "8137084d-4e4a-451c-9c28-a458397e0060",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fc79ecf-d155-40fe-8517-7452ef8fe541",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "e5985006-ad17-4859-b9a8-c1b8004fe91b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f29c3ab-0084-4491-96fa-879db7212cf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35702bd5-1d3e-49af-84ca-38934ed0f1b6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e49772c4-c553-44ff-a1c9-a04d36dee6fe",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e796c67c-5cf6-459f-9002-4a0b6fb03228",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "28f39fe0-5f21-46a1-89ee-bf35455c5085"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9339e753-fe8a-4780-875d-f74af12cea19",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "dbad72d0-3892-4710-ba33-679a6f2a12da"
                    }
                  }
                ]
              },
              {
                "id": "04beb07d-237a-420b-9dc0-253ff5863d48",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "17c5e5ec-c9ae-4fb0-a7e8-dbd98ebf8c4a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1a10d911-6375-4c17-a1e6-de9128329f49"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a3420c72-14c3-4768-8967-569b67a926ba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3aeab5a9-5bb5-48c0-b754-81051e4e70b1"
                    }
                  }
                ]
              },
              {
                "id": "90c42018-07fc-4031-bfde-f2854ca8fc79",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "83f9aaa1-d9d2-4d5f-8f8c-c819469510aa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "309d8f8a-12c5-4796-ae2a-e25813c4892e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a0c30355-1d4e-4683-ba8f-e0d724753ff1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "891c97c6-bb1d-4b24-a5d3-fd7c47d915d1"
                    }
                  }
                ]
              },
              {
                "id": "088cedf4-205a-41c7-acfb-80f75c6a9fa5",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "76d9deba-7ee4-4faf-b9dc-364c17e6c527",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7a345113-0a38-4569-b37d-452938d9f8b3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "31e7acec-bfd1-49af-95d0-56bc123a4bba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "0a9bf0c9-6b81-431e-9651-6259842142ef"
                    }
                  }
                ]
              },
              {
                "id": "433b8200-c584-4dc6-a946-3b4d0476d4ea",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8752d0a7-45bb-47be-9173-5605cebfe087",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "05849d1e-c41b-49a9-bb5d-a284e0214618"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d7481beb-1c80-4099-a978-4679909a577b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "d8b70318-6cdb-49bd-bd03-e7da6b3b52d9"
                    }
                  }
                ]
              },
              {
                "id": "b5a44eb3-f130-460c-a069-9e8ad5ca9b33",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4028e317-961a-4143-8747-c4be613c1611",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cfa5e31a-9f0b-4145-b530-1d1ae693976e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ff4508dd-5051-4fcf-be45-91b9666518d8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "807eb74f-24e1-4bb1-a05e-dd8f0f54c245"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "97f6beda-e0b7-46aa-b5c7-688608fbb502",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a2af26fd-9bd6-4345-8bff-081e1b6f7632"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "847c6977-b7f5-41e4-86d4-ebeedb836bd5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "237b59bf-cc77-4bbf-8f27-714b3c754fb3"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "da449c9b-3940-47d7-8c7c-d2de8dafabdf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "d3d16739-19f1-462e-8324-5eab113f75af"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e003bbed-1012-4da2-af48-b95f9a31c665",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5dc0d403-27a0-4056-bfc8-dae2976a12ee"
            }
          }
        ]
      },
      {
        "id": "77f2aa16-c75d-438e-b291-72219699ae90",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "924d7644-a41c-4f44-9c09-b38fa23891b4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9e202b7c-6c9c-47e4-b668-285ad2dc594a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "41461297-f563-4402-b30d-86e3391cd61c",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "662d31ef-cc92-4e06-877f-30fdd17aea2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f598e86-e200-42a3-a2a1-0042b92db90f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76d21219-ca90-4252-a9d1-a4895ec05206",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "0bcd285f-11d0-4ed1-bfbe-2e11de006829"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c41dfbc-859b-4e9f-b99f-532c4bd874bf",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcf83fcd-2527-4033-a339-0ad4cdebbcd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db875d7b-07e1-4fac-a1f9-9ef1f31b51b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7041cbb5-7bf8-4765-ae4f-24b4c64bfd04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "90c9f87f-bef1-4ea3-8f38-593a97d5ef94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e843e4a2-7c4f-4859-b179-7e176985dd37",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b781cf2-9a8b-403c-8838-73e2d4a11294",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98378348-8ab1-44e3-aa3b-f9fafc7647bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e4972c2-3d75-4d5a-a0c6-32fb016115d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e87d5125-12bf-4184-9167-cff3126a0769"
                        }
                      }
                    ]
                  },
                  {
                    "id": "488442d8-dd20-4daa-8f32-839f867fb773",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "397e44d8-089f-4812-b869-a3cebfb806b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0532ea57-c1e4-4b8f-b3de-b770059c40c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbd19351-5229-40d2-a19a-d0270d9c922c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dcb32c18-4ef7-4ebc-87bb-662db8d42566"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93147587-3841-4029-8979-3a9b3404a534",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9520c47-8cdb-48b1-a436-6c24a3399cb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "425226c2-201c-40c1-9d29-436aef11b8ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c342d92f-0fea-43f9-9cb3-4462d6ba3758",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "65a46b84-fdb2-45fb-b783-d98fc4ba989e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b39640b-dcba-4603-8a64-88a6b065e73e",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9e389fa-79fc-4fa7-a480-5d18d44e0607",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb98da54-49fd-4a54-b892-cf0995933ff2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "815bbf48-68fa-43cd-b353-44ac2d772122",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ff32c601-e8f0-4c96-a3b5-63516794fe05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "769c2906-fc20-4619-b03b-f002ecb3465b",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b683a00-6d8c-44ec-8712-fa0278141ef3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e3250c4-1d21-4773-8cc5-0de8d4510990"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88f83db0-0515-4cde-8f80-3404d48a28ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "76e25d8d-9982-4381-983a-aba8e98bde47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0234bb9c-84f1-4eee-a557-40bc821ed531",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af9d4567-0592-46e8-84e9-d89b74d3b164",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57842503-ac6f-4bb3-98d9-af99bc2dd243"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4d0a3f0-433c-48ee-aaf4-e2252938a6e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "00ec8c8c-1abf-44b9-9ac8-8c9f310a8d6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20513cec-6eb7-4c02-a6ce-91f768a24f53",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0abfe668-3bb9-473a-ac60-fb65b95a26d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80c94a33-a5e5-4a50-84f3-fe77b9388a74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f87ad2d-50e0-4fbf-a9ee-41c1bb35bcd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "94e40b44-21e6-4642-959f-2f3dd7f26684"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d358024-a63e-48e3-a769-7c62ed96a06c",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e400baa9-258d-4a5a-8e01-d3ecfd910a53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf3a58f6-715c-405c-8301-5f7b2930b94f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbebcd44-365a-4de6-8154-32fbc2b6ecd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0dc031ce-9827-4524-970e-bc83d9d94a02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12b96e27-b843-4fae-a14d-ce008b54f676",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "614b6c16-4491-43bb-b11f-155d816b43e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d07a95cf-b0fa-4734-bee1-ffdd49aa2d73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cf5b86a-3b3d-4911-b2f9-ba7f94affec2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "6d7a12a9-07f9-43bb-b7ed-32bcdb1044b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02063c26-9769-44ea-ae44-5b86ea4940b5",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e13daf6e-4823-4ecf-85b0-2ab6c240d013",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ace73a99-941a-46ce-9fc1-fee565bd633b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9abd564c-02b7-4364-abf8-a9a817e1439f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "31caf0a7-7b6d-4623-8980-9f8c40669bf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b808d168-061c-485c-949e-ed9a95e18204",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e309983f-7e23-483c-8329-ca36a7883416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd305a94-f9d4-4c9b-9f7f-4247a4a5cb66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48283d33-ab98-4f9f-af06-74d4aea884f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "845a340d-bb0a-4256-93ca-6258e47bd028"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dec4aa4-d702-4252-97c9-bc5306948118",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca23efee-a5b3-41b0-8b5e-a54cbac0e664",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b404d03e-bddc-4cb7-9235-f274c494fd44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12869f51-cc38-4947-bcc9-18a9ca3f71e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "eca1c1c9-676f-4b5a-9451-b0c2e5e7b8ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33908d15-0e64-4fc4-963a-3c7376d3472c",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "742f6f78-20d3-4ff9-bb5d-25121ed7984c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d87d716-601d-47e0-a2a2-9ddc00c5aa23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d5f3db7-bfba-490f-be8a-775154ada248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "61f002c0-b119-4565-bb53-0bb7c244d412"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7292739a-1780-4c3f-bb9c-99b7af827100",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f05d39e-b803-4fc6-a4f8-038ae0444ef9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8447b3aa-59b3-4c1a-8999-688f22092e74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef694f7f-8398-47aa-bf20-56eb7defe167",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "33874ea1-3516-4448-b83e-0396b9ea83f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4170cbd1-abbd-4c37-beb4-82f19737354e",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0c1afad-cdd0-40ae-98e4-2f0ae526df3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b33972e-17cf-4701-a3ea-5b18a4e77a88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bce799a4-0e88-4b20-b9c9-758b2606792d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "3160b643-ec68-4776-9666-b7f0ebdbcb82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4a12462-7b1f-46b5-9899-ed0b7d085f0d",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03636b6e-fff9-4d37-a868-48963ac9c276",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84b16572-3f96-4e86-96b9-a5bf8b685cc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3250727c-18bf-4b54-ba92-4b8ae6c2677f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea2c3524-f7cc-46fd-a250-f1910d3a81ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46a35cfe-3c3d-45ae-bd97-0a1b23b4879e",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21499801-620b-4162-94f4-02ba48589406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b808455-54fb-4835-ac8e-0e7471751dca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e98cab6d-8071-4856-8a46-501aa0a51b8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "63362224-9641-480d-abbe-d6c185282d8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c661c29b-ff68-480d-9422-85f4e53a427e",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d2496a7-7d67-480e-a4a3-74d76affaf0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32a05769-5187-4a72-9ff0-6388bf935467"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2ad8344-de61-4f11-a9d4-3f480443629e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a3cfc13-580a-45b4-84d7-9552c066abc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdb7ba22-e1a7-43d7-835c-ee969d799d6b",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32569756-5800-4c39-a46b-a4d161b9fcb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a3b5cdb-7d33-4f6b-807e-7603ace89a8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a09afd85-af62-43d6-92c5-248bfe8b2048",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a192be2-7c24-4487-b631-4cd40c4e946c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77144453-5de8-44ac-9e97-a099bd18ba0e",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f83a61dd-e492-40b5-8a59-c0d39c42fad5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46b298ff-5f4f-487d-bd6f-c667a5e654ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b853179-b3fa-4275-a5e6-5e5747a831ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cec24e5f-41e6-418f-8ff9-234d8ccc3aa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b64de8f-60ee-47dc-b1b3-eb06b0ef9040",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2188d6a4-f9ff-40d3-b3c4-e0e281a6e4fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a135bdf8-b340-441c-be4b-baaf80fce3a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43650b59-a84c-4b5f-8081-2effedaabea1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a958f95-d8fc-4743-a87f-ef002f2c427a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb6d86f7-2670-4a86-af26-79ae5f716505",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0bc2f99-a299-40e6-98d7-e37b6993722c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eba27604-f888-4001-87c4-aee21f790251"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "009cd5ad-7166-484b-9b15-2cb3cd239cac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b55f212c-871b-41b4-bd14-fe062df21eeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f194bb6-1ee9-4536-88a1-7608d55e438d",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fc56c5c-ef2d-47aa-872e-abb42ef55be2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e408856-93d1-47df-8eaf-4e91bcd7a0ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "019336aa-6f85-4714-a2e3-65198d15b2a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d5874132-e1e6-4ef0-87e7-ac5e24eafc2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa7cdc66-db14-4f5b-bb2f-36385dc4e5fa",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2af5604b-4cc6-4c73-923a-36a1877ae21d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1375f87-fd8d-4382-82f7-67e914293d02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4596f4e2-2f39-4a02-9f5b-ffb433a00336",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e9bef5f-506c-4fae-9c24-074a0703f042"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b76c629-a279-4683-8371-1ca51fc57f79",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b52a24f1-f739-4b97-8026-6b63bb235219",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ccae6b7-c5f3-48e4-9e53-11447fece7ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0960f37-072d-4f35-a67b-a0c399608aaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7241955-daf6-4079-93b1-b375f133417e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b38667c8-95c6-40a9-9364-0c3873c05de0",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b4ab8ab-9999-44c4-9394-3c3c50994432",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b65c7f80-b87f-4969-a2ad-27387edadec1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "828cadc3-4e46-47cf-b5da-927dd6d1bd22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "def66c2e-39c1-4853-95d1-03db1806e2ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88220002-89c2-4a65-b99d-7ff0f3ef1dd6",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fdf1fb2-ca6c-4ae7-94e0-f919a085924c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "088882d1-db9a-4124-840c-5103c9f26ac6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0188d121-3a3b-44d6-a6bb-131edbd7e338",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d5c0df5-ec1c-4de1-996f-010f20893429"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c05d66d2-c513-4031-abc0-c5d24b56d463",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44a5ed88-d017-4cef-9026-c3314cf6faad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bde9a72-ad1a-48d2-b302-fbf24435d39a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2633740f-e0ec-4d83-bbe3-7f1cb1e8c095",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2c81c18-6e0d-4d81-b927-2b770bbafe4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e69f259c-a88b-4eee-a912-5428dd65df73",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c441cb64-7d0b-4b08-a1e9-e9cc1af0a028",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6470323f-67de-4ccf-a3b7-31b27ee8aa86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0307cfc8-9be7-482d-b079-4823a8d78362",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7f3ab8f-560c-4c64-8d41-6b128e8e6c70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ac89a85-74e8-4b1e-82ee-817840fac3cf",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "174ad22c-2acf-4ebb-bd95-54c3dc876f82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0218c677-2366-4bce-8e05-55f8155a6d09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "236c3c45-b2a2-4b49-831b-0fcbb212a470",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "667f2010-d412-4a79-a160-e7f2674b5ff0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7433ba5b-df6b-46cb-9f1b-2b12f6ac60bb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ce668f02-b6c9-47da-b969-e56599576a84",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a7a6818-125d-4e56-8ee8-96e45a6967f5",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "47d4393a-5208-4619-8cd7-371918b94ffe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c69d002-350c-4344-922a-9c99b27b38ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7165c8ad-da07-4929-9862-b1b17319b3ff"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5c700447-1c24-4919-b7f6-9cd5470832cf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9619ae60-6b54-434b-a7b9-024ad6f354ac"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6ca1f8a8-c031-4989-96cd-1dabb7cfda55",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eb175ce7-43ad-4555-93ce-79d4b4b2ae9e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e8d726d8-f468-45d0-bc83-94182cab9738",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d0bc1772-5c70-4e3e-be69-9f45a1f01608"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4eb574e2-5d9f-4117-a13a-a6558a5e369a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5f430d36-e69c-4987-be49-ad8cf5c7b5e6"
            }
          }
        ]
      },
      {
        "id": "f8acdf1a-b585-4a99-9d7d-180fbca8240e",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "73bc6a63-952d-49c5-8439-a6183311f35a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7e681364-f0cb-4f38-8b0d-838495156b4e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a65d4fea-c92e-4241-a2ea-834c97521ddf",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8e783d6-dd34-4d12-9f62-cead4bceb16c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a91d6297-8135-4383-be93-5c4c90a8af32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "335cb9d8-9278-4bfd-a1c5-28c964513231",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "778b707a-95c7-4afc-84f1-83997f3c0945"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f60665d-ca99-447c-b008-e76a33b8a7b9",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97575c5d-b35f-4246-a9b6-dbdb7a5620ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcc9b2a8-232c-4b67-81e8-f60d8b6b9ca7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c7daaea-3ac2-4bed-94e4-1dee7454d846",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a27a6ba-d89a-4180-bcdd-b7c519bc3197"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5db39447-2c8d-42d3-9c89-bca577227c34",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dc21cb1-a63b-482c-a9c5-3276d80de761",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79c7cf12-6f27-4a68-9895-6bcee20ab45c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98de457a-993b-45ac-baeb-cf66e89db20d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "160b16dc-34f9-4f5e-a1bb-7bff9b21f68b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e10643a9-f954-4ade-a4f3-12b23c3c04e0",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6434151-9ab0-41b0-9d0d-637a04e11eaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dafbbe18-0ddf-497c-bb25-df97ccc5c66e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44a365fc-999d-4d0d-b8d7-7da2e6e541fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae0c56e8-9f8e-49c8-8b45-f4fb8d39d270"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1dba853-1d75-4513-b234-ee93abc32f0c",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a232a69d-db29-4f28-b8b6-4ce5c6f2da9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c922e1ea-9b2f-42ce-96bb-5216dc04a395"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efe43990-3e70-437e-ad55-2576caa1bbc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ccf57e93-7380-4976-862f-1c8aea24bea9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ae8b100-e00b-46cc-b799-9440fbef6212",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06aedf8d-04bc-4740-b55c-e0692ab43e0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "263bc26f-a158-481d-a1c5-8ec34423df3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8f21478-7e29-4e6f-b366-f7a8c0735abf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ddc8a1e4-11a2-4458-8a89-b4255292a60c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25b97421-1c5b-47ed-a030-6f88ef8a8260",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b9bc293-8f39-4176-b5d7-380bac539598",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "298845ca-cdaa-4d12-bdf4-73094f0a9538"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "120f6d79-71b2-499a-8821-12d2910b1651",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "60f23e61-2a3e-4484-afa6-dd8f737e0e79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eb6a90b-7700-46c2-adf9-a456bf1eedc4",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f06b3e50-edb4-46e3-bafb-15bcc2b697dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa3096c7-9857-4e7e-8971-845d8b91e29e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0945412a-70fe-4cbf-b1b7-300b3ef4bc71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5fd2d90-c66e-41d6-96ad-fab100f33d37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7a5f381-47a8-4344-a5e2-087ceb103e74",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94489663-8652-40d8-9adc-ef8acb7be230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1489ee2d-8d84-4d69-927e-596d3c39b74b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a7b8b47-75b8-48c2-a1cd-ea60676fec7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a910cd4-306a-4a5a-9734-345fbc49fcec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "987343ff-c96b-4a02-961d-682978efff40",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05776158-2631-44e7-b2e7-13f3a7ff453e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cbf0567-3251-4eb2-8df9-7b0b835af2c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25041bba-82a6-40d2-97fd-eef65b3dd463",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "86e6ba64-a25d-4c43-866c-79b8962b83a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3273196b-5df3-4066-bc62-c98a2699e382",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f89ea7da-2488-4cf4-9abd-ca06ced333db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "927ad936-8de1-47cb-b458-cdfcea49e7df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14fb990c-1f89-479b-bceb-dc5b03381ce8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "6506726e-aca8-41ff-990e-291cbb36ae53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "652b6877-611a-4c6c-ae16-29fb573ef44b",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70f9b21b-cbab-480a-8601-ace76b57e226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f2d2400-e7d4-4364-a51f-d7937b46df55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a431fd21-da24-4d5e-95bc-5728c99975c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5021946e-5229-4b08-adcb-d82da149e761"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0a01202-ba8d-4202-898a-5cce3bf1848f",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ce75639-fb1a-4f90-8792-bbb4478c29a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92082cb9-6a9c-4c74-af01-1248378d011c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "854e50cf-543d-4331-97bc-1a07ace49b89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb6aaae3-8eb2-4b15-aeae-d789a1af5559"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3883b29e-d0ff-4c59-a800-e70f1504f0ca",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d27613f6-fc41-46da-8d6d-a63db73ade5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99e14a29-ef12-41e4-adfc-06d4dfae8b01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abd72012-5b7f-40ed-bd82-554eab82e709",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "a171f244-e48f-4d72-80f6-17a1b2001988"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fa1788a-9b12-4cf5-9c01-0fe98ce8a723",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8425193b-5843-4b6f-9404-666368bb92e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51ef7cff-a4d1-4e13-beb5-c883337015f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00dfd1d9-cfaa-4aaf-8840-b3295d22aa43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "5fec21df-a364-4671-b08a-67f80ae7ee79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c07dc8d-4b0c-4f34-a177-5010254dbcf8",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f78ddc09-75db-487d-9216-4cd805cb6798",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15345767-b5db-4af9-8e1b-0080de88d809"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8696ecff-0941-4d64-9ea3-b0832fb6a283",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "23df10a4-2202-4489-84c4-a1a0d4d67736"
                        }
                      }
                    ]
                  },
                  {
                    "id": "653744bb-50ea-4b64-b890-1968028df4d6",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f78bc2c7-aeac-4623-a625-bd3705c88349",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1d7a722-78a2-41c3-9cac-1486655df4b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74bf0e78-f313-42c1-bf5f-62c30a55ea71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "1afc8a25-9e74-4bff-ae67-d763f58219bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b72478e0-a849-4621-a1cb-7e3ba622d668",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46529e32-ce60-4bba-9396-5773ff20bad5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02bc046c-0cd4-496f-8a0a-7f8bb47ecbb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6d53f58-9eee-4e68-89ac-9668f3a2fa24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c43ec83-a5bf-4194-ad3e-8539b29b3672"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0009f005-0c7e-46f1-810c-30e367a67277",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34dfebe8-df84-4bf5-8f6d-56323107e2fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adb2c998-c0fc-446e-b378-fe4dcb44a9a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c13178b-f29a-4035-975f-f9549517abca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "424c73fb-341d-4b2f-9778-a4c6eeb052a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42575262-f420-4d48-a44f-1f5ae70fb649",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c38b5b14-d988-4227-9535-4f3d9ef6e539",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1d458ea-0ac9-429e-b6b5-f7f0df4b2d04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e90b8cfe-ddf0-4e16-b73d-94a5f0819abd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "00ba72da-b644-4b61-8198-5fa9656becf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c9ef255-fb7b-4186-999e-8e0fbf093e57",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb54956e-5884-470a-9463-0508d188bbac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51a6b805-2cf7-45dc-9a10-18da655aefad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4a9885c-5b7f-4bb5-945a-1b91b7230f61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "83c3c7ca-486f-4a92-8ae4-e3dcedd11dcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78e6612c-5498-4b12-849c-a64bb6a9bbf7",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffe5b1e0-8fa7-45b3-949e-d29db6a014ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d800ad8d-a4ee-4437-8a17-bbea1853ecc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2f01110-bd66-4c70-bf63-4c38056b6ba9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd91315a-1423-487d-84e5-6442cd75c665"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b62887ed-0d28-403f-ad3b-9b1d112f431b",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46e9d9f0-3660-4f0e-8d6d-e4d545e24476",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cb75ae4-22af-4278-b7e7-0adcfbfc9320"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56965001-2235-4933-b6ee-c70218c52918",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d75e3b7c-d0be-4a27-baa9-29bbb7c15243"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f8baff8-dfe0-4f83-a85d-e1227e455d5a",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ff577da-e06c-4a79-a19a-0434bc2d9254",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e81ce780-a392-4be0-ab33-30cea14d259d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fb51382-fbc2-46a6-87fc-f9851076635f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a94a3397-1098-472b-8e4f-7dcad617c37b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1ffe0a7-3524-4f3f-92d8-9626284b9e50",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c726f73-d4b0-4ec3-9632-765d2a7acdb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53ff09ce-0c41-4fe0-9f56-2dc92187338b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "612ddfd9-0d33-42a9-a3f5-fad6f7ebbb2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3df7a4af-41ef-4fda-b608-8accf36b55f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06514c3e-7986-4df5-bd2d-b07c44e53ca7",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adcc6b21-3172-4164-86a1-07a2642aa9a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f4fce65-0169-45f7-9d09-b358cdd6add8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2f27a19-f913-41dd-ab4e-4fcaf0504052",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e934343c-bd12-4a6a-bb7e-accdec45f791"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3089e65-49f6-4d41-9eea-25fdb75fc7ba",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b6bcb47-1d1f-488a-bf0e-805f82b3d3c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac8c427b-5ba3-440e-8dcc-e8ac4ec0c29c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c11a5588-acfd-4582-b50e-d3af9be3737f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f189960-9fe1-4d12-81a0-01fd2b28d507"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddbfc1b4-856d-44e1-9b00-363fa0075170",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd5363d9-ca08-4515-9a74-dd7f6d7e3aab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e3f98ce-4c3a-4f5b-be14-cc42f57cfb30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "410ed332-c8d6-4950-a2a6-9a3f83246f7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a111a5b6-2b9a-425e-905c-ad4260363b56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1d7b050-b47d-4843-a974-d57fb7ff7a82",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "703b7968-650c-4aaf-b4c6-bc4885756882",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0e09ef7-1d60-40de-9755-54ae267614f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e12252a2-db26-47ea-819d-5b3fe94100c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ea71d9e-238e-4b74-b81b-2f5c6b4a2ca8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bba999d6-a4c9-4301-a3cd-9c18f910bba4",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d4f1e58-c86a-4a28-b958-44f5919b0820",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e76e5057-ea12-4459-a3e2-f367f8e0fe8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0f317ba-2474-4467-b856-57d9396da64d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c20dd81-b5c8-4b1e-bec9-5da570aca094"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a191746-18d9-4de2-96d2-a61d35f87dd2",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efbff284-49c8-4eed-aa7b-21d96b2c0436",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37da75d8-0f8b-45b2-8c0d-c61b4983f0fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "042eeec3-2024-4575-8afd-d57f91012475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "529e78b7-c975-47f2-aa8e-240247a16c76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38258871-b487-4bf3-8c84-0e386c45c307",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3641249b-feb5-4fd6-877b-e5ab371f38ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "268cc5a2-1156-4b73-b665-593b6e355e6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea5524cf-548f-4b07-be2e-780d771d9216",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e431508-eef7-453b-b300-9f45defaed7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "064fe422-333b-47e7-a542-3b39898286a7",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96f3e437-422c-47ad-9b84-b208b916aa50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e448fe6f-e7b3-49dd-981c-76b6407989b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6aca55f-94ae-4dfd-bfd4-6a23f2c021ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c6be4366-b6e6-4368-8794-600ca1f4fd6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d18241a9-a3b0-4036-9cdf-c7a19151ce46",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9868279b-c368-43a9-bcbf-3563e5689f84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50ae9afe-e4e9-4013-9ebb-5a171a192399"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b0c2cf0-8cf5-4a8a-ad13-eea00ae4c8d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ff0c2ae-3553-4b36-a52a-b25bfe2c2b83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3403077-0d10-42ae-95ea-ca2b83c66d3b",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "896e5eec-bc8a-40f5-a098-dc2528fc8e1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef935504-8b4b-4362-938c-3846f5e0ca75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "830444f2-df75-4b93-b8bf-4325416e1142",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "53b298ef-329a-46b9-8f2c-cf59d0775dd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7183feba-5174-4ae5-9d07-cab436d9fe6b",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebbf7a07-663c-4aeb-8eca-47f65e1e3031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b896c517-54d0-49d4-a06e-c6df5d1940aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c35cd51-3e98-4621-8df7-c576d3a80446",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b945f58d-11ad-4ea2-a0ad-5406b8671bcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a483287d-b0ca-4e5b-b9fb-a5e8c00126e4",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "379be44d-826f-4596-8471-f3d20701f063",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65717ca4-b594-4f3f-bd98-cb96b8a245f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "164cf5e5-0377-4f01-9e4d-fac32be01f76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "80224974-3266-48e4-8ace-92e6cd67fd4e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c6bab0a1-0638-4ae7-af92-6af7233b004a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d7fd5302-106b-4b3b-a8b2-fc4d6f9eba46",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd07cf98-20d6-41fd-bbb3-00d45156983b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "03b0b3b8-852d-48c3-9d7f-8cd46d8932de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0055b9ea-25be-4152-b7f2-4bc2162f7c88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "385f4756-0a8e-4af2-aac8-ef6d535dfc6f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c6d9edc2-083f-40e6-a78e-c79d13ad1b1d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7d2f414c-e18d-4d25-a790-1413910f7998"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f3d15391-2e30-4a48-ab3e-0cc5c1438d3b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "876cc356-b46b-411b-836b-33385c629a1c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5991b6a0-f894-493b-a467-5b5e70747ed6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "9d646de3-762d-427c-abb3-adeaa80a56dd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d2bc35b8-1d9e-40ac-a5b7-5eed1ea57c86",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "659ff320-d364-479c-b9c2-c6972a0feb55"
            }
          }
        ]
      },
      {
        "id": "0d9f6922-63df-461f-83be-e6708a54b530",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "a6ef527d-b580-433d-878a-00f29be6f9db",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c8232fcd-1d8e-4381-93e4-38ddda6fcfe8",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "440b89dd-8fe3-47c0-ad29-67e62b7befd7",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb1a1590-3db8-470d-b4a0-54903e7ec629",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aac16e7d-68c5-47d0-9036-2a3c940a4f84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5496bb3f-5aaf-4eb7-992b-aaaf0d4f2280",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64f7251d-bf72-4966-92ff-cdfb09adfe36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40294d0e-1146-4739-b216-ddf5b19efdaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f68ef72-67de-4c07-8a0b-e48fd0cbb33d",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3e4e0b6-187c-4cb2-975d-d044bf22ce07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64d4ce2c-fb63-4384-a24e-6fe2f2a04256"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1470eb2-1916-4d9c-9e68-e9958ebf5d3f",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6f4c2f3-4a47-4ee8-a450-fe753b6e2453",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0356b679-158b-4a2e-b96d-cad99266be13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9606e25b-2dbe-401c-bfa9-c62ed7616e51",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "379f7b8d-8781-48db-8ed6-20c4c569d0f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9efbcbd-9f89-4a13-b5c9-27e69db2b321"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5c9c15b-776a-4d91-84c4-19cf47f1af81",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d9a88e8-c5bb-4883-8eb5-0aeae2c4a8cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5be67ead-23cb-4451-9f07-a1b313cf80d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b429fa3d-9c75-476d-bdbe-180d232a6c25",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ab06a39-4a83-411f-987f-41b1e1144ee7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d69fb66-a7d6-4cee-8ecb-01652c329fc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3179b612-d146-4bb7-9c2f-721e2fe3aa25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eebc2f90-27c5-4cd7-88c5-b49bdb969650"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd883271-c8e6-4867-b040-a49fd059ced6",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da50a74a-2cbb-47a5-9e7d-34fbcd9ff951",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25916d08-6924-4a15-bf2e-28cd65962fd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fd734ba-1028-4182-94c2-3b40da7f4991",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "daee536f-254a-4cdf-920d-08e7b4702144"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88584e78-a4fc-4512-9f48-16a1db825a4b",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4438d99-4b3e-4849-8300-255ba4a36ad6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48047c5b-acc5-442e-90ae-a4e60717adc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "536747b2-7bb4-46a1-8fc1-d8836d909d71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f52264af-8f15-4a3e-889b-b11e04e0fdc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31977090-fdac-4f4c-b55c-ff016d37d614",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec384ce1-5b9c-41ca-b03a-1b06903b2bfa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70768a7a-cfba-4f63-ae57-7c244d9dba73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71cf3878-b899-4500-819c-057fd75e08c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a3f94e9-69ee-409f-8571-62bfbb09964f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "277a6510-9ebf-4de2-8c0c-5f66ac3569cc",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a6f238b-c4f7-4946-a9f6-787dcab9f775",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09108350-a762-42c7-a927-cfe70f9cb32c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ed054d0-7918-411e-81cf-593c51590c81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2067adfc-6252-453d-81d4-6e2e9ac3f696"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15168bec-a1dd-41cc-82e4-8be7b8eb1ab5",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c8eb421-ea5d-441c-913a-3b216a207399",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "649e627a-15e2-4d88-b73c-db0b9876930b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1daf6c8b-8771-4eb6-83d1-698eb071e5d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9824108-da90-43a6-b30b-7c723f3296d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d51f5a2-4580-4c98-b88c-af7b9de862cf",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "586afb5a-c343-45d9-886d-244365ffa54a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf567d8a-ba85-421d-9a47-3d4ebdef82c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64d4bc72-c1a3-4916-b38b-d0f4a736c7e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "430d821f-8429-46b0-ab98-ebebe28e888d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d934e14b-d7c3-433e-bcf7-9541a107599a",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c74e73a6-3437-48eb-87a8-c1b10b98d980",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc7b3830-94e2-4479-a727-5f95938f1dde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d06c6c36-e3bb-4f53-91e9-1350b098fd41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fceb3139-d312-4bc9-8c9c-1d4baf2dc48c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00e6f0b3-a883-4039-ada6-35ab924f19ca",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fa1a74a-69fd-4a62-a041-0d9e2f936fbc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b6e38d1-e8ad-4ca7-9c5f-53134e1f3e08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18cc57d3-f4ca-439e-a0be-a56a96f93a9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84c28b6e-7405-4f29-a185-cb5d45978d49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14ea23e3-aadd-4915-a51c-ecf10c304979",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2933837-31fc-4477-a926-9c3e9a9f856f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b73eac1f-9128-403c-87b1-6feab4576ef2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab2272a4-4eb8-4092-b7ff-b3293ab4c26e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87c5c72b-23a2-4e1b-829e-8ce0dcb0af9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a46f59e6-3b31-4eb8-873d-7eef4ad311fe",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b7c123d-2186-4ead-86ae-79629511e14b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bc8dfc2-9196-4a40-bbb1-92bbc6ae24c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e4590db-60c3-4648-97b1-05d5449c115e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "713b9ddc-a4df-4f35-903a-0658b7f265af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3332a7f9-9aa3-4894-b7ed-a9ea0694efa6",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23d54a1f-5e38-46a2-aa82-6adcb6f907e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7aa248f-8df3-4e2e-b40a-6582fdf2242f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b0cd9ba-b18f-4341-803b-c177d9e99518",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fc9df56-78d0-477c-8d25-00d82270f351"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e50f4ff6-6991-4249-a24a-74ba8d822474",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a34db94-655a-4d75-8f2c-e0d12a49ca2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc0a5cc6-75ba-49b5-8e1f-1282b6665a23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e69e7ef-1961-47d8-a528-1bafe308f803",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74c1d848-010d-46fa-9a9c-d32c8a22c3f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31ffb513-74b0-4911-8ff9-a6ab08563546",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb240e89-af81-44cf-a266-7cab23464e3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4bc53d5-17a8-41a0-a619-f5aa1bd19d31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87377aac-a626-40e4-b570-a8d85bebb1d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a9c5166-e9ec-447e-a2f3-7a0c9e96678b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "454b39a5-395c-4cbb-a1fc-9973322e3f7c",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "025e7d27-eff1-4210-a410-2c7e03361368",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82c590c3-8925-4fe2-b066-07a73483dd6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ade8fd0-acf9-43b9-937f-105c6ff18e43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80cfc4b8-86a7-4c60-9e54-b205b77f8c4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2db2046-d270-4fbb-8950-978ac7110439",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "360ffb4a-ae57-45ad-a54f-d6deecf8bddc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed34ee0c-d13c-477b-a717-90f430a23c47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dad790da-4d54-4de2-b2ac-c1b2dcfc162b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9140d4dd-07fc-4f07-b211-c28b82d15943"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17cfaebc-8ef3-4690-bc93-393f6866fd64",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca8712f0-dda9-4da2-a2e2-a57f08fbfa75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7854c29f-33b8-467a-bf83-9ce95b94c57e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "200075a1-3dd3-41f6-95db-04024e12b7ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "053d2dfc-9c8a-44b7-87d2-fce0d30eda74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9057bfb2-ce82-437a-ad84-66c058950dfa",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf8a01a5-2385-49c2-8320-e0d29ccf51e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13d3da2d-377f-495b-ab68-a683e2484e96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba12dfcd-0178-41b3-bdca-780fe3cdb267",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f6695d3-43c2-46a2-8daa-f7708e5c963f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0884be6-c780-4f3f-b77b-931feebee401",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52e09c4b-9744-44a3-a7c6-c650f1bd4ba1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "064e3ffd-cb5f-47ea-b2ca-2df2ee223a86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2cc78b3-bc83-4057-8eab-9641e58cc48e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cad1aa5-6ea9-49e9-b370-3606d75ae2ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4887c240-e4e5-4cdb-94bb-f090dc6c7494",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "125bbb44-a530-477c-a460-5fa1c4e1e27d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5350808-ee81-49df-82f3-afcc582bb126"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26747cac-8f7c-48bf-ad50-26810751afce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d506956-7d48-4473-ad1d-b071c55489d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbdbead1-a205-48db-b902-efb8d963c629",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d38bc82-5d4d-468f-a320-d1cea8900452",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8655915f-e2c4-48cc-9c54-3fd164c78085"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ad4693c-65fa-493c-883b-e78d92ace0f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa532113-621f-4602-8c61-ebf7275d1d90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "585a1ede-fd7d-452a-9d16-a04cba80f356",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d12fa56-df82-4da3-9fdc-14c1f8b55dbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6182130b-9aec-46f9-ad48-70e3a1b4fde7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76abef63-041e-4867-afef-aeb9f7a13cf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39874c32-098c-4c4c-9a32-d875e1169176"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e550313e-5a2d-48eb-8928-40c47dd903d5",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8096da85-2111-4c8e-8078-ae4c35beb293",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6fa98f16-8da4-4fe4-a8e8-c226b2662987"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c5b030c-49d8-4898-b1f2-9d774cc085a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1da36aa7-3e52-48f2-ae0c-5b4cdf00cb0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f033be99-217f-476c-aa17-b7a16e378c15",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7a7f4bf-445e-46bb-a08e-aeb4e0fe564c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac4ab66c-298a-4a53-91a8-c271e135ef7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41e61641-b0cb-4b42-89db-f218f7c450d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a53827c-217c-4332-b0c5-098a48378c17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "896fb592-bda7-4183-a910-599ad5ce109f",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "963fc77f-0ffc-4ba8-9680-ba670df64072",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a59aa44-ac80-4a66-94af-3d96f4e82879"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7fcdee1-8e45-4ec3-beac-ba5f8e375e0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f74a0bcd-b95a-4b9c-8cbc-fde866805252"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2b955c4-d2fc-46d6-883f-d8a7e3fef7e8",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43146b30-ec1a-4a0b-9a43-f1fe84cbd075",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d44570d9-4c1d-4750-aaec-cde829ed7d7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "804cca37-4a47-444f-8489-920274382fbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4fea142-5863-4706-827e-ab215e877061"
                        }
                      }
                    ]
                  },
                  {
                    "id": "256793fe-f5bf-40ce-895e-f21c8bcf5394",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c652516d-0a89-4992-89d4-66ad8977e35d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2cb5b3b2-698b-4b8c-8290-a57dd51d1ef6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96d03e00-cff5-4283-b1b1-8d8b0b574c17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87fc4930-d49e-4690-a201-a2c2518f7ed7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59bece30-eb52-49a1-bb52-5d1ff69c928b",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba83a7e9-2ec3-4541-b1cb-69f56f32a90d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31811e94-b428-4d19-9c7e-de9715a2fa2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "416e9a7c-181a-4627-8a5a-3ec199e171cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea4ca4f9-a790-4140-9977-0db15ad32fec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e1c99c4-e847-430f-bedb-d92a1ce4db9e",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9855651e-20f8-4dd4-a890-cc87fc76b873",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27176c40-34b9-429a-8db9-9a75a97610dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d41d4072-bb70-4885-8f09-ffd0ab2d7d6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1562a9f-f81d-46cd-baa4-6f06c07c0072"
                        }
                      }
                    ]
                  },
                  {
                    "id": "057ce8f2-0abe-4429-8445-dba2b44e978b",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2be6360f-daf1-4603-b700-8490f1f92020",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d4003f3-d37d-4dc3-9173-ce3a61c52520"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d8ea708-dd42-4ef4-b7df-a10f08e340be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37b4a039-b9e5-49af-8aa4-a32850aa6e18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06aa833a-ba4c-423d-a653-affe35cdc714",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6fe1cb8-762a-4b21-8a06-03e5d82e3933",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00198bdc-0ca2-4f26-8529-910e64fc4d7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d7107fd-18c6-479b-b091-3e25dfa5fd51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3bdb07c-f5be-4466-9a26-6bd071d3698a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f7da47d-f8c1-4384-ba98-99774fb5b781",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ea843d7-2385-4df7-89e7-7231b6e9c07c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1d5c5de-a614-4d6e-a16e-b541bc25d24d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34de28ad-34db-4193-9ce2-b88b5850eb3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3ecb047-3b82-4dbb-b6a5-57548267cec8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a48c0897-ef8d-4dd3-9c04-d9453ffd182e",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39fbd4ec-dd62-49d8-85b6-a7fed068dca6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2211195-1f15-472a-9afb-b9d2bc17d0de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "972d48fb-efd9-4633-b5c9-21cdaa1b84e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8316d071-1853-4744-8612-b838813c25d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72b22a8a-fa4a-4b26-b446-31f41b9e28fb",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fa5accd-d58d-4266-aa76-2388060f0485",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35fedfaf-7c93-450f-b1fb-44c985830e0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31faf022-f294-4e2b-9573-ae37c4509fae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2037348b-49d0-4159-96c1-0ec9343e34ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce222254-3d86-4450-aa51-033d602b376c",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60c6613f-a0f1-42d8-ad3b-770be40d875e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f041e4e-76f1-45b9-9d29-af2d1cd2a740"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a34f6e05-2533-4d92-8114-efeb2046f9b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8485a1fd-cd82-45e1-9966-78eb82017b71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abc2e4dc-3b9f-4f9a-92f8-687189710be5",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27be4273-18fa-41c4-9256-47b71c4fe157",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a73fee9e-324e-4b61-9707-07af71beb2f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a7b71cd-bf2a-41af-8231-77128d3099df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ff512bc-e8b8-40b4-bef1-1bec8bd9788c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4195b50-ad1a-45ba-90bd-d900577bc872",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fe67c88-ffc8-4d0c-9341-5bd43213f65a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d9d14e2-7213-4a33-9670-99da2caf932d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "756a30c2-251b-41a1-b229-c94b1110650e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "173f6797-6d21-4ebe-a5c8-be5723967fb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dbb3eba-d76d-4ea0-9940-6e64f2bb1224",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6943418-6735-400d-91e3-42b110246bf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36f2689a-a5b0-476d-8127-d4f1150840d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02803abd-54c8-4f91-91d4-aba949b7a69d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef816baf-f49a-414f-b63f-e835d7a011b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1724db5-e840-4fcc-b598-3ca5a06526d6",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a265405f-f9b7-4b27-a996-ebd8b5657028",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b23a6c25-d5ef-4469-8341-64533b3ca31b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d4b67fe-7536-4df5-9eee-811792ad880c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a156bdd-ca3f-4181-8479-b62c35ed37f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeef993c-2879-4650-9980-16bd781f9b51",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11a6b147-ee12-43d6-83fd-30378c2890da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22a0bf75-178b-4eee-aa5b-23cdfb53b950"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b451bcfd-c969-45b7-8180-12742ece8e1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ef9a7ea-f3b4-43a4-9cf5-7868003877a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3acd5b0e-7aea-467d-b33c-276d0f62bc38",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a2a5ffc-aad3-44fc-9bc4-15cea90e758c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7e09b2c-1f06-4e44-979a-63ed113fe91f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "779a1bb0-b2f8-4235-8519-875b47c82de2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e8d8113-85d0-41ad-9988-1618864f3ac6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5716a04-5323-4d59-8aee-f8cfc36ef5d1",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fb31f3b-49c8-49e4-ab09-ec5b51389d99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37a8e298-53ed-47e7-bcaf-984a21470442"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "caeec833-100e-49d1-8f7b-0f8b4983b8b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c3c8ebb-a877-44b4-a926-ed86112fab29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa0c78c4-0ee5-4f03-b42e-41ec6b7ae113",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89c1597a-6eba-4a4e-b5a0-0b85d9375e80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b1d0146-bdcd-448a-870c-33c1b1a777f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dda918b4-a982-48ba-bf5d-f56142da9244",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "919b574e-6a8d-402f-aee0-e8e6b6ea92e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dddded7-20dc-4e33-84e0-96f07b713461",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cec97bd8-541a-4147-891b-7d1d25c602c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9838eed3-536e-4c13-82b2-fff04c33d5c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a12eb52-994f-48ae-ac09-b980bf72f265",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2f158bc-e3e1-4264-985c-8969d3ba97a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd15dc7c-b247-4317-9ccc-f6a5f40bde38",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e95eead2-f9b3-4b33-9893-2cd9a474fe61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4d16b62-7e97-421b-9472-6d9c1a69d31e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa044e38-cc4b-40b7-a203-5206a47fb9b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f91d008-e022-478b-ae9d-fe70db281fe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04ef8b2b-74a2-4a0a-8611-44915415a8ac",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a62580eb-4562-4c1a-a6e0-041a574bfe77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdf37004-5f01-4c2b-93c1-3bdd4d0b9661"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "706926b9-cc34-45c9-869a-81cc58a27726",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6215f51-db25-46c2-8287-14448781f88a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b87f37aa-1037-4bd1-a661-caa9de4532bd",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5582e5b3-7b38-49da-822e-eb456d1bafeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a25aec8-8f32-4706-ba8b-34eaa8a40afa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e312ecf1-7fa2-4914-aff2-783df4ac9be6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fb02b0b-d228-4118-9a74-b05e27c1f489"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38e926dd-b45e-4cf4-941c-044b1323607f",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "843002ad-88ef-4f4b-a08b-f4cbed402b50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90956bbb-b5f3-4835-ba63-be566ecbd796"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e39d0bb-d533-4cde-86b4-c7829269056f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0accb5ea-8744-4107-943a-dfbb926190c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b596ee1-922c-4790-959c-77f6524909bd",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95fc3dbb-32c9-4af3-a184-426d3d846368",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b592f0e-f942-456c-adf9-7ca4e5e89a2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0e7c679-7e59-4799-98d4-035e61922ba1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae9d5478-d422-4499-b489-da84e4b5c082"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e09ffdc-b77f-4be2-ba0f-c7da7261f130",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f152edd4-efdf-4551-97f7-73a2e0238aa3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3648c025-8a48-4abc-b6f8-29cd20a2ea1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbad8f77-68be-4396-95d7-356e90303724",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15867f98-49e8-4b99-9edf-181a94fbc30e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27e2b8c8-5e2c-4df9-8bb3-7d301df236e8",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9cf9a74-c13e-4b37-9eba-00b13a87fca7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3454e09-e4a1-4f1b-8b9c-20d59faf4cdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4168da98-92ab-40ef-85db-9a1218fc9044",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bad87e0-b7c1-45ec-b9af-2e82ca62aecd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6872543-439b-4021-a5b0-08a7ae65bfcd",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7269dc8c-c464-426d-8933-0a19551efbe3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70c6eef7-67da-42e3-b8b3-2fba28023ea2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeeca485-d989-4a28-aa97-b12bf4c8dd83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bdd1edf-4c77-4142-8541-1204a1504b05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8f9b66c-fa68-4585-809a-a336179031bc",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbcaa8ba-7d18-4faf-9c5f-94fabfd16295",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "002a33aa-221b-47f2-bd4c-4076fd20dc4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08bb6c99-cec1-4672-86a2-d909d6a32622",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ea6f038-6284-41d6-b3aa-3b8b010d4d1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d047ea0-3ff9-493d-9150-8efe5bddc2d5",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "addb94d4-9d4c-4f01-9797-590c13822924",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8f00915-9f56-498f-8f68-535907aca5dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd98efb1-41ba-4942-a6b0-fde24d6b2020",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08c636ad-8d02-4771-aabb-3bfcec1d609b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5a4385e-398f-4529-9e27-9f092ebe6c31",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e08e52bd-d8d9-416d-a2ab-c643ee8c420b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03ca7f9d-7166-4958-bb22-73db0e557f88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9990dba9-7401-4701-b898-b9dc8148e44e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bdae635-9803-4c07-9fa0-28f3e1d2485e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afcd4a1f-853e-476f-a190-432360080482",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaeb33b0-2bfb-401b-be59-97dec359c650",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b971ae6-a5af-4891-aae8-0800424db75d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "324d081a-24e0-4847-a4f2-23dc5194df8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86041e2c-c26a-426a-81ec-d2113109ac1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f375b5c-ffdf-4586-acc0-fee4a9684f30",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8d52dab-d840-43b3-8f14-30be2ce4e6f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d440fb17-91c4-48a0-9cbb-dd1a2adaacef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dbcae49-724a-454d-afbf-785b29ef1616",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "920d704f-d323-45e4-adfc-345e6db0197c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54dbc580-8d69-4322-a309-1380ff266b21",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fd3e7e5-6e51-4388-8c89-8ca4e49781c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53659f06-a90f-4b9d-8f99-eef337ebbc14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3e6a8fb-52a0-415f-86c7-d0af87de9508",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1049d4db-282b-4f19-b17f-391f2d82fb7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05792cc9-3103-4f1a-bba8-3bf1865d5fd9",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16daf9bb-623d-42ce-bfcc-c1e87cbcc6c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "542823b3-0707-4fb6-a5d5-0239462e016f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29bb47aa-f5ed-48fb-850c-9e390c63e0d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00e44f3e-419d-4a2b-9daa-6e06f105de40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ecb67ad-faad-4f50-bd22-398e4f6361f3",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "060ef894-7ca0-49f7-b5b8-cb0f4f2eecd1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "648d271b-682c-466d-afb3-5b273b9ae86e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ff61196-7464-4b8f-b97d-63f07eb554cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cced426-391b-4cf0-959d-a1e5a12bb702"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7fa3e4a-d0fc-41e2-98d1-fca52e0afe5c",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60a0ba69-587a-499a-a9b3-5baefdb908ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63a0f701-a9a2-483e-8830-25d8732011b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da9a34e6-4202-43fe-a4f3-29fcc999783b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63491568-9c59-4a54-9d75-a1bea31864ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9691ca1-866e-431f-8274-21e557f5a062",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c35efb76-539d-45ac-9c27-27fd5421ef2d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28426a6f-9602-4644-845b-64d74bd5bff9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fab2ffb9-c4a3-454f-ac0e-16fb31df2a61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c147b425-ca2c-4ca1-9de4-365ee27d8f1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff42128b-9b64-451c-80b5-2296b34478c1",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05af862a-87d1-433f-b4ac-4c4001235c3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff30a384-ab1a-4ba3-ace1-b3d740089350"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "674f4c3c-3661-4893-ba23-387096900b8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b1db541-33a2-4a05-a0ab-9eb7ab9cd2e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ce9370c-df93-4a41-9b2d-b09ec94c9333",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65bd5ef4-4c2b-4f62-aa1f-dc54a9a1298d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "919514cb-ed81-4a60-bfce-eb30030c0341"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee642fe4-9e6e-4460-a732-568e57984260",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ecfd4e5-df05-43f0-ae00-dbe60a3baa78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfd3069e-ef4b-45dd-8a99-694a9ea0c20e",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e45c44fa-2e4a-4f67-8ec8-d0ac4aefa439",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e66ce87-7ffb-4cd8-bb6d-502f91132a1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e7a3621-ed23-4cb6-8f6f-401000ab1da1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c480547e-77ab-4063-9007-4f46320e7178"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26bbd82d-25dd-458c-9d03-bd6d47e8c5dc",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d00ed0d-ab2f-4030-83ab-1e5ac89ca315",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66304ec5-5af9-44c8-9b43-937559ecf009"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "034b0d33-0304-4cad-af86-8a882c452337",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e3489ca-5746-4c79-9bb2-6b8973ce1fc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "536a8e6c-0d21-40f0-bd36-13de99e514cc",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec4d334d-ef10-4da9-a773-ac90c44c78ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b748ec07-c3ab-40f7-b967-53e8655a7009"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4a87f52-b946-4923-bbd1-05397cfcfe8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01f82bce-d3d3-48f8-9a92-f17c9ea45fe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60607837-204f-4ab1-9061-9675de195346",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c74456f-70bd-442d-b785-51bbc2d646f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91851bd4-6d57-47eb-934c-4560311eaeab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f88a63c-7182-43cb-95e3-e3ec9e0c0cbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec50e239-2419-4c88-bdce-150c44e4a002"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8e217e2-5b89-4785-b0b5-2c2bd618a2c8",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b870f1c-dcc3-4216-a43f-241f24938d34",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e2b5ce3-5d4e-44ff-b26d-f8b48e3047bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8139948-7aa0-4707-bdfb-b1574ac44e14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2758800-fc0c-4b01-b564-c360699c083b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fadcd4c-d054-4e95-bc31-a4f1f647316f",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edfe9c1e-083b-4761-a3bf-c847273657d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f980ea4f-df7e-424c-90a6-03411de42266"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e43b4b3a-55c4-451c-9696-414c98dbce21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b73ac405-c776-4d54-bb67-8a1e64cad425"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aab67354-9f3a-4189-9477-36a689bb93d0",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b06f6fab-7dea-4907-9b83-ec234e8f1e33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dfd048f2-3754-442b-a0d4-7a34793c4865"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ec40cbc-27d3-46d3-8044-1080e9ed53a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60ec170e-ee22-4cc3-99cc-a6abe4c98d81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b445b34d-bcd1-4e62-837f-522766888cc1",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81be3935-ceeb-4edb-bf0f-19ab3d35b30f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae988705-6630-4305-969f-5627fdf88161"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b65fa674-9640-4eff-9bce-a377f93e62da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0935660-3a18-4d94-ab6a-16ad01fd7dc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4472871c-d7d8-4295-9be3-57a581e3aa0a",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "788212fb-fc1c-4274-a8aa-0e46c7938941",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f25598b0-bb5e-4d03-9ed9-fd67a58fe9c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa0bf8e9-08af-4514-b56b-3ee4bc799cea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63d5be1c-059a-431c-ad75-dcda23f4d87b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbce7adc-225f-48fe-a0a5-528fa9e12d9d",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87ac5fe5-22e3-4ee6-bd76-baf130a7ea35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fdc26456-02e6-4de1-bb6c-54cef4ee3b59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32ed1f77-d8bf-4728-9343-8dae59a6171b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "376bc029-9e3a-44ce-a1b5-e5bdcf9f729a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ce9999d-4319-40fa-b7e8-5599f7aeb2fc",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42c89a7f-b6f5-4627-95ea-996d1aec51d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1050073-37f9-4e3c-b0ed-5e9a08bf1176"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf590fcc-8afe-4b88-8d40-bf3960b2daee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56f19194-aefe-41a1-9906-a16b5b682b78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b533ec8f-a88e-4bca-869a-0dcd2a9358c0",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9296dca7-6f14-453f-b184-be5e7e273802",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bed9d0cc-6d54-4b47-aa46-e798aba33ddd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd0fe06f-ebb2-4601-bd2f-f9202ca1d89c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72d54d69-394a-4efc-b007-4a87e7d12871"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc0b473e-2e6d-4213-a3f4-b72f4c8c83a9",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e515b873-d56d-4a93-9987-a547bbc2094f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0803651d-a719-4fe4-900e-d5341e4ddc54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ba135c7-eb43-49de-acbf-16b9417d1e96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23d6d043-eb81-4931-b518-a0ba91f06f51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12c2ea1b-53cc-423e-947d-2ff53fc57e82",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3cd64ee-f534-4226-97b6-36a08c74af15",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7838f2a7-47e9-453d-a9c2-f9a9c2d7ee57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c05965c-9cdb-41bf-9003-01e0f0ec32e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bd82639-f439-4b96-9112-d28746f582bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7c7ced9-596d-4d25-8b52-c35b1e0bc80a",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "057d828e-feb2-44ab-9a13-43fccbe65689",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44fa2dec-800d-4bcd-b10c-0e243b3004be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf71032b-a07b-4e48-8b9b-7f1387d8018b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d271ada-fd01-4da7-92bb-5536ae0372ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0635a00-010f-4818-8354-fe5db64be02c",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f66fe86-c405-482f-9175-88c45324406b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44eb2940-e5fa-48ff-a931-661093e4ff88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f44dd8e5-134c-476d-8c6e-d6a9e0f35e97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f5f08e0-d000-4e7e-8258-dbae264eef06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "511627b1-2723-487d-a9c6-b8c3445187e0",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45063b56-80e5-4a93-9f60-d00f80e448b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35d5ddd7-6d6c-4547-a707-4f0988cc67a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f7afe61-6bfd-4783-8dd7-2162f3b15754",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80ccb82b-7024-4a5f-8b6b-0cdac5918a43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bda7d35c-5423-40d6-938b-27e415aef3a0",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "750f94fd-228c-47fb-8cbc-bf1524cdee13",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1d2fa30-043b-407a-a748-de39f079420f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88b86da3-8276-469d-ab05-bb1063cf5a73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b670ed3-4428-4f27-8b4a-11e980d0fa75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c68b89ef-bc8c-4397-8ec1-a7f4e2dcdc2c",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c83d5a62-6565-4974-8e33-f3186a532a8c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31b23439-8c47-4cae-8b23-34740e050a20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4f491df-7734-4436-8cc0-9537bf0e38c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56bcc575-1b54-40b6-9baa-3f7fa6b2ced0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c2806ad-fb86-4b34-b036-ffd4353fbcc6",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1687a462-c1e5-47db-8d59-2be5794009ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35504bd0-9b30-4648-8dc1-63589adbbae0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d32d7408-c1e5-47b6-8a37-29d2a52fc36f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83134a5a-6961-4baa-91fd-12077ef334aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21598b09-86d3-42dd-9d8d-0857f24520af",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c52b67f3-5195-44e7-8d46-562dcb192808",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65efe220-4b23-4fd5-b8b9-ab45143544c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80f9eb83-47f3-46ca-8ee2-c272881afb1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "806c27b2-686a-4c63-96e3-f9998f385f80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a1274a7-c569-4838-9708-98dec9430e8b",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3be88b8-a343-4156-9171-2e9a36a86921",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2f84f30-9759-4dc8-990a-4ca64c00e886"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "941c49df-4cb2-46dd-b802-849434fae25a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8eae855-725a-4d7c-a2ab-a03d2381a34d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "822885a8-bc50-48d4-99cf-242e514e5da5",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4612f275-7a7b-4fba-9047-af8e853527d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29f238dc-7f98-4512-8f3c-1fd0419fc6ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b18f9a84-6004-4387-bac9-bcff63cb5e80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40fb1c18-065b-48c1-a915-d270acadb6f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27a80cb2-e3f2-43f9-a226-647ce88f3a1a",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "757650a2-fe3f-4768-84f7-6776c755f174",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9cd400b3-ac93-447e-9973-db94e8c846db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55c2292e-baa4-4384-9cba-6e36904b0c49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14477a6c-2879-455f-91e7-3bc98a08e05d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cea4cc3e-8b36-4143-8b46-6ae94591abe6",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a016372e-8fd9-4e1f-a6c9-afda944ec15f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b7bdedc-50b6-4418-89c6-eb3c07852fc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b2a5acd-0be5-43fa-ad0f-1b78454633fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b32277c-9f69-4ad2-bd7f-051b4b5864c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0fbcdb1-4177-4fa6-992e-4b4d795dc7b4",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db0ce42e-5eb9-44f7-90c0-85175a9dcdd1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d9fe452-ecf9-4202-b5a4-c707c7dce0a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23265906-e21b-46b5-b507-d3513e30c086",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6f9652f-ef26-4f24-8c04-4c897c3a517a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c5bd4d2-0e98-4aa8-b5d0-6ffb4897ce5c",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52ee6709-0e34-4d0d-93ea-c5ae206230a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63a0c113-eb5f-4a48-a173-203b7fb0f423"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ba1cf62-6dff-4726-b02b-b8461fabf3bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4391117-ec0c-4410-8741-187e2ad2c008"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "67ac4cb4-7142-42bc-82da-e16d9ed00efa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ccbc9a6f-b0e0-4463-90e0-9490266c8560"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e42f482e-dfd3-4137-9944-c1072838226b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4dab3dfc-a09f-4598-9060-0aa4d5ee7637"
                    }
                  }
                ]
              },
              {
                "id": "8f59857b-9534-46d3-b60a-117c0fe27552",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cc67ef30-4de4-4a1a-97b3-fe11465143f6",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de18d263-9b2d-47b6-a121-cc879a7729d9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "85e15419-c4ce-4e9d-8b62-b50b58a3fced"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fe56728-d764-45ae-a434-ebc5f1afba36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3603427c-98f2-4b71-b0c3-dae1f1a10faf"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "716c2072-534c-43d0-9939-b5d8e245322c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8ea573b5-fd05-482a-89ae-bb3a1ed0f7de"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "41ff019d-e8db-41eb-94a9-e09b30a7ed0f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0aecad84-c32c-421d-ba47-564317041f17"
                    }
                  }
                ]
              },
              {
                "id": "ed4c7ef7-dd09-4238-9885-cbf3045b3963",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "7d8cca73-40cc-4e53-be33-550b27196eb7",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25e46912-df72-4acf-9367-f7d76b13cdf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "357b8c6a-d674-42f6-a48d-132c4db3b3b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3029504b-ad90-4be0-bb7c-c0a2b77e0987",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e80cb916-9393-4972-86e6-8bcf7dc870f0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "797441ba-62ef-47a9-bf3d-7352af946a5d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ecec9fc1-744e-4f95-97d0-b29e08edb32d",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2cd1fc4a-0927-4b1d-b8b2-408443cacd74",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "397f95a0-f249-41cb-a5c5-61adc6dca268"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2cc49270-6b89-4a9f-9847-6f1bec57c318",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "09f4eea3-345e-4205-b49a-18f4340869fa"
                    }
                  }
                ]
              },
              {
                "id": "97341861-f852-4030-86a0-eabd0f94cc53",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "268fadd4-036d-4c24-bf52-d4448e15d2cb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "9c42c17c-2e9a-4472-9831-b97ba1998824"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7a3f754e-6952-463f-a55a-41e51c9e086a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "af4edfb0-5145-4ee3-b332-ea715f3fb232"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0b48f1ff-63f6-41d8-9ea4-2880fab6603f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "3f0b6872-ce0d-4d19-ad7d-bd70d2e12899"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b7734e47-afe2-4942-86e5-874920cfdc00",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0ece45fe-58c0-42ee-a427-7d55dab1dbff"
            }
          }
        ]
      },
      {
        "id": "f54e2200-42c5-4f47-aff4-864d16287d7e",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "0249a5ea-3b85-464f-8ae7-8f3f27fece2d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "80e3043f-da2c-41e2-8924-e2b0575d806f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1e77f330-4207-4734-9f52-3a3fbfb8d905",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b45fb0f-9dcf-4279-a842-e28e2cad2e91",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "e429f2d9-eb4b-4d42-9040-7fbc995e5fca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5846c033-b53b-495b-adb4-088d0373a10c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b6ae8b5f-3a44-4e4d-a2ec-57331608146f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7bbc47ed-5b74-459a-a0cf-e78bd4fecdb9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a90c00e5-aaea-470b-8e19-818a3aa22e46"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "40b50199-19a6-427a-a305-a0d02f61586c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3e1c864e-b0e3-4be3-bf1c-d3f8bbe02eaa"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2d141675-948f-4c64-9b6e-267c9c0c2816",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "3af9cd5a-e0bf-44c4-ae61-0188e301da58"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "586687ac-0f4e-40fc-939d-d1e302701c8f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bd8daa47-b265-4c34-9192-6e7e9224782e"
            }
          }
        ]
      },
      {
        "id": "b944aa13-d8d8-4bc1-8bd4-d69dce5689d2",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "1f37db93-ce91-4e07-aafd-9b9459c3e2c1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "da0a0c62-98d1-4931-a70a-02508f28e6eb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0dfe0276-9cbc-4f59-be4f-0ea91cbe3bfe",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f55e9e3a-3c90-499b-a93a-bc45750066ed",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4102a894-9c91-429e-bc39-e0f2f7d957c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc70f62a-9d63-4cdd-832e-e86e14e1be22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a73b8163-9376-45c4-872e-a7cf67489262"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e1988d04-36b7-480c-87d7-121e1a88239f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dc0340ec-6dda-4715-8646-e4950977c687"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "af9833f7-605f-4ed2-8cc2-eaf536ae7763",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e5c79ac0-5a43-4958-af3b-35d76c0e4183"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6987fb72-9f41-4089-9180-566ab6a9468f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0d835dd4-2225-4189-b4a1-1a91583e380e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5e76c225-a64e-465c-a91b-0c769e151afc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6517571b-0333-497e-9d0a-f8d779416cba"
            }
          }
        ]
      },
      {
        "id": "fae85cbd-f29e-40f3-bbe9-f530c36b1986",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "dfc7dc6b-02a2-4482-9c26-2e3229bd3270",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8ed1fd8d-5478-4421-b60e-5181b082e435",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "13b18304-7aa9-457f-a5d9-c399ef142f92",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb4b927b-55e4-4f30-841d-0fe4c7e170e3",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8f14bf59-d484-4580-8519-17673904a7b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84ab87fb-21a6-45b2-832e-8fd1db941870",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "254f3695-f30e-4c29-9b57-c63a07b1ed86"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7684599e-eb90-4ade-a688-c6e4b21e8b6c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "818be6c4-79eb-4bcc-a3c9-e7e03de5a1ac"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c3deabb6-75a4-4633-93da-4c627d71f7dc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "de5283e4-8b8a-498d-93fb-02689f4c728e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d963c25c-2d1c-4d33-9c88-755377bba2ce",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "40a5037e-99f8-4dc2-b9f7-901f060a63aa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ddbc1229-35c5-44e4-9ac9-dc7c3ee7dd23",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "08220676-202f-463c-8184-feb818930dd0"
            }
          }
        ]
      },
      {
        "id": "8c0faeb6-12dc-4043-b8b8-7bb0424dd69a",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9e95c3bf-4683-41f2-b10f-a2429840c642",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "40f5e556-b220-4bc6-bdf9-b9ddfb248184",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "49e709f6-b7c1-4dbd-b96a-1504ddbc3475",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4b59d8b9-19b5-4e45-a4fe-9255652a9777",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "79f181e8-93ca-4e3e-afef-a3d6c77c6fa8",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 295
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 65.0175438596491,
      "responseMin": 6,
      "responseMax": 366,
      "responseSd": 28.676716656163798,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1711931924902,
      "completed": 1711931952447
    },
    "executions": [
      {
        "id": "077f797c-d0cc-4922-b247-ad9579df9bc1",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "7c6dd320-f00e-4d3f-9135-50b2333e7c2a",
          "httpRequestId": "b9418636-b917-47ba-9043-8d5b1e050746"
        },
        "item": {
          "id": "077f797c-d0cc-4922-b247-ad9579df9bc1",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "9e9b0215-82d9-45e7-b93b-6791b66f95e8",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 0
        }
      },
      {
        "id": "7228e128-252c-48e8-b0a3-ce5bce85de09",
        "cursor": {
          "ref": "bba7c46c-c30f-4a08-8e57-4e17d7254112",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "625bb539-51db-4981-a115-78432e6a07a6"
        },
        "item": {
          "id": "7228e128-252c-48e8-b0a3-ce5bce85de09",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "222a96a8-ee5f-4640-9572-7262112fcb03",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "561811ed-d421-4f72-b600-763fe89ed0d5",
        "cursor": {
          "ref": "68f4b9e8-1765-4541-8ee9-d7124ea0059f",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "b37f83a0-74e4-4b00-b15a-fbb84d2486f7"
        },
        "item": {
          "id": "561811ed-d421-4f72-b600-763fe89ed0d5",
          "name": "did_json"
        },
        "response": {
          "id": "ea5dfe28-51f2-4e9f-8845-1f0460292525",
          "status": "OK",
          "code": 200,
          "responseTime": 366,
          "responseSize": 1329
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1a0b561-9264-4b7a-a006-81fd0864873f",
        "cursor": {
          "ref": "5d8327dc-3f08-4362-97ee-8f8b51e7a393",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "659aeaa6-a21d-4e10-acf6-df74a7657224"
        },
        "item": {
          "id": "b1a0b561-9264-4b7a-a006-81fd0864873f",
          "name": "did:invalid"
        },
        "response": {
          "id": "941a16ba-ab9b-4b62-a249-6dad0c8fd240",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1a0b561-9264-4b7a-a006-81fd0864873f",
        "cursor": {
          "ref": "5d8327dc-3f08-4362-97ee-8f8b51e7a393",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "659aeaa6-a21d-4e10-acf6-df74a7657224"
        },
        "item": {
          "id": "b1a0b561-9264-4b7a-a006-81fd0864873f",
          "name": "did:invalid"
        },
        "response": {
          "id": "941a16ba-ab9b-4b62-a249-6dad0c8fd240",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dc5eb48-70e9-4d1b-99c5-e4c3982b2910",
        "cursor": {
          "ref": "c923d7de-a07f-4de2-afd3-c318cb1e82ab",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "a5a9e5bb-1be5-4669-8ad4-4946fa4bc259"
        },
        "item": {
          "id": "6dc5eb48-70e9-4d1b-99c5-e4c3982b2910",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "a3f41a90-a0bd-42de-bf2d-12119f9d0af4",
          "status": "Not Found",
          "code": 404,
          "responseTime": 156,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ec409ff-5083-41c2-9265-a2b6637fd721",
        "cursor": {
          "ref": "3b72fc6d-8cac-46f8-97fa-2a014eef8599",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "0a4bc9cb-6989-4342-891b-d5925ca4610a"
        },
        "item": {
          "id": "1ec409ff-5083-41c2-9265-a2b6637fd721",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "d516608c-20f8-4b04-866c-618704422eae",
          "status": "Not Found",
          "code": 404,
          "responseTime": 62,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2ef0b1d-cbaf-4d9d-bb5a-0e7e04618c26",
        "cursor": {
          "ref": "c35c8080-2921-4bb4-b1c9-f648df6b7eef",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "b846a652-5437-45bf-b27a-e718a62d8d03"
        },
        "item": {
          "id": "d2ef0b1d-cbaf-4d9d-bb5a-0e7e04618c26",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "7ae4a474-7ba6-4a89-bfb3-6167c23a9cff",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa2468e9-4c57-4c75-83e7-892c676ebcf7",
        "cursor": {
          "ref": "d0a76474-6dbd-451e-8edd-581e70efae29",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "785cc810-eb55-438b-9a8c-4dd17a989c9a"
        },
        "item": {
          "id": "aa2468e9-4c57-4c75-83e7-892c676ebcf7",
          "name": "identifiers"
        },
        "response": {
          "id": "a496b597-9595-4b9b-83e3-c60f6a81448f",
          "status": "OK",
          "code": 200,
          "responseTime": 216,
          "responseSize": 1345
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e76ad0b8-0354-4431-8c9f-b64f7f1e515c",
        "cursor": {
          "ref": "edef9271-ff87-4ad0-a77a-2377e679fe5a",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "4dabe67d-dbe2-4b3d-98f9-086caee3275e"
        },
        "item": {
          "id": "e76ad0b8-0354-4431-8c9f-b64f7f1e515c",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "fa3167fc-260c-445a-b601-7b12ac620f01",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c870717e-4479-4abf-b9d0-f72acf0992fd",
        "cursor": {
          "ref": "527342ed-e22c-4f1a-a109-8a86c81d1b1b",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "fb8cf156-e6f5-4f68-8d40-7d9b3a387245"
        },
        "item": {
          "id": "c870717e-4479-4abf-b9d0-f72acf0992fd",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "34e7312f-cd2d-45d0-a270-72a36c39ca73",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1aee46e9-69b1-4a86-8ed7-46d98a1db9f7",
        "cursor": {
          "ref": "be367482-f800-451f-b0c2-f2251652c024",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "b7c4a191-3d8f-4093-b36a-d105fb8e227b"
        },
        "item": {
          "id": "1aee46e9-69b1-4a86-8ed7-46d98a1db9f7",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "4f0bbe06-65c1-4619-aeee-c693c98fd52a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca0d0c72-833e-4338-a4b7-5bc9e155252c",
        "cursor": {
          "ref": "1b61d3ed-f030-4afb-887d-52ed58187390",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "a830d889-359c-4c3d-998e-a7650b6d9f5d"
        },
        "item": {
          "id": "ca0d0c72-833e-4338-a4b7-5bc9e155252c",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "88b20509-9613-4a9e-8c45-57a39e2323c6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "645c8e8a-0471-429e-86bd-24b3aea16ee9",
        "cursor": {
          "ref": "1a181a7c-03d2-46a2-a477-88a4e0c441bd",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "512acfe2-ead5-4245-9c81-74e212413ce8"
        },
        "item": {
          "id": "645c8e8a-0471-429e-86bd-24b3aea16ee9",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "4e5c90ff-307c-4480-84b7-d199001dd07d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a509960-1b73-40d4-bad3-9b3db5925ed4",
        "cursor": {
          "ref": "89dbeece-21a6-48f3-bc3d-e146695295f2",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "932b5dba-8134-4172-85c3-c98f1ac3b8ca"
        },
        "item": {
          "id": "1a509960-1b73-40d4-bad3-9b3db5925ed4",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "7c3a07f5-8caf-46b7-add8-5b8bc9cec64b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe6334e3-b15b-48eb-b573-50b144d40814",
        "cursor": {
          "ref": "57c150b2-599c-48ce-9ec0-cc9444befa30",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "997ba8a4-52cf-498b-8517-a0ff4ecdcfb2"
        },
        "item": {
          "id": "fe6334e3-b15b-48eb-b573-50b144d40814",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "42499d1b-9d66-4e58-97a2-048e8c251d87",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e09c7b1d-b05b-432e-909b-52fd484f0ee9",
        "cursor": {
          "ref": "82081f2a-273d-44e3-bcb6-7bb64c98498c",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "aa2055d1-9f55-4b89-b1a1-a2353f4f8134"
        },
        "item": {
          "id": "e09c7b1d-b05b-432e-909b-52fd484f0ee9",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "6e24c0ae-aa9d-4e0c-bc9f-4429c3ba93b6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fd52140-a805-4b4d-9773-78e08e2a2224",
        "cursor": {
          "ref": "a0630caa-6a48-4d67-8ab2-7ab5d02fd065",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "07ab149e-3270-446b-aa2e-cdb100983a2b"
        },
        "item": {
          "id": "8fd52140-a805-4b4d-9773-78e08e2a2224",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "b4746737-5360-4a32-9191-33e2a08dd5ef",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d0b427a-2a97-482b-96e0-68b353e1daec",
        "cursor": {
          "ref": "9f297c6a-8dc6-4c11-b72d-7df31ed011dc",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "6b3e31a6-e4d9-406b-804a-e04a54593011"
        },
        "item": {
          "id": "6d0b427a-2a97-482b-96e0-68b353e1daec",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "1009b294-7803-4ce8-a510-3363f722eff5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "452fe829-7b55-4a99-a3f5-d16dbcbb6122",
        "cursor": {
          "ref": "3531da76-a00f-48cc-8e86-a8bb09471a59",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "d0cc63ca-1291-45d2-8c21-3376df8ad86e"
        },
        "item": {
          "id": "452fe829-7b55-4a99-a3f5-d16dbcbb6122",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "eb07720b-e6cd-4aa7-b9d9-b00372209122",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8914e99-59d9-4dc5-84c0-2fbe814ab744",
        "cursor": {
          "ref": "fca8f527-6a6b-4e21-b2fd-0c3935adbff9",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "172ab741-3c68-4c0e-acd8-0b12f1fcdb62"
        },
        "item": {
          "id": "b8914e99-59d9-4dc5-84c0-2fbe814ab744",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "17882715-5555-4145-b822-195304467b1e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7b95278-a8ff-4f04-a41c-ad069bcaae73",
        "cursor": {
          "ref": "0d755f2b-f188-413a-8d96-eb42cc542302",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "d69c032b-af67-4c34-b592-3101f8bcf3f4"
        },
        "item": {
          "id": "a7b95278-a8ff-4f04-a41c-ad069bcaae73",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "0e88ce3c-d3e3-45e2-a9d0-06da830aa93e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8852e700-9d12-40d8-9677-232d086b0e2d",
        "cursor": {
          "ref": "b60ef98a-baf9-4f8e-97e5-de12d2c327cd",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "955db8b1-6331-4d89-869d-64b349d6b2af"
        },
        "item": {
          "id": "8852e700-9d12-40d8-9677-232d086b0e2d",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "cac54674-dfb2-4037-89e8-264288f964ef",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7023f3f5-2bca-4ea4-af8c-f499782095eb",
        "cursor": {
          "ref": "3e59598f-13f1-4bc9-94e2-5d5ecc31bc68",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "ce8c4cd7-95ca-4240-8563-a5357f73e31e"
        },
        "item": {
          "id": "7023f3f5-2bca-4ea4-af8c-f499782095eb",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "6aa23527-cd97-4b4e-a0fe-d10d53591659",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c9c0957-c402-4ef8-b894-71bef1c20c46",
        "cursor": {
          "ref": "2b46030b-3b65-4617-8a28-b897b3e95d7d",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "81fb54ba-12a5-455a-9bdb-b81dc686bfd3"
        },
        "item": {
          "id": "1c9c0957-c402-4ef8-b894-71bef1c20c46",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "86459507-fb2d-443f-ac1e-e2702bc2cccf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "872ee9d5-a2e7-48a3-9a77-b1ebb31d84cd",
        "cursor": {
          "ref": "27806245-c498-4d68-a879-7ceefe62c6ad",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "70d0d59c-16fc-4d3e-9a88-0740e86eb77c"
        },
        "item": {
          "id": "872ee9d5-a2e7-48a3-9a77-b1ebb31d84cd",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "5026a01f-3857-4cdf-8f07-a5db9263ca1f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abd6442d-b475-4c67-98d2-d85dcc8b2a51",
        "cursor": {
          "ref": "f1d5dd00-4bac-4cce-b0ca-462e26b81a7f",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "f67a97dc-c4f0-41db-9f50-03df8116ef9e"
        },
        "item": {
          "id": "abd6442d-b475-4c67-98d2-d85dcc8b2a51",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "423c3850-6cd1-42b3-b96b-5c5e53765536",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63926304-162e-41f8-8c73-cbcf295d14a9",
        "cursor": {
          "ref": "b2ebf8dd-28d1-44ae-8cb0-7dab6fa874e1",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "0a9bc9ec-ce15-44d2-a6ea-652cefc044c6"
        },
        "item": {
          "id": "63926304-162e-41f8-8c73-cbcf295d14a9",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "054264a0-2807-4420-9c15-350b750d8d09",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3525569c-f583-496e-a01c-0f42a3c1daef",
        "cursor": {
          "ref": "a6be0b12-2b8a-42b4-a546-56549e28e6b6",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "699c3043-2667-4167-86c7-b782ecab8fb6"
        },
        "item": {
          "id": "3525569c-f583-496e-a01c-0f42a3c1daef",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "d7fb8ccf-a830-4a48-849a-82e9b42ecd77",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "728245ed-cc2e-46cc-9160-3f16589c9a07",
        "cursor": {
          "ref": "f9ebd515-b4de-4006-96ee-c052936110b2",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "fb1c81f1-4753-486b-b684-56f60b63b077"
        },
        "item": {
          "id": "728245ed-cc2e-46cc-9160-3f16589c9a07",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "87a46d6f-bf89-48f7-a58d-66cebce1d2a8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51c1c406-dd8e-4633-8168-387c277554ae",
        "cursor": {
          "ref": "fc4e7f8f-3fe0-402a-8e53-fc74ee7cd06e",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "900ffccd-8717-40aa-b050-f091994b022b"
        },
        "item": {
          "id": "51c1c406-dd8e-4633-8168-387c277554ae",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "d047eca6-b5c3-4577-8b74-083e4f39298d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ae82566-dece-4415-a824-ec78c315b811",
        "cursor": {
          "ref": "6962b038-ec4a-4f4d-8bf2-45a1b594c8f3",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "57fc8bf8-f9fd-434d-9f03-d8c4c0a11240"
        },
        "item": {
          "id": "8ae82566-dece-4415-a824-ec78c315b811",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "08b7c17d-3296-4c89-9b7e-c9a398cb0301",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54848519-867f-4508-b987-ed7e581d9501",
        "cursor": {
          "ref": "e60cfb39-c5cd-4b0b-a54a-55260314dde2",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "e43e884e-515a-466b-97e6-167b9a8b462c"
        },
        "item": {
          "id": "54848519-867f-4508-b987-ed7e581d9501",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "84b23648-867e-42f2-8dbd-e4db1adf486b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "932c9b0f-f692-4751-86b5-25f970e0249e",
        "cursor": {
          "ref": "41ef3067-a50d-4911-a166-9aedb1dbb716",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "b63307ea-1a40-44ab-bb5f-2f1900c06464"
        },
        "item": {
          "id": "932c9b0f-f692-4751-86b5-25f970e0249e",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "3ba32ee5-2d8c-46e1-bd20-69b1d9c12b80",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc1eb347-0cd1-4ac7-9d8f-0ba7fe7ad301",
        "cursor": {
          "ref": "0680bfa3-c203-41ed-97fa-2431907933af",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "89080e38-7cc1-4900-9262-0b57c7e6aaf9"
        },
        "item": {
          "id": "fc1eb347-0cd1-4ac7-9d8f-0ba7fe7ad301",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "78413418-451c-460d-b2d7-c82afca3e513",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9524834c-e7aa-420f-821c-c8dfbbdc278f",
        "cursor": {
          "ref": "79bc711e-6987-44d9-ab2f-872655ebce97",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "546899ad-6736-42e4-9527-2af5b86c0f6a"
        },
        "item": {
          "id": "9524834c-e7aa-420f-821c-c8dfbbdc278f",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "c80cdc4a-a54e-4e86-aaa8-6d50e53c7e6f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a52752bd-a031-418a-9a29-b660277602e8",
        "cursor": {
          "ref": "8b7bb6b3-08af-4395-8111-e2644689c3c9",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "ff1b10a0-60c0-4a55-9fff-b178ade5531a"
        },
        "item": {
          "id": "a52752bd-a031-418a-9a29-b660277602e8",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "83878706-049d-4920-8c3a-0ae11b31cf4c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d84e9787-529e-4501-801d-2351295777ed",
        "cursor": {
          "ref": "5ea085c0-d8ca-43ad-89cc-a3d278fb1912",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "88d546d2-1200-42b3-a594-20e7626ebac8"
        },
        "item": {
          "id": "d84e9787-529e-4501-801d-2351295777ed",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "cab4b6ad-25be-4625-a0dc-a75b6d7b37db",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfaad70c-8a79-4724-9df6-acdcba0086ff",
        "cursor": {
          "ref": "a210af53-8e95-4174-909a-505ca96b01b9",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "1c58bde6-a286-4511-96c0-b99d2640947a"
        },
        "item": {
          "id": "bfaad70c-8a79-4724-9df6-acdcba0086ff",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "99fab61e-51be-406c-aa40-d3035be208bd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15881d60-2204-40ea-872b-1a4d71f4f8e1",
        "cursor": {
          "ref": "14451391-4bee-4dfa-8714-56bdbd00a17f",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "fa89fc23-ab1f-4f9b-af5a-c3afd89e8da8"
        },
        "item": {
          "id": "15881d60-2204-40ea-872b-1a4d71f4f8e1",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "8e9d4d2f-6afa-456a-b523-9cac60d80055",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d804030e-0e8e-411f-9360-5dfe755a9091",
        "cursor": {
          "ref": "bd74cf47-3793-4866-b1ee-49eb3118cdec",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "b7710bd5-18c3-4379-b07f-117e400eb0dc"
        },
        "item": {
          "id": "d804030e-0e8e-411f-9360-5dfe755a9091",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "bd75c81c-473d-4be0-9fdf-668408ab250a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07abccdd-261a-4e2e-a989-219cd091bd78",
        "cursor": {
          "ref": "58840c1a-8451-4564-973b-ff1a0a3957e7",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "4c83d68a-458a-4f7f-b453-d330f75f234b"
        },
        "item": {
          "id": "07abccdd-261a-4e2e-a989-219cd091bd78",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "87d8e7c1-54fc-46be-a0c3-6b98ec49a6ec",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "510d07e7-84c8-4a42-a9e2-4847ac864f8b",
        "cursor": {
          "ref": "d4186e72-c0fc-4f66-bc36-0385ca42e694",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "f7a58da2-d104-4701-af78-b6a78d6dbd84"
        },
        "item": {
          "id": "510d07e7-84c8-4a42-a9e2-4847ac864f8b",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "33896daa-1bf5-4b16-a5b5-886ecd5d8a66",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8993b94-d2a6-4600-ab2a-7243315cab43",
        "cursor": {
          "ref": "5cfd2902-70c2-4ad7-b686-d72cfe01e646",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "13472aaf-77a2-495d-a4c0-47731a15de14"
        },
        "item": {
          "id": "e8993b94-d2a6-4600-ab2a-7243315cab43",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "1dbcd86d-6d1a-4317-81b8-464f22276f04",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2929689e-b6a1-49e8-a67c-aaeff45a4a4f",
        "cursor": {
          "ref": "9748f380-83fd-4003-9f97-ec7ac10460ac",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "3549adb5-f154-4cc5-addd-5dc718072cc3"
        },
        "item": {
          "id": "2929689e-b6a1-49e8-a67c-aaeff45a4a4f",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "a83bb772-9488-4bee-988d-adf866becfd6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9931817-367b-4330-a5bd-62ebb4daf15d",
        "cursor": {
          "ref": "b4f81995-e7f5-4c9a-ad74-b7d9bb89df04",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "73670606-bb7a-41a2-9811-c6e4d2a6f76a"
        },
        "item": {
          "id": "f9931817-367b-4330-a5bd-62ebb4daf15d",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "c087fefd-716e-4b6e-92d5-bedb87b1b2b4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f92abc5-2451-4eab-ac7c-9429eea4fd41",
        "cursor": {
          "ref": "596cef6f-4dc7-42ff-be3e-32337ce139cd",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "3d764b1d-afe5-4913-9b5d-d81ce400fb7c"
        },
        "item": {
          "id": "4f92abc5-2451-4eab-ac7c-9429eea4fd41",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "7d4a86e2-5780-43f1-932f-58e2b3619970",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28d97e7a-0adc-416c-9b80-03031c6694a1",
        "cursor": {
          "ref": "9affb287-6571-47de-b002-fcb9c01364da",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "0eab28fd-a0ea-4bc2-9e2c-9b3f3ba1efe4"
        },
        "item": {
          "id": "28d97e7a-0adc-416c-9b80-03031c6694a1",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "7cf5fed3-1105-4dcb-88b9-ea720f7fded2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2374efaf-baa1-4bab-aa75-9ef05738d7d3",
        "cursor": {
          "ref": "fd810c6d-1366-4d9d-a5b5-7590f8816207",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "bd2259de-78a3-4318-aa1e-dfaf771896a2"
        },
        "item": {
          "id": "2374efaf-baa1-4bab-aa75-9ef05738d7d3",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "8d6c5ad9-62de-41da-bf5e-d441919d7b96",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "714b9775-94ea-42cd-90e1-621c4ee41db5",
        "cursor": {
          "ref": "454540d9-42a5-4e40-a5ef-6785134df264",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "a4608524-2ace-45f1-8be2-b2c80901501d"
        },
        "item": {
          "id": "714b9775-94ea-42cd-90e1-621c4ee41db5",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "506adac9-68c4-4b82-b5e8-f57f736674ff",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd3a7676-499d-4690-8d32-d03e83d18a0b",
        "cursor": {
          "ref": "86fdfc65-1ab5-4b72-b0e3-60f9b59e679c",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "791af109-23ee-4430-8ccf-1a95fc68d7ec"
        },
        "item": {
          "id": "fd3a7676-499d-4690-8d32-d03e83d18a0b",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "040e593c-db9c-4c65-939f-7d8cf8f14c48",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49422f61-e2ca-4f6d-bb8c-2d1dbd95e7ae",
        "cursor": {
          "ref": "629b83ec-5100-43d1-bd64-657f972ed5f2",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "5023a3f2-7902-4264-a6ef-16d29a3f3fd8"
        },
        "item": {
          "id": "49422f61-e2ca-4f6d-bb8c-2d1dbd95e7ae",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "9b6b6f79-8b5e-4db0-b020-11e8ec720993",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d4f5974-a25e-4e03-b9e0-925cd00dacff",
        "cursor": {
          "ref": "6bbc54c2-78ca-4e8d-a595-d63f071ddbe3",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "6a099bcf-3935-4340-8a82-01de49f2f564"
        },
        "item": {
          "id": "2d4f5974-a25e-4e03-b9e0-925cd00dacff",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "8c10d797-1000-48cb-a09c-eddd7d9a3b08",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "987b7aa0-2b0d-42bb-8d94-be27f76d77e4",
        "cursor": {
          "ref": "4a30d5bc-91ef-4cba-bd96-e4a164d3bbc7",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "d2286e1e-320d-436b-9f8b-abe087a04b16"
        },
        "item": {
          "id": "987b7aa0-2b0d-42bb-8d94-be27f76d77e4",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "68856d72-ea08-43a4-993d-975ff2de1a45",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89c8a046-3977-4662-9b6c-216048dfcae1",
        "cursor": {
          "ref": "c446e773-4f15-40b4-b9b4-1149966b9cf7",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "674bf100-d489-418c-863a-827bd88ca591"
        },
        "item": {
          "id": "89c8a046-3977-4662-9b6c-216048dfcae1",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "787131ad-861b-46a9-9dbb-b44b9177c497",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89560354-8317-4a11-99fb-b6bf740caaad",
        "cursor": {
          "ref": "343f4828-05c0-4414-89ed-f2d196340305",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "a0060ed1-fc34-483e-b64c-1e7d5dcf33d6"
        },
        "item": {
          "id": "89560354-8317-4a11-99fb-b6bf740caaad",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "1913b08f-a688-4357-8aaa-d2e8edfa46b8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90f9e088-ee66-46d0-bc92-74558fa7f18f",
        "cursor": {
          "ref": "1950d5ee-a92e-4a37-abe4-d353bafe14ba",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "878c0071-a8b1-452a-b0c0-830f282fcbf1"
        },
        "item": {
          "id": "90f9e088-ee66-46d0-bc92-74558fa7f18f",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "965e2d2a-60ca-432d-ba71-14083852f8e9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09f90f65-0544-4b91-845f-ffaca50e14eb",
        "cursor": {
          "ref": "6d635b96-1fa5-4d39-b1e0-36000711a959",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "d1973b43-44f0-4ce9-add5-b620497815d6"
        },
        "item": {
          "id": "09f90f65-0544-4b91-845f-ffaca50e14eb",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "fddcf262-40ee-4d5c-a1aa-d64b8c707175",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "623e5db5-7717-4ba8-a139-d312a329c0dc",
        "cursor": {
          "ref": "578be447-ca78-4b7a-9293-bfda08541bea",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "25de9105-f36b-4161-8c9e-a1712df87cf7"
        },
        "item": {
          "id": "623e5db5-7717-4ba8-a139-d312a329c0dc",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "3b2033b1-a3b6-457c-a149-e12456632069",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6282d2a-c489-4afd-a86f-855f995ff465",
        "cursor": {
          "ref": "5d3b1370-3e25-466f-94c1-779e04174bfe",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "c7b4e225-7597-4df1-ab1d-a27821d25b8f"
        },
        "item": {
          "id": "c6282d2a-c489-4afd-a86f-855f995ff465",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "3a8e5fe9-422d-4cd8-8cb0-7f49db73a009",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7c52546-4b42-4f23-bd45-9e2e8a5e33d8",
        "cursor": {
          "ref": "036c2807-7ed4-495f-ab60-a8c63271cbe6",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "5fed361f-6509-442e-a6f6-224cd4c919de"
        },
        "item": {
          "id": "d7c52546-4b42-4f23-bd45-9e2e8a5e33d8",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "ccd66eb8-5618-4b57-b108-2ea74585851d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86e7ba54-15a9-4846-93db-cd582e1687c8",
        "cursor": {
          "ref": "1b733d86-0216-44a7-896c-454e931a431b",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "8b9678b8-de9c-41bf-bbdc-c3ceb54b8218"
        },
        "item": {
          "id": "86e7ba54-15a9-4846-93db-cd582e1687c8",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "690c2bba-b7fb-4a73-bc0f-c325fb5694d6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7144c509-8b8e-4237-93e8-f16c9d695cb5",
        "cursor": {
          "ref": "1e9e88a5-34d6-4a2a-85e2-26de28f29448",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "3dd48a5f-655a-457a-803e-09552b9e786d"
        },
        "item": {
          "id": "7144c509-8b8e-4237-93e8-f16c9d695cb5",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "0538c62b-63d7-4eb9-8614-67da5ed8a4e5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "505d4427-86c0-4fa2-8051-abffe155e165",
        "cursor": {
          "ref": "6eae6c65-31ff-4309-96d4-443e5ef561a0",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "e1fcf28b-7eb9-4294-97b7-9513bfaaedd2"
        },
        "item": {
          "id": "505d4427-86c0-4fa2-8051-abffe155e165",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "02471cb0-ad16-4d9d-b26f-9bc924a3b4ff",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cb3dcfa-f80b-47a1-a529-fb543adf1e81",
        "cursor": {
          "ref": "015e4ca8-c493-4e9f-8196-99b960c2db4c",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "2c54c5ac-f438-43b8-b0de-5a954fb3ad18"
        },
        "item": {
          "id": "3cb3dcfa-f80b-47a1-a529-fb543adf1e81",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "e3875567-5cc3-4de4-ba7d-9a4c06380245",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57d89f78-5b82-419c-9aff-20c4e5a79419",
        "cursor": {
          "ref": "f6e971b5-25b0-41c3-b34c-3f8e2eacba65",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "0dca0e13-8cdd-401b-a798-fb42ad1231dc"
        },
        "item": {
          "id": "57d89f78-5b82-419c-9aff-20c4e5a79419",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "3334b7e3-a957-4c34-a6fe-e2fe98ae61a7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2b59322-0db7-4ca3-9a52-698bfb877332",
        "cursor": {
          "ref": "582e4d43-80ef-4268-bc09-09e1afce68ae",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "bd220f01-39e5-48cf-81b2-397f1e2e6407"
        },
        "item": {
          "id": "e2b59322-0db7-4ca3-9a52-698bfb877332",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "2effcf00-43f8-4eed-ad0b-07eb40bf0fae",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3bf099e-0d78-4de5-a2e2-3dbc103dd272",
        "cursor": {
          "ref": "b39d14cb-1a2d-4487-a19d-487cc0a4d0d9",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "1f1ec3af-738d-4f9b-aecb-e28da9d663dc"
        },
        "item": {
          "id": "a3bf099e-0d78-4de5-a2e2-3dbc103dd272",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "19ba7ab4-fde7-4f49-8a59-e2be00fe86d9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9152b244-ca1f-4a30-a194-355ad4d4eff6",
        "cursor": {
          "ref": "9bc424a0-97b5-45cc-837d-5f99b6b6b6a3",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "ade96bb0-6865-4932-95fd-90a91cd50389"
        },
        "item": {
          "id": "9152b244-ca1f-4a30-a194-355ad4d4eff6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "4eceb757-3327-4fc4-811f-96d896c2dc30",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df49764a-3a63-43b6-a320-f381cdd98947",
        "cursor": {
          "ref": "83a65b28-0939-426c-9afa-1f4aac5c04e2",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "bcaf1f8a-ebf2-4f80-aea5-b6de9a9d8df1"
        },
        "item": {
          "id": "df49764a-3a63-43b6-a320-f381cdd98947",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "3a14e404-86c2-49c3-bf20-c36b11c85d65",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29f1221a-f1e3-4a5b-b9f0-357816f7c29c",
        "cursor": {
          "ref": "c9c2d3d6-40c0-4578-8102-6d7fa0de93f8",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "eb4aa8da-dead-4fb0-8f90-3b6233eb2817"
        },
        "item": {
          "id": "29f1221a-f1e3-4a5b-b9f0-357816f7c29c",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "64e42fe8-0817-4a0c-8364-dbaf16e9222a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12913dcd-24cb-491d-aaa5-83c4a730706d",
        "cursor": {
          "ref": "6221fffe-1fea-47aa-969e-b61a9273080a",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "72be88fb-3154-43c7-9e80-07f6c44de03c"
        },
        "item": {
          "id": "12913dcd-24cb-491d-aaa5-83c4a730706d",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "7afddbfc-4326-4a6f-9159-022543d8d33a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf7417e0-8b9c-452b-8583-96522c83d260",
        "cursor": {
          "ref": "ab290e68-e1a8-43ff-85a3-ed056f107f32",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "e440b2af-c13a-4f82-b1e0-a378501cfd58"
        },
        "item": {
          "id": "cf7417e0-8b9c-452b-8583-96522c83d260",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "cc93045c-7504-4f6a-abd7-ce4183500d95",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "228db69b-5407-4d53-bd89-c27a91099a25",
        "cursor": {
          "ref": "71a9b39c-b599-40d8-9161-93fbed5583a2",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "e8506add-0ce7-4019-a11a-b2e003335205"
        },
        "item": {
          "id": "228db69b-5407-4d53-bd89-c27a91099a25",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "320778f1-c7c3-4794-82f4-af7807794243",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60a3dc34-f2d8-45f6-a400-1aabed27db2e",
        "cursor": {
          "ref": "d6448aca-4cf8-4d2a-91ee-7f9c2f1cace7",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "48c47755-7d6c-47ac-b2e2-772d983a8a95"
        },
        "item": {
          "id": "60a3dc34-f2d8-45f6-a400-1aabed27db2e",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "1eabbc0c-2acd-4ff5-b958-a3f0b7a3b353",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4594a42-b1dc-496f-9c79-eca300168783",
        "cursor": {
          "ref": "a9754d6b-f3fc-43a0-841b-193f338ea376",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "82897db0-aee9-40e1-96dc-2f592bc5c1f7"
        },
        "item": {
          "id": "b4594a42-b1dc-496f-9c79-eca300168783",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "83e1aa08-cfc1-4f01-8e25-66ebe5d0c942",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcc6243a-5a9a-4429-a4fc-636dafa3ee45",
        "cursor": {
          "ref": "fcf042af-a598-44d4-9091-526fbf6f362d",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "3754e470-8fff-474b-a290-295d979277c0"
        },
        "item": {
          "id": "bcc6243a-5a9a-4429-a4fc-636dafa3ee45",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "4d980b41-e2d3-4367-9a26-e2ecd9abed89",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d2b963f-d939-4980-9b77-890d0f756d5a",
        "cursor": {
          "ref": "7bdadfdf-5925-470e-8ec7-1e7a2059ddf5",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "2e25f51b-947d-4265-a4a8-8e87892227ce"
        },
        "item": {
          "id": "4d2b963f-d939-4980-9b77-890d0f756d5a",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "d9fbe6ee-9e00-4881-a052-b33dca70c79b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60de726d-0f22-4eac-bc75-af8c5d580b48",
        "cursor": {
          "ref": "6ca3c615-4fd7-47e1-9780-b5e9f100e83e",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "57b2511b-1941-4b22-9f5c-3da3dee2284f"
        },
        "item": {
          "id": "60de726d-0f22-4eac-bc75-af8c5d580b48",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "b0648ee6-41a6-42f0-a120-fada22cb38c4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2bedde9-7576-4614-b7fc-643dd83308d9",
        "cursor": {
          "ref": "60810029-06ec-44df-9fbc-bffdee3d377d",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "626e3d20-5f2a-462d-b6dc-a7d26b985849"
        },
        "item": {
          "id": "c2bedde9-7576-4614-b7fc-643dd83308d9",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "d0fcd17c-a21e-4696-a665-da53e6d19998",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5b39448-fc40-44cb-8a23-172cb0ca9ebc",
        "cursor": {
          "ref": "a80245a0-3b4a-415a-b4e8-dec951fcb28d",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "9fa6ecf5-e2a5-4219-b0d2-aceb58e6f701"
        },
        "item": {
          "id": "a5b39448-fc40-44cb-8a23-172cb0ca9ebc",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "7622543a-f170-43b0-b52d-47f8f6599176",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec8fdf65-3521-4c36-873c-bccee3d6e9ca",
        "cursor": {
          "ref": "31fcbee2-3e44-45b1-b24f-c754a826cd69",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "be4eb7f0-f543-42c6-910c-b6b2a6d02c7e"
        },
        "item": {
          "id": "ec8fdf65-3521-4c36-873c-bccee3d6e9ca",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "ae5fc66f-e7ad-496f-959a-5a91023a2790",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb4bd710-2ddb-4aa4-9991-83b6f320c59f",
        "cursor": {
          "ref": "d27738ab-d806-4ddf-8060-c7642a264739",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "e2834e9e-bca6-4663-b745-286293455d99"
        },
        "item": {
          "id": "fb4bd710-2ddb-4aa4-9991-83b6f320c59f",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "70630a83-feb9-4679-bcd7-86f5d736d318",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6041de84-5962-4476-930e-d9d6cca12baa",
        "cursor": {
          "ref": "32df6f7d-b962-4faa-914b-afed390aa053",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "601a2211-f58c-4275-8adc-4658597da22a"
        },
        "item": {
          "id": "6041de84-5962-4476-930e-d9d6cca12baa",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "6675a954-feac-43fe-9719-0b2acc480016",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d85bc696-9d15-4cc5-902f-7f5ac7aa74ef",
        "cursor": {
          "ref": "7bd6f666-a49a-41fd-8130-9c6be7b1b647",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "1fc98285-b98e-4aa9-a6b9-79c7abe610c0"
        },
        "item": {
          "id": "d85bc696-9d15-4cc5-902f-7f5ac7aa74ef",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "9c622edf-e9ba-4340-9175-b5165b98d8d5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2357f1f-3bbf-41cc-b3d2-0faba880e6a9",
        "cursor": {
          "ref": "706e6d78-82f7-454e-bef2-49512fa49ded",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "cdd74e15-5b79-4f06-a2e6-3c6017d4c60a"
        },
        "item": {
          "id": "b2357f1f-3bbf-41cc-b3d2-0faba880e6a9",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "4522195b-9759-477c-a267-49a1b0e17c95",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72b0bc5f-bdcb-44ab-8443-3c8081d60843",
        "cursor": {
          "ref": "18795283-544a-43ef-b593-a3adce720c17",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "9f3e43bc-17f6-496f-9054-59d6047426f8"
        },
        "item": {
          "id": "72b0bc5f-bdcb-44ab-8443-3c8081d60843",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "b2d87d6a-39ac-4a7b-9f6b-62c0ef94c208",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ecefae9-9c62-4df7-b60b-d036a7500b5b",
        "cursor": {
          "ref": "3c6b08a0-607f-4818-b236-3366cd00d701",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "ee32ca65-26e8-4a0d-9488-a06a39d88e34"
        },
        "item": {
          "id": "5ecefae9-9c62-4df7-b60b-d036a7500b5b",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "c0559c13-8015-40da-b074-f1ec3f2c7d45",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57f8800c-ca34-4532-8fb1-f4150e0a8388",
        "cursor": {
          "ref": "be25a7e4-edb3-4089-8cee-b805a9396f38",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "78dc051f-8b29-4f35-9bd9-3718c28760b3"
        },
        "item": {
          "id": "57f8800c-ca34-4532-8fb1-f4150e0a8388",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "3ddad366-1282-4efe-a378-21e8db4b810a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5859a985-b433-46a5-b4c8-1b10ead946e6",
        "cursor": {
          "ref": "7dc08ca7-3547-4da9-a3f6-9167ccdfe707",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "91c29fae-54a5-4d34-a2ab-4d2018a53038"
        },
        "item": {
          "id": "5859a985-b433-46a5-b4c8-1b10ead946e6",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "5e6fb1a6-279b-41a3-93dd-1f1848a3daf4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9df1fed-e74d-4d1e-96e2-27b023d56c0d",
        "cursor": {
          "ref": "88b999fe-02c9-4898-bea1-6a0b9263b37d",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "632fc7bb-b860-4bb7-8743-dc157312becf"
        },
        "item": {
          "id": "b9df1fed-e74d-4d1e-96e2-27b023d56c0d",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "f6f9e83c-7031-4e48-b835-1947ca965ca9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dd2d0de-0c6d-4916-8a70-cb163bf072f4",
        "cursor": {
          "ref": "b53373c0-99ba-4c87-90a2-2769863af9ea",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "48ff2ea2-ae6a-4d4f-9c5d-e31a69d5d95c"
        },
        "item": {
          "id": "9dd2d0de-0c6d-4916-8a70-cb163bf072f4",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "ede4cebf-8583-4740-80cb-a5086e686a39",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01cceca2-ae2d-46c4-a4f9-6c1e5f8d47ec",
        "cursor": {
          "ref": "71e84b86-83bc-45f3-8e6a-d961c17f202b",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "3e69033e-729b-41dd-a10e-386b8d9379bb"
        },
        "item": {
          "id": "01cceca2-ae2d-46c4-a4f9-6c1e5f8d47ec",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "f8bbebc5-487c-486f-aaee-8b34d152c144",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e0834de-551c-4581-94d2-00ae96815f7c",
        "cursor": {
          "ref": "c4868f5a-fd68-4652-a670-d3e3e50399c4",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "2fbac96c-72b9-4069-87bf-a88b1f845a14"
        },
        "item": {
          "id": "3e0834de-551c-4581-94d2-00ae96815f7c",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "dee78092-b0e1-4744-a97d-3dd58a2e174f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d223a045-00e2-4a66-a19d-f5aa93cf1253",
        "cursor": {
          "ref": "b311299c-dea3-48b7-9eec-9f201fc9782a",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "287dc02d-ea94-4a2d-9cab-bf5dfd1c1150"
        },
        "item": {
          "id": "d223a045-00e2-4a66-a19d-f5aa93cf1253",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "48574a1a-5845-41c1-b2a2-ed6fe6f4e998",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "929b36f8-30d4-46f0-bad7-00d43eb2fe36",
        "cursor": {
          "ref": "53b7f869-632a-43be-a751-2637b271fa72",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "dd934967-829f-47c2-a5ce-26a0039fbc6a"
        },
        "item": {
          "id": "929b36f8-30d4-46f0-bad7-00d43eb2fe36",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "50975bc0-77c2-41c9-a978-846a672167bd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d6aec4a-7e2b-4dc5-9c23-0128a58c32e6",
        "cursor": {
          "ref": "6551b7c5-ab93-4fb3-9311-0e06619c4734",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "248ecf0c-5be6-46c7-a32b-ba84ddd82e78"
        },
        "item": {
          "id": "8d6aec4a-7e2b-4dc5-9c23-0128a58c32e6",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "fa2fb38a-6d34-4bf1-a824-8cac141a0f41",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "697ebebb-43a4-4ef0-ba55-1844664b8b48",
        "cursor": {
          "ref": "3d426ee1-b4ab-4f98-9a0a-6b2f8c28f62a",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "8d595dba-8f4e-400f-ba7d-926fc5e7e08c"
        },
        "item": {
          "id": "697ebebb-43a4-4ef0-ba55-1844664b8b48",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "763ca7e9-5815-4e82-812e-7979b8b9bc22",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c6e968a-c1c1-4c27-8495-45e0c0afa79f",
        "cursor": {
          "ref": "a6fb431d-b729-4967-9579-bf663c3d84b1",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "05a6cf79-16bf-47f5-98cb-ee700079ab0f"
        },
        "item": {
          "id": "1c6e968a-c1c1-4c27-8495-45e0c0afa79f",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "5504b489-900f-440b-bd7b-75032056c520",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "376c22d3-b27d-41d7-b819-68293c4359bd",
        "cursor": {
          "ref": "50460c50-c9ab-403e-9a3b-f65213c23a74",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "61a9b863-e000-47d1-af5d-aa41092f6a2f"
        },
        "item": {
          "id": "376c22d3-b27d-41d7-b819-68293c4359bd",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "185501dd-06dc-4964-90f7-72df63afa8f8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "007dc22c-7fab-4088-b189-5bd51470bdf0",
        "cursor": {
          "ref": "bff985ca-cbbe-4bcc-9214-ea7ac7396bad",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "660855e2-4177-43eb-9209-ac1535d73163"
        },
        "item": {
          "id": "007dc22c-7fab-4088-b189-5bd51470bdf0",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "e1e2bc90-db66-4920-8fb2-cd2e89094976",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba056995-36e6-4dfc-9e49-e87bb143651a",
        "cursor": {
          "ref": "8ad7f265-8b7f-4822-ab9e-0692c50769d9",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "58871b12-22d9-44d1-a415-266d203762e9"
        },
        "item": {
          "id": "ba056995-36e6-4dfc-9e49-e87bb143651a",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "f54f42d1-13f2-45f7-bb49-29567a2467ec",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8137084d-4e4a-451c-9c28-a458397e0060",
        "cursor": {
          "ref": "7d5602cb-9ea4-4c9f-99d2-2a5462009364",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "009ef096-376d-4020-9913-3ac92fda0c57"
        },
        "item": {
          "id": "8137084d-4e4a-451c-9c28-a458397e0060",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "5baabde9-3045-4366-af36-24f33df5ea21",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "e49772c4-c553-44ff-a1c9-a04d36dee6fe",
        "cursor": {
          "ref": "7ae3b100-4a4a-46a1-a6e0-d68ac3a907f4",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "a1b14f2c-a401-4c59-8cf5-3b90cbbfc089"
        },
        "item": {
          "id": "e49772c4-c553-44ff-a1c9-a04d36dee6fe",
          "name": "credentials_issue"
        },
        "response": {
          "id": "850bde82-d8ff-4919-84a0-994229e22192",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 201,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "04beb07d-237a-420b-9dc0-253ff5863d48",
        "cursor": {
          "ref": "67211fe4-e68f-4050-ac19-755b1778ea83",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "a19490ae-3c98-4410-b44a-dc49fde1b30a"
        },
        "item": {
          "id": "04beb07d-237a-420b-9dc0-253ff5863d48",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "51f0a272-f86c-4b6b-835d-1d30d7c4072d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 82,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "90c42018-07fc-4031-bfde-f2854ca8fc79",
        "cursor": {
          "ref": "27d644e4-64da-49a1-b7bd-5074968e75ab",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "c30f8589-b80a-4e22-85c9-2a8655e56030"
        },
        "item": {
          "id": "90c42018-07fc-4031-bfde-f2854ca8fc79",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "02101ba4-dc24-4c4b-b503-ab18e13df6a9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "088cedf4-205a-41c7-acfb-80f75c6a9fa5",
        "cursor": {
          "ref": "fdce987f-7197-422a-abf0-895fd96be32b",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "f5cec620-1329-431f-b383-7a7f9ce6494d"
        },
        "item": {
          "id": "088cedf4-205a-41c7-acfb-80f75c6a9fa5",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "4acd0543-11fc-41ea-98a2-c687bb8330ec",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "433b8200-c584-4dc6-a946-3b4d0476d4ea",
        "cursor": {
          "ref": "1d75317f-b36f-4d34-8db1-3c84535cefec",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "7557b2fb-231b-4ae1-8d15-3e0896132392"
        },
        "item": {
          "id": "433b8200-c584-4dc6-a946-3b4d0476d4ea",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "c6fb8d61-2a1a-4564-a387-745e644487c0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "b5a44eb3-f130-460c-a069-9e8ad5ca9b33",
        "cursor": {
          "ref": "bfb34027-f459-40fd-8786-905a8529c0f9",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "6a139f22-dc13-4825-9e00-6e2a31d3d8ad"
        },
        "item": {
          "id": "b5a44eb3-f130-460c-a069-9e8ad5ca9b33",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "d28aafca-b8dd-44a6-9309-80c2f3ab83f9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "41461297-f563-4402-b30d-86e3391cd61c",
        "cursor": {
          "ref": "2fc9c0fb-09fd-4fb6-bc27-6b887960132f",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "07a861c1-35b2-47b0-b58b-836583c0ae24"
        },
        "item": {
          "id": "41461297-f563-4402-b30d-86e3391cd61c",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "f41f5d74-b381-41e0-996c-1144925ac4f5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c41dfbc-859b-4e9f-b99f-532c4bd874bf",
        "cursor": {
          "ref": "1b6d1979-d7b6-4fd5-8c4c-ae498133af3c",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "2ade4772-dd3f-4441-9744-3357f2a29323"
        },
        "item": {
          "id": "6c41dfbc-859b-4e9f-b99f-532c4bd874bf",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "4a0c48ea-4828-410b-895e-44ae4c5dbea6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e843e4a2-7c4f-4859-b179-7e176985dd37",
        "cursor": {
          "ref": "88dc5f5e-eb88-4f3c-84d6-0fc1af71ed6a",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "07eb2b55-79c7-44e0-803d-6c9bd644bd8a"
        },
        "item": {
          "id": "e843e4a2-7c4f-4859-b179-7e176985dd37",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "d1b2ab96-d897-43e7-844e-567ee7a5d238",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "488442d8-dd20-4daa-8f32-839f867fb773",
        "cursor": {
          "ref": "ac6dfc88-a6b3-4973-bed4-20d57ccb165e",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "53c84da1-58cb-4e51-99dd-f6bab1a7f361"
        },
        "item": {
          "id": "488442d8-dd20-4daa-8f32-839f867fb773",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "7dee3b90-333d-4d27-a1a0-13340e981c83",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93147587-3841-4029-8979-3a9b3404a534",
        "cursor": {
          "ref": "eb494747-4903-4eae-b36c-50398638c83d",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "2594eaf4-0960-4928-8637-b136f621c50c"
        },
        "item": {
          "id": "93147587-3841-4029-8979-3a9b3404a534",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "d44a6bff-ee02-4616-a29b-28d3dd8d722f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b39640b-dcba-4603-8a64-88a6b065e73e",
        "cursor": {
          "ref": "72ee93bc-c9f9-40c9-aa12-9d79c0d68ae4",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "8dbb3711-82fb-44d6-8947-67061888b2ae"
        },
        "item": {
          "id": "5b39640b-dcba-4603-8a64-88a6b065e73e",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "d5b10582-00e6-4146-b946-79206b6aeac9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "769c2906-fc20-4619-b03b-f002ecb3465b",
        "cursor": {
          "ref": "0a8b275e-32c4-459d-a488-22b85b5fa7ec",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "b3ea1569-5c18-4ad8-ba2e-38bfd3ab198d"
        },
        "item": {
          "id": "769c2906-fc20-4619-b03b-f002ecb3465b",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "f54240f7-6761-42c1-bb15-1cdb3a2cb8a1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0234bb9c-84f1-4eee-a557-40bc821ed531",
        "cursor": {
          "ref": "62b8d4ed-21cc-4541-b64f-5c9a5e1cae30",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "79b1ba2f-acee-4ec2-bc79-65dab8e865d4"
        },
        "item": {
          "id": "0234bb9c-84f1-4eee-a557-40bc821ed531",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "779eab94-72e7-4c5d-ac72-7f74a9c80109",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20513cec-6eb7-4c02-a6ce-91f768a24f53",
        "cursor": {
          "ref": "c631757a-1a5a-448c-a5b6-e2e83cfd1fe2",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "ae419140-e6ac-4556-9fe3-3a26a22927b1"
        },
        "item": {
          "id": "20513cec-6eb7-4c02-a6ce-91f768a24f53",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "530c6fb7-6f32-4dc7-9cea-2dc467131ddd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d358024-a63e-48e3-a769-7c62ed96a06c",
        "cursor": {
          "ref": "dfb3f8bd-eac5-47e3-a8e5-cce037b31913",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "a85f22fd-7fa7-48cc-aa20-1b6db1c4b3f6"
        },
        "item": {
          "id": "8d358024-a63e-48e3-a769-7c62ed96a06c",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "0a8aa233-7eb1-4562-9a1b-64cda34c7b32",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12b96e27-b843-4fae-a14d-ce008b54f676",
        "cursor": {
          "ref": "9732f5aa-82f2-45da-af1f-a1a7e4981604",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "14a3a9ff-b6eb-4c45-bbd3-e2fc1390216c"
        },
        "item": {
          "id": "12b96e27-b843-4fae-a14d-ce008b54f676",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "17c6950a-bcfd-4663-9f11-8251e182bdfa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02063c26-9769-44ea-ae44-5b86ea4940b5",
        "cursor": {
          "ref": "2efd63c0-423b-45db-8f76-8c76db89fb5b",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "c334e358-e6c1-4efc-b30d-0ef05eb4ba18"
        },
        "item": {
          "id": "02063c26-9769-44ea-ae44-5b86ea4940b5",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "2ccc70be-3b70-4b02-b0dd-0b5b6fb14eb0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b808d168-061c-485c-949e-ed9a95e18204",
        "cursor": {
          "ref": "623a8b03-09f4-46ef-a807-7f3753a5f779",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "06c33c53-ad97-46da-b6a9-c584dded007e"
        },
        "item": {
          "id": "b808d168-061c-485c-949e-ed9a95e18204",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "62ef79eb-c65b-4176-be41-8ecabc086914",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dec4aa4-d702-4252-97c9-bc5306948118",
        "cursor": {
          "ref": "54e6c9c9-31ae-4b89-8c9c-bfea1a59f942",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "47ebe1ca-8319-4b96-9ea8-e753770a4c9c"
        },
        "item": {
          "id": "9dec4aa4-d702-4252-97c9-bc5306948118",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "4aedb9e1-a617-4bb4-9704-c0f8992a4dc8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33908d15-0e64-4fc4-963a-3c7376d3472c",
        "cursor": {
          "ref": "6e9d94a0-4409-4712-b0cd-96b52d25a49a",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "8d674c16-caee-4cfd-b53b-cb70e3e3a668"
        },
        "item": {
          "id": "33908d15-0e64-4fc4-963a-3c7376d3472c",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "b09509ac-8745-44a5-9d66-fcde42d9131e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7292739a-1780-4c3f-bb9c-99b7af827100",
        "cursor": {
          "ref": "63aac0d0-da6c-4608-b74c-f8bd258416fc",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "3ceb023a-8342-46f0-89fb-603598f8407c"
        },
        "item": {
          "id": "7292739a-1780-4c3f-bb9c-99b7af827100",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "40353093-51b3-4cd8-844c-d234e2ec1cae",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4170cbd1-abbd-4c37-beb4-82f19737354e",
        "cursor": {
          "ref": "c8086fb7-051b-4fa1-a054-b424eeda064c",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "32566622-c1ea-4b34-a9bd-42e37b2fbf80"
        },
        "item": {
          "id": "4170cbd1-abbd-4c37-beb4-82f19737354e",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "b5b87210-cda6-499e-9591-d63dc3c34384",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4a12462-7b1f-46b5-9899-ed0b7d085f0d",
        "cursor": {
          "ref": "8d5133d0-f7e6-410b-af2b-2c81d9c4e810",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "af2daf38-ee75-4e95-aad3-85fe1d10c065"
        },
        "item": {
          "id": "e4a12462-7b1f-46b5-9899-ed0b7d085f0d",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "b98c9774-92bf-4c29-9a48-5daf62d53f25",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46a35cfe-3c3d-45ae-bd97-0a1b23b4879e",
        "cursor": {
          "ref": "6d852b46-ed0d-465d-a35a-cb8ad65cce3a",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "2431cb49-4b1b-4df0-ada8-e904d26d8f72"
        },
        "item": {
          "id": "46a35cfe-3c3d-45ae-bd97-0a1b23b4879e",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "afc80795-f260-4c78-a04f-d152ace847cb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c661c29b-ff68-480d-9422-85f4e53a427e",
        "cursor": {
          "ref": "804cab78-27f8-436c-a89b-7e5097183506",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "a3877f32-9ba9-42a0-a977-b378ebf097a6"
        },
        "item": {
          "id": "c661c29b-ff68-480d-9422-85f4e53a427e",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "3a7925da-b21a-4196-8548-c5ccf966dc92",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdb7ba22-e1a7-43d7-835c-ee969d799d6b",
        "cursor": {
          "ref": "ba8ad453-b1b3-4d66-a947-fbb8de7a24b0",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "b24defa7-780b-46ab-a8bc-fd191e70a023"
        },
        "item": {
          "id": "fdb7ba22-e1a7-43d7-835c-ee969d799d6b",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "3e23760c-462e-469e-b92b-8fca61833e4b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77144453-5de8-44ac-9e97-a099bd18ba0e",
        "cursor": {
          "ref": "8ba26f23-b514-4114-b943-b6b8447c3df0",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "0b8ff216-9160-420d-9310-b988d35cc6a0"
        },
        "item": {
          "id": "77144453-5de8-44ac-9e97-a099bd18ba0e",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "aa99b797-2a62-411e-94c9-50589f97dce1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b64de8f-60ee-47dc-b1b3-eb06b0ef9040",
        "cursor": {
          "ref": "69ef3b72-50a4-4a80-9de2-85e3a42c0b87",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "7ad473b1-7050-46ed-8b8b-475f8848f0dd"
        },
        "item": {
          "id": "9b64de8f-60ee-47dc-b1b3-eb06b0ef9040",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "e1b35bf5-06c4-49a7-abfb-8ac3e96e406a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb6d86f7-2670-4a86-af26-79ae5f716505",
        "cursor": {
          "ref": "f27996a5-04d5-4228-af85-add8191c3312",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "d088c813-dcfd-4f95-ae82-aa20b710f855"
        },
        "item": {
          "id": "fb6d86f7-2670-4a86-af26-79ae5f716505",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "8e95a082-aff0-468a-92ab-d0c2a4adf1ac",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f194bb6-1ee9-4536-88a1-7608d55e438d",
        "cursor": {
          "ref": "7b089db9-c57c-49e6-9cde-b5d4681feb87",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "b349cd75-674a-4ffe-b6e6-577bcb05c4aa"
        },
        "item": {
          "id": "6f194bb6-1ee9-4536-88a1-7608d55e438d",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "3098fcd0-22a2-4dd7-aaae-735c4db69f21",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa7cdc66-db14-4f5b-bb2f-36385dc4e5fa",
        "cursor": {
          "ref": "eb168921-3986-40dc-8c6a-98a1fd368b4a",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "cf12e1bb-669a-4b1d-8c6f-12ef48d0cfb2"
        },
        "item": {
          "id": "fa7cdc66-db14-4f5b-bb2f-36385dc4e5fa",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "4ebaf5b9-27a5-4f27-af94-4c211f86f376",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b76c629-a279-4683-8371-1ca51fc57f79",
        "cursor": {
          "ref": "c3fe6e85-6013-4f98-bf2e-32d36530cb50",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "a74b4fbd-b73d-4225-ae40-c1fa4e036d83"
        },
        "item": {
          "id": "9b76c629-a279-4683-8371-1ca51fc57f79",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "1d17f8c9-d683-46f7-89f9-a07f60201a08",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b38667c8-95c6-40a9-9364-0c3873c05de0",
        "cursor": {
          "ref": "f91ce248-4576-42dc-b13a-c6f72e384891",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "74d934a6-d169-49f3-abcf-5f319c09afa1"
        },
        "item": {
          "id": "b38667c8-95c6-40a9-9364-0c3873c05de0",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "e8c0f748-5f86-4409-82e7-42ea49238970",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88220002-89c2-4a65-b99d-7ff0f3ef1dd6",
        "cursor": {
          "ref": "b3189e1a-e344-49b9-a3b9-608b41da3161",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "98240705-4bbf-4038-a9e1-95b588a951df"
        },
        "item": {
          "id": "88220002-89c2-4a65-b99d-7ff0f3ef1dd6",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "81b402dc-70cc-4170-a25e-8d34c958e4d1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c05d66d2-c513-4031-abc0-c5d24b56d463",
        "cursor": {
          "ref": "1c866a41-dc0b-4540-bf00-bf1c21dffa7f",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "5f7a5051-c0e2-43d5-acb4-ef507cd7a29d"
        },
        "item": {
          "id": "c05d66d2-c513-4031-abc0-c5d24b56d463",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "abd57044-902f-42df-b720-0326584444db",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e69f259c-a88b-4eee-a912-5428dd65df73",
        "cursor": {
          "ref": "b0d3ee74-f95f-4c84-8657-b1d49fc81f6a",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "7e2e119b-189b-4b7b-b6b6-d2901b07214c"
        },
        "item": {
          "id": "e69f259c-a88b-4eee-a912-5428dd65df73",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "c39bc988-a5a7-49a0-b09c-09a186bcb697",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ac89a85-74e8-4b1e-82ee-817840fac3cf",
        "cursor": {
          "ref": "9b631571-6b58-4fc6-aa6f-94a53a1e4129",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "8ff4b563-7748-4f56-a772-0923a193a7ab"
        },
        "item": {
          "id": "8ac89a85-74e8-4b1e-82ee-817840fac3cf",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "c00afe54-9da4-481d-b2a5-af0ae2b7e8aa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce668f02-b6c9-47da-b969-e56599576a84",
        "cursor": {
          "ref": "56b03f75-eb8c-4a80-b28a-594474a9ebbd",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "ccffb760-a099-4a9e-9a2b-ac9fdbb4f622"
        },
        "item": {
          "id": "ce668f02-b6c9-47da-b969-e56599576a84",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "361cacde-fd47-4022-9ed7-e8dd1dc6addc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a65d4fea-c92e-4241-a2ea-834c97521ddf",
        "cursor": {
          "ref": "ca783da6-4730-4908-9d90-20abe3a157bb",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "d434ad42-2fa5-4933-91a1-1028a1100c9f"
        },
        "item": {
          "id": "a65d4fea-c92e-4241-a2ea-834c97521ddf",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "d72bce4d-c4d1-4884-bfde-e813809dd047",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f60665d-ca99-447c-b008-e76a33b8a7b9",
        "cursor": {
          "ref": "c784babc-ca37-4001-acb9-5a974e8365f3",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "08f688e6-f09d-4220-bf08-1a78c5ed8a30"
        },
        "item": {
          "id": "7f60665d-ca99-447c-b008-e76a33b8a7b9",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "c43e8161-04a5-4045-b67f-34e78d6ad568",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5db39447-2c8d-42d3-9c89-bca577227c34",
        "cursor": {
          "ref": "c758478c-cb48-41b0-ae09-a39e1aa9ec3c",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "17d85c57-383c-44f8-bdcb-a09a5d96af07"
        },
        "item": {
          "id": "5db39447-2c8d-42d3-9c89-bca577227c34",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "fcfe0bfd-a690-493e-bd72-7eeef3bae8ac",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e10643a9-f954-4ade-a4f3-12b23c3c04e0",
        "cursor": {
          "ref": "ade4c908-9661-4063-8641-2f5fa7419fa2",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "8249c3bd-ab97-4c5f-8db6-ac0ce7deb383"
        },
        "item": {
          "id": "e10643a9-f954-4ade-a4f3-12b23c3c04e0",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "cfad0b4d-d4c5-4411-ad30-117374276470",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1dba853-1d75-4513-b234-ee93abc32f0c",
        "cursor": {
          "ref": "8a777f79-08ed-444b-b436-c1363f8dbff9",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "478aef8c-7f3f-4614-913e-d11634425cb0"
        },
        "item": {
          "id": "e1dba853-1d75-4513-b234-ee93abc32f0c",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "674ea003-e580-409d-ab86-b16be58c8608",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ae8b100-e00b-46cc-b799-9440fbef6212",
        "cursor": {
          "ref": "534e3274-3dd0-40db-b486-6eb0248fb42d",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "ca7b6375-d477-4b83-a49e-68d6c0d866ad"
        },
        "item": {
          "id": "2ae8b100-e00b-46cc-b799-9440fbef6212",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "6dcebcef-729b-4ecd-b0d1-d81083a3304c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25b97421-1c5b-47ed-a030-6f88ef8a8260",
        "cursor": {
          "ref": "2903f3fc-c3b0-46f2-b07a-1acc40d34fc7",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "67ff0d9f-d7fc-44f7-8b2f-88ed5186d213"
        },
        "item": {
          "id": "25b97421-1c5b-47ed-a030-6f88ef8a8260",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "be6c1ccc-86eb-4dee-8bdd-a6779e2d5e9c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6eb6a90b-7700-46c2-adf9-a456bf1eedc4",
        "cursor": {
          "ref": "d1fd5c32-5d70-4041-8145-355a88597858",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "809f41d6-97a9-4eb8-9373-3c116180c93f"
        },
        "item": {
          "id": "6eb6a90b-7700-46c2-adf9-a456bf1eedc4",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "747c6edb-4bfe-4de3-98d7-3c8f98635ca5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7a5f381-47a8-4344-a5e2-087ceb103e74",
        "cursor": {
          "ref": "0941cf0c-ce9a-40e0-ba2b-8e61e67d4065",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "ce1260eb-c8e8-4421-a85e-6c10f594a3ba"
        },
        "item": {
          "id": "d7a5f381-47a8-4344-a5e2-087ceb103e74",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "99c5806a-e5b7-4188-86fa-3ba61ce1ccf2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "987343ff-c96b-4a02-961d-682978efff40",
        "cursor": {
          "ref": "67f5ba76-c34c-423f-9a8e-73349f8f84e6",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "605f25ed-f91e-465f-9acf-dae9da9525f8"
        },
        "item": {
          "id": "987343ff-c96b-4a02-961d-682978efff40",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "ba57ba3b-ba96-4d25-adec-e2a8ba1e5a56",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3273196b-5df3-4066-bc62-c98a2699e382",
        "cursor": {
          "ref": "a226b632-aefd-458d-93eb-008f34e8f9c3",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "1f52f0e9-65a3-4625-93ae-4de8ae5fdf99"
        },
        "item": {
          "id": "3273196b-5df3-4066-bc62-c98a2699e382",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "9a1d4756-e85b-401d-82c1-868dea62069d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "652b6877-611a-4c6c-ae16-29fb573ef44b",
        "cursor": {
          "ref": "ed23b7e1-9dbe-4b0a-8e98-787acfd8d2e0",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "d1848ad0-4c14-4900-b67e-bb40e7058d1b"
        },
        "item": {
          "id": "652b6877-611a-4c6c-ae16-29fb573ef44b",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "cd7c5514-0f01-4148-9615-6787003e54ec",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0a01202-ba8d-4202-898a-5cce3bf1848f",
        "cursor": {
          "ref": "910cc0b8-396f-49a9-8b59-8c4cbd63ced1",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "93190e46-69f6-4d8f-890e-f9dce344e2ea"
        },
        "item": {
          "id": "d0a01202-ba8d-4202-898a-5cce3bf1848f",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "df90104e-e2ff-4f4d-aac9-0920a058bde3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3883b29e-d0ff-4c59-a800-e70f1504f0ca",
        "cursor": {
          "ref": "55fbfcc9-612a-4f5d-bd3e-12474b29b077",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "d18cfc9f-6061-42c8-8a13-dd35646e3a26"
        },
        "item": {
          "id": "3883b29e-d0ff-4c59-a800-e70f1504f0ca",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "a650d026-794d-4426-959b-9e62e076fb16",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fa1788a-9b12-4cf5-9c01-0fe98ce8a723",
        "cursor": {
          "ref": "fbca7058-f5a1-406c-970f-c82740d18756",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "b3cd0af7-f128-458b-81ae-93a5653e5f56"
        },
        "item": {
          "id": "2fa1788a-9b12-4cf5-9c01-0fe98ce8a723",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "f8f1baf6-8ef2-46cb-8a8a-f12ff7a2b153",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c07dc8d-4b0c-4f34-a177-5010254dbcf8",
        "cursor": {
          "ref": "cc6948f7-807d-45e5-8922-370682079ace",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "721ed09d-7f2d-4120-afce-b770e74b1121"
        },
        "item": {
          "id": "1c07dc8d-4b0c-4f34-a177-5010254dbcf8",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "d8ee8400-edba-4bec-88ea-0b6246afce77",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "653744bb-50ea-4b64-b890-1968028df4d6",
        "cursor": {
          "ref": "e27a6729-0f84-4add-acf9-c8d8e9adb5b9",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "ff2bfc27-e208-410c-8f06-d56ae2b7f208"
        },
        "item": {
          "id": "653744bb-50ea-4b64-b890-1968028df4d6",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "c9039a28-fcee-4c9e-9772-78de7ac2f93f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b72478e0-a849-4621-a1cb-7e3ba622d668",
        "cursor": {
          "ref": "f0eac47a-a985-4965-aab4-9b94270989c9",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "18ee46e5-a435-498a-abca-86d6f115ede3"
        },
        "item": {
          "id": "b72478e0-a849-4621-a1cb-7e3ba622d668",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "2acd448a-1f33-4f61-bb62-7b3bbbf0bd7b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0009f005-0c7e-46f1-810c-30e367a67277",
        "cursor": {
          "ref": "f16e7274-2162-4d4a-8726-2f4e0899d4f3",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "df349599-aa22-442a-9e7f-40adb7f1ab95"
        },
        "item": {
          "id": "0009f005-0c7e-46f1-810c-30e367a67277",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "d4911ff8-62a9-40de-b444-07b533ae0e8f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42575262-f420-4d48-a44f-1f5ae70fb649",
        "cursor": {
          "ref": "13e2cdb4-e110-4ddf-9d00-6be232c38051",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "4eec5164-743d-4df3-9007-442d84c10e7f"
        },
        "item": {
          "id": "42575262-f420-4d48-a44f-1f5ae70fb649",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "4f36bdb7-8241-4199-b5be-cc467da285c3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c9ef255-fb7b-4186-999e-8e0fbf093e57",
        "cursor": {
          "ref": "6921cf9a-74d8-459e-9486-9f982f30bedc",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "93fce0fe-ceb7-4194-b6ef-375facdc50a8"
        },
        "item": {
          "id": "5c9ef255-fb7b-4186-999e-8e0fbf093e57",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "f95a8326-4dc0-4f96-ae53-40580dccecec",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78e6612c-5498-4b12-849c-a64bb6a9bbf7",
        "cursor": {
          "ref": "3a8204e7-6c2c-42e5-8049-f4288a8c59d6",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "dd2e1653-4120-4d0d-ad95-bdfffb464cad"
        },
        "item": {
          "id": "78e6612c-5498-4b12-849c-a64bb6a9bbf7",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "c6b3b285-ba97-4fe0-a2b9-e60bb94ab97a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b62887ed-0d28-403f-ad3b-9b1d112f431b",
        "cursor": {
          "ref": "108330e6-c8d7-4e73-b138-d1523b2d78b3",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "8b713805-9cdf-4071-ae85-1fed8e756299"
        },
        "item": {
          "id": "b62887ed-0d28-403f-ad3b-9b1d112f431b",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "e57e9dd7-1883-4ad9-9a4e-9db99e4a28e2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f8baff8-dfe0-4f83-a85d-e1227e455d5a",
        "cursor": {
          "ref": "7b9e3943-c8c8-45da-b559-fb3f29903135",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "0b4d804d-95a4-4481-bb14-ae6abc76325b"
        },
        "item": {
          "id": "1f8baff8-dfe0-4f83-a85d-e1227e455d5a",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "4bd79855-adba-4af9-838f-2d4972c681bc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1ffe0a7-3524-4f3f-92d8-9626284b9e50",
        "cursor": {
          "ref": "6a29a6dd-ebfa-4e92-b26f-7ef9e4ff236f",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "3b1414ae-62e1-4b41-89ad-6b28f9db2a7f"
        },
        "item": {
          "id": "e1ffe0a7-3524-4f3f-92d8-9626284b9e50",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "71d26d54-55f8-4703-93ac-f0ff051d9687",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06514c3e-7986-4df5-bd2d-b07c44e53ca7",
        "cursor": {
          "ref": "d927f058-c22c-46d2-8ae7-f5e3e435be3e",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "a8a02a0a-7057-434a-83e0-e8ab9b85e69e"
        },
        "item": {
          "id": "06514c3e-7986-4df5-bd2d-b07c44e53ca7",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "8e4a05e1-1de1-475b-8db6-c914d29805ab",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3089e65-49f6-4d41-9eea-25fdb75fc7ba",
        "cursor": {
          "ref": "dbf0bbb9-15ba-4874-9ab7-226cf7103367",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "c4f87c40-5dbf-441b-8333-faba28dc1dd0"
        },
        "item": {
          "id": "b3089e65-49f6-4d41-9eea-25fdb75fc7ba",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "daf2df7a-223a-438f-ba1b-6d1fd25aeeac",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddbfc1b4-856d-44e1-9b00-363fa0075170",
        "cursor": {
          "ref": "1ec5091c-822a-4b7b-a258-02018d4c8478",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "0a009b11-457c-401f-aba4-57797fbe7c36"
        },
        "item": {
          "id": "ddbfc1b4-856d-44e1-9b00-363fa0075170",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "d635cf65-b4f0-4cd0-9ef4-654b1f9166ef",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1d7b050-b47d-4843-a974-d57fb7ff7a82",
        "cursor": {
          "ref": "78ba793e-a9f5-45f8-8930-1b2dd06ad3ce",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "4ed34021-665e-4d23-980b-429962fbf166"
        },
        "item": {
          "id": "e1d7b050-b47d-4843-a974-d57fb7ff7a82",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "596b371e-786a-4b36-9923-66916655938d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bba999d6-a4c9-4301-a3cd-9c18f910bba4",
        "cursor": {
          "ref": "0c1f2981-911e-4e3c-b447-d2212a8b9a82",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "e0f1a362-926a-4a1a-888a-ceffb909dfb1"
        },
        "item": {
          "id": "bba999d6-a4c9-4301-a3cd-9c18f910bba4",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "db5a1045-c82f-4c28-b493-75b094142784",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a191746-18d9-4de2-96d2-a61d35f87dd2",
        "cursor": {
          "ref": "f213fe8f-c1c6-4027-b128-cd3436c9b870",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "d14e9b28-6728-4509-8d50-7750aeae3e36"
        },
        "item": {
          "id": "2a191746-18d9-4de2-96d2-a61d35f87dd2",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "9d43fcc7-e904-48d0-bd58-8346761225c1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38258871-b487-4bf3-8c84-0e386c45c307",
        "cursor": {
          "ref": "0d8508d5-cc93-44cc-b997-8f9c32060e66",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "8142d777-6a61-41fa-aedb-e3cecfcd362d"
        },
        "item": {
          "id": "38258871-b487-4bf3-8c84-0e386c45c307",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "68a5d08e-40b3-4e4d-9e9f-1ba41e09c5a0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "064fe422-333b-47e7-a542-3b39898286a7",
        "cursor": {
          "ref": "703a80ab-6e39-43df-a266-4fce8e0f98f7",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "083cdc43-293f-41fd-978e-54676d186cfb"
        },
        "item": {
          "id": "064fe422-333b-47e7-a542-3b39898286a7",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "8ae8db0a-9ef4-4359-8ef7-4da66ac692f1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d18241a9-a3b0-4036-9cdf-c7a19151ce46",
        "cursor": {
          "ref": "8ce9713c-0433-4fc3-8555-646d77995878",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "e9bd9de1-600c-4a67-b77d-50c6ab632824"
        },
        "item": {
          "id": "d18241a9-a3b0-4036-9cdf-c7a19151ce46",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "61347c58-1b5f-4e9f-b71c-687df6dbf9b2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3403077-0d10-42ae-95ea-ca2b83c66d3b",
        "cursor": {
          "ref": "6bfb567d-3a9e-4c9b-a7f0-575a7f901bb2",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "c874c53f-0566-495b-be34-4b907a0258e8"
        },
        "item": {
          "id": "e3403077-0d10-42ae-95ea-ca2b83c66d3b",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "5fa8b108-1af1-4e0d-9a61-fe725f44bbad",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7183feba-5174-4ae5-9d07-cab436d9fe6b",
        "cursor": {
          "ref": "f09f6e8e-c58d-46b9-b8e1-2e1b8c656cbd",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "05693e4d-34a2-4259-a952-db52fd79a70f"
        },
        "item": {
          "id": "7183feba-5174-4ae5-9d07-cab436d9fe6b",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "8535c165-1f59-40f9-80aa-09c78d0b1b3e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a483287d-b0ca-4e5b-b9fb-a5e8c00126e4",
        "cursor": {
          "ref": "ecfbe948-4230-4b6e-9d88-fe52f809811e",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "9336dd46-ff69-4a23-8d62-21a95221444b"
        },
        "item": {
          "id": "a483287d-b0ca-4e5b-b9fb-a5e8c00126e4",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "6bc2e290-b817-4a56-8ca1-2159761afd3e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7fd5302-106b-4b3b-a8b2-fc4d6f9eba46",
        "cursor": {
          "ref": "e257e269-7a3d-4abc-933b-aff7ea177745",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "06f27363-9dcf-414d-81fc-101ec8164c72"
        },
        "item": {
          "id": "d7fd5302-106b-4b3b-a8b2-fc4d6f9eba46",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "5ec329f0-17ad-4176-b80a-393a239a8952",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "440b89dd-8fe3-47c0-ad29-67e62b7befd7",
        "cursor": {
          "ref": "4f187e3c-136e-446a-95a3-5474e4fc18de",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "17a7c583-66e7-4c52-b32b-42e48b90adac"
        },
        "item": {
          "id": "440b89dd-8fe3-47c0-ad29-67e62b7befd7",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "b86021d0-c403-4946-89b3-f5fc6c22fb1e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5496bb3f-5aaf-4eb7-992b-aaaf0d4f2280",
        "cursor": {
          "ref": "f00bb2c6-e381-4a53-ab8b-d8d7694c8a96",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "a09c5d5e-56b9-4118-b6ae-e359bc9cf7be"
        },
        "item": {
          "id": "5496bb3f-5aaf-4eb7-992b-aaaf0d4f2280",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "4c3b4fc4-0167-48aa-a7d1-c3205e6eface",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f68ef72-67de-4c07-8a0b-e48fd0cbb33d",
        "cursor": {
          "ref": "3b51d4d1-6609-47cb-9e1a-080ab964244d",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "53a1ddf2-c9ab-4a65-af5b-c40b401d18ce"
        },
        "item": {
          "id": "7f68ef72-67de-4c07-8a0b-e48fd0cbb33d",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "2148f718-83c8-42e0-9fe7-82af5f754b17",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1470eb2-1916-4d9c-9e68-e9958ebf5d3f",
        "cursor": {
          "ref": "29efdaa7-3b5b-42de-93d7-63d48247f6b7",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "d34e01fa-2b6e-4a14-bbf3-2a79276a4176"
        },
        "item": {
          "id": "c1470eb2-1916-4d9c-9e68-e9958ebf5d3f",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "05f55680-2f68-48ac-a593-59164ff84db0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9606e25b-2dbe-401c-bfa9-c62ed7616e51",
        "cursor": {
          "ref": "7f9eb91b-233f-4d90-85b7-a4caa21dfd09",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "74ea744a-ab73-452d-98b3-feff2222a160"
        },
        "item": {
          "id": "9606e25b-2dbe-401c-bfa9-c62ed7616e51",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "013ecd9b-4226-47ab-8531-4088d2e4e1e9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5c9c15b-776a-4d91-84c4-19cf47f1af81",
        "cursor": {
          "ref": "a4dce283-7b13-49cd-afc9-6bf1868f3643",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "b9e37220-808e-47e0-af10-d583dbbb934c"
        },
        "item": {
          "id": "d5c9c15b-776a-4d91-84c4-19cf47f1af81",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "8efe1345-6b15-4236-b956-386e4e01cde5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b429fa3d-9c75-476d-bdbe-180d232a6c25",
        "cursor": {
          "ref": "aa44b302-a892-4b39-ac42-4328c56598e7",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "bea30045-69d7-4e30-bbb9-15a55cfa511d"
        },
        "item": {
          "id": "b429fa3d-9c75-476d-bdbe-180d232a6c25",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "15d616ce-3446-494c-a5bb-d16e7f766cf4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd883271-c8e6-4867-b040-a49fd059ced6",
        "cursor": {
          "ref": "2dae05b4-cfa0-4ce8-82c7-11a5913cd613",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "93af4bbe-8ceb-49ff-b195-589b993094f9"
        },
        "item": {
          "id": "cd883271-c8e6-4867-b040-a49fd059ced6",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "5eb1416a-15f6-4684-aa6d-0f14f23a9a05",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88584e78-a4fc-4512-9f48-16a1db825a4b",
        "cursor": {
          "ref": "a9b8508f-5cec-4ff1-9765-b46b6187b112",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "cd08b982-fc40-48ee-b2a0-9059a80b2341"
        },
        "item": {
          "id": "88584e78-a4fc-4512-9f48-16a1db825a4b",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "86fa07d9-eb06-4ff8-b193-7918a78dd59d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31977090-fdac-4f4c-b55c-ff016d37d614",
        "cursor": {
          "ref": "e3174ccb-c3e5-43ae-ad4b-eaa66651dc87",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "e4df03bc-2aa3-49f4-9b15-c21cd2f655e4"
        },
        "item": {
          "id": "31977090-fdac-4f4c-b55c-ff016d37d614",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "ce13de65-e2ef-4c51-8b4f-6ca795355060",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "277a6510-9ebf-4de2-8c0c-5f66ac3569cc",
        "cursor": {
          "ref": "675a0dce-1f0f-41c4-88d3-77786d72b9cf",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "23f3acec-9143-4894-913d-c581156f75ba"
        },
        "item": {
          "id": "277a6510-9ebf-4de2-8c0c-5f66ac3569cc",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "4534909d-8838-4889-b2d2-86f98780a60f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15168bec-a1dd-41cc-82e4-8be7b8eb1ab5",
        "cursor": {
          "ref": "8a79252a-5cd9-4650-931a-134cab800d68",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "fd2d5529-a614-498b-9488-9df56e353475"
        },
        "item": {
          "id": "15168bec-a1dd-41cc-82e4-8be7b8eb1ab5",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "c1010237-5563-48c6-8cc8-d638bca99c94",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d51f5a2-4580-4c98-b88c-af7b9de862cf",
        "cursor": {
          "ref": "9a94fb48-d32d-4175-a1cb-2f7cfb19e89e",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "13b45742-d9c6-4e36-9107-1e77436d8eef"
        },
        "item": {
          "id": "6d51f5a2-4580-4c98-b88c-af7b9de862cf",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "35e4acd3-b498-40df-be4c-2c9796827ce5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d934e14b-d7c3-433e-bcf7-9541a107599a",
        "cursor": {
          "ref": "8f230281-e6d1-449d-8d4e-f03ebef1ae68",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "9784e92d-b59e-4e22-9a76-5acd3cada2bc"
        },
        "item": {
          "id": "d934e14b-d7c3-433e-bcf7-9541a107599a",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "e5a662bb-702e-48ae-bcfd-0ab106c0d76d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00e6f0b3-a883-4039-ada6-35ab924f19ca",
        "cursor": {
          "ref": "712d95d4-67aa-4d11-82e2-bb7ad838aa21",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "f958ebbf-9553-4da9-b7dc-ffecefab4927"
        },
        "item": {
          "id": "00e6f0b3-a883-4039-ada6-35ab924f19ca",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "1fc543d5-0d7a-47b7-962b-6a4076faec76",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14ea23e3-aadd-4915-a51c-ecf10c304979",
        "cursor": {
          "ref": "45a9efcd-80da-4b1b-b530-eded46adea19",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "b369327d-3752-48e8-83cf-d4e86a0e5089"
        },
        "item": {
          "id": "14ea23e3-aadd-4915-a51c-ecf10c304979",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "441ce701-be54-409e-891b-dfa9c6d46d6c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a46f59e6-3b31-4eb8-873d-7eef4ad311fe",
        "cursor": {
          "ref": "870df0d4-3873-49e4-9510-da6e0e5702ea",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "453955f2-29c6-4123-ade4-3d729660a509"
        },
        "item": {
          "id": "a46f59e6-3b31-4eb8-873d-7eef4ad311fe",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "4b08dec9-5602-4834-9ba5-b989b31f7ebb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3332a7f9-9aa3-4894-b7ed-a9ea0694efa6",
        "cursor": {
          "ref": "896acdb2-68bd-40b4-ae88-467378424cb2",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "474bcecb-cda8-42c5-9b3a-d672f016c17a"
        },
        "item": {
          "id": "3332a7f9-9aa3-4894-b7ed-a9ea0694efa6",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "813573ba-8ce9-4d42-9359-5059dbe80178",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e50f4ff6-6991-4249-a24a-74ba8d822474",
        "cursor": {
          "ref": "6adff289-6b9d-49b5-b28c-37bc945bc217",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "97b79fba-b940-4145-8260-f657b694d29a"
        },
        "item": {
          "id": "e50f4ff6-6991-4249-a24a-74ba8d822474",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "a6f9e1bd-4d73-455b-9008-bcc2a19fee88",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31ffb513-74b0-4911-8ff9-a6ab08563546",
        "cursor": {
          "ref": "5a54ab00-ac1c-49fe-b70b-6fa4190529ee",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "c43a2b8f-e59f-4b35-ace4-94ea1a1f0953"
        },
        "item": {
          "id": "31ffb513-74b0-4911-8ff9-a6ab08563546",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "f43dd8b9-29e8-4161-8063-ecc0a0242615",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "454b39a5-395c-4cbb-a1fc-9973322e3f7c",
        "cursor": {
          "ref": "dd78b7bc-7b70-4ab6-9374-1997b772016b",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "34edebdf-e0e0-4537-99a6-734bd05300eb"
        },
        "item": {
          "id": "454b39a5-395c-4cbb-a1fc-9973322e3f7c",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "800a0dec-41df-49ac-8e2b-680427d1e5c1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2db2046-d270-4fbb-8950-978ac7110439",
        "cursor": {
          "ref": "f50894c9-44b9-4247-ae8c-7713910e49bb",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "4c309f43-c6e5-44f4-a2e7-8950fa04512a"
        },
        "item": {
          "id": "e2db2046-d270-4fbb-8950-978ac7110439",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "408abb2a-c12a-45d1-8af9-418c20e64b45",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17cfaebc-8ef3-4690-bc93-393f6866fd64",
        "cursor": {
          "ref": "779d257d-f836-41fa-9ce3-a379f6566ec2",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "8b70eca1-43ef-43bd-a689-2221dafb53d2"
        },
        "item": {
          "id": "17cfaebc-8ef3-4690-bc93-393f6866fd64",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "37c70d08-25fe-41ed-8e59-354b9a207173",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9057bfb2-ce82-437a-ad84-66c058950dfa",
        "cursor": {
          "ref": "79dc9163-fb78-4858-b436-e53144566d71",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "7f31c0e7-986f-4e32-b820-83a1519925c3"
        },
        "item": {
          "id": "9057bfb2-ce82-437a-ad84-66c058950dfa",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "9e085b6b-2435-477b-8a9b-d2b7acb257a6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 331,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0884be6-c780-4f3f-b77b-931feebee401",
        "cursor": {
          "ref": "a66a88da-d7b0-44ec-9a6f-c0a67f920f2b",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "7fe0ef57-fbcb-49bc-bd9c-4297c629a8b3"
        },
        "item": {
          "id": "c0884be6-c780-4f3f-b77b-931feebee401",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "1a1d8071-be7f-422f-83cc-1ba0cd679deb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 73,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4887c240-e4e5-4cdb-94bb-f090dc6c7494",
        "cursor": {
          "ref": "1637905f-c9ef-45e9-bbaa-24cb5f2795f8",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "62efd9b6-1274-4267-8b7e-15cb00748084"
        },
        "item": {
          "id": "4887c240-e4e5-4cdb-94bb-f090dc6c7494",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "83398970-4502-4191-a288-2349c5c53708",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbdbead1-a205-48db-b902-efb8d963c629",
        "cursor": {
          "ref": "eb13cfba-07c8-4cc0-bc01-ac6b11bd3755",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "080bffd3-5edb-4c83-8a8c-b1342526c78e"
        },
        "item": {
          "id": "bbdbead1-a205-48db-b902-efb8d963c629",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "9524f6a3-b3b9-47cf-b833-5b90ea9edabe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "585a1ede-fd7d-452a-9d16-a04cba80f356",
        "cursor": {
          "ref": "57537f34-38f9-4095-8e5d-455e07544769",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "2181b806-ca93-43d8-bfca-8231f957fd80"
        },
        "item": {
          "id": "585a1ede-fd7d-452a-9d16-a04cba80f356",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "cb5c0f86-a90e-48c9-ba1e-c9ae4d524ca4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e550313e-5a2d-48eb-8928-40c47dd903d5",
        "cursor": {
          "ref": "65aef07c-014e-46a9-8c70-e5caac3d172d",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "ad28082c-e1da-49c5-9e07-46430f0c9969"
        },
        "item": {
          "id": "e550313e-5a2d-48eb-8928-40c47dd903d5",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "5e3cdf36-c090-4754-988c-fbf9a3c2f4f7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f033be99-217f-476c-aa17-b7a16e378c15",
        "cursor": {
          "ref": "53e1d866-9147-4f9b-b096-67a6c9c973b7",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "88c9f626-27fc-4468-b9b0-987d47a927ea"
        },
        "item": {
          "id": "f033be99-217f-476c-aa17-b7a16e378c15",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "834b95d0-f752-4ee1-b438-0d09de2febf1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "896fb592-bda7-4183-a910-599ad5ce109f",
        "cursor": {
          "ref": "98bbd1f4-f2c3-4da0-a2c7-d88f5ba4a6f9",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "1e4f24b2-fa3f-44dc-b097-5831e3c68cc8"
        },
        "item": {
          "id": "896fb592-bda7-4183-a910-599ad5ce109f",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "52924c21-a20a-4b20-9b3d-4c70970bc304",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2b955c4-d2fc-46d6-883f-d8a7e3fef7e8",
        "cursor": {
          "ref": "e60cfeb3-39f1-4897-ab75-42b5c1efc8b1",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "fd19ea3d-0ac2-4523-b061-5037678a24bd"
        },
        "item": {
          "id": "d2b955c4-d2fc-46d6-883f-d8a7e3fef7e8",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "e476f9f2-e30e-41b1-a909-1a1eace961bc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "256793fe-f5bf-40ce-895e-f21c8bcf5394",
        "cursor": {
          "ref": "19c38c4f-b92e-45e6-89e6-0e119c72546c",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "4a6c7683-2e80-49c7-bee8-2fc39448325d"
        },
        "item": {
          "id": "256793fe-f5bf-40ce-895e-f21c8bcf5394",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "7f946e3c-a5cc-4234-91a5-eb9be27a88e0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59bece30-eb52-49a1-bb52-5d1ff69c928b",
        "cursor": {
          "ref": "e2c27846-29d7-47da-b535-f9bc210bdc7f",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "93cf3965-29ab-4f24-be2b-b278c853a92b"
        },
        "item": {
          "id": "59bece30-eb52-49a1-bb52-5d1ff69c928b",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "086b3b0c-ea39-4c2d-a92a-6e43da0e2498",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e1c99c4-e847-430f-bedb-d92a1ce4db9e",
        "cursor": {
          "ref": "aa2208b3-2d7c-484c-8bdb-a424d7e40860",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "6ca53644-e651-4b06-ad5f-479ee7e9318a"
        },
        "item": {
          "id": "7e1c99c4-e847-430f-bedb-d92a1ce4db9e",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "007dae4b-587d-43a4-94e7-5bd2d8f6d6f1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "057ce8f2-0abe-4429-8445-dba2b44e978b",
        "cursor": {
          "ref": "8e49da16-36c3-492f-9267-a5652b2a6c6c",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "4e7202c1-364d-4c80-bfe3-bc41260565fe"
        },
        "item": {
          "id": "057ce8f2-0abe-4429-8445-dba2b44e978b",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "23ca7680-fbad-4bea-9ad8-40b59eb8622e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06aa833a-ba4c-423d-a653-affe35cdc714",
        "cursor": {
          "ref": "212dc2b3-a95c-4a9e-b3f6-5b43bb74edfe",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "a5d84fd4-c3be-4e1c-b65e-06e0ae0d7038"
        },
        "item": {
          "id": "06aa833a-ba4c-423d-a653-affe35cdc714",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "c8586bcc-b8da-4e2c-9ded-8eee89895f9c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f7da47d-f8c1-4384-ba98-99774fb5b781",
        "cursor": {
          "ref": "914efec9-f0ba-4157-9f30-06ffc09dbe0a",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "76b31003-2642-4f9b-87da-07c140243d29"
        },
        "item": {
          "id": "5f7da47d-f8c1-4384-ba98-99774fb5b781",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "69937c09-cf04-4cac-8885-d47ecd221347",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a48c0897-ef8d-4dd3-9c04-d9453ffd182e",
        "cursor": {
          "ref": "c8c81981-12f8-4415-bfae-b75b91d8998a",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "681dd414-9e6d-4d2e-80bd-a5bf95b0449b"
        },
        "item": {
          "id": "a48c0897-ef8d-4dd3-9c04-d9453ffd182e",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "86209fa3-b241-431a-b257-bb9ff08f892c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72b22a8a-fa4a-4b26-b446-31f41b9e28fb",
        "cursor": {
          "ref": "53ab58a7-46f8-4251-b8dd-2adba55d7327",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "e0b7ddb0-ca7c-41a9-b475-a1dadce1c4b8"
        },
        "item": {
          "id": "72b22a8a-fa4a-4b26-b446-31f41b9e28fb",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "5365ef97-3cab-4c7c-8ad6-5fcc1da96b40",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce222254-3d86-4450-aa51-033d602b376c",
        "cursor": {
          "ref": "e7085175-5517-4069-8c5e-1cac125d8988",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "b92cebc4-94b9-4d1e-8055-f44893038d1f"
        },
        "item": {
          "id": "ce222254-3d86-4450-aa51-033d602b376c",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "30ef473f-6cfa-4465-a004-5f68dab3520a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abc2e4dc-3b9f-4f9a-92f8-687189710be5",
        "cursor": {
          "ref": "c26d67dc-2a46-45cb-b581-f2ab0f514ae8",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "672992a5-6024-4827-af11-5d346ef565f1"
        },
        "item": {
          "id": "abc2e4dc-3b9f-4f9a-92f8-687189710be5",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "ab878abc-1154-4ab8-a0a5-d4e9e945e753",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4195b50-ad1a-45ba-90bd-d900577bc872",
        "cursor": {
          "ref": "9aa8678c-0a73-4cbd-83d8-a7b5dab790ac",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "2e9b36a9-4f2e-435d-96a4-6ee10d824c50"
        },
        "item": {
          "id": "e4195b50-ad1a-45ba-90bd-d900577bc872",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "01d2f17d-6762-4489-ba3d-b51a1cb05456",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dbb3eba-d76d-4ea0-9940-6e64f2bb1224",
        "cursor": {
          "ref": "dc845680-ed3e-48d0-809f-d5900a9eb684",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "f7d0dede-7752-4dee-9c72-778da9b70e03"
        },
        "item": {
          "id": "5dbb3eba-d76d-4ea0-9940-6e64f2bb1224",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "d09da1c6-6332-4ecb-a613-a2dec8da10b2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1724db5-e840-4fcc-b598-3ca5a06526d6",
        "cursor": {
          "ref": "6d1e97ad-593b-42f3-a77c-08c5729a98f7",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "828082b0-fa24-4d8a-83c0-9c0d6db570e6"
        },
        "item": {
          "id": "e1724db5-e840-4fcc-b598-3ca5a06526d6",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "9086987f-5252-4bac-8903-43b21d0f2a43",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeef993c-2879-4650-9980-16bd781f9b51",
        "cursor": {
          "ref": "8c75406f-bde8-4f99-b936-563447ebeacc",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "ae776faa-0efe-4347-b7a9-efeb1a6edd3c"
        },
        "item": {
          "id": "eeef993c-2879-4650-9980-16bd781f9b51",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "f459ba5e-6845-4330-bbd6-9fc2d00d1b3e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3acd5b0e-7aea-467d-b33c-276d0f62bc38",
        "cursor": {
          "ref": "535bcd11-0910-490a-81ba-41be7d174265",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "5430bcbf-eb42-41bf-9ff5-c08307a7c57f"
        },
        "item": {
          "id": "3acd5b0e-7aea-467d-b33c-276d0f62bc38",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "98d5d16e-ac5f-446b-bced-ded690ff994b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5716a04-5323-4d59-8aee-f8cfc36ef5d1",
        "cursor": {
          "ref": "6ef7aa7b-2173-4a02-b5cf-e9b3dd0cbdd7",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "b1e598de-4686-4dfb-a490-0b3ffb1ca4a9"
        },
        "item": {
          "id": "b5716a04-5323-4d59-8aee-f8cfc36ef5d1",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "11048d58-24ae-4b39-ba48-8e7c29a08174",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa0c78c4-0ee5-4f03-b42e-41ec6b7ae113",
        "cursor": {
          "ref": "bd0da6ff-594f-4701-aa05-7fe2d7cb2c9e",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "66a78b08-5c15-4108-a0b3-8d829215d4bb"
        },
        "item": {
          "id": "aa0c78c4-0ee5-4f03-b42e-41ec6b7ae113",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "a995d7c4-71e9-4285-a699-e1e621c92016",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dddded7-20dc-4e33-84e0-96f07b713461",
        "cursor": {
          "ref": "30f5edd2-6ce2-48e9-b465-00d183e67175",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "cb9d87a1-497d-48df-882c-1e55b7c8263c"
        },
        "item": {
          "id": "4dddded7-20dc-4e33-84e0-96f07b713461",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "9efa20dd-cf8d-49e4-9087-abd51068dd46",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd15dc7c-b247-4317-9ccc-f6a5f40bde38",
        "cursor": {
          "ref": "00078afe-1d71-4eb4-b1f1-62a2c7e9fa04",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "ff13578c-a3c2-458a-809a-4c2d6b688f71"
        },
        "item": {
          "id": "fd15dc7c-b247-4317-9ccc-f6a5f40bde38",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "92c2f2db-ac1b-4418-a43d-bfaa871333fe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04ef8b2b-74a2-4a0a-8611-44915415a8ac",
        "cursor": {
          "ref": "396f1706-79b3-4ce8-afc5-382639f7ca0f",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "aeabc0a8-5e20-406d-a2a3-042e1a22578a"
        },
        "item": {
          "id": "04ef8b2b-74a2-4a0a-8611-44915415a8ac",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "8994055f-1717-4570-8f8e-e6292556e13b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b87f37aa-1037-4bd1-a661-caa9de4532bd",
        "cursor": {
          "ref": "ac80540d-1991-48e3-a74a-e567fe3ee481",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "64b3dd18-4ba3-4033-8a4e-816159b8c1da"
        },
        "item": {
          "id": "b87f37aa-1037-4bd1-a661-caa9de4532bd",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "f69d3d82-19d8-4728-97d3-2778b60d953c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38e926dd-b45e-4cf4-941c-044b1323607f",
        "cursor": {
          "ref": "b0fc3c96-a37d-4c0b-b7ad-1a54c426af88",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "5bd4193d-88e6-4509-9ae9-3d0d7591b63c"
        },
        "item": {
          "id": "38e926dd-b45e-4cf4-941c-044b1323607f",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "017c63de-49ad-4c39-bd1d-a789dde75006",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b596ee1-922c-4790-959c-77f6524909bd",
        "cursor": {
          "ref": "5703bbcd-1d18-4b8a-99f6-fae48e3a17a8",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "f4b75679-82d0-4fe8-a710-17d87346f577"
        },
        "item": {
          "id": "0b596ee1-922c-4790-959c-77f6524909bd",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "99802c6e-289f-4779-9130-badb1ed01054",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e09ffdc-b77f-4be2-ba0f-c7da7261f130",
        "cursor": {
          "ref": "caa35653-465c-4a89-aaa1-0af0a88d14e0",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "c10cab12-b664-4e16-a85a-baf0ba3f6c1d"
        },
        "item": {
          "id": "9e09ffdc-b77f-4be2-ba0f-c7da7261f130",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "1172dc99-fbd6-4d56-afa5-1adbc90cdba7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27e2b8c8-5e2c-4df9-8bb3-7d301df236e8",
        "cursor": {
          "ref": "b59269bb-8fca-4f52-891c-5fb5486dc764",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "77d06ef7-8ff6-4944-bc4b-706584302770"
        },
        "item": {
          "id": "27e2b8c8-5e2c-4df9-8bb3-7d301df236e8",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "119ee90b-846f-410e-b4b9-086fa17d323e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6872543-439b-4021-a5b0-08a7ae65bfcd",
        "cursor": {
          "ref": "461d07be-185e-46e9-8b6a-f684ca19b4c0",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "f9c76210-80bd-4876-af7f-5671161bcf68"
        },
        "item": {
          "id": "b6872543-439b-4021-a5b0-08a7ae65bfcd",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "88cb9e81-ff0c-4ecb-9a28-020d96dd77a7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8f9b66c-fa68-4585-809a-a336179031bc",
        "cursor": {
          "ref": "67a63f15-b8fc-419e-9066-0978c7e314fa",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "0d61a8c5-07bc-47da-8443-ac9b1b396882"
        },
        "item": {
          "id": "b8f9b66c-fa68-4585-809a-a336179031bc",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "2b0da62a-d502-48b7-b1e3-5afa9904ea1f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d047ea0-3ff9-493d-9150-8efe5bddc2d5",
        "cursor": {
          "ref": "ff15fba3-be16-48b3-b3bb-6ac00ba072c2",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "1e995079-790e-4f15-90de-8ec311aad176"
        },
        "item": {
          "id": "0d047ea0-3ff9-493d-9150-8efe5bddc2d5",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "4df8f838-7b96-46b7-b361-b6773042de5e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5a4385e-398f-4529-9e27-9f092ebe6c31",
        "cursor": {
          "ref": "9346e3ff-1995-4db3-836a-783857031969",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "8c8f0ef3-bf1e-4592-a1dd-576ff1537a1a"
        },
        "item": {
          "id": "f5a4385e-398f-4529-9e27-9f092ebe6c31",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "c8e3d7ad-ee5c-4323-b64f-0004b63877a7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afcd4a1f-853e-476f-a190-432360080482",
        "cursor": {
          "ref": "f70f7936-e042-4d43-a0ec-e73ac8f4d28e",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "bd643bac-0e5a-4eee-9a14-96f8d89ff8ec"
        },
        "item": {
          "id": "afcd4a1f-853e-476f-a190-432360080482",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "a0df7ef4-2a70-465f-afda-96917011d44c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f375b5c-ffdf-4586-acc0-fee4a9684f30",
        "cursor": {
          "ref": "8c148ec5-40b0-4ec2-a8d7-7e49225c38eb",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "6d070cfb-18b5-4995-8213-61dea3b2ce09"
        },
        "item": {
          "id": "7f375b5c-ffdf-4586-acc0-fee4a9684f30",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "69e6fd48-1deb-4729-a2df-2ee13931ef51",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54dbc580-8d69-4322-a309-1380ff266b21",
        "cursor": {
          "ref": "d652d878-bc1f-4f43-bbdd-f16ff22fe47f",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "6dbb8dad-47bb-4798-abb2-51d88b8a4d56"
        },
        "item": {
          "id": "54dbc580-8d69-4322-a309-1380ff266b21",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "6514a4aa-6031-4ebd-82d1-83481a134570",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05792cc9-3103-4f1a-bba8-3bf1865d5fd9",
        "cursor": {
          "ref": "68e0bd8d-60d1-42d4-aa16-a8c2a97910ca",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "2fff9f47-ab79-4ab7-a7ff-9fb22b65dcbd"
        },
        "item": {
          "id": "05792cc9-3103-4f1a-bba8-3bf1865d5fd9",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "af730621-b6ff-4955-a8cc-87d3ebc69ea8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ecb67ad-faad-4f50-bd22-398e4f6361f3",
        "cursor": {
          "ref": "531592fb-56c1-42be-bb60-d07cae3f2009",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "0f5f9455-a534-42b3-aeba-82648d74a6f9"
        },
        "item": {
          "id": "6ecb67ad-faad-4f50-bd22-398e4f6361f3",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "77e19505-60d0-4dba-a220-e02cb4edf9b0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7fa3e4a-d0fc-41e2-98d1-fca52e0afe5c",
        "cursor": {
          "ref": "7e6e8336-c350-454c-a9d4-456c464b3aa4",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "8172b183-ea33-47dd-9492-f635016b1ddd"
        },
        "item": {
          "id": "b7fa3e4a-d0fc-41e2-98d1-fca52e0afe5c",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "7e7cebec-894a-47fa-a770-a1c0a14f4705",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9691ca1-866e-431f-8274-21e557f5a062",
        "cursor": {
          "ref": "49776fe7-471b-4715-8ee4-8695767d8dc7",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "c3cd0e8a-c4f1-443d-b6ac-f1e3715b0092"
        },
        "item": {
          "id": "f9691ca1-866e-431f-8274-21e557f5a062",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "d07d53c5-f11f-4681-9aa9-34565a3413e5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff42128b-9b64-451c-80b5-2296b34478c1",
        "cursor": {
          "ref": "a2d62f05-6068-43e2-a805-994774600e5d",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "551d03c5-01ea-4c71-832f-8c25e16918d9"
        },
        "item": {
          "id": "ff42128b-9b64-451c-80b5-2296b34478c1",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "4ae81ebc-c13e-4293-9e97-f57c7ca53114",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ce9370c-df93-4a41-9b2d-b09ec94c9333",
        "cursor": {
          "ref": "b7f4a5bd-7323-4930-8f18-1bc7e64894db",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "d3fa6748-f197-4f75-b3c2-ca998a471a0b"
        },
        "item": {
          "id": "1ce9370c-df93-4a41-9b2d-b09ec94c9333",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "71f670b3-1536-4bfa-9622-d950da1cf761",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfd3069e-ef4b-45dd-8a99-694a9ea0c20e",
        "cursor": {
          "ref": "e178d543-8b06-431f-8ca4-c9fa7f5a7224",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "77273f81-a983-4c6d-99e6-88fc95c27f3a"
        },
        "item": {
          "id": "dfd3069e-ef4b-45dd-8a99-694a9ea0c20e",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "cde6cf2e-0280-463a-a02d-7e1b6c4fe757",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26bbd82d-25dd-458c-9d03-bd6d47e8c5dc",
        "cursor": {
          "ref": "43245b0d-2baa-411d-aa8a-e9c782035aac",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "a9b189fb-32ec-415c-a8e4-cec6d8a44b55"
        },
        "item": {
          "id": "26bbd82d-25dd-458c-9d03-bd6d47e8c5dc",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "372125c0-b17b-4452-923a-a2156d257170",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "536a8e6c-0d21-40f0-bd36-13de99e514cc",
        "cursor": {
          "ref": "d8334d0b-2ae7-4b4c-b14c-49645010bb0c",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "adeb1f5d-5e71-4038-80a8-87ee3646ea46"
        },
        "item": {
          "id": "536a8e6c-0d21-40f0-bd36-13de99e514cc",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "f06c0588-bd6c-4838-8a5f-23f6fd655116",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60607837-204f-4ab1-9061-9675de195346",
        "cursor": {
          "ref": "d08f8ceb-531c-442a-ac77-c11d3bbea1d6",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "c85eaf9f-2316-40c1-a639-216dc242e417"
        },
        "item": {
          "id": "60607837-204f-4ab1-9061-9675de195346",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "06839223-e031-4790-923b-5a31b9d22343",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8e217e2-5b89-4785-b0b5-2c2bd618a2c8",
        "cursor": {
          "ref": "dbad0b9a-eaaa-4e91-ab54-9f18a123ed72",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "897e589c-af12-4911-b4b1-1a030d556419"
        },
        "item": {
          "id": "f8e217e2-5b89-4785-b0b5-2c2bd618a2c8",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "2c8b421b-9884-4a01-932c-7d9c92c33bd1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:254)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fadcd4c-d054-4e95-bc31-a4f1f647316f",
        "cursor": {
          "ref": "542998ba-95d6-4323-a054-bf888c8882db",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "129f99a1-8aa7-46ec-ab38-04cf2f1acd0b"
        },
        "item": {
          "id": "8fadcd4c-d054-4e95-bc31-a4f1f647316f",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "481d9005-f5b8-4a74-982e-43ce49c2adc7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:255)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aab67354-9f3a-4189-9477-36a689bb93d0",
        "cursor": {
          "ref": "fdc9d7a3-9e8f-4843-a193-f7a04af2e609",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "0be04638-828e-48c1-aa4b-e3288f0a9229"
        },
        "item": {
          "id": "aab67354-9f3a-4189-9477-36a689bb93d0",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "54cf0c81-8a11-464c-99a1-cc86fb5e7245",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:256)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b445b34d-bcd1-4e62-837f-522766888cc1",
        "cursor": {
          "ref": "bd94a405-801b-4ed7-987b-30e5c3d68aaf",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "b2eac54f-efa3-40e7-b147-1612bbd3be43"
        },
        "item": {
          "id": "b445b34d-bcd1-4e62-837f-522766888cc1",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "823b3f95-c59c-4361-a19d-882684a920ac",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:257)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4472871c-d7d8-4295-9be3-57a581e3aa0a",
        "cursor": {
          "ref": "af1de806-ee15-4cd2-a428-a33098339e80",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "e40e16d7-e127-40c9-b93c-f837bae59115"
        },
        "item": {
          "id": "4472871c-d7d8-4295-9be3-57a581e3aa0a",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "9855d116-087e-42f8-bdf5-9f433bc9cb65",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:258)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbce7adc-225f-48fe-a0a5-528fa9e12d9d",
        "cursor": {
          "ref": "9955ce71-5976-4328-a9fe-5276ee5510c2",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "10339cdb-1875-49ec-8381-8bb4a452359d"
        },
        "item": {
          "id": "cbce7adc-225f-48fe-a0a5-528fa9e12d9d",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "6a8046c9-039e-403c-bf1d-eadcd61c88f2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:259)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ce9999d-4319-40fa-b7e8-5599f7aeb2fc",
        "cursor": {
          "ref": "c4f69b94-9019-495f-a729-5dec48e0d837",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "43931658-06b3-4e5d-aa0d-94310811b460"
        },
        "item": {
          "id": "6ce9999d-4319-40fa-b7e8-5599f7aeb2fc",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "0b665326-fad0-43cc-a800-84150a504cba",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:260)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b533ec8f-a88e-4bca-869a-0dcd2a9358c0",
        "cursor": {
          "ref": "e1b0494a-9ff8-4cc9-addf-25338910382a",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "45230a70-4d2a-445f-a684-63173c915194"
        },
        "item": {
          "id": "b533ec8f-a88e-4bca-869a-0dcd2a9358c0",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "ee371c04-cacc-4df7-9353-60518a04bffc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:261)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc0b473e-2e6d-4213-a3f4-b72f4c8c83a9",
        "cursor": {
          "ref": "9c9a6265-eca5-40d9-9621-9b326a59e237",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "2090feef-0202-427f-9c98-9f15ecd30e6b"
        },
        "item": {
          "id": "bc0b473e-2e6d-4213-a3f4-b72f4c8c83a9",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "1996fe84-1a42-44c4-8284-27889348aaed",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:262)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12c2ea1b-53cc-423e-947d-2ff53fc57e82",
        "cursor": {
          "ref": "5768da93-27d9-4896-b721-b3352d28283d",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "c1875711-907b-4375-912c-9b2b856a282f"
        },
        "item": {
          "id": "12c2ea1b-53cc-423e-947d-2ff53fc57e82",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "d527173a-0e5b-4174-a737-c292f75d92c6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7c7ced9-596d-4d25-8b52-c35b1e0bc80a",
        "cursor": {
          "ref": "3fc2c902-810a-4597-9304-44c49a6c087e",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "2b98a3bc-5c12-402f-a070-9ec043845e7e"
        },
        "item": {
          "id": "f7c7ced9-596d-4d25-8b52-c35b1e0bc80a",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "c2e313b2-814f-47a2-bd55-937bc4f1fd09",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:264)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0635a00-010f-4818-8354-fe5db64be02c",
        "cursor": {
          "ref": "eb267ec2-bf09-4450-bbcb-4feb959709dd",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "5cccc9f3-8b32-4982-a6ed-5cdbd74824a3"
        },
        "item": {
          "id": "d0635a00-010f-4818-8354-fe5db64be02c",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "1690f8d5-2dd0-4f6d-8271-83594ecabc8a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "511627b1-2723-487d-a9c6-b8c3445187e0",
        "cursor": {
          "ref": "e58e2282-67f7-4221-8e46-3febc9281cc8",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "e8820c6a-0a46-4f06-8313-7b9fce50f2a6"
        },
        "item": {
          "id": "511627b1-2723-487d-a9c6-b8c3445187e0",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "75fb988e-2251-45f1-8862-b642de61c198",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bda7d35c-5423-40d6-938b-27e415aef3a0",
        "cursor": {
          "ref": "bd8d64ec-4aa6-448a-b6bb-b7fc12622630",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "e7f95ea7-3959-4939-8616-8de13e47e7f4"
        },
        "item": {
          "id": "bda7d35c-5423-40d6-938b-27e415aef3a0",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "677ab3c8-ec49-4f2a-bad7-9daf0fc25928",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c68b89ef-bc8c-4397-8ec1-a7f4e2dcdc2c",
        "cursor": {
          "ref": "27cb619a-7a93-4c54-a85a-dc3419446072",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "38fb2980-31be-49f2-9922-ada29dc7692c"
        },
        "item": {
          "id": "c68b89ef-bc8c-4397-8ec1-a7f4e2dcdc2c",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "1e325bc1-e999-4542-9b85-b406db8fccf6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c2806ad-fb86-4b34-b036-ffd4353fbcc6",
        "cursor": {
          "ref": "3083f4d2-f43e-4ccd-980b-eacafa4ddf81",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "544754af-e31b-4fd4-bdd7-81c9809bf33e"
        },
        "item": {
          "id": "9c2806ad-fb86-4b34-b036-ffd4353fbcc6",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "87c6004a-362b-410c-ad3e-47ed4eb44ea1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21598b09-86d3-42dd-9d8d-0857f24520af",
        "cursor": {
          "ref": "9a29ef78-9da0-439e-85e1-269e76519911",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "90a3c971-2a07-45df-9917-9f4217d0fd9c"
        },
        "item": {
          "id": "21598b09-86d3-42dd-9d8d-0857f24520af",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "b22c8cc4-0fae-4310-8b78-f09c888a6e19",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:270)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a1274a7-c569-4838-9708-98dec9430e8b",
        "cursor": {
          "ref": "6ea92bd0-9f7d-4dd6-8397-aea884f85eae",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "43ad2a7f-7164-4bbf-8efa-8194fa18ded4"
        },
        "item": {
          "id": "3a1274a7-c569-4838-9708-98dec9430e8b",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "df3511d1-b807-42ab-8342-174d97952ff5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:271)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "822885a8-bc50-48d4-99cf-242e514e5da5",
        "cursor": {
          "ref": "86f119ae-145a-4a83-a0ec-c446eb20b08a",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "127aba27-72ff-4d63-b7f4-8317cc50880d"
        },
        "item": {
          "id": "822885a8-bc50-48d4-99cf-242e514e5da5",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "1df0b97c-cf87-4e13-a685-ec3164ade944",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:272)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27a80cb2-e3f2-43f9-a226-647ce88f3a1a",
        "cursor": {
          "ref": "efaa1b18-caf4-4762-b9f4-be6d8ec9c2b9",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "2c07dd3c-e1f7-491f-97cb-ef401b603b07"
        },
        "item": {
          "id": "27a80cb2-e3f2-43f9-a226-647ce88f3a1a",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "32394ffe-adf6-4709-b1f5-cf9b9b4f85d2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:273)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cea4cc3e-8b36-4143-8b46-6ae94591abe6",
        "cursor": {
          "ref": "51c7426b-e985-4413-bfc2-aedcab52821f",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "a8c8d3f3-6cf1-47ad-a92b-1081d5c1225c"
        },
        "item": {
          "id": "cea4cc3e-8b36-4143-8b46-6ae94591abe6",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "97eb08cb-fd73-45d9-9813-5a371d53a74c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:274)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0fbcdb1-4177-4fa6-992e-4b4d795dc7b4",
        "cursor": {
          "ref": "8fcc4cf7-1fa7-4c0d-80e2-9a549c1d2ef4",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "0476a1bc-2152-47b1-a7e3-59ff4e719889"
        },
        "item": {
          "id": "e0fbcdb1-4177-4fa6-992e-4b4d795dc7b4",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "b57c320b-e1d4-4b64-9378-722c91fe6170",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:275)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c5bd4d2-0e98-4aa8-b5d0-6ffb4897ce5c",
        "cursor": {
          "ref": "2bc19087-1b40-4376-b3ef-8aa46f06290f",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "0d305f42-c1e2-4663-bc15-33f0a52f6566"
        },
        "item": {
          "id": "0c5bd4d2-0e98-4aa8-b5d0-6ffb4897ce5c",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "de4ec59d-8be1-405a-88da-2a006b13a17c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:276)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc67ef30-4de4-4a1a-97b3-fe11465143f6",
        "cursor": {
          "ref": "84fc72c0-497e-423d-b43b-a35557c8b681",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "c8b88e1d-a1c9-4a84-833b-6e8694e222d4"
        },
        "item": {
          "id": "cc67ef30-4de4-4a1a-97b3-fe11465143f6",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "eb57a515-d411-4cc3-9975-c1585b1679f4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d8cca73-40cc-4e53-be33-550b27196eb7",
        "cursor": {
          "ref": "1d4e534d-9633-4736-a765-4bfb5304dc5d",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "2477ce37-9ed8-42b2-9731-13471eddfe5a"
        },
        "item": {
          "id": "7d8cca73-40cc-4e53-be33-550b27196eb7",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "ab7e3c41-7240-4d80-8a58-ae3c52ed34df",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "ecec9fc1-744e-4f95-97d0-b29e08edb32d",
        "cursor": {
          "ref": "dc105a6c-9563-4a37-a11f-73e817ca65d8",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "dd71594a-521d-48b4-b37a-c6d157ee4993"
        },
        "item": {
          "id": "ecec9fc1-744e-4f95-97d0-b29e08edb32d",
          "name": "credentials_verify"
        },
        "response": {
          "id": "b92bfa0c-239d-4adf-a0ad-2a68dab7d668",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "97341861-f852-4030-86a0-eabd0f94cc53",
        "cursor": {
          "ref": "74ea397a-88c2-4a17-b15b-5bc4fe6dd3e3",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "cbc79198-e6ad-4119-8df0-4862fa78b6d8"
        },
        "item": {
          "id": "97341861-f852-4030-86a0-eabd0f94cc53",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "d5ca1a53-fdd1-4820-9dc6-d8435e82e114",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:280)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:280)"
            }
          }
        ]
      },
      {
        "id": "1e77f330-4207-4734-9f52-3a3fbfb8d905",
        "cursor": {
          "ref": "0ef5ad4e-4ec5-451b-8bbe-3e8aad529170",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "ec370b0c-13ed-4dcf-bc59-736883dea813"
        },
        "item": {
          "id": "1e77f330-4207-4734-9f52-3a3fbfb8d905",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "1c9de45e-8efb-44e5-8553-ce920bbd44c9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e77f330-4207-4734-9f52-3a3fbfb8d905",
        "cursor": {
          "ref": "0ef5ad4e-4ec5-451b-8bbe-3e8aad529170",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "ec370b0c-13ed-4dcf-bc59-736883dea813"
        },
        "item": {
          "id": "1e77f330-4207-4734-9f52-3a3fbfb8d905",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "1c9de45e-8efb-44e5-8553-ce920bbd44c9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dfe0276-9cbc-4f59-be4f-0ea91cbe3bfe",
        "cursor": {
          "ref": "49882882-b031-4be2-a2b0-38f5080452b5",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "ed39b25d-5772-4614-a108-20eeb1674a4d"
        },
        "item": {
          "id": "0dfe0276-9cbc-4f59-be4f-0ea91cbe3bfe",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "c08caafe-a74a-44ba-9781-de0c30a253d0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:282)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13b18304-7aa9-457f-a5d9-c399ef142f92",
        "cursor": {
          "ref": "85e51c83-92e4-42ac-bfcf-dbf02f459555",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "f97cd93c-d234-449e-8e3c-c6f2ebf5cf4b"
        },
        "item": {
          "id": "13b18304-7aa9-457f-a5d9-c399ef142f92",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "8f772263-56b1-4fdf-ae05-4d8259bc3442",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:283)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}