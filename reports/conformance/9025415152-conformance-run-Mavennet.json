{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "122efe39-46b1-4f2a-be13-b8628f98be60",
        "name": "Clear Cache",
        "item": [
          {
            "id": "01d48e6a-efdf-4415-89ea-c4ddb737455f",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "34ff51eb-f3de-4404-8747-a9d390a05df9",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "6d6eca56-8ae5-4b36-b573-5a597961e928"
                }
              }
            ]
          },
          {
            "id": "90bf70f0-28cd-4287-8e82-e4f3c4ae0086",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "34810ac6-0594-412d-a856-f103e08b6c98",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "62207cdc-7a4f-421f-8ac5-bcf03a15a465"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "b0656a87-dffb-42e9-8236-82a82b95da0c",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "5ec7bbcc-4072-4af6-bb36-873b3f331a9a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6e3f5c57-125c-43e8-8a80-e2e6992e3fa2",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "59e7f431-5def-4b02-98d8-b34d571e3613",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "23f201a8-32d0-4557-8523-0e1a9276baaf"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2a7ae4f5-4ba5-441a-aba8-1caa0bdf81e1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ff7bfce3-424e-40e2-a6d6-382ab1b30cb8"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5b2afac4-8ad3-4ace-bce1-4d70bf74c598",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b0a76c0c-8412-4919-828d-ea3ae21cbb2b"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "114e187d-85b4-4171-b08b-cf9d14ebfd0f",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "998e8cde-47ed-4dd7-9a5c-581aafe943da"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6331b56a-a081-4bc2-8efc-bc301638e6d5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a20f43f1-93f4-4c60-8fd6-b44122ee60d6"
            }
          }
        ]
      },
      {
        "id": "82d36112-b330-49d3-9bc5-a4ed195106c2",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "19627115-5651-4bad-8eed-b3fce2053366",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d4eebc16-4e23-4ade-88d1-2fe449d241f5",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b19f828c-60f2-4a8f-9121-d0d67f8f96f1",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "283e0c8c-a4f0-4e26-b6a7-a065e345aa0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0c3d9d21-70f5-4a22-98e2-19704e3a7e26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf8c0480-1700-4544-90f5-2f8ad9d2dd24",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "218fe28f-5bf5-4cec-b7bb-f182004a08c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0065fa72-1ed9-44c5-baf1-8fca8375a898"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fea166f-fc86-41fe-852e-ea40935b49ef",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6e19986-f9b5-4832-ba5d-037fe706a241",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "df16212c-7f1f-4cff-bed5-1899096cbdd8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "fa42f936-4a50-449a-8260-1268f265e029",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d352abda-8ccb-4ba8-8e37-77eb7bbef1d9",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f73ab003-0b97-4032-9871-8e649b9e8943",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5e1ddb9c-5a6d-491c-a93c-69081f0cad8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50dd6f8a-f888-4794-a029-9c5cc3b14226",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2020c9b8-70c7-4ed6-9a65-22cb93d13328"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "11c7cdd5-b31d-4a44-8a3c-dc7733f23ad2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0cb0083b-03e0-48a6-bc97-a2e8995eb859",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3f0fcf89-9cbb-4fe1-a4d0-6dc0ef365e1f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "e0d163b5-9d02-4cd9-ab5c-629d69936948"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "37b5cc3a-ae00-4626-8917-fda94c04f26b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "c88e7c2f-6c4a-4bf3-92e0-9957ad3567b8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f2750187-bc8b-4e34-b966-99304feaa51d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "00642bf8-595e-49ce-a137-792020dae020"
            }
          }
        ]
      },
      {
        "id": "0b7b1a6d-e157-441a-abb1-106ce886282e",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "c3ef2c6b-73d5-4095-9468-5d44934e0d61",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7f4652d7-46ef-4322-be9a-6ac31a372073",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "4132f7e9-6653-45a5-bd30-46b1020fc25d",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e93caf91-2c01-457b-86dc-6de630604059",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f71b67d-bda5-4054-9a13-5f1e50cd17ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c4ee323-5978-468e-a538-78a3c11e0e8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "95b36dd2-6d43-4e4f-bb38-3e19110619c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98076af7-8328-49d0-a085-7096e0b98424",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11fb064a-45bf-430e-8847-fd41d1084b74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba3a696f-b872-473b-b9cb-7009f0e6bdf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26e7425b-6d4d-4a4b-91b6-9ff0144439ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bd029651-c039-443b-a831-92760ce25cf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3265b1c-c008-47e6-8e67-1df1192c8772",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fae2c5ef-d99a-402d-80fa-37dd5a112eee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01e9c26d-ccae-4199-b371-b0e16a1d08fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d5432ef-15c5-4476-a697-d64b675595eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f497c12b-a7d6-4ca2-bfcf-944ceb39f755"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88ed76e4-1b0a-48f2-865a-138cfe87a04f",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15828e57-8bd8-480f-99fd-751a0c6631f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26a63613-e497-476d-9745-b093f0aae069"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b59c714-50ec-4a5a-8b93-a2d360f974fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "77612e86-0e96-45a0-89e7-3f3fa57750de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e5a98b2-a810-48ec-a8bd-5ef8fda31545",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93231f28-45f9-47f8-a730-da2e9d65d9cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb8dac34-8798-4b00-b62c-c7a6ce44a46f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ee4e3d7-5e4e-4dbd-bb18-0d78e92738bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b2eec7fb-1555-4182-a858-76f651747ad5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbd4f82f-fe1c-4f1b-88ea-ca807fb489ca",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16a969d8-0780-4c78-89a8-e799483c4ff3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45a40b63-1bd8-4222-9fa9-b4cc083be3b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e78c167d-3a54-465b-88be-c62e62640c31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "00c58809-ba1b-4601-9c25-0bbb456654d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "745d9aab-f5e6-48ee-b6e9-cadb04590fdc",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f7a2700-cd32-4520-95fb-de06234935a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ce1ed3f-0f80-4e0d-9d80-c60bd386c322"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1407193-0ce5-4618-957c-805d6597ffa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "df511a9c-6fab-4709-890b-0efbc4f54ee8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "465f9ed9-5b95-424e-bc7f-8b1fb51cf39b",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6668ef8e-29e6-45d4-b5c5-89ed6c0fbd25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c873e25-7bc1-44de-9dff-e984f54ba351"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a4da6f3-cbfc-46c4-9288-de78ae594351",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "37617bc9-45e6-4bc4-ad5d-fa4022af030a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc631edf-6617-4ac7-a9bd-b9d8b94e9732",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4540034-65ca-4d51-8e84-d961aa285f4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac84d417-baf8-47a7-a843-943c9e9ea398"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "416d7fec-0133-4122-8086-071418fef2e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ac865231-fb7e-4f0a-9e04-0ba99a815cdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "148b6016-4576-4669-af71-ffdf174e5cdb",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bd88f4b-b1b4-4f7b-84d7-2be73f748fa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a17548f-b409-4c43-ab4e-3ad99df28705"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3f4bba9-ba93-43e4-9b78-fe81fe99a546",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d38f8a4b-bf1b-401d-881a-514a91952815"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff83bf81-7116-45fe-9aaf-2216736479dd",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09dc60c1-e663-400c-bf4c-918dbcb6c3c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c9ca261-c2a6-4ca6-960b-68d5e7b608fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf2d28a9-2f35-4901-a92f-ab6edfd795ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7cc2b430-a657-4ec7-ba80-34c0cb2e3f6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0ed5443-861d-45f0-88bb-e766c8bcb4f8",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5d2cb29-d07b-41e7-bb60-ddedf91fe272",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23973bf0-d62d-4285-bda7-680bba9022b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f13c26c-d0a0-485a-9de6-aedfbaed47ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d5388b83-c17e-4850-9621-d511c7e8bc6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a806130f-17a2-4c7d-9095-0fb364e5a2b2",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1311a452-e552-494c-9fef-211f250f46fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f55f2cfb-741f-47ff-8002-d22791339a86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a42f060-535d-439c-bbaa-686a0cdd9c42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "49aa81fb-f279-4142-9419-c06731c968a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf81209b-d156-4614-bef3-289ac7275829",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bebf5db8-c212-4714-9c14-806037768191",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7564528-fc0e-4fd5-bca3-743aa4e8afaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c51a804-b117-4d9c-9d5f-3676a6ba795c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d9e768f6-16ce-4697-9652-779c11db235d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "160c0db2-4d72-47b4-b4ce-db0785e6b28d",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb30aa84-b286-4752-bb39-6653bebff406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13a322a8-3081-4b02-8828-c5019118c6b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f001cc5c-c188-4281-9084-aec12e05d112",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d8538944-b1e1-4688-8faa-ee0e10437c12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bb5a5eb-ad04-4fc4-8018-e94e4d27d1fc",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93d7becf-8209-4cc0-a5db-3630327875b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3624bf58-3dbe-4c82-8d0a-759bfe710e52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3869040-3e9a-4f06-a958-8b60be233351",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "68fe7ced-eae4-43a0-9018-80fded731f5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87798014-0c6f-4355-88ff-9f84b92066cc",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6759035-3d1c-46a1-946b-8bbe10ad7597",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44d8cb1f-ad00-41d8-bd2b-1e3dcd23b96f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "098585e7-4098-43f5-be30-5c32a7b94120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "07b2bae3-caac-4826-9cc5-f455926a28f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f3b9984-b318-4246-b5ba-c14f033031cd",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f09d565b-55cd-4f58-864d-7b6884322123",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4524bd2c-9ee4-40e8-93d2-5c36e868b1c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dda6a517-82cb-413a-8e9d-e879e25b25fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b532fca-0e71-4f8f-8b92-85c097e63eeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2e17715-6610-4375-be63-5fe02c2e1c6d",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9c2c908-3343-4404-a5bc-7366098804ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "084f2f0e-109c-487a-815d-11f2f08effac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d32249e2-78fa-458b-92d2-23eec31579ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "61127110-8102-46c1-922d-e3198931bf4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "420ae1a0-a644-4167-b449-b85f0048620b",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "747a5278-831e-4f29-ad7e-9f1087464c58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42801f6e-1ef3-4e25-a088-5c2913bce5b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd15977b-3b25-4cda-82d4-86a439f93a38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "eae5a05f-69c1-46b8-810a-892e22ca89dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac1e1c09-ca89-41f8-817d-1a76bd206464",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab45fe0f-1bed-4352-b4b6-9aa776b19a48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "460fb976-11ec-4b6a-995b-85c114acdead"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44177a51-dfaa-47e4-8ded-9cfb11007441",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec043fc6-7770-4142-a5fd-0aba7eba1814"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2c5a8fb-3607-4817-8f53-9aa2b971aaeb",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "846796fc-1244-47ef-a109-500ae03318f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5949e0fe-1493-4ca1-97b2-f2d94000d20d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9aebd25-621f-44ca-91a4-5a0062ba31ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4fe94081-54c2-4eda-8dad-97ea57a2cdc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f4e1298-1e9e-4f67-96c2-10659fb033ca",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4244f703-4ccd-4c73-b66b-5295a8729146",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55c35c2a-5766-469e-bfc1-304112cc24d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a9b56ad-31d7-4e28-82f3-002424bb75a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6497ddef-63f1-411f-be6c-ff556f0bdb0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "745f3558-67be-4f9d-bfd8-d754fdb1327b",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e992a5d-07cb-47e9-bc97-c2b9e24d92b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e86a7128-4bec-4f79-886e-8365874889c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dd8cda2-446c-45cd-8181-e60f6a75b6cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "c94c65d3-4a3e-4b19-bf6b-3e0030e10a09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce8796cb-b668-47c1-889b-03d879fda5f8",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31b906f3-8a49-4079-acdd-8247efe2f669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f5b5dc4-b21c-4906-b4e0-4fdb1e1a218d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a68a6932-498d-4666-961f-ea9a5621ad55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d88afc26-765d-4188-a47d-ac00ebe78f9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21734957-84a9-43fd-a8f3-a146e79db388",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aa3c070-1f7c-4010-8b39-8c690c72b3b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee3fd517-0522-48fc-aaf4-87ff174e0f24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ae0b61e-08aa-4c55-9bcd-cca351672630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9cc63146-9fcf-4b4e-8006-8df070f46614"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3a6799f-577f-4df9-b2d4-dc5e99724ec1",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24dcdb9f-efce-4370-839a-5c0ea7c946c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ec5db70-3d43-4d6a-97b1-4f24f5949325"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46945176-01df-4ce6-98a5-962ceb4eacd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "de374128-18c0-48e4-beb6-a753499feb28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4bbd9a4-3c5b-446d-b61a-71bec108c31f",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2e5cd70-770f-4d96-9f91-5bb996b8aa7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c354380c-0411-4c9c-9e62-1a57a930e1d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0774249a-fe74-4694-9da4-d0fe81066475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "867fe6fa-1285-4ac6-9b75-9a6cdb01e0d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeed6115-2fc4-4098-8ae8-00b9d1246aad",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f343187e-7519-4a21-a061-0f9c8b445dee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "769b9df0-b080-48a8-8a69-3971d5a73bfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aa72a32-2e54-4314-8276-1f86bcdfb27d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2b407fd-efaf-4dd2-92eb-dfe68b80b016"
                        }
                      }
                    ]
                  },
                  {
                    "id": "814e8213-34ca-46c3-8c1d-3609bc27fd97",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f4b9507-4eb6-4a96-af72-dc7a351ae320",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bd107c7-f4dc-487e-848f-22de037cdb02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aa85760-8ccf-40e4-b266-e86686cd34ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "88e62e48-dcd4-4d98-8e53-91bc931b69a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f32db132-b2f9-44d7-8ae8-44bc6e5402d6",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a4c403a-20e7-49a8-8abd-a471784973f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48bbb586-269e-4d75-ae34-73a811df3b4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fa02762-46d3-4234-b9b9-d1a3141e07b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "81dd46ad-2b61-4baf-808e-c346418fe06e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27643655-21b0-44ac-a6e9-0cf50d93e3a9",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b830c4de-f6d0-4324-8cd5-2629caa90e7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e80b0014-28fd-40e4-8261-e000575cffcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47ed5db0-2e20-47e9-9c60-6c6740e961bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "495fa3b4-7cb5-4617-a942-8d3391b46f2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4783dc47-56a3-4bb2-a749-aea643120e6e",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3736ffdb-8d56-4d84-8766-e313fe92077a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39bb8262-7103-4147-85a1-8a1a3b731730"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea47ed38-f5a1-4da6-ab77-15e831236af9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bdf71add-74e0-4ba6-9d43-3487b2eaaa2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b72a2c60-59f6-4176-a77c-514ca56c668a",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c9e3535-efbe-468c-9a42-dab0f70bdf5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba0616c6-075a-4e28-ae97-60ea639188a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6be37af-1321-4736-aba5-6b5aacaa0c37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0e930cb-ec48-4879-804d-8113e5d5f695"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27c6500e-4034-44d2-a1aa-6b9321967cad",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25190e28-9aa3-4a51-9508-7e9a77e03edb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4c034a5-4338-44de-b2e8-c0c0f7303198"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "431afafe-ad2c-4e55-af42-17952c1a5a2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "d8c6e925-9f54-4948-bd1e-704214486be1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bd6c7a8-365b-49c1-bba3-a3d6d21b5648",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "011c6208-0a61-49e0-90eb-7caf873786ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e0443319-1ed2-4c80-9018-6922e56d67df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e72a1e44-b10c-4e77-8e6b-90094e8ef15a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ed57e6dd-06e8-4bef-8128-c7ab4c5ad3bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2a5fde4-aa65-49d8-81bd-3d457e865623",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67566c81-da29-496b-94ff-0427d1d28017",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8b82758-8f25-4074-a800-765f68e79f93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dbf3c86-dda4-4c85-92b4-0a3e93a86db0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "29c34931-14e8-4a5e-91ce-9264aec5dd70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c81c6525-4105-4307-b63c-de622bd02df0",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "333a6947-e70d-49e8-8424-bb2323f1b7ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e392dd0-9d0c-4f47-8aeb-f453c1afcbdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5239ee3-aac4-4df2-a588-78698b1eb0d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c94b6549-3c92-4e58-9e50-966e99bb4a08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d04b59c6-7ee6-4ad3-ba91-40e393b4790d",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74b3b50e-52f1-4905-8036-4199f6cc4d4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ccd3ecc-0a17-4142-ae86-0860a39f4d94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffecfddb-79bb-4150-9c4c-c1c2ff25498d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e8422cb3-544d-4783-9f48-17475f1dc364"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f1e74a7-bb9c-45ad-872f-759bf4c7b299",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26ea72e9-b564-4ae3-9179-5cbe064ff4f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "103bb24d-6e59-4d58-81f2-736480a633a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bbacc41-b7f8-4113-90b4-5ebcd2537a45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e72a8a26-8a4f-4924-af25-00a1dc1f0167"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c534aff6-ef73-4607-b807-828e131ab278",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e2ffd0e-a3c6-4424-ae42-b88093f07afd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd9e7e37-b2be-4090-9c17-87549e1dc8da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb2e20be-10d5-47ba-9352-a7f286da8579",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "04106e63-302f-4d8d-9317-43a019e922dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "512db10c-4797-4ffc-8d34-4755832c7b3b",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fd9e241-87b5-4a3e-acc8-ac57c70205b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e33a7ada-0781-4598-8912-e72c4d8d8dfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f9c6971-dc59-4fc3-9ff5-338ec5ce8203",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "379e936f-21ae-4292-ad8d-747e3288e7b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75c2a2c9-81f1-4019-8ed9-32945c15b3f6",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3368885b-c0d6-47be-bd2d-14507ec04317",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7447211-6471-458b-9eb4-339c50ffd7f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e21685a2-38f1-4c0d-9438-b5afa15e024d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "85de189a-79db-41ff-b5ef-a7693c0c0cdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40a384bc-e251-4fa3-aa86-9686903fbed8",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88ad9902-c749-4aa3-9a0a-7f84b7de2cbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a6318ab-372d-43ff-a4a3-bb36a79be694"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc9f9132-2562-4c08-9d4b-c4eb20f4e30f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "bee0bda6-6b4c-4616-98d5-253323454eab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a43e6222-d6a7-4627-94f8-6e7125da0847",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7062c648-3cd0-4155-81d6-ea011640ee93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1247370-85c7-4efa-8556-ea301e8e1379"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5076ab2c-adf9-4da7-bb43-be0ecd8e1694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f38a753-7ef9-46ab-9ffd-1821f4c5a666"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc1267f7-21b1-477b-9d82-bf4bd4d389f2",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6cfeaf3-994d-4d80-90b2-660fd6e1dbcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "231f90dc-9aad-421e-9e75-1bbdd35b89ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eca9a6e2-6e05-4f13-86e6-8ad1219ec6b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1921d93-ebce-438b-b688-438c7c3f3086"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7876958c-16a8-4f4a-a5d6-d9018c50548c",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baacba26-6381-4a07-be7c-4c4b3785df3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7317257f-d3b6-47ef-835a-6edb25bbfe2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb506431-0124-4a9c-9ec2-f33b6a8181fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a2eea35-cd45-4918-80a3-31eca63f55c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da84af6c-1bee-4f76-a1f0-e32610075f78",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b68d51ae-d909-4b98-8943-4dfcc8397a70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "909523ea-f770-4f9f-aebe-cf550e8ce0c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7221f0c9-87af-4ce7-b433-3f21b0ed8060",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "51f65b28-b67c-4436-8605-a6e9611761d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41654cd1-2143-46c0-b940-6977f80788ab",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eba4ee48-0992-49e1-8bba-d284343fecc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e597e970-3331-43e7-b33c-fee72247912e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dcb12a2-e256-4b56-b078-3afb5af499b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5a0979c6-9997-4f16-8a54-c1b8630b0ac7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9088ef58-b229-42dd-8fd0-e72d15954499",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c1d91c5-faac-4cbf-acbc-c3544fcf1f7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0aaa5e64-3de7-4590-97d3-610e2bf07015"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c1cff43-e742-432a-947a-c8c977f342f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "271df476-e891-4c53-94ba-8ef498ba9a67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dee4a96-6579-4dde-88ae-5c57e5b5ce22",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a997927f-12e6-4fa1-a279-d67fd9130c88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "878dc96b-659b-4df4-b702-f779f70ffb57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f0df4f3-0023-4f4f-8648-d35834e94946",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "28b28b99-7c55-45a1-a7e5-389463e5f9fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55ba2c89-642d-4c7a-83c2-06b9278c2279",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ac2f076-3caa-4fdc-9b09-170875726d17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bae9c9d6-5205-47b8-ac6f-4fc6011102e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8befcca4-6d80-4f9c-a549-2e33635b57ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "95aa6acc-d3bd-4b4f-bfc1-bc26404c786c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b672be6a-4235-46a6-b699-c31dbf27cd93",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f481eb42-7e54-4927-b08c-7517e59b228e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21851734-e556-4c78-95af-fe4516177c30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fcf61fa-6e4f-4551-9c44-ee6ab07bd53c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "63a3d025-1618-4c2f-9064-58a1f7dfa6ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "822fea61-f6e4-4ca8-b787-827f50e27e61",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f35aec7a-b92b-4cb6-9549-93ac897b6384",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fa521fd-40ed-4070-a701-58baa7ee4daa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01f8eb32-c546-4c63-bdad-0d42b13715b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "192b86b8-4ffe-48e5-a85b-f1ca3491a78e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81ef7a42-dc9f-4279-992e-cff12295e5ab",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4530051d-6ae4-4fe6-8190-afea915e78f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d88ff4c-ac59-4a0e-b0cb-e7a9f02f0f7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17fa3b8c-0d3c-44d1-ba81-eba991736c53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9783c743-a2a2-4c65-af5d-e0fdd53681c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0944731-e8d5-48ab-a238-213f7de3d4b2",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f40712f-72de-493a-a1a7-0bc0e6e25664",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfd06297-9eba-4bbc-8e12-01d4f7ba43ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86fbf526-0cca-4143-80ea-cf072a167880",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "1a317ba5-c1ee-47ac-b8a9-54c8017880d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab2328eb-b55c-4072-bc44-666ce964f315",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccc65db0-902b-4340-b667-a054a3b6e2e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17476b43-ec54-44c3-bf03-50c984d72305"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c9bbf3f-d826-40a8-bd72-d875802077ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "51f43bd2-4841-4b5c-ab81-d640b379254d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a85b567d-c1ea-4cfa-877f-094e7754598f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d8f137e-77dd-4f7b-be98-43055165234e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b22e9944-1aa1-486c-8d3b-e7099d102b16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ffebb0b-f124-4193-b27a-1eb939b49f24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0e4030c1-0112-4ec4-a1f4-799fd61dc618"
                        }
                      }
                    ]
                  },
                  {
                    "id": "029ee188-1ec6-4c88-bca0-2e6af82cd3c0",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40d7459f-8ef7-4372-8383-571979d73703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1b5eaaf-6b68-4cfb-8f43-931783571229"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee2cf592-c4d0-479a-b346-be085d2638ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "3a6cfa09-bbea-42b3-a5d9-27d73c24db07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d80de18b-5d36-4f71-806b-3f427e65f8be",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b35ecce8-9d73-464b-b70b-2d065423c3f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94ff71aa-3de0-4f25-8b84-c61e18478d68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a1c1aff-577e-4a83-9add-5be76b1c480e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4ed0ba57-522a-4a03-ab6c-c51cf38dd581"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbf9b58d-8439-496d-b89c-9e47482635e3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "247f9846-b824-4116-852d-8a44d55cb8c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa188766-65c7-404f-9c2e-519dcbcf9925"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24a2b72b-b6ae-419e-8bd8-b5812fa01d4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "28a6ff58-989a-4bfa-b61b-b1f59691a1b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b45d33a-28a1-445e-b49c-47e78b187c8e",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "115a5e21-5b52-42ff-9324-ee45cdb0206c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4adabd5c-b436-405f-8eb6-ade5313214d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6356c414-a7ea-44d7-9f9a-1022b66f6a2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "da971fc4-b038-4be6-95a4-24e0163fb229"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77a4a468-b3b0-47eb-a01d-d83e767e977c",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f26998b7-b6a9-4774-a8ab-2740ce8768a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4120020-c4c5-4707-84e0-8b211c8e08d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "928b38c6-b739-4073-8356-0794ba885936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "2498169e-9eb5-4606-aa3b-09bc2d1257f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40d2192c-3016-4913-bc6f-64db2de04aee",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64e4c227-689f-455d-a046-63d3c424a331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4bdb685-f37c-42e4-b3bb-1510fe4fcbaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "111896e2-7924-46b2-b6a0-25c68dff7233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "63fdf18c-4fea-450c-9226-b98f9f4ec777"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed0736ce-b818-4d2f-85f2-ff37f6eb3968",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e51ae946-d9cc-4f57-ae14-28adc24841a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c1e60f4-f649-44b2-8e1a-9baaf2b4490a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9841b83-d7c7-44f2-aff5-a6b22cd89125",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "13857810-ca05-4c46-96d6-eeb6ab794cad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49ed3db6-775a-489d-bc93-944d42b9bcc9",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bed23991-48bb-481a-9b79-77452d3983e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "872d275f-23af-4d49-8260-819c5023f530"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "603f5367-ed6f-460c-b880-92455da542c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd89cc1c-8bd4-4f2c-9838-94decf9ec891"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfa33a75-4537-4e5c-a906-c85967729084",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1410221a-f3a1-4d4e-8d65-6948d17f193c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0005ddfa-3dad-4f13-8231-bf6bdb2c0d60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d10dd627-b68a-42d4-8290-06496a81503a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "86bcce9b-6b6d-4871-ac17-52024eabe00f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "100fa734-86cd-4861-8f91-f9db53fbc52f",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba03ffe5-a0a4-43bb-9c9d-2f66b9b3f809",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dc8573d-3fd8-480f-8361-7bbc90464fc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "595108c5-9e3f-496c-b292-ced603cb0d0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "fa1e49dd-b588-4434-bec1-7857f6688504"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88ecdda8-f36c-4290-bae7-1d52d2c7020b",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7324abd-d8ad-4d45-bc48-c2438f4bc57c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "955cafd6-2b80-4c25-ae29-6bc60be745b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8def597e-3f9a-41fe-9f15-d02ca4c8cced",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c073d67-0399-42ef-9e16-9d00a9ad8b96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcc4b49c-23a0-4b42-90ff-6d2394c4ec4a",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d495125c-cf83-4b68-87eb-268a467b7f69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94ef6e5e-9ab1-4b42-b93a-a3b16287e509"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b73d4e09-a62d-420c-a672-c602cf0bcc82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a441eef4-8d55-4cb1-b999-fee560cec576"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd939b3e-899c-4b1e-bac7-0562f96668e7",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "653925f9-397a-4997-9ce2-6f4e3fa85992",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c375e47c-5903-41bd-ade3-27af8aef73a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22b855d5-27a6-42de-8d98-1744ba1dd72f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "978b227d-038f-4df6-9d5d-a7d07650e248"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a36d0ed2-b1c7-438a-8f17-4eeea5644354",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2d77475-d732-48ac-a28f-0e5b2569e79e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "521a77b8-66bd-4092-a844-f93072d9bb12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "975995ae-33a0-42cc-983f-dd7be5b0c8d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5c3846e0-39bc-43f9-b777-9ff85f33a3ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dbeb111-2aa2-44b3-8395-43d21cec9c56",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c529fb7-ae66-4949-ad87-6d72cc78a27f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e9e7827-d35c-4df7-8e72-b5af904e03c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4b96206-6ca4-47a6-9fe1-356e61e9f8e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7b3e3eb0-90e0-4488-9d43-50e445247d7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f7d05ac-e4dd-4d68-ab1f-b4919c35352e",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff8d7793-0967-448c-a210-9e4dfca88ad9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb1e86a3-fe35-40bf-b46b-c5e0021ab9d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd7f398b-7b33-43ee-b745-7482a7ddea81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "895d4fba-d828-41d7-9a34-449ab182b073"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91ace760-3471-49fb-9be2-b0c5eb5d0a15",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b880398f-44e9-4c80-9499-399296001865",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8346dd8a-9d3b-4671-a450-5b3519f8d45e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f41b250b-a74e-4338-a0a5-a8452127838b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ab8a94a-d187-44f5-9fe6-e3ff52775722"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61693cd2-7af9-418f-828a-972e3645df7d",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c872feb0-26ef-42d6-87b2-5109ab129ccd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "189bb724-1222-46cd-9b56-41be645a4318"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "704d8fd2-9533-4738-a6f3-ea12e4417d83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "db8d02a5-0bf2-44ee-8d47-15d0610d60c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3413cbd0-5ba1-4351-862d-dd02182bad18",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb070405-9788-4bcb-b3ef-344644491251",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af8d3166-6346-4b5b-8f2f-9400a3bfa130"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "581b585a-0792-4706-b3dd-e8d3fe294ed8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "91d60d70-9290-442b-b2a8-00d55ad3d2e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34efd6d3-2091-48dc-88c7-c654ded5fb83",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fac22ae3-3385-4669-a4bf-7a6180ef6710",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d1cef96-6081-427c-94a6-d7293ef71859"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcf04998-c2ad-4263-a4b3-572a50f6ab30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f7054b26-7a87-4765-93df-819b1f8fbfdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0c7f764-e1ba-4fa7-a059-540003b0998e",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "763d7fa9-6d81-4cdb-836f-0b9c28816b60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "467f3a96-4790-439c-9672-2a9053ac6096"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30518075-3932-4722-b1d9-34d743512c0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6f94d2b9-bb9a-4538-bd02-459bc2473a3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecc7862c-83ff-41c6-a58c-f15339007228",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72a5d672-c9a9-4e44-a7de-b5af3b8dec69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b92728e5-4c38-4c52-8094-6347973600e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa465efe-477f-4a94-8cb9-a678386e3f78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f9501605-3a34-401e-9c37-87ff18dc754b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc1e4daf-341f-42e2-b00f-e3e9c03a79af",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "632ed033-1f8b-4308-bcd6-fa05a568d18a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fec5931-b2de-4d0b-a01c-654ddf844426"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c998db9-6666-43f2-bb6e-e228e3a9f18e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c833f580-f89f-46ce-b430-ea6fd5fd82cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9462c284-ac91-4b25-8687-9bfdb82ef7bd",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73e88cff-ea57-4fa0-a642-3fc2b0d6bb82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de88117e-ee69-4cda-92d6-e3ee9fb8aa01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6334346-cc0a-4d44-bae0-a76104906d59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9828bd6-18f7-4a94-81e6-82e28a6553d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "005ecd59-e2a5-4971-84c2-0420e643f965",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d900532-6bb6-45c5-9315-ba400fccafbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46405b77-c284-43a6-b19f-1a6abe01be73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48445203-de68-40bd-895d-372d74582169",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4745740a-1ade-41ad-bf0b-77be6b700c53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c6b6699-b582-4cde-9e70-bbd27bc02e9a",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e12e1d6-b2b7-49c9-a159-5de9e28d19de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ebf543e-00ec-48d8-9799-5d6e9e52bd3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5e611c6-4fba-4fee-88d6-d6ba34347f8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fdd1425e-1265-406f-9cb1-bfee2bd7dd17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4ab722e-e548-479e-906d-7c17c3544a27",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8595b35-1c71-412a-9ce2-e1a6372033e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c2025df-29bd-4b47-8007-90c80d0849c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9eb3176-85e6-461e-82aa-e27aaf4b722e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "559d2fb7-8cb5-4e63-b2e4-30a7a5c11a0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb14d0db-181f-42e5-a27e-3adb94f91230",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88bcf466-7142-4dad-9033-5dc4aadcedd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fad4a48-6402-4b24-b01e-3bd6e3040516"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc5fa851-b168-43f7-8ee8-7f2b859b6e4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c869f0b4-6225-47dd-a96c-18d1cf36a1ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17b5d6d7-af3d-49fb-9568-32353c204afc",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7d3c3de-d2a2-4eb9-b501-659c7b87fac9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c42815c8-13df-406d-9cdc-a4a1ff3d54d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0199ed09-1060-4339-a6c9-224030dc361f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6975148e-aad4-46b5-b394-05c26cbf9c40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bab083cd-12ca-42bc-9691-ef4a51ab4165",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa535383-bd7c-4ef7-aecd-ebe1d480fc08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18032e36-3ebc-4a72-b84d-7e51a77c1f51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97718251-f000-4931-be03-3c1979f9ceb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "72b39244-760a-4ba0-babc-005a348adffa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "383c0f65-15c4-4b20-ab51-7dc7f9286ba2",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c32aadd9-8bd8-479d-ac3a-0b3a31e1869d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77f0ec59-22a4-454a-9b03-77bee09798a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9d17c06-e99b-4135-a895-4115b1187250",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "950966b8-bc98-4246-87f2-c8111e5543d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ff1036b-05eb-49f2-ae46-6543453b149b",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ffd0cc5-b449-4b0f-a26b-63b29d288058",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c47f850-fc01-4fac-81c1-9b16aeb690fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceab4a02-3eba-428e-8b74-f964af9b84f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "dd2b36f7-ab01-4f9a-bae1-7f660a6d0abd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97b8bade-816f-4fea-8b03-954a84e6a641",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f546c55c-ef74-4d6f-b1d8-b5a71f6c18fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8dbb620-265d-49aa-8f8a-8e0f6a3fbfc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cb349c8-22a1-42e5-b524-7e91452aaf0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "7ecf3346-21e4-400b-a63e-b059fb2103c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "459a6c68-9fd3-408e-8a06-d80cbd067e63",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abda3729-0aca-4ccf-a6fc-f91a77a6da6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "a62b4d14-b945-49bf-b83b-79e5d2cb48c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f1d92a1-1904-486d-a692-4f14f2e11f25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "12380d7b-36f6-44bb-8070-3062e910a818"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "706ff8dd-f9f1-4c25-87ab-115a7c6ca52a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2926bcfb-49e0-4e86-a0de-5b779570cee5",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b633a56-d8af-4b48-bbc6-4c461e9bde23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "710994de-bf15-470e-b537-8fdf960e1599"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7041b440-d5c6-4740-ad89-81368875697f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cffe7108-7839-4791-a2bb-24e296ed5c9b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7e83f11c-3476-4243-ab69-9cfcaf54d34a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "161a0ca5-3747-4047-80d8-0727ea50c8c6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dcab18cb-f414-4c7e-b39c-fb84eb97c347",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0729af2a-d282-4fa2-98d2-b2dc05d9d7a0"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e9e36dab-cacb-4cd2-925c-851b201a9fe9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9b27baa1-0fe7-4df8-a519-5cd98b37d4fc"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4865e65a-a3a6-496d-b46a-6ebcbdf01ede",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d7f1d54c-97aa-4ef9-904b-b80d82e9b692"
                }
              }
            ]
          },
          {
            "id": "4b1b69c6-4bd7-4602-8829-65bc512da7b7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a61bcb62-1a4e-457f-beda-c860797b8cb1",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "824cdd84-4fde-4fe6-bd26-3ba8ad615c9b",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2191b56-520f-40e0-b10e-9ea6ebe88526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "847a3232-21ef-46e1-9ff7-96d64b69708d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84a437b1-5e44-4b2d-8046-60d6b131513e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ed2baf1-28a4-449b-b76d-67e4d5eee9ba"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9eaae2da-93c7-4344-b2b4-fd8533378f95",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f2fc4bd4-e38f-4740-a3b7-48bd64be0393",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3c997122-f9a5-4dd4-a136-f90dff250742"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "93131b6c-4621-469f-982e-dcf691aaf1bf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4f55c987-3885-4621-ad60-b9a0d2c7f165"
                    }
                  }
                ]
              },
              {
                "id": "202a1421-051b-411e-878b-612c8cec704b",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a14cc0da-1d5d-4f50-928a-efaace689183",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9f7c7bf9-2748-4164-9d7c-32bef8fdcf4e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "582a8a1c-6a14-47a8-aa5b-a63b9e49832c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5bc8ad36-d7a2-4965-84f8-7bf02b38bb58"
                    }
                  }
                ]
              },
              {
                "id": "d35497fb-d3cb-45e5-9046-2105501de83f",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ca69954c-74bb-42bf-9983-07a9fa3902c1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5cced9fa-dd82-4e13-8b24-10895a1c9d66"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1130657c-c611-47ca-b83b-ed668d5cec9d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a2a03463-2b6d-423c-93da-86dbc3341521"
                    }
                  }
                ]
              },
              {
                "id": "2eb6da5d-f9a9-4dcd-9ab7-6ee708ea3460",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "28d30016-e3b0-48e8-9332-d877715391b9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1f965e3d-62a5-4a45-9d07-fde46accad6b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "974f8c88-39bb-4a28-acdb-e69eb3706dad",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "c3deb44f-34d9-4efd-b214-7d67f69f6098"
                    }
                  }
                ]
              },
              {
                "id": "ff7bedc5-52f0-45ca-9bf7-90d1ee29f873",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f54af995-f077-46ce-ae8f-dd6787fb5e4f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e8d3f9d6-e6c8-41c8-a4d3-9b91efaeed48"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8aeb5e61-c982-4cad-8352-4a5d6ea5a07e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "877a6c65-7c0a-4efc-a938-e74d02d3106b"
                    }
                  }
                ]
              },
              {
                "id": "b30a33c5-3af4-4e21-9dce-5fdd123fb942",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "85f4fe85-6b08-4ec5-a329-fe66bd89849c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7f5f9b45-2ee8-426a-9deb-69d78170cebe"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1af1b470-adcc-4f24-9676-94304043c721",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "247d0862-675c-4fa4-9bf5-ffd638170a13"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "660705bf-a4a9-41a0-b2e0-822e64786db9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "576974e4-3bea-475a-bb6f-90d6fa0b62fa"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "cc15e46d-a8f2-46ac-a920-259a3e5b3275",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "61974bd2-4942-4f53-ba17-6a8d6d0b8538"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0cd9078f-9d68-4754-b2a5-e0b7f671717a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "e5958878-3dfd-4148-91d8-ac472ce1e0e8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "98ff7c1f-b668-4c7e-87d9-8fcac067ae3d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ff5176f9-206c-4a51-a0e2-ad8e3cf9bacd"
            }
          }
        ]
      },
      {
        "id": "a1948def-3765-48c6-86d1-96585f0c2518",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "e77ae336-1485-453d-b3a2-7ca49c02ef60",
            "name": "Negative Testing",
            "item": [
              {
                "id": "aec3eb26-f1cb-4c51-b707-c8ec52ba69af",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7f5d2b0a-0c1f-4ba5-820f-d958c915062a",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2477870e-7379-4268-8599-a8ccd740590d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "378107de-27fa-4360-8941-547330c2077b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80937826-7f21-4490-99ab-d2ea984d306a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "dca26b8b-dd08-4857-93dc-eec37ed20192"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e49d6cf4-dd4c-4b6a-bd7a-63c6f37c5aeb",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "753c9dea-97c3-43dd-989b-04599aacb6a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c94d22d8-ccd3-424a-b535-f8f3414c9bb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48f05da6-0920-4967-aacb-95853adbafb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b837c60-c85a-4945-b3d4-adb5f794aa44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba96b1b9-d35f-4c61-a761-74a0ac1e9f5b",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcaa7187-fff6-4574-9a05-8ba13fc0cdee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10110007-6b58-40a6-b3c5-16a86b48fcc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e0de274-70dc-40d0-92f4-ebb66fc25d79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "aba0e9ae-f43f-4203-af96-dc72a0d5c977"
                        }
                      }
                    ]
                  },
                  {
                    "id": "637eafb4-4f28-47ad-a653-e5c7347b647f",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78a848eb-dacb-4d0d-8b5d-82e2618c39db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec8c97f2-ebca-466d-8490-16d673d47c75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a211973-00a6-4eb8-8f6c-f4ec7105d2e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a453a0e2-9282-4e59-aaf2-62b3b530b5fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1adac3c0-7c13-4e64-9631-9f47410bc909",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "423dfc03-910f-4028-b4b7-b496e14a6ef5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21a20ffe-4102-478b-bf26-626869e22c37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdf954a6-1fc2-492c-91fc-18731443109f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "26d39016-e7bf-4445-9f6e-5fcee64395cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bffa6729-9d07-472d-8156-c50d0e3d41bc",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a64053fe-8859-4ac8-92a9-e3d48290102f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b44deaaa-8704-433d-b25d-3deac3eb1297"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb5bc99b-e023-443d-ba6d-6fc99b62cf8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c0ce5957-3ef9-473f-87cb-da41d853e21e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aae1751-0716-46c4-a838-fe9306fee1cd",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7d7d314-c6f2-4569-bc0a-e2e100c5f7d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f04e040-0124-4cd2-8689-dc5408d92a92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab312318-18b4-429e-9d55-7c34fdaa539b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "3910576c-5735-47d5-b0b0-ff92f1c0d1d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb5177f1-ca82-4cf7-abad-430eb6548c61",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25295857-9cfa-403d-8571-c02c0e2e5b25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb807cdd-6e12-421a-98dd-a4a94deb8a02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23fcfe1e-01db-47fe-88bb-27d3c0e2fdc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6da25514-b68f-446e-b40f-ce1d60ffe55f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdf56ce7-fbb9-4310-a9b7-8f8b0c447064",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f7e95f3-6f43-4498-8e07-d104a603f604",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50801f56-1cfb-4023-907c-680583d84723"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2e1ea92-b430-42e0-a908-bce1655bc84a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c8ee74b-48d1-4dfe-96b7-2160f96d2d21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c262e989-aa4b-41b5-a543-59cc3719959a",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d7ad37b-65f9-47a9-b662-4b3555054a44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55f242b1-94c9-459b-8b33-17e9678526cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa99521c-a752-4bb7-a49d-4c8488c698a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "235958cf-94b0-42f2-8dbe-9aa17c9ad3f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efc51d83-ff96-4003-8c0f-a57fadfa417a",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d13df392-6b91-42f8-b08d-7acb70644226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b8a52d8-8344-4ea8-b1c8-1a2b393ff6e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "559ec7f1-c33c-47eb-b4da-609ba0ea9de9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "b7c7fb42-b66f-4910-9b9a-c58c293ad118"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c47597c7-bf6e-4cc8-a248-d28f0b7c24e4",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9400810e-f3e9-4f57-b4b3-361d707a437d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "695369eb-82ef-4f2b-9af1-fd123261df9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0663662-258a-469f-9201-fd5312cc14d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dc08ea24-f0a5-4849-b4ed-8cf60a451f2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83bc6c5e-42f4-4967-8080-1f33d6637426",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c25a95cd-6279-45fc-af01-15aabf09f86e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04e0109a-52f2-4f1f-ba5a-e7e4f1f657f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9a18cca-c41d-48db-afbd-5ac037713660",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca36aac2-6988-460c-9d80-aed78d30ccdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a91419f-7f17-4ec3-97c9-f97b24e2e0df",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aad923f-5cd1-42e1-adb6-8a699453632c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05fade12-f9f1-457f-9baf-4594065021bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e67e4c40-9c15-476b-8c92-cab9360c1ff4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "93f2429e-34ad-4b95-9dd2-4a545bf0a884"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8d75d29-08c7-47da-a0c3-2c71f6574de7",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd6aac58-4504-4985-b958-ad76ed2ca88a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e32d8a4a-6278-4345-b762-e239acaed104"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aa966d9-7827-416c-8f33-3625e8523dd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b9793da-bd3e-430f-a4ca-b624ec877020"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f11ba514-596e-489b-afea-3827b2fc19b9",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4418ee0-e289-4c58-97d7-dc87123b118a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5790c5e6-34f6-452d-9b20-b4fda1424e5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0a7bef3-9e63-42bf-b3b7-6bcc7ecfdad7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3ea32bf-3358-464c-afe6-5b7f483fd032"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85d4a910-1f1e-4011-91c6-9ae93ff84f14",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4eb61e0-3fad-4072-8c4b-34fff288a466",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab57618d-8fc9-4121-bc0e-602a195ea2d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29b05803-5a1a-4c31-8bd2-d8d479cabd12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "58989a00-62f3-40f6-9632-cdb6f3d87b8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d8d74da-7942-4721-912e-e786b5441727",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32100785-80cb-44b8-b071-2a92b8d499c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2ed36fe-4bf5-4517-9357-ec3cefa0b4e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c847462e-5c64-4806-a611-96fc69b46803",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "08000bc5-8c25-4a52-bc37-63e329ff0722"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c8bbb6e-25a6-4c82-8d5e-3d82f2310129",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73cd0624-c75f-4202-88e9-5516061c0fb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f536c0d2-414c-44f8-8375-0c666a222e58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e0897ef-63f4-4303-80cd-b5d6067d07f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "606aac64-4538-4036-b3e4-1453bcc82d94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb090e2d-8530-40e2-b457-309d5cb2e55a",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e500ed13-7f35-4d7d-a093-0ab60af7b534",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0b88b33-4868-4116-b3c5-2646fcf1a7eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f61b0643-85a3-4d2d-a7a2-a6eb50d11eec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "809503e4-5086-43fc-9d4e-d125a534f38d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8816b653-f953-4224-856f-88c98e9cc1a8",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7276c395-b166-46f7-8786-88e2418592d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65b23388-85f0-4167-8c6e-563becb69d48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb5aa867-6015-40f5-b662-abea5c9e5370",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "215de213-1bb9-46eb-8108-a080bb05e6e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15cba4de-3d84-4f2a-98f1-394bb21e77b8",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79ae67cc-72af-4091-a047-a17607d5e520",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b99f797f-3caf-41da-ae5c-0c59bb5c098e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afff07a7-e067-416c-b79b-fa4bb6753a8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "12ac8f36-cd92-497f-861c-77e373037b32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa2625fa-0a4d-4fe5-aede-99f8d2a8cf82",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74a41707-bd9c-4aa1-94b0-39855ec3f7b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f5352c5-1fea-4581-845b-341c098becf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dad2dbd3-b9ba-44cf-8893-3d8bec7045e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ae05624-3819-4bb0-9011-b449dc697f9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fac39d47-8f7a-4cf4-8b9d-96906c05e8d3",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "332c8e1c-5fe6-42c3-b193-4c0ce3c9a00c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "062936af-6fe1-41eb-8329-2bca4ea56764"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bab9af9-7fbc-43b1-b194-f31bee6fdd9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6cc48ad0-95bc-4b1e-ad88-2d3d73855a20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a78d43ff-7225-4cec-b317-809be3d2da7d",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fc62d6c-f71c-4722-b046-6323885e785f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78651907-b713-408d-a901-0c084975f128"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "481b5f6b-4418-4643-9d7f-5424b4087f6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a83500e-7669-4271-8a47-9e44bf1fb40f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c26616c4-61a9-49f7-8fb2-27caaa83be51",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c12a588f-c9c7-4c87-bf65-411c27151b7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8080f320-3032-41d4-a099-cd244247ddf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be9ffc1c-3d23-4ee3-b39f-88b52bfdf0e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "08b645e0-66e6-45a2-a8d9-0d4ecc535a48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "543b4666-6203-4367-8605-1513e7f7a1d7",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75318680-419b-40fc-b844-5555b0ff953c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf6a9eef-d600-4c72-bd29-e866c606f4ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a63d32e-99c5-44ff-a5f5-f7cf226eaea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "74d641a3-8b25-4f5b-bbcc-60f499bc544a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8798c7a2-5f73-4305-ae24-95bf59ba6fe1",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b062b5c-87d8-41bd-b4d2-4883e3658f2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a0c6c0a-9c64-4ddf-95e5-70ed61146849"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38755235-9b9c-4f1e-be38-614a73a2a074",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "47424063-ed4e-43d3-bc32-bc4f58300391"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6eac2a6-e2b1-4c98-b8a7-f69fe0b27e13",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58884fac-0a2d-4b0f-8003-c1b89622362d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0a8cda3-6091-42df-a519-c6ca568d3ab0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a85b5b51-0314-40f0-bc96-00b377addb87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3560e9a-598f-420e-8006-be6f221bb8db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61bbaf8d-3480-4034-ab19-edf3afd2074b",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d42ba295-41f0-42b8-b45e-df34b2868024",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33d9c0fd-9cc4-48af-af6e-9eeec7828b9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe0eb281-27e5-4c52-9394-a8639cd64944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "363d7e99-2616-43d5-8b0b-32e6a64d621d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eef84ba0-c516-4468-8df2-0b9a5d54c311",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba27d5e5-7e10-4391-a67b-5f635c3b76a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93722abf-e4ea-4e83-99c3-0d51961b671a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c37bc32-171b-4c39-b01a-bffd1a298105",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "92b7483c-56d3-41fb-96fd-eb84f484d370"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2833ecd6-666d-42b3-a1df-b7f7b988f7da",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97edb548-af24-4f1e-ba0d-7be29e1216af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32120a56-c953-4a6b-b81d-acd8bd1c92e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5aa1991-481e-4f75-a0af-d5654682c531",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac774d8a-b462-451f-acdd-ada190bade55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9500d256-2ca5-4eff-ac76-d5bc0b7143b1",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4014efc7-0d76-47f0-9d00-14c113a8d5cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fb8a8ee-5b2e-40fc-a385-26a48c364e10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9f27dd4-1bc7-4001-aa60-1f55461552ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "92697159-0d25-4329-a913-97144c559b7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2a98b1b-1b59-43a3-b498-a9a3cd31db32",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1588630e-166a-447b-ae65-941875b6154e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "328859fa-285a-4b0a-ab33-d24164ec4904"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "785844e5-c9e5-4b1c-83b7-73c863d23f3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "08307943-8bc1-48b5-b584-a01c3b44369f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a52150d3-f112-45ba-9cba-44924b242cc9",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f11ba99-142f-472c-b193-69612d97de36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22871c9d-39b6-4e5c-969b-506f0a73f6bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e95b5815-7889-4a39-b586-0df14ad66e4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5075b1cc-ba8c-472f-a93b-e0e0ca7efc81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b1b6756-13e7-4cc6-b521-23841e2efc9c",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8794d342-55bd-4425-b39e-7e6fa7ef0b48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "282cbd2b-8457-48aa-801a-0a85bc179612"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6469952a-5202-4390-bf5f-57f09f1f7649",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ecf63020-b52b-462f-9205-e5dc176ff171"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4150fe53-b328-42e7-94ba-0ab9fc8fcd3f",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90f2bb53-f8a5-4953-aeed-80c60a69dbe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e945d4c2-b3c7-4d6f-a81a-b319fe80dd44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3b0cd83-feb6-4a91-8cf4-25df29b1d4d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2257c186-cda5-4eb7-b860-5005316c5f22"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "336b0fee-0f16-4f66-b2e7-f5a81eb8014b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3dd2b65d-b263-4cbe-9c5d-8c34b2d9380c",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10ee754a-6508-4d97-8942-7a891726c426",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "4a8a566f-668d-4bf8-b2a7-228f07b8bddb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc4de681-e2cd-4220-93e1-92cd857ea4f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "10d0cdb1-5a4d-489b-8212-c0cd3aa1bc90"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "766ddf3a-29af-4b47-aaf0-ca150fae2a80",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c15985e6-e1d2-4a87-83ad-d39cef8c5477"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f8580760-19c5-488d-95cb-0d79b135c9ba",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "faf32e29-6132-4de8-b276-26fe8f75805a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5bb45109-77d8-43db-af4f-d113639541c6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "1f086b8a-d127-4971-9ca9-e0d7d3c89736"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "185afe77-fb4d-4619-8eef-0e3c21259b8e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "37dbe5de-0fab-4bbf-bbde-7b12eea6d01f"
            }
          }
        ]
      },
      {
        "id": "60e58600-e0ab-45e0-8f03-4e68914411a4",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "81da51fc-5cf2-49b3-927b-ccfcddd1ffbb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "444af94a-2dd4-4ecd-96fe-b964cf7c21ce",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e18245be-6053-4a5a-8cca-bd9bbc73a20b",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c1a3c28-36bf-42eb-8402-89d5995399d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe44d595-b9e9-4198-9730-0091071922b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b824d5e-dba7-4060-8925-319051e36b2b",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "deaa23f6-e359-43c0-85c3-b9bff6ab1900",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1572a4e-b54a-4408-8fe2-d42ecba493ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54930183-cd94-4be7-a5d7-04f5494b1cce",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5295595-99dc-4c40-9f51-57779e57bdbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1e61c25-fdd8-428f-a2bc-4191a384d83a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8697266f-776d-4570-b856-f35fc71d39c3",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a56ae793-9542-4569-af88-abe4798a5887",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f7d9675-9add-4311-8636-947598c22682"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b173ca4a-e603-4e52-8f69-14f7f192640f",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46c3872f-ed0e-45e2-ab85-b00d20adf88f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69641a51-c52f-4850-9e7a-7181586d0366"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2af0296-d31d-4928-97da-386ce1ed3832",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54265b93-3c9a-4424-b77a-111c9a2a8d04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0783b2e4-76fb-411a-a43d-af5b15a117fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9839a19-258a-41fa-ab2f-3bf1100a2115",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aa9a558-f821-4071-bb67-eaabcff765d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1929e767-c68d-448a-ad09-289140d3c169"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4842cd81-c8fa-4aed-80cf-53c579bf854b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1cd47b1-0435-41fb-acd6-c55aa3056242"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c8fb256-fb87-4382-b935-d3606906e6bb",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ed289d5-da59-423d-85ba-952b39cf7c6f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56f461bb-ed27-4665-bad1-1b65adac9f42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a166c3ef-1b69-4f3e-9fca-a4b40c0ec10f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ac94195-2433-4f62-8d1d-e71171b81ea4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c374bffa-d88e-463d-be5c-171f860c241f",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9d4ac30-9581-4edf-983f-4e0ec40e20a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8f1505e-e314-4a4a-8eaf-39e5178fb0a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67422eef-9dd8-42da-8aed-aa4d1ddd556e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b45d3490-68cb-4a24-bc9b-8e166ec86078"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac0b5859-83a6-4f52-811d-49e2436986f0",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f656c6ea-e189-4487-ac06-3c09b95198d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5abafeda-af42-47b3-a124-82a515cc26f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a695fb2a-1106-40a4-8722-92f1499bc968",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d1d9554-0caa-492c-b6c4-b1bd2b4ba3a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a4c6fef-1e49-44a0-b3b2-0ca42aee429e",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d12f887a-cf25-455e-9ab2-98c5d58ed5ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ae8d74e-1746-4658-be9f-81de65b0f14a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a82a1626-744d-4d3c-a82e-6ee159f0fbc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "994f97fd-09be-4c18-a13c-fb8c75dd8eca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03195366-a52a-44be-b2c9-51adf37b273e",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e65a747d-750f-43a0-b14c-af02ea6bd9b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cf115f8-b3c2-4df9-ac30-72eac5469dc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b657967-4f54-4456-bf28-a8accd59c1b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "064478d9-fe42-428d-b90e-13e39e81a69b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdb03ea5-27d3-41bb-a367-45363ff3a73a",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08d9ba52-d9d9-440f-a4b0-036fc1dbbb14",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "882819b0-bf3f-43b5-9bff-81dfc8727f20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89192ccf-600d-4252-aabd-b1eaf3a8bc50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d0f4718-55ca-4d40-bcdd-cbb92822a4c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "410153f6-3ee3-4157-99f2-72618001913e",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12cef1f4-2552-4ead-b9f1-f8c1e06460ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "148ea471-ef7c-4e24-8a51-66526b376e2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf87f528-5747-4af5-b685-1db5f52d29cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18612375-9573-4d15-bb69-48473b7884b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccff7a3e-6729-49ee-88b2-45bbeec0f6b9",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38ea7992-044c-401a-bf80-144e33dcb242",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df62d4d0-14f1-42a3-8870-c489c4a3f1f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52320ac0-ec8b-42d8-9517-d43668f50d27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d7d2925-f614-4964-9ea0-3ddaafa4a79e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d19d9e8-db66-46a2-816e-dcc2685ef33a",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a3fa632-16f3-44e2-8c15-cf796cc1116f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51812386-db66-47b4-8614-76f92ef442da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "686bafa0-0518-45ea-849e-1d0a232545c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b17a215b-d2d0-482e-98ba-46bf64573667"
                        }
                      }
                    ]
                  },
                  {
                    "id": "161edeac-3338-41e7-a164-233ae4b3b2a7",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c44f4dad-8495-4468-93ab-3100409508be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d766073-b4f4-42f0-9de5-5ddb417cebdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a03ea05-a1bf-4e0e-a710-4cc5ec6d0e41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9725bed4-feda-42ef-89c8-5a874c885ddb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4727a9e-f7ca-4d44-8844-3e110ed6c34b",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80bf44e1-1c61-4722-9b29-0e1364123393",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f051cb4-7022-4728-9005-4749f94589f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c6380a2-41dc-4848-abe6-7aa06db2461f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75698b50-7195-4cf1-89ad-6a2febfbf36b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c9c8cac-7892-4205-997a-5c7b1e12296f",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74e98579-d016-4b56-b317-48982f75e91a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "673a3a88-4400-42a2-b450-7acefe1462a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb54e2ac-816c-4bbf-8f5a-07665301c461",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef9a5c64-2d1d-470d-8be7-0426a92b9bd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4483a62f-f118-40a9-89d5-8b981e67bb99",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abf27871-fbef-4f47-8039-edae6668d36e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db26821a-6203-44de-8db1-a19788895e9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "feb96269-b005-48a0-8dca-7433fefb1307",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b1f0332-d494-4961-b656-1958eb4e3465"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5fc5e70-1552-4fc2-8e60-a7b7052fc7dc",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "350c7f85-e53d-43d3-8286-08990eb03134",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c4d7ece-1780-47e6-a9f0-dcbcfd33e0a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b3a6051-4dff-4a9b-b97f-29407b11712e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4efad948-9594-4833-8943-46dafcf6a8f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d92bace-8943-4839-a5c6-0292e260ec30",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db32793d-05ba-47f0-b069-71b23a87a0a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc76020a-6ab5-466a-8055-87f749a4537b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8de2375-fcaf-418f-ae3f-7d60c15d4db7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "580e0998-1e97-4f7b-839c-8efc09480332"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cee5fbbf-6372-4ecc-bf3a-fd94112e1d25",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36fec970-890a-4241-8216-7885f9c63f55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "163c396d-22f8-4b73-ab9c-27f07a952465"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4aa8c2c8-2383-4e5c-b26d-d818d74bd93f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45b359a6-c6a4-4265-bd89-2826b98833fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e497a63-e0a1-47d6-8b22-43c633fb3cba",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42cdec5e-9b4d-413c-a69c-309779b5ece6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47d6f7d6-1368-4fbf-8ff9-24baab87abb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f32c0b6-c1c5-4d1c-9571-d7376bb14a09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f28ccf07-db36-4532-a9af-91dfadd27fda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fb1e735-fc43-43e6-8294-b975c5099084",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c526d686-8568-41e9-a1f6-7edab10d08f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f021b83-522e-4452-bb65-fe70dd670418"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc99a089-292d-4ff3-b700-96930caf6480",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "400a4401-7f51-4004-9a38-3ad2367a89be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb901141-fb3f-4af0-bf82-16de773a7260",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "649866f9-4229-453b-8f36-053f8223e9bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f112420-c3a9-4e2b-8720-29855f90a4a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27398011-02e4-4f7b-b018-43c7abc7a6e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fff1b24-c971-429f-941a-1cec6462ab1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1a24210-52d4-4ffe-b72f-f2ab1e62a886",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae9c6abb-deee-469c-9c95-bb5ab8a428d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b38bea48-bf60-4570-b3eb-7a9fbec938f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "537c79a3-5981-453e-b026-97d53f469aa2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abaa3918-c763-41c5-9de9-4954a031b28e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "096c5699-d311-423e-bdd0-a9ffae07cd77",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61b0d258-dfc5-4cb7-8e4b-36e95bb282c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53e83209-ac8b-45c9-ba61-a4b2fea506cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abdbc66b-52d3-47d4-add3-c5be8fcc25ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9158fe84-6f4a-4b92-836b-8c79e601251b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6358f9bc-ed3a-468c-9d18-bf310bdd6d41",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bae64fe1-56de-463b-aba4-35ac81cca39a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3db9810-aa69-40ff-9bc5-4ce9f6adfeaa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbc71ffc-9ce7-4fe5-9b76-15ad7c396318",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed603c12-7d11-4790-a314-8f0a8ac42837"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8598a1dc-7fcd-4a24-ac2d-56e0eaf5f558",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba73c35a-0e95-4b1a-8fe2-d9b5ce8c5e64",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5bf41e25-a4d0-4ac8-ad00-853246122ce6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d43b6ed-bcfd-4a1e-b6e6-8c0d594fbda5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28ebe8c8-55ff-471d-8eda-9489c38edd10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1325d22-8a43-4871-9c19-e932d3035d72",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e04f6e6-0d51-4eb7-aa46-c422792caaf0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6fb6ce77-2e6c-435b-acf3-b7fd8e37048e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "455112c0-7d4b-4b3f-b16b-b64544c0d95d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e4872b1-5a5e-4b4d-8ad8-8da509156100"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f418fed-3f30-4516-b550-7da2d842acea",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35987a98-6257-4b34-86bf-46a3a54b9a84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31e32418-173c-4452-88f8-7862d726c601"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "666faabf-be8c-466f-ab73-c51d38c07549",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b6a64f5-8345-4089-b700-86b695286a22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "340c5e86-f710-4c7c-955b-e396842d9436",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a70fea49-790f-4fa7-af87-480eca018bf3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "535b6753-6c66-4d40-91d6-7afcbc1eea74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b3e74be-a754-492b-8484-d282f48584ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e36a774-1a7b-4aba-9ef4-944541877ab3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6a7e000-72c9-49a7-9a9e-dfedfbfca43b",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b3a8af6-325f-4b9f-8ddc-f47526b7da8a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d157860-5a13-462d-aa63-1581935d1a2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63b214e7-669a-414a-b98e-9b68ad2e5fd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f885b153-cfb7-421b-bc90-f074baded853"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da39f5a5-19ec-4bbe-9df5-a4453e7d8a39",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fadd0a4-6317-43a6-aaf9-7d75d3c0acc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afc9accc-3d20-4dcb-913e-5794973c28de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0535e755-a5ed-477b-aa46-4d1849e40e12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb13992c-4c6b-4387-8784-000a42844707"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fce772e3-c0fc-49a0-85a8-280c7816e8a0",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bc4ffde-200d-4d65-95df-4c2c2ee10d98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00deabfe-1ca6-4f15-bee2-b9c1d9fe6dad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99f505e9-4a90-4d96-8fb1-3da041600e16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a5f276f-a760-420e-bc37-4926b3546078"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e80dd32-b032-496b-9b51-5d83689f48cc",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6683a03a-08e7-486b-b0d8-4e27d15e9e74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "059ff9c7-5f5c-40f3-bfe0-e2b9d627f819"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9fbd54c-c0db-42a8-a255-b69acf5c00b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07fb2981-7818-4947-81d7-5fb95ac2177b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f496ea84-6dbe-47db-8ecb-7c110b1436c2",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2cfdf95-412d-41f2-8cdd-6eb989a7303f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "251eb1f1-99c1-49ff-9188-857b74fc0919"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fb45cc9-361a-4cbf-9fba-3fe2dd1867a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ecb44f3-454f-46a5-95db-4d9c39b110b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31650fbc-e6b6-42fb-be3a-642e1a4fb327",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a754350d-60f0-46c6-b9a6-59b989e2130d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3c767ee-328f-4dc3-bf90-ca9d2fb3bf12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc971dbe-1fdd-4fd6-b25d-52e553a33651",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f37cc243-2789-4217-bd70-707544507d3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dfc96ec-1b95-4058-ac47-21eea4ec5223",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be52c506-bd25-4075-9441-13dc7ce09746",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "819c8e5e-9550-4e45-9147-82a8e90b5795"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a4b43b8-4b5b-4f83-825b-f3b3abe3d97e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53de7a65-c3a7-47f4-b600-24986eb512b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7d20a0d-7129-430a-b5c2-240c51ff6ea0",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38a5e3a6-375a-4e8a-b352-42af995935e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf1bd75c-f791-412b-b895-5da02affefa9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45451186-759b-4bfb-9f7d-819594e5b962",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f679243e-b6be-450f-8a62-637d542aaf9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cedc235-1e4f-4d3f-ac5c-9b0fe594c112",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "144ca066-6e31-4b34-9afe-928836175233",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20091e2a-e0b9-408f-8fce-5d83641a6b82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d97abb00-32b5-4fa0-a6e2-3773424bc868",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2472c90-3c4b-4a68-9a12-5fe94b597f57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dc27108-1df3-4de5-833c-0bb6f7c249f7",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3d53557-08a1-4a7e-809e-2b28377eb66d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69b97834-23cc-4e47-bce4-1ec1cbff11bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "687574d5-5f70-4129-a62e-145e8199c96e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6c1a62b-8917-45bd-8736-0f005bf3ce56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e3f3f93-d7d4-4db5-8e07-654762f9fe64",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eae62137-ca9e-44f0-87ad-3aa138dba291",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02b2b922-9ef5-413d-aba6-a09591588b95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af1d8e19-b8e6-4734-9404-e674e328e530",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "724aecd7-e85a-42eb-ba92-8420a5cd3014"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d53d528-8283-4088-953b-63d29b7c2d10",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1573ba52-5100-49ee-b5a7-01f968afa424",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75226f46-3835-4392-af46-7dff28e55684"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1eeaf9f-bcf2-47ba-95b7-529b25773050",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "372865a7-22db-4ae2-ba5a-9a2b85f5e50f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "569ebb54-cfa1-4e11-8629-e2319b0b965a",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8ddc143-ccdf-48d3-9092-649e6b4d77cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f684c94a-813b-4761-bff7-2714b0dbacd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e98be83-c651-4096-b225-5980cd0ca71a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e18295a-32ee-42e6-a57b-eacb9a809eb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdb52931-cbfe-4963-b57d-bd4236cf1cf8",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8461235-1afb-43b9-af01-b3e4991db4c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e1a3d99-1306-47bb-8d33-d622814d169b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c95c50b9-e5cd-4b93-b550-fb9c1a363f01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e373b9ce-bbfc-4cae-a413-3fefd24d78eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f21bd2b8-f5ac-4964-a09f-d1e7de995a94",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04c8a5f8-74aa-423c-a1f0-657a29182396",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe912a05-f2aa-40e1-a116-84d818d8bfa5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bef50992-51b4-4dc0-b92c-ca14f622b927",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1baafbd-34e8-4206-a55d-118b77645b80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1132a552-ae71-456e-89a9-18f0ff9faa99",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a58a5bf8-7b32-446c-9f91-ed8db4a9255e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7425e2b8-48f8-4663-9620-4d6abdd128fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6b44eb3-4987-407f-8b7e-85bea56af383",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bbf88b7-649c-4bd1-afa2-c43fdf9c58a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "705954f5-24d4-4ace-9419-f9db703dd1e3",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0b08812-6d92-45c8-ad8d-e44a49c1d4b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6179b1c-2432-4dcc-ba9c-62c77f1aa1b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78d0b558-d632-4d2d-9d8c-75c38ab9a520",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "731f949f-fdcc-4013-8bc6-c6220b85fa0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c53e292-b18d-41c8-8cb5-75757a92e870",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aff4501-c024-4962-91d1-4874b80b742c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3bae93f-179d-4cef-ac10-14f044281942"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fff916a8-35d1-4e50-ba7d-cb704b135f72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92cb9be5-6f04-4671-9728-00e08ea50c9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "386a0d1a-6977-47c9-bd59-22818a05740e",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe333e25-cc26-496d-938a-8e0fa6edffd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cd59dc4-7a05-490e-a906-4441eea77abd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f188251-23c9-42f4-883a-e5d855957a3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1828710-398c-450d-b991-1835c210c777"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64f60553-ea1f-42f8-b497-877f60f30cfe",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30ae183e-6931-4492-946c-2a0a6f256b31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04534f72-51c5-48bb-ba30-adeef4eedcc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00f7ebb7-6d25-4039-8e02-3d0062d2611e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52f43a92-71a6-43a7-85b1-682d2be393f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9150f84-dfa0-4de9-b529-c5642bf18461",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9b9d447-0044-4688-8394-e8591d61772d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6ae1859-44c9-4acb-a922-59a00e9fcaa8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98c5d682-f3f8-498c-bb97-cde7f86d0d85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8443fb81-1368-46d0-9847-58b3a4231ef6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e6c2437-e088-4503-9537-381b51123ec7",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce2fa632-2cd3-4d14-aa6b-a4750871615c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd2e52a0-7eb1-49ab-bb94-9a9a52214e6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8003a348-511f-4dc5-8e4f-b3667695e454",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4304b7f-4e6a-47a0-8c4c-4639c14ec8d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b5e1e6c-0b40-427b-86dc-2132a0c0910c",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e52a799a-3c43-4f3a-b274-bc63af41fb1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d37417be-a6e0-42b2-a9ee-fa3d759aede2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "674bd708-7464-42d9-adc1-3ba7cf0fecc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1c26000-5453-4af5-9e8c-631c7ba910ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af3d75df-42cb-4e72-a572-6ab4aee3c665",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc014ad2-65eb-4424-bd9d-78517974ca22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b821381-3894-4f44-9ec7-2c0f2c654341"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5831b692-debc-45b7-bdeb-c5e282df9c3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05d7655a-89f7-4fb6-8230-d6ffa1188dac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8506452c-1812-4ba8-beca-23e4514d806e",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "006e8ead-5c1c-46b6-8383-0871684b391e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54cf6e33-c5f7-42ed-8ca2-b44fb072a542"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8737420c-b6e4-4667-9baf-b6b422f0f7d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a257b062-894b-434b-a510-14564513b7da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b66ca2b-6d20-44fd-b4d8-b53f6b96764a",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f06f56fc-e84b-4a5a-a2c4-bbb47385a97e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a03e1697-0282-4e71-b419-c9399ecb3a73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16c2f5d3-59dd-45a0-b444-bd1819e59b6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c34d0e2-1103-4cd3-b48b-a041a7aa6d2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da8c8cb2-9ab2-43e1-8c0b-c0d6970daed7",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "482017dc-17c8-4bfb-94dd-2e25869b6dff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2534283-1cd8-4491-9e57-56623c80ca62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af7fd5a4-9574-41fd-8f54-1ac331993c6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60105249-9803-4d7e-a098-34e1cfced40c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "245cf9fb-bc72-41a3-8ef1-2dc47261118a",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "247e1437-e5cc-4169-b4da-770a11498701",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43db3347-01e0-4ac4-9c43-5932c8672340"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1123fe5c-7c5a-4d75-9617-346264c0fba6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff33916a-762d-48cd-8029-a2984b0e9a78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "749eb835-6047-42ec-8995-328d02ab2334",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4e4a218-6be3-4425-a53a-50200644fde1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22452bff-61a3-4c29-a855-54e52bf2f066"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fac7928e-96d0-41a1-81dd-0d406ea9f7e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4dab6ee-a4c7-48a6-83d8-81f0034586c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98c7ae6e-86a0-4a44-a79c-1f5d6e4a32f2",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5094bd07-d49e-44f0-a689-ba649bfcf8a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f176a192-0a22-4705-80fe-7025b0c347d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6578b3e-a402-417a-9142-6ee7f5f2fdad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "574e0863-b0e7-44a6-98ca-aa9b3c77dbbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a71c9e12-50a2-4f26-974a-1bc7dcdc7487",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecfa9ba6-2440-4838-ae47-ee6f70249ad1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39964d04-570d-47f6-b153-ac0510c6cb2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c50ac6c8-3e52-4010-a5e2-65ed6d4c9cdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85e4f10c-3f30-4198-a727-93122f2e4dc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f2af08c-423e-42c8-a0c3-84c11a348eaf",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61af29b8-0cbc-4ca3-8e92-ac3ab2b9a985",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1e843a4-0379-49a2-af78-39441e32ddec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c447e621-16b3-4da1-bc98-7c0ba24f623e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b156eea6-bfae-4330-84f0-1fb74819845f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d620caea-7dd7-498f-97a7-b2f901042404",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1a21e8e-a6f7-4d21-afd3-1356e87c2550",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea24af62-62af-494b-9fc3-d7ba9681b388"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39939de1-7700-4c6b-b763-42807cdcabef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39e38475-7b1e-4cf4-94e1-fa726a821762"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba556e77-0f25-411b-9b52-76f9df3124f5",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "889add7a-4b2e-4e1d-806c-5de69b53209b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f829a0e-a48a-4147-a369-17e2c62eb541"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "863bec23-f5dd-404c-a2cd-53231d1c4502",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e32563b-67a4-44b9-944e-fb0fc20b4c2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "193a7129-5847-440d-bedd-0c1c325e5cbe",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8e3a109-ecdb-4e06-bb84-6218d0eaa398",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ccf9f812-3bc7-4466-b561-4f01113f1ba6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c4dfa1b-a684-43a3-8d60-58b91f119ab1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8a6a5ed-6ac5-416c-a3de-ca199e7e6527"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d2e1166-41c7-45fc-8d38-8b36926a85a7",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2e8726f-7d85-4bf3-94f7-68ef6833b470",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a82ae1d4-acad-4aee-9d95-c1e8ca027ff6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "974a9cb1-de39-4289-8ee0-226978539627",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04c12fb2-425b-423b-b378-eda554eeb1df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0955d660-54e9-4a35-a0a9-84583c2f6072",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da721386-44cd-44bd-8054-f8ee97f87e3d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1176e196-1c79-4512-98c0-0702435bf5fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bf442ad-359e-4f1d-ad06-aa24cfb923fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "300c46ce-20ab-42a4-9397-4c1d29193020"
                        }
                      }
                    ]
                  },
                  {
                    "id": "808082ad-e6de-4399-8090-7bdf969786dc",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f99658a-7b1e-4664-86ef-840b9b3d91bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6679c00-b2e2-46eb-bc68-879e36419638"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71813831-a607-4f6b-85eb-a65d7025fd19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53ef6689-787e-49d0-b809-3a1c2ec4c200"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7865efe2-31a3-4566-8afa-3f0214d8550d",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a729b97-6d3e-4e04-93e7-fc81ebeb5fbb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9105c8c-aa2a-4d16-8b01-e377db4538b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ac2d079-f746-491d-a51a-6d22e9e9e4ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adb2b6a8-166c-4ea3-a6fd-2631a26997b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a14da2d7-3538-4f8c-bb91-17273f687f0a",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afc2bf24-71a1-4fbc-85d0-bcd191c0c5d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9fee6590-77b3-4df7-b573-e8ed2b9c400e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "331e40ec-7e00-462d-abc7-fd08fd696890",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fec974db-bd35-4670-b0b2-66a610a16cfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8d13a7f-58fa-4cab-9d4b-b7f24569d8c7",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96820ffb-4e1d-477c-a9e3-dee3a5b5e5b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "662438c2-63f2-44ba-b666-e87db6cc0979"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bfc5a00-acf0-4f18-8770-f0d64ed88e47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a9aa710-17b1-4b9f-a823-087763326ee6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67703f9d-893a-4f90-812f-8b5871ac20c7",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f13818f-509b-4e0b-b911-d0d6920165d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6027b13-e7bb-48a3-96df-8acf305cd3e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "816fb2d4-1ee1-441b-8402-9f051b99086b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be83b87c-7a3d-4893-bae3-92aa4c6c53ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56f0008f-9529-4440-8718-2b3256df5d1f",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "072740f5-56e0-4b51-a111-81ef9ae9b5a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14832c34-d268-42ba-95cb-e007e818b5ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27b56df6-d74a-44ab-96ff-038f6717e726",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74c6050c-cc89-4052-928d-19c013bf59ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "922ee461-5aa2-4f96-916a-da5dce1a303a",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebb3682a-80b6-4878-a57a-0b1fa246e35f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3161ed98-7eb9-4a81-8053-60c1e75c15b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d410d317-c7b7-4b94-b2ee-808f3dbba534",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb51fe36-67af-45a2-9256-22c3cc745517"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5ae67cd-8a00-4904-98c5-5df9fc2c1248",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ce4f705-e51a-4780-af83-f7763524c6aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4fd24ca-9f51-426a-9d50-87a1329e8053"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6075e27-f7ca-4dc4-a8da-5b199fb5e596",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfa734b3-37a5-46f6-82f1-5a3320b7d36d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bda58402-7bd9-4443-acf8-3573776197b9",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef826e26-bcf8-4ee6-8a8d-aaa5cbe3ab43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98c333a0-1d6a-4316-8ec3-919e833c49ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b73b7dde-3419-41f4-b61f-2251eb94a965",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72724211-c379-4954-9d05-95623396ab59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceefa8bc-06d3-48d7-a871-ffc978dcf433",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2af64b22-9790-4265-85ca-777f0eb38eee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ccd353a0-417a-4a8e-9b8e-01f30e1eddbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77337179-2708-453c-94ad-787435e0cf02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f883f24-2952-4dad-97c8-9e814d9a0f60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63742f57-4643-4e0b-ae67-2db8e43b8c5a",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7b80897-8ae6-4d62-8e42-80960a935d6c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "400d7a4f-cf8b-4f98-89d8-00c9e14c0f10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3377925b-27c1-4d0c-a7d7-b71d1553a7f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ab0554f-ea96-4f50-afcd-69313472e9b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4188c2ae-46b5-4a74-8d53-01c129b3ff10",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3eed51ca-4f63-45ad-b485-975e496a404a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da54dd53-37c2-434d-9e7c-2f49b8528fd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e5a973a-896b-4126-b7b4-e74728c90747",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bc5a1e3-d327-4282-bc6b-a2437ef32286"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2e78a72-6321-4203-980e-617468302661",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6189ab5-9d4d-45c9-b9f1-cbc7d0c028b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75b346a4-508d-424b-9689-36e0e921af88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "577a7d73-f11c-478a-8acf-9bcf103f35cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49a13ebb-62e3-4bb6-bba5-f8261fd53b81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "707058e2-a856-4933-888f-b33257219598",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09df73a3-ebc5-4bf7-834d-e59a1831c28e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c93ed1ce-0764-4eb5-a150-93bf5d9300c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3484ed8f-5b02-424c-819b-3f4262c49caf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69f42383-884b-4bb6-b942-13664b1a9976"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6608023f-7612-4555-a0cd-ceff4df1db48",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d56988fb-5c0e-4250-b87c-f9c6d3533970",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c037493b-2b80-42a2-8ca6-e9077dfad680"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01e3cecf-9190-41ff-9e96-bf4544007fed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b4152d1-3ec7-47cb-97f2-44040f2d474f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c0bf727-42a1-4afb-90e2-c60e9da194ee",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9635c462-412f-448b-bcd6-1f1ec2484319",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f147481d-f3b0-407a-bc21-d7f120cb7da6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8ed0d83-beca-4231-8146-ac329a532524",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ef99f09-0bab-4bc1-9ac2-babe73026540"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14995425-0f4c-4bf1-8ea2-6b7d0f3180c9",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97ee6e5c-80ac-4825-861b-efeb6703def6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "152cec37-e78d-4225-8a46-95104503cbd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "016db1fa-f71c-4c9d-964c-599cbd92d040",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba4c7643-7206-4ee1-98c3-c9a46bb4dfae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6abce107-a9b9-4d4b-811d-7b3b0fa16d83",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25698150-b260-46bb-95a2-2614b471fb7b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c16bff2-ddf4-44be-98ac-192bea38e7d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6b1b6b7-0c5a-4251-b182-1f8dcee6fbe8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1137c39c-fd5a-4207-8e99-26f3f5f9371a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74ebadcd-cd55-4dbc-80f6-5b0da15ac168",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e362ac4-609d-4184-898f-8fc74b5fd42b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18324243-fbda-4f4a-b22c-eef45f85f1a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b536c29-90ad-49cb-b7e1-78b744bad745",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7ac6d4c-0178-4776-bead-2ce5bc0a10ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82eff480-44c2-4f85-82a3-4e4eca0e353c",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "041621a1-8c44-484f-82a2-9cc018984242",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a60b7ce-1285-491a-ab46-d7bed30b8df5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af46e240-5f80-4f5b-ac40-cba5fbd751da",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a4b2dd1-8b4e-403b-9310-9ce7f399d4cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a661c716-329d-4132-bf3b-0e4bae81cdbc",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "506a9f39-1209-4296-9361-f343ed682238",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a67771b-1b92-45f4-98c5-9f8567b25d5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44bbabdf-cc03-45e2-b1c9-c886f74ea9f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "438d1fc8-b767-4b55-8be0-3212076349ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87d1b9b9-baa0-4009-9711-2255dce7e9d4",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dd6937e-fb21-4d18-b1fc-9b06f205a0e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db7b577c-a6c1-45e2-b48b-9381d52c73c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "301adb7c-c366-469c-af98-9a8f38d883d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4379af65-3920-4324-8bbf-8c3e02d5449d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86e10992-4018-45b5-9cc8-c7e16b291b4e",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5443e36c-f8d8-4bd1-ae8c-a2fc1fe3f5cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bcba4c12-2da2-4d73-b09d-3e1f67d4eff2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d05fb29e-8a05-4132-aaa1-4a17ddf146c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef83c42a-ba5e-499e-805d-41e9ce4a0f87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f44115ff-a675-4636-b092-19b6c9127738",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dda51f8-cea9-47c5-8cd4-1f8433ef4b34",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9fdb5a8d-889f-4e75-9be3-a4cf4ca20c0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bb6e8fc-8e3f-4efe-80ab-7bd6be3fce55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dbd2da8-c014-4171-ab41-24c8502f53a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "322156e6-b6d5-4f8c-b2f7-402c497ca70c",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "964ffefb-a069-4b1f-9daf-23d06091cb84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0b7ac0c-cc7f-4fa5-af57-f101244d81a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32cdedbd-8a52-4d5f-9bf3-6cf1dbc2b162",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2838007-3beb-4051-a2d2-483e60a6e872"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e35d26e2-add9-43c9-9a34-273c6b226b3c",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c9f5e53-cf24-4913-b2ac-04419587351d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b839be0-14dc-4e18-80f8-ec715ef72734"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edd54c23-380e-4e1f-b369-3ba25ed199c8",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a30de79-ab7f-4455-af3d-6bb1f4b5af1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad2e74e0-f255-4052-8385-5e8226d9b469",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e938922-90bf-41df-a30d-e290434e0a10",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba8ec15f-a698-450d-aaca-0c2d778adbf7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afc941ce-e1aa-4af9-b605-1fd00ba6580c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9118b54b-1722-4a8b-b705-71c1dd43d8de"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "801fbeba-5519-4cc2-ba0d-586448a48f32",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "205eb55a-8266-4810-a51a-bc71413190e6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e3b0c19a-6ca9-4eaf-9246-8d9b20cde432",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8fc9b424-00a0-413c-91be-0c9c30920ae7"
                    }
                  }
                ]
              },
              {
                "id": "5adb36fc-257b-4a1a-b5d7-eac64114f75d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "92e70d27-60ec-4e97-ac58-cca93420e950",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f50fbb12-dfc4-4006-9f91-a746edc71161",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "46229fd5-41dd-4849-9c01-29d0b6dd676e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbe4a93d-3bc3-4459-89ca-b34fb9cf01be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2809b284-7cbc-47db-aa99-9242c6def4a2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "99c11d0e-9c0f-485a-8124-558e239d5432",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "496c437c-0bc4-4e6d-b7cd-891706e62ee1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7839a28d-9688-4770-a785-9ba31fc8002c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b67f84de-4806-4d8b-bf31-320c3c8726f4"
                    }
                  }
                ]
              },
              {
                "id": "f4b2ac58-b7ad-4511-97ab-844c383489b1",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "6025cfa9-a281-4003-903c-e4cf5831c6bb",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7848f4e4-1059-449c-b7ee-b047d8330063",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "e8d9710c-d41d-416f-8dda-530faf6f295b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35a7719c-151c-4a5f-a1b2-b7248951cc14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6c5dee2-fe48-40c4-aec7-24b55e06d39e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "2e1ad99b-b28f-489a-99a5-d01530d392a8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "59208a6e-fa22-4d0c-807d-83df17a4886c",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "171e1ff3-f150-40ad-9a0f-8e95f70216fa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "944aadc6-36a7-450a-a4c6-3251b76d876f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "41812104-5064-4b83-9662-98e0310e42b4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4b0a070f-b400-4eca-885d-1cd88557c6d8"
                    }
                  }
                ]
              },
              {
                "id": "12645473-b4ca-4b6e-a69f-3b6c3eb764db",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f9b8dee0-cc83-46a0-b330-57435e015a68",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "4838831f-c728-4197-bfa2-4cfc0422ee09"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8b88cbd5-d0aa-4ad9-adf0-365cab0aeb27",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ee653b26-ae37-439f-824a-4552d553edb1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ea0fc0bb-eb41-48f7-8ed6-3bb15c64787b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "96630cb6-a221-4a6a-a156-d225143a862a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5016a251-6f9d-4d7d-960d-7ba226ee725e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "38c84ac4-415f-422c-bfc6-2b19b175402b"
            }
          }
        ]
      },
      {
        "id": "36ad1ac3-2123-406b-80d8-555d30a6d1f8",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "4919ccbf-602f-424d-94b0-e4fe46be50ad",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2c177025-360b-4968-b519-de7acc70cbf0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ddca0130-e3f8-416e-823b-bb3d519618e0",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "909bbcf4-5836-4a99-8f70-fbdd163a7f12",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a0973525-9538-4b9e-aad4-2f15d23a0af0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcdb77b7-60e3-4702-aeeb-750805b7ef37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fa09ce3d-f837-47c4-8dfd-af59f31b6f2b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3d056ff2-c04f-4472-b587-0b1c9179048d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "00b20cf7-005f-4baf-a7a3-6b0094d5fc8a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "eaf90565-64d2-46e6-b0d3-70bf931bbc2a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4e2e6b51-9db0-488a-aa18-5abf4784bc29"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0380ba11-b8ba-4fcb-905f-727f628263a1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "c866440d-5e60-4ba3-8304-9121897459cb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7ed0be60-fd2e-4a8b-8c39-bfa665e2e213",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "587214c6-e35e-4832-b933-8bf36ef780ce"
            }
          }
        ]
      },
      {
        "id": "db66cae3-dcb4-4122-9b20-1df58e9c5f96",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "dd72a69a-8dd9-451b-91e8-27631540e8e2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d22a1f96-adca-40ed-995c-28c48b2c07c3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b3ae394d-6961-4687-9445-aeb57cbec471",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d06e2f2-ce7a-48a6-9d6e-6c3ded9f2c1f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7937ca83-1789-466a-aeaa-bea3c86a1230"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c952146-14ba-4739-92f3-ced4edd998e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7de89d8f-86a9-45f1-88a4-686a95a57711"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d3bf87f0-fb39-4a68-b2e7-fd3d7a375767",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e0fe393e-3f2a-4e33-ac46-6138c843a118"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e4d85d83-0400-4cf4-abb7-7e1c52a534e2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5f5ec6d1-e4ed-4b18-a600-d9d5af1d9803"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dba22264-ff78-40cf-b6d6-bcdc6306f6fa",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a9d0e924-320a-4c2f-9bd4-a8d601523750"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "315817ae-387f-4473-8f46-6eabdf21f426",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bc6f8135-66d3-423c-a818-4eabd9b6842c"
            }
          }
        ]
      },
      {
        "id": "132ec8d8-f132-4019-bcb7-60339183ef45",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "06c6e167-7835-4e48-9fad-ce1722e5526c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ded5acda-26c8-4d64-afe6-fd13dbc43d92",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "32d1843a-4b59-4510-94dd-0721b7763014",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afb587ba-aecb-43a5-9c48-090045109f5b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f0697277-ce4b-4eb9-8d70-c8a6c7e78299"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8c09320-c113-4ce0-bc21-d7b97443e479",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4f029b50-8607-4a92-9907-e51a166cce98"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "48628ba1-9c4e-4082-9240-a6b3a0bd7250",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a36315dc-3399-4aec-a74e-75d9028a6445"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b1a30b8e-795a-42a2-948f-2044b5363d6a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "27194e13-d403-4340-ae9f-1c6d77f91c3d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "32386f62-d9de-4a11-81a3-bf04f9ce6d30",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "54011073-5e4e-4239-ac9d-20bba9316430"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "28340cd2-d220-46db-8ad4-b1ac6ced29ba",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e7f01477-6c52-4572-a8de-0856f3446b52"
            }
          }
        ]
      },
      {
        "id": "0fbb1a15-7802-4946-a98c-8bc7cab3c630",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "75cdd514-a4b3-4fad-9648-36b00daaa592",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cc86324b-e2ac-4313-9c61-e22b83b22ce8",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "a5fdb4ba-88a6-42d4-bf92-47117a924952",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a2942b43-3aac-47fb-9b4d-a056226db211",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a882f798-25a9-4dd1-b5c9-bbb2758b0cf8",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 53.00793650793649,
      "responseMin": 5,
      "responseMax": 851,
      "responseSd": 85.54489177291879,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1715301371479,
      "completed": 1715301393093
    },
    "executions": [
      {
        "id": "01d48e6a-efdf-4415-89ea-c4ddb737455f",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "994255ba-6671-4edb-b631-c8a8253c2db6",
          "httpRequestId": "2bd68537-2c5a-4d71-8fb0-f54e0852a813"
        },
        "item": {
          "id": "01d48e6a-efdf-4415-89ea-c4ddb737455f",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "b2a89996-0385-49cb-a2ba-e258dd53976d",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 0
        }
      },
      {
        "id": "90bf70f0-28cd-4287-8e82-e4f3c4ae0086",
        "cursor": {
          "ref": "1ec6c0d6-5453-49e8-a6e4-34e6ea252c16",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "4e0e4188-5f9a-4b0e-86f1-58ffb047f74c"
        },
        "item": {
          "id": "90bf70f0-28cd-4287-8e82-e4f3c4ae0086",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "487725d2-2e45-4ed0-a599-dd625aa01b7b",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 0
        }
      },
      {
        "id": "6e3f5c57-125c-43e8-8a80-e2e6992e3fa2",
        "cursor": {
          "ref": "20fd0e19-ba16-4963-bb1b-618a37e66a50",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "8eb4d8b5-9209-48ae-9d1a-b79bde98e319"
        },
        "item": {
          "id": "6e3f5c57-125c-43e8-8a80-e2e6992e3fa2",
          "name": "did_json"
        },
        "response": {
          "id": "4f8aeaa1-0b20-44ee-a6ec-ed4814cb5b51",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b19f828c-60f2-4a8f-9121-d0d67f8f96f1",
        "cursor": {
          "ref": "3fa23281-57ab-44d7-8bf0-4212dbb0d9ef",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c0635a52-562f-4d6d-8fda-c92080ff23cc"
        },
        "item": {
          "id": "b19f828c-60f2-4a8f-9121-d0d67f8f96f1",
          "name": "did:invalid"
        },
        "response": {
          "id": "b93bdf76-1011-4a7c-b99d-34562ccad936",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b19f828c-60f2-4a8f-9121-d0d67f8f96f1",
        "cursor": {
          "ref": "3fa23281-57ab-44d7-8bf0-4212dbb0d9ef",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c0635a52-562f-4d6d-8fda-c92080ff23cc"
        },
        "item": {
          "id": "b19f828c-60f2-4a8f-9121-d0d67f8f96f1",
          "name": "did:invalid"
        },
        "response": {
          "id": "b93bdf76-1011-4a7c-b99d-34562ccad936",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf8c0480-1700-4544-90f5-2f8ad9d2dd24",
        "cursor": {
          "ref": "f6081926-235f-4eff-88b8-64d2a742ddc2",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "f07e3f0c-a1f0-4b97-825e-d9185b3724a0"
        },
        "item": {
          "id": "bf8c0480-1700-4544-90f5-2f8ad9d2dd24",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "71085ca9-3879-44fe-b981-b4714f9fa102",
          "status": "Not Found",
          "code": 404,
          "responseTime": 147,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fea166f-fc86-41fe-852e-ea40935b49ef",
        "cursor": {
          "ref": "81bc9742-353c-4933-9377-80ba9f923abb",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "ab1c8b6f-b3fa-45c9-a55c-0e1b5798c4fc"
        },
        "item": {
          "id": "2fea166f-fc86-41fe-852e-ea40935b49ef",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "61a7df78-706b-42c3-9d0d-72c947d4642e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 24,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d352abda-8ccb-4ba8-8e37-77eb7bbef1d9",
        "cursor": {
          "ref": "a5f6c3aa-b8c5-45c7-b64b-36beee896e02",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "a838101f-c617-42b7-bbe3-09a01999a091"
        },
        "item": {
          "id": "d352abda-8ccb-4ba8-8e37-77eb7bbef1d9",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "9cbd24e1-5d04-4847-b26c-f10e85b83f92",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cb0083b-03e0-48a6-bc97-a2e8995eb859",
        "cursor": {
          "ref": "7636e557-f7ea-420d-8dca-81b818f9f9ae",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "494f68c8-8acd-42ef-958a-5d1841ff9657"
        },
        "item": {
          "id": "0cb0083b-03e0-48a6-bc97-a2e8995eb859",
          "name": "identifiers"
        },
        "response": {
          "id": "cb1ac26f-c0ca-4268-90a0-613bfc7ab96f",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4132f7e9-6653-45a5-bd30-46b1020fc25d",
        "cursor": {
          "ref": "2075670b-77ef-4e25-9c83-a37ad4a29bc3",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "9ef53284-190e-4933-85d7-ba6b9bc7800b"
        },
        "item": {
          "id": "4132f7e9-6653-45a5-bd30-46b1020fc25d",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "7e4c30c0-fdda-4438-b529-522687a1e97f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98076af7-8328-49d0-a085-7096e0b98424",
        "cursor": {
          "ref": "7b167f74-e904-4097-91f5-81599aa3cf8b",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c4d2ba49-1258-4441-bea5-94457283d492"
        },
        "item": {
          "id": "98076af7-8328-49d0-a085-7096e0b98424",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "7728f25d-672f-4018-905a-3b863e668850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3265b1c-c008-47e6-8e67-1df1192c8772",
        "cursor": {
          "ref": "4ed8ac6c-fdce-4cdc-8785-97ac544e2e3a",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "dbd2b4b1-88e8-42fc-83e6-79626b597de9"
        },
        "item": {
          "id": "a3265b1c-c008-47e6-8e67-1df1192c8772",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "48690a8f-4d15-4aec-9568-d43868ef0710",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88ed76e4-1b0a-48f2-865a-138cfe87a04f",
        "cursor": {
          "ref": "d405349c-7d25-4041-b8bc-61760357bb6d",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "37383b3e-5864-47a8-a92a-6ba32cce546b"
        },
        "item": {
          "id": "88ed76e4-1b0a-48f2-865a-138cfe87a04f",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "4c7cdb85-3bc0-4dae-966e-e357b9d9324e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e5a98b2-a810-48ec-a8bd-5ef8fda31545",
        "cursor": {
          "ref": "f89a25d2-8d18-4c54-b7b1-05d703afeb21",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "1db1703d-46a4-4fcf-b8ba-e3199fbc30b9"
        },
        "item": {
          "id": "2e5a98b2-a810-48ec-a8bd-5ef8fda31545",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "1b15f164-cca8-41e7-9947-7e91f16518fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbd4f82f-fe1c-4f1b-88ea-ca807fb489ca",
        "cursor": {
          "ref": "049f4cbb-706f-460f-ba3e-e5de17fd1f52",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "2cce9061-2583-4a73-aaac-a9b2c8d79bb3"
        },
        "item": {
          "id": "dbd4f82f-fe1c-4f1b-88ea-ca807fb489ca",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "c730c4f4-1038-446d-b945-7078ccd6cb4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "745d9aab-f5e6-48ee-b6e9-cadb04590fdc",
        "cursor": {
          "ref": "92ad5e10-bb8b-43b4-8ea9-c31798dbadfc",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "66f30a3d-2bc9-4c5a-9420-96714ac9d5bd"
        },
        "item": {
          "id": "745d9aab-f5e6-48ee-b6e9-cadb04590fdc",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "ee5d1e09-8f4c-4b0e-9bfd-d89f0e8c30be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "465f9ed9-5b95-424e-bc7f-8b1fb51cf39b",
        "cursor": {
          "ref": "ffa602ae-17aa-4eb8-bc63-e5cfd95a07dc",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "b01df3f9-33a4-4f40-be10-e7fe071ef09d"
        },
        "item": {
          "id": "465f9ed9-5b95-424e-bc7f-8b1fb51cf39b",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "7a11fb43-d525-40f7-bf42-5d38a642c8bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc631edf-6617-4ac7-a9bd-b9d8b94e9732",
        "cursor": {
          "ref": "1f0a17e5-d885-4218-981a-061427848792",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "971b8da7-2904-48e0-9b70-6a971b5ebc50"
        },
        "item": {
          "id": "bc631edf-6617-4ac7-a9bd-b9d8b94e9732",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "165ba3e5-f76f-416a-a2ec-ee7ad596044b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "148b6016-4576-4669-af71-ffdf174e5cdb",
        "cursor": {
          "ref": "f9f16195-033f-4847-93a2-27eae85599f2",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "fe3248b8-16d7-4945-9f39-3ad219914875"
        },
        "item": {
          "id": "148b6016-4576-4669-af71-ffdf174e5cdb",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "e9bc26b6-9da5-4e6f-839e-c2c9a8ea4dbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff83bf81-7116-45fe-9aaf-2216736479dd",
        "cursor": {
          "ref": "229f5248-e46e-4854-a791-5112a3fa1a67",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "bb894953-664e-42ae-8562-00ca98453203"
        },
        "item": {
          "id": "ff83bf81-7116-45fe-9aaf-2216736479dd",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "d0c595cc-3ed6-4c9c-8332-5837125c83d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0ed5443-861d-45f0-88bb-e766c8bcb4f8",
        "cursor": {
          "ref": "f417161b-2e90-4f5b-accb-74e1d668bc95",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "7a0a57fb-8d45-4989-846e-a997b662d3cf"
        },
        "item": {
          "id": "d0ed5443-861d-45f0-88bb-e766c8bcb4f8",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "608fc6fd-3e2f-4a5d-824d-153a8df56ab0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a806130f-17a2-4c7d-9095-0fb364e5a2b2",
        "cursor": {
          "ref": "54236f8f-c6ad-47bb-b591-c287e9186c34",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "360cf31d-4ad9-4636-87e4-78aacd43672e"
        },
        "item": {
          "id": "a806130f-17a2-4c7d-9095-0fb364e5a2b2",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "7a0f0d6e-1e1f-4712-beec-b45189903719",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf81209b-d156-4614-bef3-289ac7275829",
        "cursor": {
          "ref": "7d07522a-0a33-434d-b2a3-ecb02089f516",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "d0ecec31-29d5-4492-a987-b9a8b4a8749a"
        },
        "item": {
          "id": "bf81209b-d156-4614-bef3-289ac7275829",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "d0b9646b-28f0-4416-8f5b-561a3df5ee6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "160c0db2-4d72-47b4-b4ce-db0785e6b28d",
        "cursor": {
          "ref": "576915eb-cb98-4a8c-9e83-3f5d6d6828a7",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "cb09de2d-8c13-4463-b9cd-33f8637f47ba"
        },
        "item": {
          "id": "160c0db2-4d72-47b4-b4ce-db0785e6b28d",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "8842e1e7-5a2c-4d00-b8f5-1891c730df00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bb5a5eb-ad04-4fc4-8018-e94e4d27d1fc",
        "cursor": {
          "ref": "efca98ad-ac01-4728-bd27-71c1ae3d0aa2",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "9650c087-98dd-4195-a79a-845ac8653a8f"
        },
        "item": {
          "id": "9bb5a5eb-ad04-4fc4-8018-e94e4d27d1fc",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "f50f0bd7-a5d0-4616-9c8c-d6e9ba5c2d74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87798014-0c6f-4355-88ff-9f84b92066cc",
        "cursor": {
          "ref": "63469965-f7a8-4930-835a-0de49f5feab1",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "f71b1d10-ad85-4ab8-bd73-2e60d17b999f"
        },
        "item": {
          "id": "87798014-0c6f-4355-88ff-9f84b92066cc",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "2061627f-54ed-4fc5-89f1-f5e895415210",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f3b9984-b318-4246-b5ba-c14f033031cd",
        "cursor": {
          "ref": "e7d2823c-d689-49a5-8afd-c42b5e9c032e",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "f3cd8e83-d8db-47cd-aec8-0f71f2b93dae"
        },
        "item": {
          "id": "6f3b9984-b318-4246-b5ba-c14f033031cd",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "11540055-18b1-4dae-8c07-68ac1da5010e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2e17715-6610-4375-be63-5fe02c2e1c6d",
        "cursor": {
          "ref": "cffa6cf6-ea80-4223-9f25-66687a234472",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "3abe3df1-c6cc-49d2-a88f-93d901ff6f99"
        },
        "item": {
          "id": "c2e17715-6610-4375-be63-5fe02c2e1c6d",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "8871fbac-844c-4601-b7c4-a53f89e87372",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "420ae1a0-a644-4167-b449-b85f0048620b",
        "cursor": {
          "ref": "e21039eb-718f-4534-99f8-3079eff5d17f",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "cc905b62-1173-4699-8415-3698433a91c4"
        },
        "item": {
          "id": "420ae1a0-a644-4167-b449-b85f0048620b",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "ecb8617a-a625-4850-97a7-c572e6fe5bf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac1e1c09-ca89-41f8-817d-1a76bd206464",
        "cursor": {
          "ref": "682cb6c1-00e2-411b-9035-3231d11954d7",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "c2a03ad4-246a-4fff-b709-a1332aae6b04"
        },
        "item": {
          "id": "ac1e1c09-ca89-41f8-817d-1a76bd206464",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "e2b50bf8-8934-43be-bc48-10f3d06b2085",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2c5a8fb-3607-4817-8f53-9aa2b971aaeb",
        "cursor": {
          "ref": "8554db20-de43-4b1b-81c6-75b517f0b064",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "2c7fb0f7-05fd-4b91-aba0-051b76db56ca"
        },
        "item": {
          "id": "d2c5a8fb-3607-4817-8f53-9aa2b971aaeb",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "0ab96ef5-f13f-499d-aa0e-94cf0046e3d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f4e1298-1e9e-4f67-96c2-10659fb033ca",
        "cursor": {
          "ref": "b99f24f4-1f94-4334-9de0-3c36c1b52699",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "9bf5aa20-aef2-42f2-8f43-1c8dd01b49d4"
        },
        "item": {
          "id": "5f4e1298-1e9e-4f67-96c2-10659fb033ca",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "0a3d4edc-0ce9-48c2-bc33-3b2334cffafb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "745f3558-67be-4f9d-bfd8-d754fdb1327b",
        "cursor": {
          "ref": "2783bf62-c0ff-4a9e-9cf8-6c338ee5d10e",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "8c1d4228-548f-4fe3-a377-6eb3416ab6d3"
        },
        "item": {
          "id": "745f3558-67be-4f9d-bfd8-d754fdb1327b",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "ace358b6-4485-4bf0-af1d-5e42ce8fc102",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce8796cb-b668-47c1-889b-03d879fda5f8",
        "cursor": {
          "ref": "d065eb28-228b-4dda-92b8-f5009c87d970",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "33e4491b-88fb-4b52-a83c-581cfd584b32"
        },
        "item": {
          "id": "ce8796cb-b668-47c1-889b-03d879fda5f8",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "92494659-fed6-46c5-8cdf-07a3ef042266",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21734957-84a9-43fd-a8f3-a146e79db388",
        "cursor": {
          "ref": "aecae309-9105-4390-801d-4014114dca58",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "fcd1901b-8efb-4416-ab2f-892ae14baa83"
        },
        "item": {
          "id": "21734957-84a9-43fd-a8f3-a146e79db388",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "006bca63-179c-4a7e-bbbc-82a11fd12ed0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3a6799f-577f-4df9-b2d4-dc5e99724ec1",
        "cursor": {
          "ref": "9fcbdb41-8754-41b7-957c-c04b6f26a92e",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "6165418e-022e-4922-b9c0-e7507e315165"
        },
        "item": {
          "id": "a3a6799f-577f-4df9-b2d4-dc5e99724ec1",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "a3e75542-7b1a-42a5-9cc7-4064d4e0b730",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4bbd9a4-3c5b-446d-b61a-71bec108c31f",
        "cursor": {
          "ref": "d3552241-d381-4815-aa75-2d4b16539502",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "98b3af70-e77a-4d3e-a636-a8caa19663f1"
        },
        "item": {
          "id": "b4bbd9a4-3c5b-446d-b61a-71bec108c31f",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "83ba216b-16bb-4405-bbef-f824c7df8477",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeed6115-2fc4-4098-8ae8-00b9d1246aad",
        "cursor": {
          "ref": "52b78e30-2741-4ca7-8001-c2e8b8a63d25",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "d2d18b04-4df5-4719-ac8b-2e9b5f4a8b8a"
        },
        "item": {
          "id": "aeed6115-2fc4-4098-8ae8-00b9d1246aad",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "f6b8a3d1-4641-40f8-ba0d-73da423b0280",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "814e8213-34ca-46c3-8c1d-3609bc27fd97",
        "cursor": {
          "ref": "008dd8da-0a23-4fce-97d7-105a73921469",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "9473f4d3-6a55-437c-ab09-09bd1d6f1763"
        },
        "item": {
          "id": "814e8213-34ca-46c3-8c1d-3609bc27fd97",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "8532a7ef-96c5-4692-8a90-44ec9f4d2ffc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f32db132-b2f9-44d7-8ae8-44bc6e5402d6",
        "cursor": {
          "ref": "5eda44de-7c0c-4d45-9585-563062ba01e4",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "ab11695e-87ff-412a-b738-0521c8645baa"
        },
        "item": {
          "id": "f32db132-b2f9-44d7-8ae8-44bc6e5402d6",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "0c33cde4-3906-4152-bb9a-8faca536edea",
          "status": "Created",
          "code": 201,
          "responseTime": 851,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "27643655-21b0-44ac-a6e9-0cf50d93e3a9",
        "cursor": {
          "ref": "133a1c6d-8702-4db5-97a3-1e3f6e48c961",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "7eb90b41-dd09-40cc-ba28-242a48dfb464"
        },
        "item": {
          "id": "27643655-21b0-44ac-a6e9-0cf50d93e3a9",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "09905482-cbf8-4078-a85c-d3c87c4efbd3",
          "status": "Created",
          "code": 201,
          "responseTime": 343,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "4783dc47-56a3-4bb2-a749-aea643120e6e",
        "cursor": {
          "ref": "2a262b29-222d-49eb-8534-6a94bc40b335",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "6b66706e-8cef-4abb-a31e-3ede7a336ddc"
        },
        "item": {
          "id": "4783dc47-56a3-4bb2-a749-aea643120e6e",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "f9b4ab49-9808-4b49-8ea1-7d1a69f3404b",
          "status": "Created",
          "code": 201,
          "responseTime": 254,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "b72a2c60-59f6-4176-a77c-514ca56c668a",
        "cursor": {
          "ref": "787bc4e4-2818-4faa-a9d3-3d58b331b484",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "acf908e4-b878-469a-ad30-47bb4259757d"
        },
        "item": {
          "id": "b72a2c60-59f6-4176-a77c-514ca56c668a",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "355a6519-8b18-49f5-91d4-0d5568f28d05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27c6500e-4034-44d2-a1aa-6b9321967cad",
        "cursor": {
          "ref": "0d3c6d9d-8488-4726-961a-ce1e9f527818",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "04c1349f-f64a-4560-a722-fa165bcafea9"
        },
        "item": {
          "id": "27c6500e-4034-44d2-a1aa-6b9321967cad",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "06e80e61-d744-4f46-8fc8-f70f1341b635",
          "status": "Created",
          "code": 201,
          "responseTime": 260,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "6bd6c7a8-365b-49c1-bba3-a3d6d21b5648",
        "cursor": {
          "ref": "6e76ef70-6c24-46bb-8bc1-e20e4b427564",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "92483ec2-eeb7-49b0-92ff-72e7cc3f0a68"
        },
        "item": {
          "id": "6bd6c7a8-365b-49c1-bba3-a3d6d21b5648",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "888cb89e-5736-4808-855d-77c85afdea75",
          "status": "Created",
          "code": 201,
          "responseTime": 244,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "c2a5fde4-aa65-49d8-81bd-3d457e865623",
        "cursor": {
          "ref": "7742f4df-e84d-4754-aa69-610068ed86f6",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "b65295e5-0c30-40ed-bb48-dae8dc0f1efb"
        },
        "item": {
          "id": "c2a5fde4-aa65-49d8-81bd-3d457e865623",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "d088f93c-b341-456e-b0d2-e1677814c248",
          "status": "Created",
          "code": 201,
          "responseTime": 270,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "c81c6525-4105-4307-b63c-de622bd02df0",
        "cursor": {
          "ref": "c45ef3e1-e5bb-4941-904f-d9acdc20b8ca",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "684141f5-e470-4939-a9d6-77fe6b5d6c54"
        },
        "item": {
          "id": "c81c6525-4105-4307-b63c-de622bd02df0",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "bcd97161-f092-4205-8de2-5b52466b026a",
          "status": "Created",
          "code": 201,
          "responseTime": 254,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "d04b59c6-7ee6-4ad3-ba91-40e393b4790d",
        "cursor": {
          "ref": "ce2cd479-8b24-4dd0-be9b-030afa27e0e5",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "c258f64f-67a3-47d3-89d1-c17503f89222"
        },
        "item": {
          "id": "d04b59c6-7ee6-4ad3-ba91-40e393b4790d",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "38decdf7-96e3-49ca-86db-f9690ef2060d",
          "status": "Created",
          "code": 201,
          "responseTime": 228,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "7f1e74a7-bb9c-45ad-872f-759bf4c7b299",
        "cursor": {
          "ref": "35a309e7-72e4-4cf1-9329-e29c763f91d2",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "669617e4-6537-4468-b760-76f094e9e887"
        },
        "item": {
          "id": "7f1e74a7-bb9c-45ad-872f-759bf4c7b299",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "446401cc-c8c0-4f4e-b3dd-2823e69ed5d7",
          "status": "Created",
          "code": 201,
          "responseTime": 267,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "c534aff6-ef73-4607-b807-828e131ab278",
        "cursor": {
          "ref": "a316121a-b39b-4e62-83a4-6a575187be6b",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "ee778e57-5cff-47c1-98ff-20d933af9088"
        },
        "item": {
          "id": "c534aff6-ef73-4607-b807-828e131ab278",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "343c9bf3-b63c-4a33-b966-df875650d4e2",
          "status": "Created",
          "code": 201,
          "responseTime": 235,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "512db10c-4797-4ffc-8d34-4755832c7b3b",
        "cursor": {
          "ref": "2a455ce5-83b4-4cef-9ad6-5c793f86b540",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "06d16c20-3b8e-45bd-a418-4fa3f7c085e7"
        },
        "item": {
          "id": "512db10c-4797-4ffc-8d34-4755832c7b3b",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "66ec24f3-1c03-40fd-8942-b1a9a808263b",
          "status": "Created",
          "code": 201,
          "responseTime": 258,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "75c2a2c9-81f1-4019-8ed9-32945c15b3f6",
        "cursor": {
          "ref": "d9499fc4-fdd4-4507-9ca3-8d01b4e46c7d",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "607c4fc6-3b3f-487a-85a7-e97b8f18d734"
        },
        "item": {
          "id": "75c2a2c9-81f1-4019-8ed9-32945c15b3f6",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "ffa9c04c-54e5-4f89-9187-a089096f3f21",
          "status": "Created",
          "code": 201,
          "responseTime": 274,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "40a384bc-e251-4fa3-aa86-9686903fbed8",
        "cursor": {
          "ref": "e2779556-d9f4-4060-81d5-8f3d0528e1a6",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "aebca72c-fec7-4ee4-83bf-713a3d8450ca"
        },
        "item": {
          "id": "40a384bc-e251-4fa3-aa86-9686903fbed8",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "ea6e6383-f63d-43e5-9490-76ef81c202b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a43e6222-d6a7-4627-94f8-6e7125da0847",
        "cursor": {
          "ref": "13941655-95f5-4a3b-aedd-40c831c2774a",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "5b65b8b8-63fa-420a-94a4-b07ecd3ff143"
        },
        "item": {
          "id": "a43e6222-d6a7-4627-94f8-6e7125da0847",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "8bd0a3e1-f9fd-4083-bd03-ee448aaeee89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc1267f7-21b1-477b-9d82-bf4bd4d389f2",
        "cursor": {
          "ref": "5b7f981f-2727-420d-be16-e6b334ade0c4",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "ad37b1bd-93af-4398-8d2d-de77db109852"
        },
        "item": {
          "id": "bc1267f7-21b1-477b-9d82-bf4bd4d389f2",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "ebe41cde-0961-4925-86d5-e19cf0ff49b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7876958c-16a8-4f4a-a5d6-d9018c50548c",
        "cursor": {
          "ref": "d2eec735-07d2-45eb-9bdc-ea7da4d01fe7",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "55998fec-1b8a-4cb9-bf74-f983070c401f"
        },
        "item": {
          "id": "7876958c-16a8-4f4a-a5d6-d9018c50548c",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "7bf1c3a5-fa17-45e6-8164-1e0f9e11eca0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da84af6c-1bee-4f76-a1f0-e32610075f78",
        "cursor": {
          "ref": "524a2d5d-7810-4c98-b196-9ef24172642f",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "c4ff1308-0160-4275-b907-51edefc01605"
        },
        "item": {
          "id": "da84af6c-1bee-4f76-a1f0-e32610075f78",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "567efe69-3a27-4263-bd5f-bbfb3d83c6e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41654cd1-2143-46c0-b940-6977f80788ab",
        "cursor": {
          "ref": "b4ad0c7e-dd7d-4351-9fe8-b534b2a73ec4",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "5575206d-c370-47f8-ba81-6b3a2f3eabfb"
        },
        "item": {
          "id": "41654cd1-2143-46c0-b940-6977f80788ab",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "b4c65400-76f5-4676-bc34-858a84d00fc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9088ef58-b229-42dd-8fd0-e72d15954499",
        "cursor": {
          "ref": "7d003dae-d0f6-4382-abfc-36b4937199c7",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "d2680cbb-08e1-429c-afc8-f91e8bf021f5"
        },
        "item": {
          "id": "9088ef58-b229-42dd-8fd0-e72d15954499",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "d5dc89f1-de0c-4078-b634-1c27d39d34ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dee4a96-6579-4dde-88ae-5c57e5b5ce22",
        "cursor": {
          "ref": "18e24671-58f8-420d-922c-16c37c7aa9af",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "fcdda38d-0dd7-4798-b29c-a48a11942656"
        },
        "item": {
          "id": "3dee4a96-6579-4dde-88ae-5c57e5b5ce22",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "3ba608c6-5171-4aa0-82ee-9324ee44fc56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55ba2c89-642d-4c7a-83c2-06b9278c2279",
        "cursor": {
          "ref": "8a8bf008-b5e7-4dd2-82cd-d6d378eb66a2",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "1b44740f-2c30-4641-a0d5-7de5620bec46"
        },
        "item": {
          "id": "55ba2c89-642d-4c7a-83c2-06b9278c2279",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "23ff75fe-6d3b-467d-825b-12acf76a624e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b672be6a-4235-46a6-b699-c31dbf27cd93",
        "cursor": {
          "ref": "25f0ff55-4410-44b8-80dc-53868dd479d9",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "6162ee33-9c10-42fd-9ffe-63cfe8522408"
        },
        "item": {
          "id": "b672be6a-4235-46a6-b699-c31dbf27cd93",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "66c6dc34-b874-40e0-b4b9-35149c898c57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "822fea61-f6e4-4ca8-b787-827f50e27e61",
        "cursor": {
          "ref": "4463d32c-f822-48ef-a820-1614577f82d1",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "b34b4c80-6a22-4f15-86c5-24497ceea017"
        },
        "item": {
          "id": "822fea61-f6e4-4ca8-b787-827f50e27e61",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "05bf0121-e04d-4dc5-b163-8532d49073e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81ef7a42-dc9f-4279-992e-cff12295e5ab",
        "cursor": {
          "ref": "b71afd71-7a2c-4dd0-9142-6d11b3926e2e",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "b29c1d61-558e-4e37-99cd-f62f0fa2b647"
        },
        "item": {
          "id": "81ef7a42-dc9f-4279-992e-cff12295e5ab",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "db5bfb08-7f12-4b5e-b526-3a4d0637494f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0944731-e8d5-48ab-a238-213f7de3d4b2",
        "cursor": {
          "ref": "8ae3743e-adc8-4249-a5f2-fdc565c8ef77",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "98850822-925a-4d72-be87-2aae9f54b528"
        },
        "item": {
          "id": "f0944731-e8d5-48ab-a238-213f7de3d4b2",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "39a3360d-74a8-4c9f-814a-74c421f4fff1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab2328eb-b55c-4072-bc44-666ce964f315",
        "cursor": {
          "ref": "fd627885-2622-446e-b3ef-ac71b840878b",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "7d729036-c9b5-46aa-a964-3da83b8b3b80"
        },
        "item": {
          "id": "ab2328eb-b55c-4072-bc44-666ce964f315",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "01de96c9-91b0-4935-a908-42d92f9e19c3",
          "status": "Created",
          "code": 201,
          "responseTime": 264,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "a85b567d-c1ea-4cfa-877f-094e7754598f",
        "cursor": {
          "ref": "b6c692b5-1828-4ad7-bfc8-6ea156784ca8",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "ce6fdd17-869e-4f53-9c82-35f4be06c00a"
        },
        "item": {
          "id": "a85b567d-c1ea-4cfa-877f-094e7754598f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "92e0aeaa-6832-44ff-bff4-54bddf09b74a",
          "status": "Created",
          "code": 201,
          "responseTime": 237,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "029ee188-1ec6-4c88-bca0-2e6af82cd3c0",
        "cursor": {
          "ref": "51ceb425-739e-4992-8db9-84ae05a8b6ec",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "a3de25bd-5cf2-4696-b387-c4ac34ae98db"
        },
        "item": {
          "id": "029ee188-1ec6-4c88-bca0-2e6af82cd3c0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "0881c5ad-e137-4609-9b7e-b5607cbfac08",
          "status": "Created",
          "code": 201,
          "responseTime": 240,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "d80de18b-5d36-4f71-806b-3f427e65f8be",
        "cursor": {
          "ref": "c7a23d04-e618-4083-9e70-c467a9709f97",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "d36518b6-c47b-44f6-9f7c-4c8ae8cb5bac"
        },
        "item": {
          "id": "d80de18b-5d36-4f71-806b-3f427e65f8be",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "eb75e58b-2f49-4913-a108-d5c66d55a9f2",
          "status": "Created",
          "code": 201,
          "responseTime": 246,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "dbf9b58d-8439-496d-b89c-9e47482635e3",
        "cursor": {
          "ref": "cdee8208-33e6-419e-b6ad-183f81b61cbc",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "d2f737ef-02a4-4b14-bb29-ee97da636426"
        },
        "item": {
          "id": "dbf9b58d-8439-496d-b89c-9e47482635e3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "fa733bfa-fe79-42c2-9102-60df6e4b6862",
          "status": "Created",
          "code": 201,
          "responseTime": 248,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "9b45d33a-28a1-445e-b49c-47e78b187c8e",
        "cursor": {
          "ref": "4d60a714-562e-4662-b276-7fddde2ee813",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "c2da95d4-2377-4e6a-99e7-7746be43cc48"
        },
        "item": {
          "id": "9b45d33a-28a1-445e-b49c-47e78b187c8e",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "5d7279f1-a69a-4142-8bef-ac13a590b72c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77a4a468-b3b0-47eb-a01d-d83e767e977c",
        "cursor": {
          "ref": "ad9e2784-7983-42d8-a522-41f92d2b4ec0",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "9d556e85-f47f-4e59-a955-3edb35c7a442"
        },
        "item": {
          "id": "77a4a468-b3b0-47eb-a01d-d83e767e977c",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "f35f4a2c-5627-424e-b9cd-0a83b5295185",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40d2192c-3016-4913-bc6f-64db2de04aee",
        "cursor": {
          "ref": "2b9cb440-cbf4-4b82-bbbe-6f514c860648",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "b3a413dd-6eee-4006-8463-218594e1bfc8"
        },
        "item": {
          "id": "40d2192c-3016-4913-bc6f-64db2de04aee",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "a3f6098f-f2a2-47d5-866b-dce3289a79ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed0736ce-b818-4d2f-85f2-ff37f6eb3968",
        "cursor": {
          "ref": "a2016ce4-aebf-44bb-906c-be267f0e10a0",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "6d65f08e-cc1f-4521-9220-828c16e5d745"
        },
        "item": {
          "id": "ed0736ce-b818-4d2f-85f2-ff37f6eb3968",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "3b4956cb-7498-433f-9afb-2b6c61f9889c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49ed3db6-775a-489d-bc93-944d42b9bcc9",
        "cursor": {
          "ref": "cd391757-2ca4-40bd-9344-8ee79e1f7d1f",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "549f68b1-12d6-42a6-afeb-49b000a39ac1"
        },
        "item": {
          "id": "49ed3db6-775a-489d-bc93-944d42b9bcc9",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "4b3c9fd2-886d-46ce-89bf-86605ec8e88c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfa33a75-4537-4e5c-a906-c85967729084",
        "cursor": {
          "ref": "e90ba591-d366-4a99-888c-3ef7a1608b97",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "f5354ced-696d-4367-a0d6-0255315471f7"
        },
        "item": {
          "id": "bfa33a75-4537-4e5c-a906-c85967729084",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "0a14239e-6f31-4cd3-a3e1-9880b9e23d39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "100fa734-86cd-4861-8f91-f9db53fbc52f",
        "cursor": {
          "ref": "72d6886e-2558-4fb8-87f0-d7792119fa61",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "e4cca0b2-995a-48c0-b336-dc8d28187a70"
        },
        "item": {
          "id": "100fa734-86cd-4861-8f91-f9db53fbc52f",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "6b5a8208-b71c-47a4-bc16-a562f193c72e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88ecdda8-f36c-4290-bae7-1d52d2c7020b",
        "cursor": {
          "ref": "f6fde9da-4544-4745-9ee8-6749843eb3a5",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "bd0d5276-27bd-4499-8d3f-655484d0ccad"
        },
        "item": {
          "id": "88ecdda8-f36c-4290-bae7-1d52d2c7020b",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "f95e06e2-0300-4843-8cae-28a8a3dcf504",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcc4b49c-23a0-4b42-90ff-6d2394c4ec4a",
        "cursor": {
          "ref": "ef56a2ec-60c9-445d-85e0-c08f681221d9",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "011680bb-e133-480f-8e7a-d16af4dea0ee"
        },
        "item": {
          "id": "dcc4b49c-23a0-4b42-90ff-6d2394c4ec4a",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "60b9e04e-f9b6-4c33-8204-32a24432f66e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd939b3e-899c-4b1e-bac7-0562f96668e7",
        "cursor": {
          "ref": "fa20b7b1-5e17-4719-9d34-fcd492ce9cb6",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "b4332f6d-c2f9-4058-acc2-a6e08b6840ff"
        },
        "item": {
          "id": "dd939b3e-899c-4b1e-bac7-0562f96668e7",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "d8fecbec-5cfc-417b-a9b0-fa326fbc9c1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a36d0ed2-b1c7-438a-8f17-4eeea5644354",
        "cursor": {
          "ref": "fd6d932f-8620-47dd-9a10-f360cf76bab3",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "a1f0546e-df21-43d0-9f4d-cef4c6a6b380"
        },
        "item": {
          "id": "a36d0ed2-b1c7-438a-8f17-4eeea5644354",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "f97d4b84-f1bd-4a0c-ad11-2ea6c05c5eb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dbeb111-2aa2-44b3-8395-43d21cec9c56",
        "cursor": {
          "ref": "ab6c2980-4cf1-4637-9709-fc655d96ab51",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "0af2cd33-6b02-4e11-a694-28721ce3393f"
        },
        "item": {
          "id": "8dbeb111-2aa2-44b3-8395-43d21cec9c56",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "9556f6de-3f8e-4c8a-8565-429d6c6ebf9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f7d05ac-e4dd-4d68-ab1f-b4919c35352e",
        "cursor": {
          "ref": "23282ad7-d7fb-4dcf-825c-d92b15ee7465",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "79c3fda3-ee38-44c5-9184-5edcc4c14ab5"
        },
        "item": {
          "id": "9f7d05ac-e4dd-4d68-ab1f-b4919c35352e",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "974b28df-c44e-4dfb-b919-e50f09468e0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91ace760-3471-49fb-9be2-b0c5eb5d0a15",
        "cursor": {
          "ref": "fe2ef0b4-3da7-43f5-a33f-b40084dea69c",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "6df823a8-c7ff-4b0e-a059-6f02019125cd"
        },
        "item": {
          "id": "91ace760-3471-49fb-9be2-b0c5eb5d0a15",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "cf054f56-1497-4da5-bad6-7821786e6c84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61693cd2-7af9-418f-828a-972e3645df7d",
        "cursor": {
          "ref": "e48d6245-0ceb-496a-8cac-99a5e57b34f4",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "48152958-3156-4cb5-87ea-1f3d52001f97"
        },
        "item": {
          "id": "61693cd2-7af9-418f-828a-972e3645df7d",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "6000bd28-4a6b-41a6-88c7-93ed5caea779",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3413cbd0-5ba1-4351-862d-dd02182bad18",
        "cursor": {
          "ref": "7cb065c7-3914-4739-b1c8-428f572c9e0c",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "80f61816-42f4-47e5-aa6d-70c63e7209e2"
        },
        "item": {
          "id": "3413cbd0-5ba1-4351-862d-dd02182bad18",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "dc55dd3f-458d-4c10-bde3-487bec322ec3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34efd6d3-2091-48dc-88c7-c654ded5fb83",
        "cursor": {
          "ref": "d33f3984-05bf-4a82-b681-86dd0b7fc63c",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "70bf4e4b-e148-4202-89e7-edd8268ef6ac"
        },
        "item": {
          "id": "34efd6d3-2091-48dc-88c7-c654ded5fb83",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "5e195c5c-5cde-4742-974e-fa5e33ab730e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0c7f764-e1ba-4fa7-a059-540003b0998e",
        "cursor": {
          "ref": "dc6e8a6e-7ca4-4390-a5a0-72067ac4674b",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "09b9dae8-fa70-40a0-9c10-fdb8e6be1097"
        },
        "item": {
          "id": "b0c7f764-e1ba-4fa7-a059-540003b0998e",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "6fc342dd-a951-4b38-9b52-66c23e4db142",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecc7862c-83ff-41c6-a58c-f15339007228",
        "cursor": {
          "ref": "c4b714f8-b202-4e9a-a38c-cb28f4565a5e",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "f4dc6f10-d273-4ede-881c-52dc356c0173"
        },
        "item": {
          "id": "ecc7862c-83ff-41c6-a58c-f15339007228",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "7f01b924-c490-4a88-8a31-367ad324f3e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc1e4daf-341f-42e2-b00f-e3e9c03a79af",
        "cursor": {
          "ref": "813e18eb-8bb6-4a43-98c3-ccdadbf1c7e5",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "23803da5-ce1b-4c9e-8b68-c835680539a5"
        },
        "item": {
          "id": "bc1e4daf-341f-42e2-b00f-e3e9c03a79af",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "2e01f5eb-9393-4d19-910c-65eb912f4672",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9462c284-ac91-4b25-8687-9bfdb82ef7bd",
        "cursor": {
          "ref": "325ef66b-1405-4397-a265-d1a80101ac1e",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "665b1951-f6c3-4409-868b-6ec635fafd51"
        },
        "item": {
          "id": "9462c284-ac91-4b25-8687-9bfdb82ef7bd",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "e5138e59-5b47-454d-a583-b551997c14a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "005ecd59-e2a5-4971-84c2-0420e643f965",
        "cursor": {
          "ref": "55ed644d-667d-48e6-bd81-8b55b9681bfc",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "f800a5b7-bf19-4d35-a7f0-63dff35f23b4"
        },
        "item": {
          "id": "005ecd59-e2a5-4971-84c2-0420e643f965",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "9bcf6c59-a47f-475c-8aa5-e590f138ccd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c6b6699-b582-4cde-9e70-bbd27bc02e9a",
        "cursor": {
          "ref": "16b44e9c-ff56-4a91-b3ef-a7fff40b4070",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "8f775c08-7406-41e8-8beb-b4311eae7030"
        },
        "item": {
          "id": "2c6b6699-b582-4cde-9e70-bbd27bc02e9a",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "193f2c2f-028f-4738-bfb3-b104fe0760b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4ab722e-e548-479e-906d-7c17c3544a27",
        "cursor": {
          "ref": "44baa195-7035-458c-96cd-e2711b9d1b9b",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "f45beaec-ec4c-4829-923a-8fad43eb722a"
        },
        "item": {
          "id": "a4ab722e-e548-479e-906d-7c17c3544a27",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "881468fd-eeff-438b-879d-8f6bff6501b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb14d0db-181f-42e5-a27e-3adb94f91230",
        "cursor": {
          "ref": "634b91dd-418e-4e74-8b27-fa6ca7aa5b2e",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "4ce00cd2-42c0-4882-843f-7d224ff8b1ea"
        },
        "item": {
          "id": "cb14d0db-181f-42e5-a27e-3adb94f91230",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "00fbf862-628a-492c-acc2-056e90214b15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17b5d6d7-af3d-49fb-9568-32353c204afc",
        "cursor": {
          "ref": "7b700c9a-a92d-4f81-a4f4-26f76f4eea50",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "34ca3d52-6ec0-4538-8a2a-f51c7d23ac9c"
        },
        "item": {
          "id": "17b5d6d7-af3d-49fb-9568-32353c204afc",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "7d118d39-2da7-4b16-b25a-054c988e5a1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bab083cd-12ca-42bc-9691-ef4a51ab4165",
        "cursor": {
          "ref": "463608f9-110e-4f22-9eaa-9523a96fab5f",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "8883c945-200c-4240-b54a-657470449474"
        },
        "item": {
          "id": "bab083cd-12ca-42bc-9691-ef4a51ab4165",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "7f632cb1-877b-4cc7-a3c7-dc6ccd4f9583",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "383c0f65-15c4-4b20-ab51-7dc7f9286ba2",
        "cursor": {
          "ref": "df625880-ba8e-414e-a4f3-9d0b468cab8f",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "e7878bc9-60b1-4fc7-bc37-7b472dbf76ec"
        },
        "item": {
          "id": "383c0f65-15c4-4b20-ab51-7dc7f9286ba2",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "9f411b35-4bca-4dfc-920d-f47fac32b032",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ff1036b-05eb-49f2-ae46-6543453b149b",
        "cursor": {
          "ref": "99ca6af0-eeb4-4351-9b1c-cf766fc02719",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "9e48befb-a873-4fe9-9ff3-ba4cb8dc85e6"
        },
        "item": {
          "id": "8ff1036b-05eb-49f2-ae46-6543453b149b",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "0b8bc043-f4d1-4d8b-932c-40517c6081ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97b8bade-816f-4fea-8b03-954a84e6a641",
        "cursor": {
          "ref": "72ff1e76-5a8d-4852-9e2b-8af791821df1",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "4722d18f-d72d-47bb-8c57-6d9d08758fe0"
        },
        "item": {
          "id": "97b8bade-816f-4fea-8b03-954a84e6a641",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "ae2c7134-54bd-4e68-ab33-6130af8abdd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "459a6c68-9fd3-408e-8a06-d80cbd067e63",
        "cursor": {
          "ref": "8973d372-7a98-409e-a47c-4b75f4efb6a9",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "92f1a683-dbb9-4300-b840-d24d091f798e"
        },
        "item": {
          "id": "459a6c68-9fd3-408e-8a06-d80cbd067e63",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "8dab7b7d-c071-44a0-ad64-37844c03c124",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2926bcfb-49e0-4e86-a0de-5b779570cee5",
        "cursor": {
          "ref": "95f60a93-fd07-43cc-bb20-060116db437f",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "70d3fa27-2939-4437-86d5-53abbccfb708"
        },
        "item": {
          "id": "2926bcfb-49e0-4e86-a0de-5b779570cee5",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "9ce71272-2dd2-41e5-9e61-d99d2de1bb6f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "824cdd84-4fde-4fe6-bd26-3ba8ad615c9b",
        "cursor": {
          "ref": "c664af93-512a-4f63-bd63-fb294d62118c",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "d38c8cc4-b993-46f0-a9d5-89c9c3f425cb"
        },
        "item": {
          "id": "824cdd84-4fde-4fe6-bd26-3ba8ad615c9b",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "8ef6746c-ec52-453f-947b-e3257aa952d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "9eaae2da-93c7-4344-b2b4-fd8533378f95",
        "cursor": {
          "ref": "e69779c3-8796-4f98-ba6a-7f209943e1eb",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "631ccdc1-bc9a-4b32-9ebd-eecad83fb395"
        },
        "item": {
          "id": "9eaae2da-93c7-4344-b2b4-fd8533378f95",
          "name": "credentials_issue"
        },
        "response": {
          "id": "522d290f-4dd2-4493-b68d-74b1a6d89fce",
          "status": "Created",
          "code": 201,
          "responseTime": 259,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "202a1421-051b-411e-878b-612c8cec704b",
        "cursor": {
          "ref": "67d37046-af42-4e72-bf7f-54e47bc12be8",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "c89d91ff-c90a-4b81-a0c7-dae8a710d3e4"
        },
        "item": {
          "id": "202a1421-051b-411e-878b-612c8cec704b",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "0a1b2f96-16ea-4e48-8ef1-9a3359c53acf",
          "status": "Created",
          "code": 201,
          "responseTime": 248,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d35497fb-d3cb-45e5-9046-2105501de83f",
        "cursor": {
          "ref": "7a492def-7211-49c4-bb50-d97df2b3eb6b",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "b98c1136-a80a-4628-96be-f5f11449c887"
        },
        "item": {
          "id": "d35497fb-d3cb-45e5-9046-2105501de83f",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "8af97583-ebca-407e-a028-28c86b26cdcc",
          "status": "Created",
          "code": 201,
          "responseTime": 300,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "2eb6da5d-f9a9-4dcd-9ab7-6ee708ea3460",
        "cursor": {
          "ref": "1ea649dd-3da1-4a6c-a05d-b9cbd1c968bd",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "9b3da428-2a85-4cd5-bbb3-acd4fc88bd2b"
        },
        "item": {
          "id": "2eb6da5d-f9a9-4dcd-9ab7-6ee708ea3460",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "ed40d51b-b69c-4217-8016-79283a54f3e6",
          "status": "Created",
          "code": 201,
          "responseTime": 241,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff7bedc5-52f0-45ca-9bf7-90d1ee29f873",
        "cursor": {
          "ref": "c7818e50-e370-4dab-a1af-c3a153ebd59e",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "d97b0ab0-d204-4d86-b953-12c21d133536"
        },
        "item": {
          "id": "ff7bedc5-52f0-45ca-9bf7-90d1ee29f873",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "aa43db45-f189-4fc4-a7a4-2b22e49ffbe5",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-05-10T00:36:23.953Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-05-10T00:36:23.953Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "b30a33c5-3af4-4e21-9dce-5fdd123fb942",
        "cursor": {
          "ref": "8402bdf5-133b-4d0a-ad46-d1c1f6849988",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "c8dd6d1d-6e93-4339-a600-c86df40bc90c"
        },
        "item": {
          "id": "b30a33c5-3af4-4e21-9dce-5fdd123fb942",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "cb381efd-544f-4275-a9b1-f6b3c2ac590b",
          "status": "Created",
          "code": 201,
          "responseTime": 269,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f5d2b0a-0c1f-4ba5-820f-d958c915062a",
        "cursor": {
          "ref": "2b7a1cf6-211c-42da-b764-4c9ea8c7f717",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "27aef87f-8668-4881-ab0c-6aa60b3d80c1"
        },
        "item": {
          "id": "7f5d2b0a-0c1f-4ba5-820f-d958c915062a",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "f0e8ee1d-b97b-4a7d-8110-663524fd1b6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e49d6cf4-dd4c-4b6a-bd7a-63c6f37c5aeb",
        "cursor": {
          "ref": "d8e7b463-2284-447b-b41a-7c0cdbff45a1",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "12d48e50-3d12-4115-ad16-9fc41f1f465e"
        },
        "item": {
          "id": "e49d6cf4-dd4c-4b6a-bd7a-63c6f37c5aeb",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "debc5e34-9384-4164-a0f6-27d797062f1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba96b1b9-d35f-4c61-a761-74a0ac1e9f5b",
        "cursor": {
          "ref": "66805ad4-fb6f-45ac-919e-a1cfd04890ca",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "d4f06d96-64ec-4ec2-8342-737c39512f77"
        },
        "item": {
          "id": "ba96b1b9-d35f-4c61-a761-74a0ac1e9f5b",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "1919146a-df5d-46f8-b72f-c4c435e5b1ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "637eafb4-4f28-47ad-a653-e5c7347b647f",
        "cursor": {
          "ref": "8cd82705-b2d0-43f5-acdc-2fd58480e73a",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "27e8c9bf-9cf9-44ea-8aed-0248d0bf0df4"
        },
        "item": {
          "id": "637eafb4-4f28-47ad-a653-e5c7347b647f",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "d2c85ae5-9e21-4f20-8cc6-5e0497d49fec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1adac3c0-7c13-4e64-9631-9f47410bc909",
        "cursor": {
          "ref": "d9e6b9da-92c0-400e-83ab-fd179abad829",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "2af01de4-9d47-47dd-bd2a-7b01eec8c169"
        },
        "item": {
          "id": "1adac3c0-7c13-4e64-9631-9f47410bc909",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "18e54344-0eb8-44a3-9bab-6ed1f883f5a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bffa6729-9d07-472d-8156-c50d0e3d41bc",
        "cursor": {
          "ref": "3555e1a8-0e97-4824-b731-e941b919051e",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "b68609d7-e3b5-4069-abec-d06646b4864a"
        },
        "item": {
          "id": "bffa6729-9d07-472d-8156-c50d0e3d41bc",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "45aef92a-bb65-4775-b0f3-1831f681e310",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aae1751-0716-46c4-a838-fe9306fee1cd",
        "cursor": {
          "ref": "6375cdc8-6259-45b5-9f3e-10ebc6d8531c",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "6d18dfea-5bd3-4599-a988-b8b70390ae67"
        },
        "item": {
          "id": "0aae1751-0716-46c4-a838-fe9306fee1cd",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "6b362835-50ea-4d2c-9063-ef209dd6c903",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb5177f1-ca82-4cf7-abad-430eb6548c61",
        "cursor": {
          "ref": "e68f438e-1215-4530-9b12-6cd371f4ada5",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "9a99e565-159e-4e08-95fb-0a4cfaeb4d30"
        },
        "item": {
          "id": "eb5177f1-ca82-4cf7-abad-430eb6548c61",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "c6c336a8-9104-41eb-ae21-a3c14ef54464",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdf56ce7-fbb9-4310-a9b7-8f8b0c447064",
        "cursor": {
          "ref": "c7762f79-1675-42a4-a3d2-2179829bc8f7",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "287487d8-dfcd-43c4-bf05-a5d5f9b635a5"
        },
        "item": {
          "id": "cdf56ce7-fbb9-4310-a9b7-8f8b0c447064",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "99395f2a-08a1-4e63-a5a7-886b1636233d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c262e989-aa4b-41b5-a543-59cc3719959a",
        "cursor": {
          "ref": "b3bfa408-651c-4b22-b1cb-b0ae86628dde",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "1f0065ad-8c78-4d06-a50b-f7b883104ec2"
        },
        "item": {
          "id": "c262e989-aa4b-41b5-a543-59cc3719959a",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "92fce93d-eb84-4ccd-8cae-52b2a15f7799",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efc51d83-ff96-4003-8c0f-a57fadfa417a",
        "cursor": {
          "ref": "6e233f05-765c-49e1-9857-c33f7f06cc9c",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "8079dcb0-499c-40a4-bbcc-bbfe13ea3cd4"
        },
        "item": {
          "id": "efc51d83-ff96-4003-8c0f-a57fadfa417a",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "b10ad5df-6017-46ea-8fcc-b001429fde3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c47597c7-bf6e-4cc8-a248-d28f0b7c24e4",
        "cursor": {
          "ref": "b3dce54b-e2fa-46d7-86e6-5e538cad6d39",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "0a4af0cc-8107-4a19-b60c-8c85e731554c"
        },
        "item": {
          "id": "c47597c7-bf6e-4cc8-a248-d28f0b7c24e4",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "252ab947-6a6d-4f57-a952-c1cd17176519",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83bc6c5e-42f4-4967-8080-1f33d6637426",
        "cursor": {
          "ref": "728bf9ee-cab9-4cb6-a9b6-72b70be90e17",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "76ae3615-63f6-400c-aae8-2e1c310fd830"
        },
        "item": {
          "id": "83bc6c5e-42f4-4967-8080-1f33d6637426",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "2d8d1089-d7dc-4346-8b94-dd84edc47c0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a91419f-7f17-4ec3-97c9-f97b24e2e0df",
        "cursor": {
          "ref": "d925df89-a036-4056-9934-4cf3f635fad9",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "6c3809b4-19ec-45b8-a031-75a78ff22125"
        },
        "item": {
          "id": "8a91419f-7f17-4ec3-97c9-f97b24e2e0df",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "61558c92-93a6-4ca1-accb-eace5443016b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 42,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "c8d75d29-08c7-47da-a0c3-2c71f6574de7",
        "cursor": {
          "ref": "7c9ac353-05b9-4cd2-b07b-24627577315a",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "56a6e7f4-105a-4082-954c-cfeef8d4459b"
        },
        "item": {
          "id": "c8d75d29-08c7-47da-a0c3-2c71f6574de7",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "52875550-46c4-410d-aa16-7338e1576704",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f11ba514-596e-489b-afea-3827b2fc19b9",
        "cursor": {
          "ref": "5df9876d-0e85-465f-b3c0-1a383a5e307d",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "de922fa2-e9e8-4ab9-85ea-957cb677af5e"
        },
        "item": {
          "id": "f11ba514-596e-489b-afea-3827b2fc19b9",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "dee20194-508e-4a0a-9e44-54e9cc8deec1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85d4a910-1f1e-4011-91c6-9ae93ff84f14",
        "cursor": {
          "ref": "14a80873-9198-4be2-839b-b1ca676a49ed",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "4f8f5903-28e5-4671-bd40-62b165e744f2"
        },
        "item": {
          "id": "85d4a910-1f1e-4011-91c6-9ae93ff84f14",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "0becef79-8f98-44ff-b07f-09df5f3d1308",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d8d74da-7942-4721-912e-e786b5441727",
        "cursor": {
          "ref": "d03214ab-69dc-4982-900d-b7f0c04b1ba2",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "6c5375b8-151f-4212-b301-d0dae7849953"
        },
        "item": {
          "id": "0d8d74da-7942-4721-912e-e786b5441727",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "c1c18cee-3ce0-4d44-acd4-2aa119cb8773",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c8bbb6e-25a6-4c82-8d5e-3d82f2310129",
        "cursor": {
          "ref": "329313ca-1ed0-4d14-8cee-09504597ea49",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "99b2192e-ffd1-4b26-a8c1-3d31fc74ea5f"
        },
        "item": {
          "id": "7c8bbb6e-25a6-4c82-8d5e-3d82f2310129",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "b91eaa7f-b448-4dbc-adce-dea570422528",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb090e2d-8530-40e2-b457-309d5cb2e55a",
        "cursor": {
          "ref": "1d72ebc0-9432-4ab7-9504-dc484dec3447",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "d16052db-8780-4e61-8a7b-d0fcfc56a465"
        },
        "item": {
          "id": "bb090e2d-8530-40e2-b457-309d5cb2e55a",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "4557bb16-b4ab-4ebc-aa77-7bd891293a7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8816b653-f953-4224-856f-88c98e9cc1a8",
        "cursor": {
          "ref": "442b0842-be56-4e0b-a592-3ca625b497df",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "cdf0cb18-d523-486b-92bf-e16d8d059954"
        },
        "item": {
          "id": "8816b653-f953-4224-856f-88c98e9cc1a8",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "e986d153-67ba-4f0b-ac01-4da5e42f5c9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15cba4de-3d84-4f2a-98f1-394bb21e77b8",
        "cursor": {
          "ref": "5f73be97-c937-40b4-a4d6-956ebfe1a0f5",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "868a5a5d-35a4-4329-9c54-7635b24e5070"
        },
        "item": {
          "id": "15cba4de-3d84-4f2a-98f1-394bb21e77b8",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "522e6384-da04-4f18-8210-f5678964af0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa2625fa-0a4d-4fe5-aede-99f8d2a8cf82",
        "cursor": {
          "ref": "d274224f-6667-47ea-b325-4a69a07f98fd",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "70677e4f-93f5-4c83-866a-51ce20da582e"
        },
        "item": {
          "id": "aa2625fa-0a4d-4fe5-aede-99f8d2a8cf82",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "67491ce1-aeab-4609-a4ca-b8d64a31ecd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fac39d47-8f7a-4cf4-8b9d-96906c05e8d3",
        "cursor": {
          "ref": "227fca6d-324a-4887-a451-d030e5a632bc",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "16cf8798-3bdb-46dc-a7b8-49aca1c1145a"
        },
        "item": {
          "id": "fac39d47-8f7a-4cf4-8b9d-96906c05e8d3",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "331ea101-4fe8-4076-96cd-4186f519f606",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a78d43ff-7225-4cec-b317-809be3d2da7d",
        "cursor": {
          "ref": "c6daf2f2-caf0-4e9f-88e7-fedde1aed308",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "b37e51fa-b370-4630-8cd6-2740a9898939"
        },
        "item": {
          "id": "a78d43ff-7225-4cec-b317-809be3d2da7d",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "e392476a-750b-475d-ad75-b18ddf936dbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c26616c4-61a9-49f7-8fb2-27caaa83be51",
        "cursor": {
          "ref": "880b53d4-6209-4726-8b57-44f7826e5710",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "77eac13c-3f4d-4409-8a02-99a9a2fdcf31"
        },
        "item": {
          "id": "c26616c4-61a9-49f7-8fb2-27caaa83be51",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "560bd10b-b7c8-4ce1-9a6c-8589c5c8a8ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "543b4666-6203-4367-8605-1513e7f7a1d7",
        "cursor": {
          "ref": "0e91fe82-bb61-4e47-b8f6-2bb2f1f1a812",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "e1aa720d-6c5d-4372-8014-95537aaee16a"
        },
        "item": {
          "id": "543b4666-6203-4367-8605-1513e7f7a1d7",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "3081700c-7516-4e5b-ac80-89ba95570307",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8798c7a2-5f73-4305-ae24-95bf59ba6fe1",
        "cursor": {
          "ref": "d256ce90-cd4c-4ece-946a-2d00fa0f8780",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "3d1a0add-74b0-48ce-9999-2d9148db151e"
        },
        "item": {
          "id": "8798c7a2-5f73-4305-ae24-95bf59ba6fe1",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "b9bf5440-73bb-4112-ab3a-89a95f4873a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6eac2a6-e2b1-4c98-b8a7-f69fe0b27e13",
        "cursor": {
          "ref": "6c59c1d6-0b00-424a-b67f-3344441d5606",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "17ee8118-2a3b-460e-9d96-e23f767c099b"
        },
        "item": {
          "id": "e6eac2a6-e2b1-4c98-b8a7-f69fe0b27e13",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "f3a4dc08-1057-4446-a835-70612edc07ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61bbaf8d-3480-4034-ab19-edf3afd2074b",
        "cursor": {
          "ref": "7ae5bd40-7bb5-4093-b515-1b139364672d",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "42c79826-05e7-440b-b70c-31daa96bb6bd"
        },
        "item": {
          "id": "61bbaf8d-3480-4034-ab19-edf3afd2074b",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "6b7f6240-a20a-4280-aac1-74484da319a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eef84ba0-c516-4468-8df2-0b9a5d54c311",
        "cursor": {
          "ref": "5a5cda8b-97bc-4e8c-b880-017383dfc185",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "be6c9619-f33c-422a-810f-2e92ae58e500"
        },
        "item": {
          "id": "eef84ba0-c516-4468-8df2-0b9a5d54c311",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "84d829df-741e-40a5-8893-bcbdaa2b21b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2833ecd6-666d-42b3-a1df-b7f7b988f7da",
        "cursor": {
          "ref": "21b622c3-dc79-42d7-9240-f89beab3cc93",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "d0b52aec-afb7-4596-afee-42e17c81fa69"
        },
        "item": {
          "id": "2833ecd6-666d-42b3-a1df-b7f7b988f7da",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "29bc8164-277e-423f-b711-3f2aa50b2222",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9500d256-2ca5-4eff-ac76-d5bc0b7143b1",
        "cursor": {
          "ref": "43104748-44a2-4890-ace2-5b6a7a916a07",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "c4b76933-ef0f-4350-9055-a7f23c2c8d26"
        },
        "item": {
          "id": "9500d256-2ca5-4eff-ac76-d5bc0b7143b1",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "4dad97fb-cf38-43f6-abd1-08aa2d02cbfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2a98b1b-1b59-43a3-b498-a9a3cd31db32",
        "cursor": {
          "ref": "29d2e84a-3a42-4fce-ace9-3dfa2a30639e",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "6c027142-ab34-42e1-86ad-60bc5f7f2b61"
        },
        "item": {
          "id": "d2a98b1b-1b59-43a3-b498-a9a3cd31db32",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "36c4093e-b28b-4d9d-8836-79179cc2052c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a52150d3-f112-45ba-9cba-44924b242cc9",
        "cursor": {
          "ref": "07279fd4-6575-4a5c-94cb-dbeb0dbeb362",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "e5445ee6-a121-4af1-bb84-a7e29c2f1641"
        },
        "item": {
          "id": "a52150d3-f112-45ba-9cba-44924b242cc9",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "7240119d-f647-4e9a-a36a-1387e1912576",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b1b6756-13e7-4cc6-b521-23841e2efc9c",
        "cursor": {
          "ref": "786f0141-0bab-4ca5-a9b9-6adc233dacaa",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "adad625f-2a0c-435b-b097-a9e1a8051dc6"
        },
        "item": {
          "id": "2b1b6756-13e7-4cc6-b521-23841e2efc9c",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "70faa2dd-d013-4001-be3d-f5de50eede2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4150fe53-b328-42e7-94ba-0ab9fc8fcd3f",
        "cursor": {
          "ref": "2d4b73a3-5285-476d-8684-9eaa31e3729b",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "584f8f55-d6f5-4754-a10d-3002596dcdeb"
        },
        "item": {
          "id": "4150fe53-b328-42e7-94ba-0ab9fc8fcd3f",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "0dae86c0-e113-4222-8838-51bea382f05e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dd2b65d-b263-4cbe-9c5d-8c34b2d9380c",
        "cursor": {
          "ref": "c4317a76-82a4-4a28-bff0-3acc58a9308d",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "0defc6be-4cdb-46c2-b58b-05257eebccff"
        },
        "item": {
          "id": "3dd2b65d-b263-4cbe-9c5d-8c34b2d9380c",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "dde705e9-3a93-451c-8c66-ad9e71c0bbf6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e18245be-6053-4a5a-8cca-bd9bbc73a20b",
        "cursor": {
          "ref": "866fee37-50a3-4bff-aa36-253ab4fb3262",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "fe1097fa-7367-403f-a0d5-97cb5163243e"
        },
        "item": {
          "id": "e18245be-6053-4a5a-8cca-bd9bbc73a20b",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "4a21bb6b-aeb9-4f64-b71b-8ce2b13dc090",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b824d5e-dba7-4060-8925-319051e36b2b",
        "cursor": {
          "ref": "ea4ab017-0c92-4208-9ed6-4e87429e01e9",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "f6c9caca-46d4-4bcc-909c-3102941dd4c0"
        },
        "item": {
          "id": "3b824d5e-dba7-4060-8925-319051e36b2b",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "1bb0b380-59c4-44b0-867f-94425e3e610c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54930183-cd94-4be7-a5d7-04f5494b1cce",
        "cursor": {
          "ref": "2d4a6d95-fffd-46b6-8b31-990e50fdaac8",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "ed9918e6-2b76-4ee2-87d5-5a7dc250b7d6"
        },
        "item": {
          "id": "54930183-cd94-4be7-a5d7-04f5494b1cce",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "496fb7e2-84d4-4208-8e88-95a339e709e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8697266f-776d-4570-b856-f35fc71d39c3",
        "cursor": {
          "ref": "d6d4cb35-9fe3-477d-840a-cfebc4de2c57",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "b1581a8e-5360-4837-9bb5-3ba9cf1b7eb8"
        },
        "item": {
          "id": "8697266f-776d-4570-b856-f35fc71d39c3",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "21e9ee3f-75ef-47a4-af77-7526357ab07b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b173ca4a-e603-4e52-8f69-14f7f192640f",
        "cursor": {
          "ref": "0f193283-95f4-4633-a41a-ad285d8a5cbb",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "0ff25b93-5086-44b1-80fc-c2445958135c"
        },
        "item": {
          "id": "b173ca4a-e603-4e52-8f69-14f7f192640f",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "67ba0642-038a-4ffc-95ba-6459f3c6d261",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2af0296-d31d-4928-97da-386ce1ed3832",
        "cursor": {
          "ref": "00acda47-3b31-4dcc-9d06-e3cc8e4dac7c",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "b6a0061c-566f-48bc-959a-9a0c92adbd99"
        },
        "item": {
          "id": "d2af0296-d31d-4928-97da-386ce1ed3832",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "c8e3a2a6-fce0-4ff8-bf82-65a23f75d50b",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "c9839a19-258a-41fa-ab2f-3bf1100a2115",
        "cursor": {
          "ref": "30bf40bf-ac8c-42a4-9f02-50c11b89d167",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "4e93ad25-45e8-4fe6-95ba-dac5a2dc6bb2"
        },
        "item": {
          "id": "c9839a19-258a-41fa-ab2f-3bf1100a2115",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "e90e1921-9076-473d-8b46-2b87e3728394",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c8fb256-fb87-4382-b935-d3606906e6bb",
        "cursor": {
          "ref": "9cadbd5c-565b-47a3-89d5-c4449a58f728",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "696f217c-72b6-42cc-aec4-90bd0e5ab49b"
        },
        "item": {
          "id": "0c8fb256-fb87-4382-b935-d3606906e6bb",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "ca3a5ef5-b468-4bc8-9d2b-e88dcdd2e4d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c374bffa-d88e-463d-be5c-171f860c241f",
        "cursor": {
          "ref": "f5ea6b62-8878-4d40-a198-bc575bab547b",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "c5e2ef16-5eaf-4fcc-ab3c-bafdbb4b337c"
        },
        "item": {
          "id": "c374bffa-d88e-463d-be5c-171f860c241f",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "871b5b3b-82d9-437b-a6c7-3a1188ca51e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac0b5859-83a6-4f52-811d-49e2436986f0",
        "cursor": {
          "ref": "862d09de-eecf-41cc-9c24-2e3b185de90d",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "cdf96544-affd-4b4c-bddd-43c1a46ee0da"
        },
        "item": {
          "id": "ac0b5859-83a6-4f52-811d-49e2436986f0",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "bccd5938-f4f6-470b-bf32-3b724cc1b0d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a4c6fef-1e49-44a0-b3b2-0ca42aee429e",
        "cursor": {
          "ref": "1be66e35-d5f2-4fdc-91bf-f1761d9f9bf3",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "4ec0f09b-e817-420d-87ae-1da5d8ae80eb"
        },
        "item": {
          "id": "2a4c6fef-1e49-44a0-b3b2-0ca42aee429e",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "5801dcd8-3547-4e6f-8aa4-ab06cf67f1b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03195366-a52a-44be-b2c9-51adf37b273e",
        "cursor": {
          "ref": "8efe767b-31d2-4d45-ba1d-48464a033994",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "41e9f52a-cbb3-4c45-805e-8f89ddd6d067"
        },
        "item": {
          "id": "03195366-a52a-44be-b2c9-51adf37b273e",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "e9e3b3c6-a523-4ecd-8565-875f19e6ad95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdb03ea5-27d3-41bb-a367-45363ff3a73a",
        "cursor": {
          "ref": "6774f085-d602-41c1-97b8-c77aa63d9c4e",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "e3aeab6c-7256-42a3-9c7c-d57d63d68b67"
        },
        "item": {
          "id": "bdb03ea5-27d3-41bb-a367-45363ff3a73a",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "7e491d76-fea7-44d7-9ec4-e2c445e4d873",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "410153f6-3ee3-4157-99f2-72618001913e",
        "cursor": {
          "ref": "dbe9222b-031c-4078-a0e2-1e978a4540f2",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "378ac54d-9c5e-4b17-81a2-c136b0d3954f"
        },
        "item": {
          "id": "410153f6-3ee3-4157-99f2-72618001913e",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "663299df-9891-4dd0-807c-e76ff8ee7220",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccff7a3e-6729-49ee-88b2-45bbeec0f6b9",
        "cursor": {
          "ref": "5f1d31e4-c349-4ba4-a0bc-6a1b13037833",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "40d562b4-0850-457d-8eac-9bd7f5028526"
        },
        "item": {
          "id": "ccff7a3e-6729-49ee-88b2-45bbeec0f6b9",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "1d3fcacb-a452-4049-8950-845d01d5463d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d19d9e8-db66-46a2-816e-dcc2685ef33a",
        "cursor": {
          "ref": "379030bc-95e5-4517-ab40-45b0a0703ca8",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "aaa9504a-f000-4baa-8732-e857ffc47e1f"
        },
        "item": {
          "id": "7d19d9e8-db66-46a2-816e-dcc2685ef33a",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "276f0b8b-4287-4669-a940-0bea0ee526f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "161edeac-3338-41e7-a164-233ae4b3b2a7",
        "cursor": {
          "ref": "27426254-31a3-4d9c-9ae8-a990c2a8869c",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "28b0b545-1113-4ff6-9ef1-29a6c09996ce"
        },
        "item": {
          "id": "161edeac-3338-41e7-a164-233ae4b3b2a7",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "89c8666b-63ed-49c6-8a0e-bee0515abcdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4727a9e-f7ca-4d44-8844-3e110ed6c34b",
        "cursor": {
          "ref": "a5fbb941-96f3-4639-828f-712b3136338c",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "ea696b42-2008-426d-9091-b8a0d227bc43"
        },
        "item": {
          "id": "d4727a9e-f7ca-4d44-8844-3e110ed6c34b",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "2627f319-1b57-45e4-855a-e7481f282a06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c9c8cac-7892-4205-997a-5c7b1e12296f",
        "cursor": {
          "ref": "676bf69d-06e0-4b1e-8cae-a374c1074489",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "34812197-4933-41fe-a634-5475f114b7fb"
        },
        "item": {
          "id": "4c9c8cac-7892-4205-997a-5c7b1e12296f",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "2a175184-9f2c-4f5c-8508-77ee0b023a83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4483a62f-f118-40a9-89d5-8b981e67bb99",
        "cursor": {
          "ref": "31fdd44e-7a13-435d-807e-1560506d0109",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "a8cb9ca0-f367-40db-9e1c-561731cf4e4d"
        },
        "item": {
          "id": "4483a62f-f118-40a9-89d5-8b981e67bb99",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "46e443ea-a4f8-4244-9430-5b53c9534f4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5fc5e70-1552-4fc2-8e60-a7b7052fc7dc",
        "cursor": {
          "ref": "fc1ecb4e-a0e4-4373-8c12-b9cb698193ff",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "308fa74b-1f14-4d15-a689-c28b86a38c6b"
        },
        "item": {
          "id": "f5fc5e70-1552-4fc2-8e60-a7b7052fc7dc",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "71b93112-3755-4e26-9629-7f848781d3a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d92bace-8943-4839-a5c6-0292e260ec30",
        "cursor": {
          "ref": "a38bb636-07f9-4ce2-842b-c1bfa606ceed",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "257063ef-0463-4e62-8997-d10bd49cc98a"
        },
        "item": {
          "id": "2d92bace-8943-4839-a5c6-0292e260ec30",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "3739d132-1aa1-4422-bd18-02a2ec981c9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cee5fbbf-6372-4ecc-bf3a-fd94112e1d25",
        "cursor": {
          "ref": "a6290b6f-2e2a-4453-8be9-a40a220f4cc9",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "03be972f-66bd-4fc1-a8c7-a864da0dd64a"
        },
        "item": {
          "id": "cee5fbbf-6372-4ecc-bf3a-fd94112e1d25",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "5bba78a5-d56e-460f-be2d-72866cf1b4b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e497a63-e0a1-47d6-8b22-43c633fb3cba",
        "cursor": {
          "ref": "9ebb845a-3b9a-4aad-86fd-56a614e21d40",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "e3ce90c5-24a5-4664-bc50-ccd2979d092e"
        },
        "item": {
          "id": "1e497a63-e0a1-47d6-8b22-43c633fb3cba",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "71f113db-29f9-4690-bef5-5a251b89f029",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fb1e735-fc43-43e6-8294-b975c5099084",
        "cursor": {
          "ref": "2cb14db5-9b0d-4dbb-82e8-7669d0a9e1b5",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "c2c571cb-35df-4501-9448-ad58390c9ab9"
        },
        "item": {
          "id": "8fb1e735-fc43-43e6-8294-b975c5099084",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "bd48e528-c213-4095-9827-8c75e1083272",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb901141-fb3f-4af0-bf82-16de773a7260",
        "cursor": {
          "ref": "4abc360e-ab11-48a6-b0be-f2be12aaac1c",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "b27ac095-cbb8-40bd-b6fe-30bcef16c9bf"
        },
        "item": {
          "id": "fb901141-fb3f-4af0-bf82-16de773a7260",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "c70323dc-3d39-4c0f-bb0a-1228ad91b04b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1a24210-52d4-4ffe-b72f-f2ab1e62a886",
        "cursor": {
          "ref": "b8998f08-4869-497a-a40b-70ac83f43415",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "9fc6997c-ae67-4f4b-8d51-45eb627d5dca"
        },
        "item": {
          "id": "c1a24210-52d4-4ffe-b72f-f2ab1e62a886",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "59c63383-dc80-496c-850b-d16766d3edbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "096c5699-d311-423e-bdd0-a9ffae07cd77",
        "cursor": {
          "ref": "07469ae6-d79b-4782-87b0-ed8f19467348",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "6dd3d720-3624-4492-a9d6-abb4b127cf52"
        },
        "item": {
          "id": "096c5699-d311-423e-bdd0-a9ffae07cd77",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "ba8156cc-93a5-406f-8bc6-22821287bc3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6358f9bc-ed3a-468c-9d18-bf310bdd6d41",
        "cursor": {
          "ref": "86a08cc1-48b2-47ec-9b6b-98afd6c196cd",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "e6bd58f0-cee1-4e02-8ba3-d4a1df161602"
        },
        "item": {
          "id": "6358f9bc-ed3a-468c-9d18-bf310bdd6d41",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "bb7e33f9-b108-4db2-9e99-f05310e773fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8598a1dc-7fcd-4a24-ac2d-56e0eaf5f558",
        "cursor": {
          "ref": "bd8ea368-a98c-491b-bdab-20aee845307e",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "24c6ac2c-00ae-49c1-b8b1-ac119508af47"
        },
        "item": {
          "id": "8598a1dc-7fcd-4a24-ac2d-56e0eaf5f558",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "dbeb7c0d-cbde-41c3-94e6-6a158c0c2b29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1325d22-8a43-4871-9c19-e932d3035d72",
        "cursor": {
          "ref": "7a580bf3-b17e-4aa7-bf84-8a45fbd019ce",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "eb873da0-570f-4c8e-935a-2058768cb383"
        },
        "item": {
          "id": "c1325d22-8a43-4871-9c19-e932d3035d72",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "02aff82d-1829-46b2-8e67-01bd85438f6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f418fed-3f30-4516-b550-7da2d842acea",
        "cursor": {
          "ref": "f3d56ca0-717e-445c-b636-31b5607e8af9",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "32124438-7320-4388-b7c4-12596bfd8dc7"
        },
        "item": {
          "id": "7f418fed-3f30-4516-b550-7da2d842acea",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "375c4fd3-ac9a-4091-8c0a-4df15a13222a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "340c5e86-f710-4c7c-955b-e396842d9436",
        "cursor": {
          "ref": "78163af1-58e0-4013-bf6e-ad1e222c868c",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "3308c9ea-685e-477d-a797-5926279b5a62"
        },
        "item": {
          "id": "340c5e86-f710-4c7c-955b-e396842d9436",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "3dc98581-7e27-41d7-8117-22af48feddc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6a7e000-72c9-49a7-9a9e-dfedfbfca43b",
        "cursor": {
          "ref": "adeeeed0-1db2-402e-b4b5-e32ec3f6357c",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "8a6a2c35-0161-4bdf-890a-819e2f23ce84"
        },
        "item": {
          "id": "d6a7e000-72c9-49a7-9a9e-dfedfbfca43b",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "5215966e-1b16-4e99-b3ff-20228768f298",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da39f5a5-19ec-4bbe-9df5-a4453e7d8a39",
        "cursor": {
          "ref": "8eb30e71-4af7-4fa3-a1c9-a9223902552c",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "76a9fa77-19fb-4a28-8d40-53047616c1e4"
        },
        "item": {
          "id": "da39f5a5-19ec-4bbe-9df5-a4453e7d8a39",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "4742144a-24a9-4b5c-b693-6ca57646aa84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fce772e3-c0fc-49a0-85a8-280c7816e8a0",
        "cursor": {
          "ref": "45e2513b-fcde-4eb1-b9f9-4c30a4b8ae1d",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "7f4e7dc7-db94-4423-80a9-23b0128381cd"
        },
        "item": {
          "id": "fce772e3-c0fc-49a0-85a8-280c7816e8a0",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "2a189343-431e-4d6a-8c31-f39817fccd22",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "0e80dd32-b032-496b-9b51-5d83689f48cc",
        "cursor": {
          "ref": "37f641d7-4e77-435c-afc2-424a2b0307af",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "3c1c6e4b-59a6-4678-bf57-8807bb2f6ef3"
        },
        "item": {
          "id": "0e80dd32-b032-496b-9b51-5d83689f48cc",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "d1fee545-8209-4a18-97c9-fd33b9ab9123",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "f496ea84-6dbe-47db-8ecb-7c110b1436c2",
        "cursor": {
          "ref": "3ae1a1f8-abbb-4fe0-a003-4faf8696a3f6",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "aff9d6b3-38f9-4c74-b3c1-f73706a9bc75"
        },
        "item": {
          "id": "f496ea84-6dbe-47db-8ecb-7c110b1436c2",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "1da425e7-971c-4da2-8976-b39443e732da",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "31650fbc-e6b6-42fb-be3a-642e1a4fb327",
        "cursor": {
          "ref": "13389752-90de-46da-b1e6-c65b673d4f5c",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "18246915-e14a-40c4-9417-3219200d8391"
        },
        "item": {
          "id": "31650fbc-e6b6-42fb-be3a-642e1a4fb327",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "c53d31c4-d6de-4f83-9cb0-0e8275f0d516",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dfc96ec-1b95-4058-ac47-21eea4ec5223",
        "cursor": {
          "ref": "758e4060-e9c7-405d-85c9-bcbf7bec80e4",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "8d490eb0-40b7-4a10-bf93-3cd752a0e7e8"
        },
        "item": {
          "id": "1dfc96ec-1b95-4058-ac47-21eea4ec5223",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "c33f9b79-28ae-4c69-a561-16815c3f877c",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "a7d20a0d-7129-430a-b5c2-240c51ff6ea0",
        "cursor": {
          "ref": "f44f6729-6ebd-4c48-a1b2-42d3dd49c6d1",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "2a78c6db-c7b6-48e1-a55e-e0224f41cd37"
        },
        "item": {
          "id": "a7d20a0d-7129-430a-b5c2-240c51ff6ea0",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "6bc501b1-6d40-4b2e-b1ea-f91ffedd0b2f",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "9cedc235-1e4f-4d3f-ac5c-9b0fe594c112",
        "cursor": {
          "ref": "7e7b0baf-8594-4a0c-a1fd-6ebfbe91b75d",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "1ec7d8a4-aff1-4fa3-9039-7b5d4ee9611c"
        },
        "item": {
          "id": "9cedc235-1e4f-4d3f-ac5c-9b0fe594c112",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "4bf79336-21bf-4d2f-a94d-a82ae1878289",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "9dc27108-1df3-4de5-833c-0bb6f7c249f7",
        "cursor": {
          "ref": "06be321f-f87f-4b6e-8831-4956453c96f4",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "9a64d1e5-8128-407e-9de8-84e913534f34"
        },
        "item": {
          "id": "9dc27108-1df3-4de5-833c-0bb6f7c249f7",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "b235f070-5c63-42c3-9715-b2c0ab48fe62",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "4e3f3f93-d7d4-4db5-8e07-654762f9fe64",
        "cursor": {
          "ref": "069a782f-18ce-4685-bd01-394f97bc0cfa",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "6b491ca5-2229-4949-a189-c7af8c2d9e04"
        },
        "item": {
          "id": "4e3f3f93-d7d4-4db5-8e07-654762f9fe64",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "6c3750c3-d695-40c4-aef9-4e1a132d9930",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "0d53d528-8283-4088-953b-63d29b7c2d10",
        "cursor": {
          "ref": "7d01d001-1560-47cb-8878-5dfdb4993f50",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "764100be-35a4-4839-9190-f6d79234c5af"
        },
        "item": {
          "id": "0d53d528-8283-4088-953b-63d29b7c2d10",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "07fbc912-1fce-4b05-a0ab-119a2146e89a",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "569ebb54-cfa1-4e11-8629-e2319b0b965a",
        "cursor": {
          "ref": "98a1fcfa-2cbb-4bbd-a71c-80c232f6fb7a",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "751ff821-731c-4722-a408-0aacb2dca896"
        },
        "item": {
          "id": "569ebb54-cfa1-4e11-8629-e2319b0b965a",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "fe7f8608-a109-4a87-b544-6ec4cc70c6eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdb52931-cbfe-4963-b57d-bd4236cf1cf8",
        "cursor": {
          "ref": "2254cae2-b733-4d57-8c82-937f1127f045",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "8b6e9044-1179-417a-bd52-fbdbd80c8768"
        },
        "item": {
          "id": "bdb52931-cbfe-4963-b57d-bd4236cf1cf8",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "4c6dad47-185e-4d2f-b17a-6b903cdf89f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f21bd2b8-f5ac-4964-a09f-d1e7de995a94",
        "cursor": {
          "ref": "ce2f2208-8c3e-4628-94e0-40ac921c4128",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "3e5080a2-d8fc-4919-8f1d-d6b38aa23053"
        },
        "item": {
          "id": "f21bd2b8-f5ac-4964-a09f-d1e7de995a94",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "0a576320-2432-417f-86d0-46e8ab563d8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1132a552-ae71-456e-89a9-18f0ff9faa99",
        "cursor": {
          "ref": "ae46c46f-42b7-4310-a80a-1ee285c3e8c0",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "e3541bf8-3b00-4c95-8569-57369fed80af"
        },
        "item": {
          "id": "1132a552-ae71-456e-89a9-18f0ff9faa99",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "5beb9233-6aa8-4022-b07d-14e050fcf78b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "705954f5-24d4-4ace-9419-f9db703dd1e3",
        "cursor": {
          "ref": "4d2e0981-d5c7-49b8-9d85-94e542106177",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "2002c213-27f8-4d22-921e-eb6ce6b27ca8"
        },
        "item": {
          "id": "705954f5-24d4-4ace-9419-f9db703dd1e3",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "7ea6b33a-d61a-4320-8d52-f1a39142559f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c53e292-b18d-41c8-8cb5-75757a92e870",
        "cursor": {
          "ref": "3c684b1d-4910-4161-8fa2-940200d33d4b",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "dffcc309-0577-4a2b-b96f-98d0c5927759"
        },
        "item": {
          "id": "7c53e292-b18d-41c8-8cb5-75757a92e870",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "28df6da1-0fb0-47e2-b353-6c390c0f34b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "386a0d1a-6977-47c9-bd59-22818a05740e",
        "cursor": {
          "ref": "4f928437-615f-49ff-9cf3-4d0bd1cdf778",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "5a21bb66-2120-4837-8971-a234d7e37e21"
        },
        "item": {
          "id": "386a0d1a-6977-47c9-bd59-22818a05740e",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "1065c358-43f1-45c6-8139-1d58295072c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64f60553-ea1f-42f8-b497-877f60f30cfe",
        "cursor": {
          "ref": "66cf0c37-72b1-4906-81e8-00f2abd4eafd",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "b39654a8-572b-4a49-a67f-aecb9e1398d9"
        },
        "item": {
          "id": "64f60553-ea1f-42f8-b497-877f60f30cfe",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "4ed9e82d-baff-42b9-ab64-72c881a064d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9150f84-dfa0-4de9-b529-c5642bf18461",
        "cursor": {
          "ref": "f0711667-d7d8-437b-bdf5-06a129f4a063",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "7d791df7-873c-44ea-9eb4-861a5c46bbf8"
        },
        "item": {
          "id": "e9150f84-dfa0-4de9-b529-c5642bf18461",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "f7357eb3-9e9c-46bd-b38f-9f0ff0bb3145",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e6c2437-e088-4503-9537-381b51123ec7",
        "cursor": {
          "ref": "e6ba1e24-cf96-4f03-b5fe-bba6bba6ef87",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "587f2c81-4a92-4f01-a128-b06c0ab4f6df"
        },
        "item": {
          "id": "4e6c2437-e088-4503-9537-381b51123ec7",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "f61fde90-8b83-400b-b5f8-e0845736fd11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b5e1e6c-0b40-427b-86dc-2132a0c0910c",
        "cursor": {
          "ref": "ecb95ce0-b1ac-456f-9524-fb834d4eebcb",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "6663037f-d503-4e43-94f2-ac3a8122e2fc"
        },
        "item": {
          "id": "4b5e1e6c-0b40-427b-86dc-2132a0c0910c",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "c7b8f24a-4aaf-44ef-aaac-fa8a3c488bc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af3d75df-42cb-4e72-a572-6ab4aee3c665",
        "cursor": {
          "ref": "f90cb1d5-9317-4fa0-873b-be2f468a4e9e",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "4fbf2a4c-d89f-4d2e-83b5-b068ea69f926"
        },
        "item": {
          "id": "af3d75df-42cb-4e72-a572-6ab4aee3c665",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "18927e13-3439-40e9-afeb-40ce2955f4eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8506452c-1812-4ba8-beca-23e4514d806e",
        "cursor": {
          "ref": "95ca2d1f-37b8-478c-b1dc-1f81cde09852",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "a7f38747-8b17-420d-b247-38f5c71523f5"
        },
        "item": {
          "id": "8506452c-1812-4ba8-beca-23e4514d806e",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "66a0519e-897f-47ab-8aa9-c7793d4092ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b66ca2b-6d20-44fd-b4d8-b53f6b96764a",
        "cursor": {
          "ref": "1a55b192-9833-4aa3-8631-d3daf91de756",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "e262eb4a-118e-446e-80d7-f39286a22b9c"
        },
        "item": {
          "id": "7b66ca2b-6d20-44fd-b4d8-b53f6b96764a",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "539145d8-8321-4fd2-8ac5-a87448f55bfc",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "da8c8cb2-9ab2-43e1-8c0b-c0d6970daed7",
        "cursor": {
          "ref": "cb5afa9e-1c2c-4d02-9362-3c1fbd836088",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "4f085067-a4c1-4988-b20d-ee6d3748f4ed"
        },
        "item": {
          "id": "da8c8cb2-9ab2-43e1-8c0b-c0d6970daed7",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "efd1d139-897f-49bf-a282-2a7935a56365",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "245cf9fb-bc72-41a3-8ef1-2dc47261118a",
        "cursor": {
          "ref": "3e689758-4308-4ae7-afcc-f1cedebca179",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "ba39fe97-e8f4-46f0-9f59-5f9d2a4cbb00"
        },
        "item": {
          "id": "245cf9fb-bc72-41a3-8ef1-2dc47261118a",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "53ebcd87-e4ca-4662-ab18-bffa85b1c108",
          "status": "OK",
          "code": 200,
          "responseTime": 103,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "749eb835-6047-42ec-8995-328d02ab2334",
        "cursor": {
          "ref": "e765cbcb-c851-4fd6-89dc-62d7374d665b",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "f31049d7-6362-4386-8d18-7fe3d934713d"
        },
        "item": {
          "id": "749eb835-6047-42ec-8995-328d02ab2334",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "57be927f-e069-48ac-b8a4-99632843de8c",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "98c7ae6e-86a0-4a44-a79c-1f5d6e4a32f2",
        "cursor": {
          "ref": "ecf32a9e-dff7-4543-87d7-9b5cbe2a0e98",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "21512f97-f055-4db0-a2af-1229ce1e435e"
        },
        "item": {
          "id": "98c7ae6e-86a0-4a44-a79c-1f5d6e4a32f2",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "3aae965b-d75a-487e-b67c-e9985e98700b",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "a71c9e12-50a2-4f26-974a-1bc7dcdc7487",
        "cursor": {
          "ref": "0df538b1-47ed-41dd-b509-e6a24d6317f3",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "c33a55c7-b3c7-4f16-a9df-5433e25e2097"
        },
        "item": {
          "id": "a71c9e12-50a2-4f26-974a-1bc7dcdc7487",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "2cc03c4c-fa78-4c75-8564-e5d257337ad4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f2af08c-423e-42c8-a0c3-84c11a348eaf",
        "cursor": {
          "ref": "6896cbfd-1b60-4005-8a0c-b3553ba1671d",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "792d3f79-b20d-4152-8912-69d7f4f95ebc"
        },
        "item": {
          "id": "7f2af08c-423e-42c8-a0c3-84c11a348eaf",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "89a37d9d-5f4f-447c-bd8c-1f354798f53a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d620caea-7dd7-498f-97a7-b2f901042404",
        "cursor": {
          "ref": "029dc280-06ea-48c9-bad6-b911f8ebba82",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "ad080a49-fb79-4ef7-b4d0-d6ba8c565d48"
        },
        "item": {
          "id": "d620caea-7dd7-498f-97a7-b2f901042404",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "8836ad7c-c14b-4f95-8ad3-819c2cdf5401",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba556e77-0f25-411b-9b52-76f9df3124f5",
        "cursor": {
          "ref": "c25b8794-71bf-4c3b-81b6-1102b18899be",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "2938241c-92aa-41f8-8418-7de157fcb912"
        },
        "item": {
          "id": "ba556e77-0f25-411b-9b52-76f9df3124f5",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "3ec615c0-3f24-4d1a-8126-6ea8e59ad3e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "193a7129-5847-440d-bedd-0c1c325e5cbe",
        "cursor": {
          "ref": "d0e80a42-56f5-4e83-9606-acd1e861bc54",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "dae2e755-41d8-4b94-984a-7b4ea532240b"
        },
        "item": {
          "id": "193a7129-5847-440d-bedd-0c1c325e5cbe",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "ab60d5b7-dd98-4e2a-90bb-c20718ef9718",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d2e1166-41c7-45fc-8d38-8b36926a85a7",
        "cursor": {
          "ref": "dbca3a8c-2ca7-492a-8765-ea4194eb442d",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "86f905f9-5bef-4eb3-ba56-919aad59ec20"
        },
        "item": {
          "id": "7d2e1166-41c7-45fc-8d38-8b36926a85a7",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "6d65648b-eff7-4e64-9153-7c648ca989f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0955d660-54e9-4a35-a0a9-84583c2f6072",
        "cursor": {
          "ref": "fcd0fb26-f77b-44c8-bc32-2a6e71e377ab",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "b2587327-1881-49a8-bfd4-2e4f11130a1c"
        },
        "item": {
          "id": "0955d660-54e9-4a35-a0a9-84583c2f6072",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "c7f1277b-1788-42bb-9bf6-f6e76eb281c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "808082ad-e6de-4399-8090-7bdf969786dc",
        "cursor": {
          "ref": "1f0de9ed-e97e-462d-84f1-54d10b9d8556",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "cb92d79c-e94b-4117-a819-e31abf56467e"
        },
        "item": {
          "id": "808082ad-e6de-4399-8090-7bdf969786dc",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "c78d9853-5077-4b60-9643-dbda85761773",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7865efe2-31a3-4566-8afa-3f0214d8550d",
        "cursor": {
          "ref": "e226a40e-db33-4311-9762-7c0d35822353",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "2260b782-aced-4b20-9272-ca8fbb5e999b"
        },
        "item": {
          "id": "7865efe2-31a3-4566-8afa-3f0214d8550d",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "4a8a5512-7f60-433e-b063-f3d65362af92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a14da2d7-3538-4f8c-bb91-17273f687f0a",
        "cursor": {
          "ref": "ebb0146e-0447-40ce-ac95-cf28eb45e15a",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "0ac75e5f-fd58-49a4-827e-5aa8538a52b7"
        },
        "item": {
          "id": "a14da2d7-3538-4f8c-bb91-17273f687f0a",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "78113bf6-0a31-4ed0-a442-ab7ca52ebdfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8d13a7f-58fa-4cab-9d4b-b7f24569d8c7",
        "cursor": {
          "ref": "d484bbac-85e0-496f-a447-d8ba71716019",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "17f664cd-19ac-4ceb-915b-966221a424df"
        },
        "item": {
          "id": "c8d13a7f-58fa-4cab-9d4b-b7f24569d8c7",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "cbcefe7b-2ea8-46cc-a026-8bd364a852dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67703f9d-893a-4f90-812f-8b5871ac20c7",
        "cursor": {
          "ref": "e659a85f-a3fb-468a-a5cf-42cc6e1b2f67",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "7d4f6951-e37f-493d-9595-a83a1d7ebef2"
        },
        "item": {
          "id": "67703f9d-893a-4f90-812f-8b5871ac20c7",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "0fdc2a4a-99ba-42d7-9315-ab18844a1513",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56f0008f-9529-4440-8718-2b3256df5d1f",
        "cursor": {
          "ref": "12904bc6-cddf-4a28-a352-1ccd4605e82f",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "968260c0-07ab-4fea-9407-4e9c9ee44916"
        },
        "item": {
          "id": "56f0008f-9529-4440-8718-2b3256df5d1f",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "18f633eb-9bfa-430b-be13-071aab248050",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "922ee461-5aa2-4f96-916a-da5dce1a303a",
        "cursor": {
          "ref": "6f5be057-2521-412d-95a3-7e550a5daf10",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "3b79c4b7-7bcd-452b-9c40-91a823b1650a"
        },
        "item": {
          "id": "922ee461-5aa2-4f96-916a-da5dce1a303a",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "02d1d804-8d60-4c28-a34b-4db3775bc2ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5ae67cd-8a00-4904-98c5-5df9fc2c1248",
        "cursor": {
          "ref": "b8c471f7-6b9a-4737-905f-0f121d094a36",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "ce75694f-bfbb-4086-9ccb-deff2617df00"
        },
        "item": {
          "id": "b5ae67cd-8a00-4904-98c5-5df9fc2c1248",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "6e869d79-f2c5-4971-b53d-d70ec6b4d1f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bda58402-7bd9-4443-acf8-3573776197b9",
        "cursor": {
          "ref": "c1690c28-f842-445b-8ec3-dddf0846c327",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "750e9bd4-9b57-41ed-bb10-5f7f7d06aa9c"
        },
        "item": {
          "id": "bda58402-7bd9-4443-acf8-3573776197b9",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "200346d3-bf39-4c71-ab19-78e8656fdd18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ceefa8bc-06d3-48d7-a871-ffc978dcf433",
        "cursor": {
          "ref": "635be0f9-43d9-40b6-ac76-f68efe11b381",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "a021b61c-d248-4501-96ca-913dfcd59790"
        },
        "item": {
          "id": "ceefa8bc-06d3-48d7-a871-ffc978dcf433",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "94139192-a2a9-47e5-9416-c1e378b00a63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63742f57-4643-4e0b-ae67-2db8e43b8c5a",
        "cursor": {
          "ref": "10a5ace7-cf64-4f2e-b278-c129088e09fc",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "5a18399a-491f-48b3-bf3b-62d963a87494"
        },
        "item": {
          "id": "63742f57-4643-4e0b-ae67-2db8e43b8c5a",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "030a56b8-30ae-4892-8d9e-79f4e158328d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4188c2ae-46b5-4a74-8d53-01c129b3ff10",
        "cursor": {
          "ref": "c4ac2e42-ca60-4ba2-a817-6aafa24534a4",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "f4f7467d-24e4-4f35-981e-113835feb3dd"
        },
        "item": {
          "id": "4188c2ae-46b5-4a74-8d53-01c129b3ff10",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "005cd3c7-aecd-4496-b276-c7b1a6db121e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2e78a72-6321-4203-980e-617468302661",
        "cursor": {
          "ref": "7d687bbe-86d6-4973-9f9c-9a2d199398eb",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "dcb1b0d9-450a-4089-b844-db1555b87b26"
        },
        "item": {
          "id": "f2e78a72-6321-4203-980e-617468302661",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "674b434f-dc94-4395-88cd-f44a1e26cc90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "707058e2-a856-4933-888f-b33257219598",
        "cursor": {
          "ref": "23fa006d-a19d-465a-9f6c-c58c68782a00",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "dfc98c19-11b8-4aad-a9e8-9c46515aa334"
        },
        "item": {
          "id": "707058e2-a856-4933-888f-b33257219598",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "f547d337-fa2d-43eb-ae07-60f720e65901",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6608023f-7612-4555-a0cd-ceff4df1db48",
        "cursor": {
          "ref": "754d6b63-9fa8-4302-a99d-d4b44fa529b5",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "1e487df0-ec01-4bb2-ab29-9df9a9137172"
        },
        "item": {
          "id": "6608023f-7612-4555-a0cd-ceff4df1db48",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "b5cabe9d-e45f-44e2-a4ff-97c9540e0435",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c0bf727-42a1-4afb-90e2-c60e9da194ee",
        "cursor": {
          "ref": "6ab517fa-d868-45f8-9d37-6508c7de255c",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "e0f592a2-394d-4321-b3a7-657ecdc3505b"
        },
        "item": {
          "id": "8c0bf727-42a1-4afb-90e2-c60e9da194ee",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "e83d4f2e-7bcc-44b9-849c-5f9e9efee83b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14995425-0f4c-4bf1-8ea2-6b7d0f3180c9",
        "cursor": {
          "ref": "ed0330ad-9a91-4969-b91f-75d9cab92978",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "ca601bad-3467-41cb-95ce-40d64eb77362"
        },
        "item": {
          "id": "14995425-0f4c-4bf1-8ea2-6b7d0f3180c9",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "9cedc7d5-f16b-45dd-b8bc-c83373fb69c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6abce107-a9b9-4d4b-811d-7b3b0fa16d83",
        "cursor": {
          "ref": "b98cbfb5-ee95-4f2c-9305-e7bfa62860c2",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "0687796a-d7a3-4949-ab7d-db54b7c959c4"
        },
        "item": {
          "id": "6abce107-a9b9-4d4b-811d-7b3b0fa16d83",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "76c7b14a-d6c6-463c-984d-576dcb95d1c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74ebadcd-cd55-4dbc-80f6-5b0da15ac168",
        "cursor": {
          "ref": "d041e291-73eb-430e-a0b6-bf0797f37f5b",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "138b75ac-297f-47d9-a3d8-e593b841e86f"
        },
        "item": {
          "id": "74ebadcd-cd55-4dbc-80f6-5b0da15ac168",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "754dc757-5d0f-4c19-8be5-fb127d98a9c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82eff480-44c2-4f85-82a3-4e4eca0e353c",
        "cursor": {
          "ref": "08c07cda-13ea-4f34-9a39-5c45c846188c",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "be2ef1d0-ab2e-4d51-9c40-733db52e1d28"
        },
        "item": {
          "id": "82eff480-44c2-4f85-82a3-4e4eca0e353c",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "e9597238-d234-4a4f-9e11-b35046bcc318",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a661c716-329d-4132-bf3b-0e4bae81cdbc",
        "cursor": {
          "ref": "3a01ce4b-ad83-4e64-a4b1-806c08be27fe",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "9d59dc7d-682e-4134-bebe-518bcb740b16"
        },
        "item": {
          "id": "a661c716-329d-4132-bf3b-0e4bae81cdbc",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "365700ec-f55a-4d5f-8ca0-18a7d16923d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87d1b9b9-baa0-4009-9711-2255dce7e9d4",
        "cursor": {
          "ref": "8bfbf57f-0dfb-48a9-8a56-e99490ac334b",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "1a04459b-0491-4cd7-bd82-baedcde01469"
        },
        "item": {
          "id": "87d1b9b9-baa0-4009-9711-2255dce7e9d4",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "5d2f66ad-f960-4430-9005-8354eaae8152",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86e10992-4018-45b5-9cc8-c7e16b291b4e",
        "cursor": {
          "ref": "cbe19e10-2495-4b13-b0ee-3c36a965db4d",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "64707d74-123a-48f0-8c81-fe09656a739c"
        },
        "item": {
          "id": "86e10992-4018-45b5-9cc8-c7e16b291b4e",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "76889ee5-c8a6-44e5-8572-2a79d84e110e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f44115ff-a675-4636-b092-19b6c9127738",
        "cursor": {
          "ref": "b264e50c-6758-45c1-82ce-804e416ce506",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "95f936e6-eaa7-43b3-8d79-f354861593d6"
        },
        "item": {
          "id": "f44115ff-a675-4636-b092-19b6c9127738",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "e2474fe7-06eb-4a37-98e5-d5fe5101bf65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "322156e6-b6d5-4f8c-b2f7-402c497ca70c",
        "cursor": {
          "ref": "424af148-d208-40d8-8884-2439cd38844f",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "15972015-07db-4e93-b1d6-be3398a6eac6"
        },
        "item": {
          "id": "322156e6-b6d5-4f8c-b2f7-402c497ca70c",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "db16d8cb-dc28-494d-9cd2-712b0f5031de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e35d26e2-add9-43c9-9a34-273c6b226b3c",
        "cursor": {
          "ref": "4a2b6815-4bb7-4b7f-888b-3332640fdf58",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "3e3e703c-8e2d-4265-af76-afffdca93b9a"
        },
        "item": {
          "id": "e35d26e2-add9-43c9-9a34-273c6b226b3c",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "84c1bc2e-a2b9-4ad8-bf44-ecdf88875a59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad2e74e0-f255-4052-8385-5e8226d9b469",
        "cursor": {
          "ref": "b67b2904-308c-4e5d-acaf-dfead3fbefac",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "7012ab02-bf6d-4814-add5-9dc971f11845"
        },
        "item": {
          "id": "ad2e74e0-f255-4052-8385-5e8226d9b469",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "d2f3d4d3-8a6a-4af9-9bd0-e1bbcf69b3a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92e70d27-60ec-4e97-ac58-cca93420e950",
        "cursor": {
          "ref": "13051dc0-fccb-4c32-a605-88e456e0f2dd",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "6c058b0e-8122-4bc1-a9e7-d3e5e96e565d"
        },
        "item": {
          "id": "92e70d27-60ec-4e97-ac58-cca93420e950",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "8dc89808-ed7a-44d3-973b-16f5e151aa9e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6025cfa9-a281-4003-903c-e4cf5831c6bb",
        "cursor": {
          "ref": "5a211af2-ae95-453e-b933-1340f418cb87",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "4f508fa1-4b03-41d5-8fc2-bfa9aa219a6b"
        },
        "item": {
          "id": "6025cfa9-a281-4003-903c-e4cf5831c6bb",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "d90be79b-d072-4359-a955-5e9585689190",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "59208a6e-fa22-4d0c-807d-83df17a4886c",
        "cursor": {
          "ref": "dbf5a4a0-9ae1-4234-9744-f2779271ce79",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "701b9951-a3c7-446a-983c-e48de1536711"
        },
        "item": {
          "id": "59208a6e-fa22-4d0c-807d-83df17a4886c",
          "name": "credentials_verify"
        },
        "response": {
          "id": "fad5e31f-c7e4-42b2-9032-f79642c68343",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "12645473-b4ca-4b6e-a69f-3b6c3eb764db",
        "cursor": {
          "ref": "599464c4-cbc6-44cf-8313-596ef6d6c011",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "5ee4c091-b4d2-40c3-8498-10149ec54cb5"
        },
        "item": {
          "id": "12645473-b4ca-4b6e-a69f-3b6c3eb764db",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "9dd06505-48d7-4eff-8312-b6e81cb7e1b4",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddca0130-e3f8-416e-823b-bb3d519618e0",
        "cursor": {
          "ref": "b1ac9985-9de5-43d8-a4f7-768d76b43d32",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "dad47e61-974b-437f-8fe4-034197be4aca"
        },
        "item": {
          "id": "ddca0130-e3f8-416e-823b-bb3d519618e0",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "9192a4cc-bfc4-4d54-8cb1-80493a161f21",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddca0130-e3f8-416e-823b-bb3d519618e0",
        "cursor": {
          "ref": "b1ac9985-9de5-43d8-a4f7-768d76b43d32",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "dad47e61-974b-437f-8fe4-034197be4aca"
        },
        "item": {
          "id": "ddca0130-e3f8-416e-823b-bb3d519618e0",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "9192a4cc-bfc4-4d54-8cb1-80493a161f21",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3ae394d-6961-4687-9445-aeb57cbec471",
        "cursor": {
          "ref": "d11628db-4503-4a89-88ca-0777baeaba1d",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "d23b3e97-8d5b-4f54-b009-de28774ab140"
        },
        "item": {
          "id": "b3ae394d-6961-4687-9445-aeb57cbec471",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "3c6c9dc9-6252-4450-b942-fec92fceb205",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32d1843a-4b59-4510-94dd-0721b7763014",
        "cursor": {
          "ref": "9afc4715-3d35-47be-b91d-e751e9698e02",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "6496d984-2f81-45a5-bf10-c06ea76be238"
        },
        "item": {
          "id": "32d1843a-4b59-4510-94dd-0721b7763014",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "23c94fda-b069-4eef-a133-b3e3326a690d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}