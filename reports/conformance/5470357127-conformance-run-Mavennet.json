{
  "collection": {
    "info": {
      "_postman_id": "4bd78d4a-8f35-432a-a4e9-9e5a47c7c93c",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "ed2271f2-e1b8-42bc-935a-0dd8ea8cc1b3",
        "name": "Clear Cache",
        "item": [
          {
            "id": "2cd4fca9-7c63-4a5b-884f-d4a07c90d297",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1bff98ec-3d50-400c-ad22-e53f74aa00cd",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "767a6a48-fb42-4c71-a245-c1c81a5ab097"
                }
              }
            ]
          },
          {
            "id": "9e916bf4-fa67-4b20-82f2-3ecd5e9ee0c2",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "99140d64-315c-4267-afda-1c8ab53362be",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "6ac3336e-f4e7-4eb1-8502-6d593b9df0b3"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "b030ed5a-d206-47c5-9a5c-97e9c91f7006",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "38b4177e-70a5-4f6d-9ec2-605cd0f7c65a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5bbc4690-a89d-4d92-941d-9a1f929370cc",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e1555732-2ae9-42ef-9f03-623d6745afec",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2aa0f978-0bd8-479e-ba5a-028637b45c49"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c5afd866-74cb-4858-a020-af0399465c15",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d57df9ec-a850-4474-b7ce-fdc46edd8c83"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1cecbe46-dc84-4800-baa2-45869335015f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0aef23e5-0578-4b0f-bf7a-e2849e2d1184"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ebf71f44-f090-4abe-a493-c2be9c06b8d5",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "f189b77b-75e3-4e9a-b510-83dcc19a75ae"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6959957b-d82d-4780-bc61-5921698d5d53",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "83301890-5a8e-4680-9a8d-c44ca49b08b1"
            }
          }
        ]
      },
      {
        "id": "ecae6f74-948c-405e-9f36-b250aeb01461",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "684dde28-dc11-4386-81ac-2f1395026be7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4c4d994c-c02f-4c79-b33b-1dce7b7233f4",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "81097def-4a36-4627-af6e-d2c243c3ed1e",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab7af40c-4aae-4cb7-ab51-6a49fd6bda63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5065b2df-e205-406d-a0cf-4595138aaa7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69e0cfa0-0378-49a2-86a1-c73921906fa2",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "928b5705-23b5-4871-8140-dc0932a3c4ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "02ab67f7-651a-44c0-8a91-5641ab7650a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3af2d63-5dec-4eca-be56-1c46e771f0c6",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d39913a9-06b3-4591-bc0e-81a0c76435f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "763ce06e-192b-4712-a13a-515801c63ff5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "edd0d5dd-37bb-4eaf-ae3f-787fd49ed43b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "24122563-4b71-4abc-92c1-af637d061f05",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d16eec6-a780-43ee-b45e-08f38b7c5e3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3a89c5c8-0e95-4abd-829d-05d37e2d82d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "254b9706-999f-41c6-aacc-9bc516a58b35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "994277f2-f39a-472d-a37f-95d66e519b9e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "9651c738-f501-453b-b9e6-be07c928a3a2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ff505234-ea5c-401a-8d71-4d4851fd8b6c",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "38dd9507-ef5b-4064-aae7-6692c1b1cc08",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "4a1eeb83-e276-4eb6-aefb-233c3dac6509"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "de22ec09-4fcd-4560-86f3-a085a3c53324",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "9cda2dfc-7ff7-4917-a407-3d45de7eba05"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2030d7b1-5d7b-4997-af9e-6444bccceaf3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4f4fac29-6d29-41e9-8243-1a1a3cca43c7"
            }
          }
        ]
      },
      {
        "id": "ec6c91c9-1fc4-48aa-8c0c-ab16d9c73423",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "3bf4121d-79c3-4ace-aa14-af220378072a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2be0281c-8986-4fb6-a965-3691a69ea6d9",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "a2d0b602-6de7-45ae-88ed-b3c1e2696ee2",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e263ebd-5a8b-4c9a-9b35-a27499d2f821",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da0fcb75-0d36-4057-8fbd-4acd172a0f1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcc0d1ee-d076-4aa5-ae82-c7cf4717d01f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "57d7f9f7-49a9-4a65-a09e-f11c31b338aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0abb10d-359f-4d7e-b390-4208a1ede6a6",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdb81324-dd8f-49fe-8a76-e706042dcc8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01e4aeec-c298-46a9-99ef-0ffb9e75054c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e01cd6b5-d2b5-4339-afbb-228c731c0f15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f96ec89e-3e9f-4b37-90cb-7cfdc385dd31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5d727be-8868-4bd6-8b27-935220c54070",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5af7ee4f-b10b-41cd-b97c-eea0d778dd5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c341c95a-9762-4f7f-880f-829d038d2f46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43ffb252-258e-4d62-ad50-5f1251a4ad54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "909283e2-5988-4d8d-84f8-358d8ced9969"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8715a26c-dc0b-4e18-8ae3-2069edd02916",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adeac410-cea4-47c4-b6e2-c2658a8d7894",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "949ba5e0-3203-423b-b218-fb26e42831e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "751654ad-ac6e-4015-a846-7c947c57a331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c6a5e8e3-ca5b-47df-9d5b-b9e6406c4dd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1a66756-0742-4f3d-9df9-854399e4df70",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2130a5f9-defc-42de-b095-00f302a5dde3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37f45cdc-a101-4928-a23e-34d49f699659"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3efd750-1b01-45a4-9487-c156526e35c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "821f53c1-914d-4afd-9353-c7d3ebf36546"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc753019-493f-4e9d-8a9f-51701c7cba41",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c8fad23-4437-443c-973b-119f212b70c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c29e860-c31a-476d-bc3f-5aca454c7e56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2a8628b-566b-46d2-9426-84d29548a535",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9aa9f118-dfe2-44a0-8e53-792d779f4434"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adc10f71-6ce7-44b4-81c3-7f0c7c2b9f72",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3af6d1e6-1564-4223-b9d4-6b03e4b33565",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae598994-9780-4f49-889e-01a43722fabb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d339f3d-e691-437e-ab6c-a34cc64d6023",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7e6fc772-20f1-477c-8fad-74625db7cedc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "126de650-145d-4777-a345-25341c37539a",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b36b3b3-3cde-4ca3-9aa9-17c8053fc6f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef834cf0-8d77-4479-ab0d-8d78cacf51a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05fdd371-ecee-4caa-9dc3-a2fbbca83827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4711fd62-a985-47a7-8da8-7d0ad70595e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e8d0e5e-d898-4dd8-843e-24dfce44d1ad",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b337881b-40e5-4f36-8824-ed90b4e8ed56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9ef750a-1ff6-484e-8ea4-633427015a1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c6c92eb-810a-49b0-904e-9a66ea4cd86a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "814223c8-03d2-4807-9e93-62cb2214c018"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c38a62c6-f577-4173-bd97-8f83f2249479",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35ae4898-171f-4c91-8518-fcc18732814d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "636eb780-0b83-4c9c-b525-45e0ea654c43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70aafddd-8321-4028-a76d-067a454c48d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a18292e6-a2f1-4bbe-b218-525f99851e7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c94ae2f-ba4a-477f-9a2a-ca1824f5113f",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "067201ba-3608-4fb7-a767-3529c641a951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fe3b671-0405-44dc-9cde-4bf8b01dc644"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4102a36-35e7-46a1-a1bd-c0efa26799cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f652d135-f1e9-48c7-8d95-c237b9e68487"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45e861c2-3c11-4b82-a312-ab89498bc4b1",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0d59ffb-865a-49f9-9c9e-22ef7089792f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4be19bfa-c566-47bb-9e10-4e19278b4488"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51188ce1-2450-451b-849f-c239c7971c09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8f6f4251-ff4d-46df-b8f1-4088c24e67ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e11ba76-7d54-41e1-8fd6-0418cb7418db",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8303e8d7-5239-4cdb-b32e-61eafdf8cb1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4992cb87-68bd-467c-88e9-a547feb9aff9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e023e4cc-0f2a-407c-b284-58f3c186278c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eb9558e8-2862-4ddd-8c33-151b5f1ccca5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84d0220f-9ef5-47a0-ad23-bbd515e2fc68",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09adea70-cda5-4306-bd82-692812992091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54731984-8254-4e03-9cb7-751fb5b65712"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37e076f2-7c6c-4d23-becc-8eafd92bc394",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4b5c3d94-000a-441d-919c-731c746295dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49a38d85-c06a-4a69-8d15-f4ed8efff368",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cd86f25-0b7f-49a9-8d2c-50e4e6a6bf85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54ad1b33-0415-4dc5-b2f9-8f6ab331cff8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35c55b71-d69c-4e6e-9924-0e22e243a394",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "92299802-7f6c-46f9-9b19-cb159450c776"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9fba881-dbf2-44a4-a932-7647b0c203ea",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6304c6e-d7e8-4dd2-a51e-9e7ae05ff135",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f52823f-2659-4215-b62c-09354aeb1b6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "087e0b69-805f-4c27-b3b0-03551247d890",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9fe51c7d-add6-4fb4-950b-431bd3320219"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f891e2c2-f289-4ee4-84aa-5bd1a87f83f0",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4859ffca-eb86-48c2-a505-d4d49aac9319",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb7eedba-874a-4a5c-a5d0-b9e997a8110a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e80c7813-93ee-4c35-bf10-e06d21427efc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8f2fae09-f876-4474-b4fd-c747ae9c2beb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32ad5076-95e3-4dc2-8d99-629fea31e4e1",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e6f01a0-5551-4d91-93a1-a8ca36932c68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "225cbfca-876d-4dab-b7b8-fac0492f78bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a99f624e-def6-45e9-bcc7-2188d624fd71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "02403e69-28fc-4b29-a4e4-e63e0063af64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e098fee1-84b6-46ef-becb-cbdcb2a3abdd",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab2ba059-a683-42d3-bbf7-582c8a7b5aef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c83ddb4c-d384-4cdd-b439-721be47f5f80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3a4817e-02fd-4957-b393-6f69eeed93dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "96fc6581-0983-47c6-919d-1798386c34a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f590d951-e39d-4672-bacf-52a070c53528",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d89c8c8-c486-41ea-b76c-5c040d02b7e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c95a83bc-de11-4b64-b178-9c5440c92b73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fddfa769-2f19-4372-9b63-255c13bd5a4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "379a8b66-230c-4683-af38-c6af4fba1fb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2e8ccc8-e615-4959-8810-6917da4ce000",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e4f2079-3fca-492a-9f49-14d995acb920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12c1f0be-3c00-48a6-87b1-3c350f9bac2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "855c4143-7978-41fa-a305-09612fbe290e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9e564a1-a3a1-49be-97b5-2efd23da9c49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f65c844f-83f6-4d31-808d-1d5d2663d99d",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91450002-a395-488b-8e73-f4cfb60059f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dbb6277-9607-4a28-b884-2a8218b0a27f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ada4ee7-1387-4d78-b6ad-14482735c6f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b2a7f036-745b-402a-ae6b-627a8c33493e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41a55ea1-abd9-47ec-b5b7-ff9c8c2450a2",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa63f223-9cc0-43ea-b9af-715dd02753b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be66eb63-7c19-4761-b952-f79ce855a00d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87c9e8ae-9f26-4281-9c7d-dc3ca416f9ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "84a15af4-acb8-4400-8fd8-feafada7dafe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ef39c42-40de-4811-a39a-27eabd69089c",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f408640a-bddb-417c-a654-609630bd0ecf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31214bdc-a981-4709-9a4f-1355adb3a49e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10087d7b-47a5-4287-bc34-ad75e87168dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "1fe3bee4-0742-47f0-85f6-d9647d501821"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d096def5-b4b0-4117-92ed-52c58a91d542",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a08519c7-5930-4936-9905-3d01f55fcea7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "064fb0f7-664d-4f15-8e9f-ae6607aa42e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2f0a382-1472-46d3-ad90-5a3697085145",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0fb0a4e-43de-42b0-93ca-91bc65218037"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9719ee34-bbd5-45fc-8d21-3d0b27f18ef6",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60e23c43-1f7b-40a1-bbb8-14834d00dbb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "686f1197-7877-446a-8fa9-d53682bdb377"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdd019c4-d410-41c4-b0ad-1f90b4f70ab8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d06406ef-1905-46ff-844e-bb16203111f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f047866a-5188-4ea1-80ee-e2515092d806",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b90b17f5-8ed8-456e-8bb4-bdc72f1b51ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ebc9707-a032-4225-8703-7ae267dd79aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66735ba8-740a-444d-9137-10be401e1452",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0ac073b-91f0-4321-81ee-594dbc260271"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58d2dd73-0d89-4a72-9e38-bb7369168432",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d00495b-8abf-4abd-b06d-30305fa5726d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29ca2899-8768-43c3-b4be-1706ed284b5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68a00ff9-c8da-41a6-8f25-f20a3cbdcbb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2121ab4e-dce2-4471-a271-8fd05dd02026"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdbbcd04-81c6-4522-abde-a6559361b768",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fb0182b-3d14-4382-90f4-a9696544f6fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ec18988-25e8-483a-a73d-c86ad1c8daf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3139945d-8fdc-4099-91d6-02fbe8f60163",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "147f5072-6b71-465f-8fbf-180de61ada42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58fd0de2-20b2-4dd1-a0df-43ee08ed376c",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70d06c22-a342-4a02-8ea9-084bd264ad30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a028e78e-ea2e-4186-9359-054bbba6c9d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fc2950a-7990-4025-bb44-f042b831ab5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c89502b-0d46-48a7-a2e5-f51dc61545d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4716786-7d5e-462b-a083-a21706e6b69a",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c04ae86-f207-4a14-b9a0-4908f513acf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fc27bc1-6df8-4150-9163-ca9e93c4d457"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2a4c9cc-7cde-45c5-b816-a0ae6f991f00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "439d4575-3965-4416-bd7a-51b37dd0f6f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36c05de7-2fc2-49c6-ac76-73b0aa4103f5",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d27a7c9-aec9-413d-8ef1-82616d637b0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd489ce5-ecd9-496b-a688-272e28c7071f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cdaa588-116c-410c-b94e-dea530054df9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "50c15762-3481-4777-94e9-591bcaa85a9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e398e9b9-a6a3-46f1-ae60-47152671cd86",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e55cfad-2b31-4eca-9ae0-589e340d0e78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16412f04-f1ec-496f-a297-d65eadfad890"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb74df1b-2988-483e-803b-c1641ae11bc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea0a75a3-a45f-49b5-902c-7a2432bf5879"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d54e6350-f91d-41f6-a3f4-381321900791",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "786a1af1-2dd0-4b02-a767-19255b88020e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5270ff78-e10d-449c-8029-da69aee18b14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4e16de8-7438-4473-a998-d1d304c1db96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d803dc3-a3e3-4336-8ff9-67591237c4e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c952d7ca-b269-4259-b05b-4eeba5d2bac7",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "680033fc-3a40-474e-abb1-7fd62b176e8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ec7a7c1-009b-48bd-ab97-66836023e634"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e556fa2d-1205-4b13-b307-4dbad11ff31d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "ca929635-4fb4-4329-8d96-49d631ae8dcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee687340-4635-438b-8d24-34a3bb394bd5",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b879c21-c5b3-4012-b6d3-2a14218a1752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "657ebbbc-b909-4a3d-a039-86956b10721e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "508a7b5a-c8e4-48b9-9199-258905bbdf36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5b4f0da8-f4a0-402a-b784-ebf74e4b4f78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40182dd0-4f6b-4bec-a59b-0fb0edda3082",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca721124-4209-44f4-902c-4f2bd8a49539",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "800fccca-3af7-4938-bf6c-a2ea47411c19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "093c6c75-b1f1-45f7-ae0f-86ba55b4422e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2abbb466-9b17-4965-afc5-8d668547e0ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d48b27c-03b0-45f8-a24e-c38b74317591",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e65619eb-f4a0-4825-b117-68ce05dd0be9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "340ce5f4-bec8-45f6-950c-147c090ff9f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb133fdc-86c2-4c88-87a1-bd221ab4ded0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "58d96b74-5ea6-4c30-8563-61fad77744c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0ded832-9c21-471b-8720-b3da27190a3f",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5d4b278-0a54-46a4-92a9-29951ecd18ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e9e223a-4625-4673-a500-e0faf9b04a9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1169f313-b07b-403c-a77d-b6512f0a248d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "424a8908-a473-4e94-975d-e7794d5fbe2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53c72606-8f16-41a6-badb-0058eaf07139",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "678a4837-00fd-4e7a-9fdc-55767eabf321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80de95c4-09c5-42f2-84d0-5d60581e09b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e666bddc-29d2-459c-93e9-063da4871004",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "39eaf94a-fc54-408c-9fa6-fee99e2a70b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce6cacb7-0cc5-42a8-9aef-af84565e85d7",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4adb39af-e49f-4b65-a921-00229b6f463a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40f455fc-7e2f-4dde-9708-84e91395caae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f0a04b1-6603-4e80-a25d-3c0d544a284e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0b31316c-e577-4745-87b8-5f4fb5cd0d09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaa2a4cd-4965-432b-9b50-57f1dd9d7b4f",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc4902e0-0e43-4a33-8efc-0aebefcdcbb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7b0f63e-4c34-4c4b-8a59-9cb40de90bac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87e8367d-32a9-440c-b945-6d6683f8ae90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "86594071-5268-4d21-9626-6fba4c80f3db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3e835b3-3237-43fa-ab0a-b5874a656f2f",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3b242da-c870-4753-b760-fd13f42424cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0e9237d-55e1-46df-b023-fc218faa02da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0b9d991-8d22-424e-b74e-14dfc32f4310",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "a8241767-eac9-4b30-8988-6d0abcce0363"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb6f0740-96a5-4948-bbdb-f8fe40aeb4dc",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48064738-778b-453e-99a1-dfe7114f7a35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ecdb13e-9ae9-48f5-95b1-1e4a2cf09a3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ef26935-5a41-4f55-8d99-54108b29c2be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "a3b0706a-3ba2-4b5d-830a-d0deaca7aef1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9804848e-9c21-48d5-9c86-3205fb51e8b9",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99cd950f-bca1-421e-ab57-4a2720304655",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "118bfb92-aa70-435b-985e-1567acf80d7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96c0df8c-b784-47aa-bb45-6c5a50659e9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "823b65aa-9bf4-43a8-a9dd-bf8141d3dbad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afb08cb3-2128-44e3-9c00-cd12c0b0ec09",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bfd056a-68cc-491d-a201-69e2161f0abf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d147f3a-828a-469d-954d-b7976f245a1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "578ea57d-b9e6-4222-8283-2b3193f6ef69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f20dfd3-9a0c-49ad-8ceb-b2083036ab09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb23f393-06dc-417d-86b1-27ae838e2788",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e82cfd2b-6ba8-40d0-904e-4caa1fd4ab68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9728d88-ce38-48b7-bacc-a550aecbce7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce3df2e2-701f-4aaf-8577-d06cd9ba2d11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "de0f8b5c-a08c-4afa-a598-06a39b6953ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e27c9d5b-b32d-49d5-bd1d-caf4ea7cfe18",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a531b42a-d1ea-4252-8c0c-b30fd24e23d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cffca0be-5894-4161-a035-7e6d0cbbe202"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e99164d-8732-4b1d-927b-0047261cbff1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "86fd2bba-c035-4304-9afa-df79483bcc83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e55f8a94-93c5-45c8-a9a9-1d3b07cac98a",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcdceb90-480c-40dd-bdff-77a1fb66b37d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c564198-8730-4f71-add9-25d5376e8ed3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7a25a18-5016-43c0-8664-405d1d9fbc79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b4c7026d-967f-4cf3-ad86-ab1967e26e24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dac4912-abc7-4db8-9b9b-1343c188faf5",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5cbaa10-8ae5-43b0-a261-f5a5c8ee9162",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "124c4b74-f829-46f5-9d9f-d4234f66f62a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4615132e-76ff-4d6a-81b3-1f7d1d01e70c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "58eaf8b6-cc1d-4c0f-9d04-ff419acc2f01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6fdcafc-03bd-4fe1-804c-ff7afabef48c",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a20381e-6110-487a-8f7c-b4065a46f76e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da66f1c6-3ed7-40f5-bc03-19ccdc448019"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29411888-d841-43bf-a5a2-d28241bcf2f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "0bd3bda6-51a0-4239-aa74-09fa060602a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4c642ae-cc22-45e0-b9af-111ce458f3b4",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22adc3ac-6ef3-4e0c-b924-5a2f77a63081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5becb9d-9fc4-42d6-954c-4dee15b66ff0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fff32f8-8475-4a7f-b6d7-4d54400380a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e18fced5-3151-4328-894e-69518a8ef91a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdd01cc5-9258-418a-bccb-2ef07c5c2b02",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73703c0c-b100-46d4-a960-f91761e00831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "018e9171-2635-4cde-87cd-158dfd9b6bca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5d88740-c93b-4b71-8aa2-840a983276de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8080462-2fba-45dd-9a64-bb14abb077ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1223722-5698-43ef-b21c-b52cbf4ff7a0",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0af3dfe9-893b-47fd-a0c0-7a62ba9bf022",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08fde718-75db-49a4-b7d0-7f6622b2486e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00534848-3281-46d5-98b6-b48720375624",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d546a37-5886-4ebf-b6d9-e2ff587b544f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f720c61a-d62d-4090-9067-1f6856c2f7fd",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80a06032-53ee-4557-9bba-ecd2e7a08500",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1027cca-c3da-472f-84b8-88814a6761ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6268c2c6-38f6-482a-9207-84191c7a44bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0422220-8b91-45f6-9cfc-475de5e62bac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "089593fb-59c4-4ca3-89ce-66e9181efd6e",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45bc67de-216a-488c-a488-9b58a408db7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6eb2115-88fa-49ec-ad4e-61f2f64fca25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd8bbbc1-db63-473c-a41e-586287d84ed0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "7dabff25-a633-494a-8136-b3ad201afafa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69b4bab6-a012-4e8e-8dea-a9bfe9d2e675",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecc118dc-4fcf-46df-9b4e-019288737793",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c875d675-ab59-4031-b380-be4f52d2d7e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce647a4d-c5a4-43b1-a0ed-5eb0dda49e69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4eee5722-4ca9-4fd3-b23b-7642b11561f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ec472d6-be6e-47e2-8522-17f87d38e886",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "552d6b4d-e8f5-496e-878e-5e3153203913",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "840cc91a-0af2-4847-b03a-29837a9f82f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46fe61e3-1fb5-4692-9c35-4ccaf020cf40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8a1c7d97-ad7d-4e27-9811-d4db5cd0d59b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75e65651-1b14-4314-afab-e9c56088f69a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bb38065-4f2c-47ab-8ea3-cad60b053957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3074eee8-007c-4632-a586-0f8163af0c31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a658255-c496-4287-a129-4783467818f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8069d794-8201-4cd6-9b75-3550a819b63f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2849fd55-ef06-4fa3-9555-2d405019ccc1",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6b78017-f569-432c-b8b3-11cdee60780c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "935e3439-2a9d-4492-8e84-0a74bdb8cfb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "debb90f6-e294-4dc8-85c2-ed5f08425bc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b8207fda-5121-4098-ab41-d9f00d1e1a4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cc09c19-6fb8-4663-880b-47c424f87541",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c83109a-d73e-40ae-8b13-61116b42bbf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ddd57e4-6f2f-473b-9704-afdb15df0ae3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a899fb08-4d40-455f-8865-14114ec7fed1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "50adb070-e1cc-4dc2-9f2c-c5d0bbef3869"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b546eabc-8a63-4b73-92f3-ee99217c1d00",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c94ecf23-07ac-4145-bad1-b376ebcbdf10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "402d9838-4387-4492-8ecb-955c980c5718"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed977eed-af66-4193-bc99-3b88d50a7f10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d30c1f5-d2a2-4e4a-97cf-052651602ae9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b19a6b49-5ab3-42bb-80d5-c6a16c7c08f0",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3efe162d-b838-4c72-b2bd-dc25318b7a6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da7704cd-ed1f-4dbf-b859-10499453ace3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14d115f1-ca08-4e6a-8ecc-246f21df5d30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ee9d834-8b8e-4fbb-a91b-43faa49077c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0daeaf83-a547-44cf-b660-ba728da94aad",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dbc0dd8-122d-4430-8c8d-af9057746722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e08c349-c1cd-44be-8006-72f9fc055e5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ff66de0-e186-4ce2-a3d1-03c473be9b7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6022470d-02ea-4428-a083-4c6651214d30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb5b5bf1-b0e4-44f8-b912-f199ed216a07",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e70b895-dfed-42ed-b449-bef14c326de8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b39930f-ac15-47d0-8b94-289167703b47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7287a571-82ce-4737-89e8-067ca2e5dd9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "350eb002-9d83-4304-812b-d2de3587acaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49e6375b-8663-405e-93ca-b010680574ba",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99ded765-c691-4e6c-b27d-9f910cf12aed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9c7a524-3e8e-46a7-bcf2-fe50d2dd01e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a5fd7af-fa6e-4fa0-91f6-c9a7e34ea7ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "50cbf814-5d3f-46a5-91a3-f040a679929d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c93e218-f8fe-4127-b291-ec0bd9594c9b",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ebd06a7-664c-47c0-84bd-d80748afb5dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e9c9ad8-b6e7-4710-9a0b-885e6155cc3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0edd97ee-8c1d-4783-9a24-e758448cc57e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cec86382-0edb-4e46-a3f2-8b07380c59ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5afb9673-4ecd-4ed8-a0d0-cea8b5fcd4f2",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53249e9c-c5b0-4817-aa55-cd02f692cc21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51185242-e9c7-4d29-b17d-641e1dad69f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3b88871-598a-499f-b84c-5d75897fc213",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "a749ce7a-cc4b-4819-814c-14e017ec0ca4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05551c4b-efc3-4d3c-8b68-052014dc9bbb",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a91f99eb-59a2-4953-95f9-954ca2067434",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b71e963d-6fac-4bf5-a7e7-9af37a26799e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c1f4f9d-3210-40a2-8f38-5028c232bbf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "04a61354-3d66-4f6f-8aca-3de0059f6795"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b23eff28-4ea0-4a01-b067-edb5c8cd3589",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f34f146-46a8-4a62-8ab6-ea9c2434b30f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c97c86c-6190-4724-9058-c6eb1c23f761"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04bfa0f1-7b61-4d57-b04b-40d00cf5b919",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "35b696d5-2d97-4676-9ef2-52aebd1af19c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d614f5b-74cd-44f4-b12a-25b4ef11c6a2",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a1a93af-0bfe-43a2-bb4e-32b8a478f014",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dc79449-ede3-457b-b247-44610095b087"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af39f2f4-1ad3-4b11-8c4a-c3a0837075aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "baa0eae7-bbd2-4f32-9e45-e4ce87685857"
                        }
                      }
                    ]
                  },
                  {
                    "id": "452fa6a2-608d-42c6-a265-5e52b38f037c",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50ba96a4-4703-43e0-9edd-cc290f685f9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca033b29-66a0-402d-8e9c-faae50e8fdcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d92928ee-bbda-42ca-9d88-3fefe07b0278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c41f103a-fa1f-40bd-ac34-a7f63ad84acb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3c8b92a-0d02-4e0c-99f7-7456333dadc5",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a656fe7-8fcc-43b6-95d4-8ac6cd3c93d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dcec010-778e-4fd0-b52b-96e2ffaa2270"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1996231-4ccc-4009-8b4c-f9b817a3dbd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b0f3216b-9595-40ee-803e-243989e80ccf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02996916-074a-42a4-aeca-e255185f6841",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ca3ce41-2c9d-4f1b-8f24-d03f64a30ed2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d47dec5-92db-48b7-8dec-071c7d22e519"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be018172-8811-4d97-9142-538852bbfcbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "11b36c17-7398-4d4a-afc7-1fb132a1785f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "593e7369-84b8-4994-8ba3-9ca4b89dedeb",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fc9b9a3-505c-4f7b-90c1-57fa0f71ce2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfdd936c-e63d-4669-a692-0d86ac301a81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa1f032f-a7ef-4a11-a022-0a2b5a1e3c2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b75138b8-4894-4a5b-9a0d-115f684ff2cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "542739ac-3306-42b3-b6ac-3cec60f34423",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fc32795-3b60-4116-8107-8eb76643cf3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29575fbe-50c0-4543-b501-260d8f8678f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f53f7231-ac59-4973-8313-2b6c6386ad33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ecb9107-1164-49a1-9667-480fdbe0762b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13133194-bddf-4172-a5ac-e2418a858b50",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50eb2f9f-b77c-4299-a60c-09f41eed69c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90414bc1-89b5-4e05-88dd-0457dc215aae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5bd0d84-2771-4c8e-87d0-d2d33113916f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "98deed76-7208-47f4-b2b9-994d2649f0e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ee1890f-cb90-448e-a0c4-ab5959e310b2",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55dad93c-d25e-4009-8954-fcdbdb59a8d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33753e1b-9c94-4bf0-9e52-85daac06e674"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15d38cf4-670e-47a8-95c5-ed039da22170",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d1abd3d-0298-41e9-a4a8-698870d1da96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41585cac-bc26-4241-87ee-cf06d8c9a0b8",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "874b30c5-a505-4b73-98b3-d5ce25f963ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dece8402-4eb7-41d4-bf2e-acbb8f966a95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb03cf91-4401-4210-b0da-99a6e0b31a12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "074d093f-492c-44fe-8d9d-bec663a517d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "887bffdb-7d37-400b-9569-c1184bff75ac",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f72be553-5b7b-489d-9e3f-ab0bb60d0201",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc0bcd38-3d02-4d9a-a3fa-6d350c872cfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fb000df-e2b6-4b99-86bf-1a572c47fecf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b137c347-d261-4b5e-84c2-cbabb44c87cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57d3076c-25d9-4c80-8143-5f39024736ea",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d871aa3-a5a5-4028-b57b-219731fce9d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5567771-fc7b-4f1a-807c-d69e8b687189"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "271e417e-fafe-45b3-925a-8377188f6d3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "84ef5c66-ec2a-468b-b83b-7ce5ec6cc0bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f112c3a-4161-4c1b-8b03-7b67aca36edd",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f8889e0-4917-4bc0-be0b-7e4008f22bea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9af1c097-8309-45dd-8df7-30ed102ce346"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "517bb5aa-a656-4f4f-a816-1910f05ae597",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6719e002-cb76-4470-905c-470476a13da3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47bbdc0f-8dc6-481a-bf8d-48b333ec5722",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fdb66f9-9288-4edd-90c4-aa48f3ebf404",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06de1c7f-bb60-40a3-9c8e-c83f5a20c94e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21cdcfb8-73bf-4d28-a6d7-d375b3afaf94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c889647-57c7-4292-97c1-53b41ea8ce31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d03934b-333b-4944-8a75-b6e8115d7742",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "469c38c8-fefa-4186-a8ff-ebf0c1eb03a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce55bf7a-94be-45b4-99d2-49daf78e6d4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8801f063-ac1b-4f82-a1b2-1713856b6129",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c1a1274-044f-427f-88a8-5dfea85b5544"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c7e92d4-5676-4f4b-b092-f47b96f51d8f",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ba7a98a-86ea-4667-b527-8e4e642a0663",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cb86082-fe92-4cc0-8da4-9fc9ef461e5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b84dc879-d506-41e0-87d5-ff7dc8990402",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "277e7ccb-f163-4d68-9903-91a995af0063"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62dfb07b-bf62-4a3f-8575-9993ee996024",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c96990d-4d95-42d2-93d3-6cd99ef7348a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b00bbe54-c727-44e1-a15f-7269d5fb1d2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30dd91d0-1986-46b7-bacd-baa681616d7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "64d869b8-568e-4172-94f5-7dd8fe6e5864"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe835955-2c00-4016-ac40-167b38574115",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c1e1ed1-6a5d-49d0-80e8-e04505beb06f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb128d14-1afa-4e61-91a8-973980859aeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbfed41a-4673-4eb9-bee7-0f7850fb980e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0d432c16-d6df-4efe-8ba9-823b01e82abc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd1d9ba0-07ec-49a7-b17d-990d3ea7b501",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c58b6365-e487-4572-8327-9ac55197e26e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "658d9014-e599-47e9-ae53-9889c5a68e9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d5bf117-7531-4c8f-b57d-50acf313d508",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d4679e33-1c24-44cc-801b-1d3ff1f5c7f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7025fd7f-3a19-44c2-ae15-ecdb27f3f124",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d33a71dc-8716-48e6-92a6-1316884a49d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de8000c8-24e3-40fd-bc10-f21c4076fc24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72970e97-3eeb-4159-ad79-a9c70db8f415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8e4f8571-127d-4d12-83d7-d217779fb7dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "867bfcd4-d6cc-4ff2-b0ea-c30aa0bc6451",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76aff9d3-b155-4973-a87b-4fa3e626ef8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3af2f00a-217d-46c7-9fcf-113b980e85d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3b7699c-f23d-4cda-8ad9-5a2273eb7b2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "86eddbc2-17a4-4cbf-965a-fcb1611395d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32d6a278-eb9c-4ca0-8eec-bb519e89a07d",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eac29b01-4144-4061-ab5b-467d040534e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "163fc259-eee6-41f3-8617-04b3db701ac1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "153d99aa-d05b-4bb8-9faa-86d125259f98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "7d6013a9-7fb5-4f88-8c93-d49328c1b143"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2d18297-184f-4730-9c12-22ef796fb367",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d029f14-3c2d-4c9a-bd68-de793a63e968",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "d8d87783-1aa4-4a32-98e7-6b5bd5b019e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c48ea76b-c0b4-44eb-8ce1-168e51b23ab8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "8a324193-c635-40eb-84ee-92815e0d17a8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7fd47974-e1ec-49e5-b3f7-c9e05ce641a9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e624fea6-d281-46fc-ae41-cf7fab89b486",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49943409-6b39-43c7-8e45-7d8d8cea7c6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "73dde242-ecd1-4b31-a598-20b02736d236"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a46ddffd-354f-4c7c-8677-cd529f8fd201",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2dd7100e-a30f-4273-96ce-5c9bdaa22f56"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f3a3747b-997c-4bb5-accf-0e8ba641bae0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f2d8ec09-9622-45b1-bf94-129d9b156d9d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6f2be02e-696b-4e62-93ec-634cc8ef44f5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cb0f522b-98aa-417b-8187-04074565782c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "47286a9c-9d45-41b5-91ef-6199d9b057a2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a1743533-d006-4be1-91f3-709a4235ef7b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4603f96c-3995-4030-a9da-8f52130d4372",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f9a7f7f8-abc0-4e2f-a503-1237e47de5ba"
                }
              }
            ]
          },
          {
            "id": "386232c6-b788-4218-b27e-8b12e3038811",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5bc7651d-4849-4ea9-8c0e-9129cf060c5f",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e74adeca-8ba5-4cfb-9957-bac4e8ef88ad",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2ccf5b67-d292-42f6-878b-f1431b324774"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e68f83a9-ef44-4236-b25c-f2ed737a8efa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "98d98a5a-72b7-4a33-b577-8e48dbcb85ad"
                    }
                  }
                ]
              },
              {
                "id": "6433c474-2ac7-40e7-80a3-0d2e9f57c26d",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "659d9619-0319-4cba-85be-b456f308842f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "680d838c-49e2-4fac-a6c6-8764baa17ab4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bdf67178-1ee1-4573-b469-f55286569899",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ec4a88e2-6d31-4fa8-a1f9-5e58564eeb5c"
                    }
                  }
                ]
              },
              {
                "id": "e960ce76-3ad9-4f7c-9310-62bbc7da42c0",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "41728d5d-0353-42ed-ac07-248584e5aa74",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bbccc220-c0ae-476f-bc15-0d2ffcdce976"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0f3dc34c-cc9e-4831-a39d-dc521bb38af8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "75895636-1042-4fa1-be4a-610c2d93b4b7"
                    }
                  }
                ]
              },
              {
                "id": "9becf14c-05e8-4865-b82a-ff8b1da64b14",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1e7272b4-27e5-40c8-80e5-8573192b6c80",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ea4a7c50-b519-4029-809d-0bc38797c62a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f0decc60-f248-4a9d-9a51-616daf4a372b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "1f2c891c-4b31-4136-8f4d-c2aa99de4c29"
                    }
                  }
                ]
              },
              {
                "id": "3915ecd8-ce2b-4813-beae-e4f8ce320ad8",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2fb4bbcc-ff1d-4d89-aecc-4b04f9f0e6d7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1b9c07d2-63a4-42c4-9f9e-53b763a9f60b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "686d1fb0-03cc-4944-aea9-ed76d89e2166",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "a057c29a-0f41-422f-8020-dd8a247a375d"
                    }
                  }
                ]
              },
              {
                "id": "1355996f-58ff-45ee-b162-ad2362af0db8",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d373566d-506f-4a39-96fe-65e2ec298626",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b24c9947-c153-436d-8c34-0338eee1ec7b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d34d6715-3094-40fc-90e3-740294bf179d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "df4ce570-ce89-41b7-999d-3da4bdf5f72e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3019a981-6b1d-4dbf-a4da-c4bb09faf7e2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f48d5242-bed6-4084-b25e-b67643411828"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "eddaedbb-776a-420e-a156-7c229b4b7b21",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d967671b-2962-49d5-881b-9c494ad94f83"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "67073d2a-e682-4080-9708-38490a132149",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "5db42391-af6d-4e58-a4ab-af7a9abd7e77"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9356d350-d105-4cc8-8f89-563aad1e84f7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fcdae8f2-7e70-4381-9480-542d67edb8eb"
            }
          }
        ]
      },
      {
        "id": "093ef1eb-73d6-4b6f-b84e-e71f88d30c5f",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "ba54c5e0-c1cb-4710-acc1-3ea61acbb551",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b0f98372-87b4-497c-ba67-db2d48308470",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "04a6042f-42b9-4db4-bb4b-4131cb7194a6",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc295e77-5de5-48fe-a95d-080d7ee580af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "258d173f-af98-43fd-ae8b-0bb299381146"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abaef096-5c30-4a98-9db1-612cfedad0f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ce45321-8004-49a9-9fed-21cca26d7604"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84780b67-875d-409b-a924-30281cd9a60c",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af11d976-11a3-45d8-b281-4e27fc4b7ccd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82379022-8d10-43ad-86d0-be668189f834"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25d9ea31-0c37-45fb-9125-11027a631654",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "403969bd-47f2-48a5-a344-1b8bbcaf0cd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bbae757-8b0b-46df-9028-9794f08b4974",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dc73b2c-1d1c-437d-8e1f-585070aea3a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a0d81d3-5a64-4041-87eb-d3f2053dd5d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fffc4e40-1bde-4d0d-bf45-1042b40499d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5ef83f6-95c3-4d6d-b777-434617c5a01c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dd82db4-e56b-4481-b95f-573c80c36827",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92a4b472-1149-4ef9-a672-2a25f0d07caa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23b992c3-21c9-4ac2-97b6-a199144e1e1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3080d48-0351-4add-b866-68c857a1198c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "321da314-0c12-4ef5-ab44-c0bfd4f0851b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "816317c8-2f67-4d54-ab92-cf95e038f441",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fa5a63c-d322-452f-99fc-14a8f1d437cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b34c8c9d-079c-4ea5-9d86-114c3fef5193"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12cf7270-3025-404b-b639-0136a166de11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a81aaff-c30d-46a6-8c50-15d06fe22451"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fca7d58-64c6-4780-84c8-46887c0b37d3",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b07e8553-1142-4552-8733-9c1a27f2311f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db2c7e16-bad0-4a5b-96a9-e1fea03885df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cd22515-fef2-4bd1-84e8-ed96c1d6a719",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "56de6271-2f91-455f-9321-08539d87b510"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73a2132d-6f37-4ddf-b4b8-d9cdb93442e3",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dab67c4-298a-4880-8f11-401c53bfb5da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5259d9fe-fe0d-47f2-b39c-edf92c512d0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff42d3d2-a534-474b-bc0d-9745c88f3008",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "57e5b04b-c48a-49d2-a1ba-5ff180726795"
                        }
                      }
                    ]
                  },
                  {
                    "id": "702092e4-0bd6-4885-ba64-70c4cdb21e40",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1322cd8a-f9b3-4cf0-a2b2-77f22f3ffcfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb12ff5e-e9b6-4b14-b0be-48ec2328307f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e81fc2a-8f98-4612-af99-9012e3bbb864",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1625f9e9-8c9b-4c64-8700-ab44bf5c0c1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26aa53dd-c319-4e58-ad54-ffd09a65eb18",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbe1a416-6d73-459c-8c12-c0922caecac2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0f6a9e3-334d-4168-8872-bad0ae73f753"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5461a0e4-eca1-448f-88f3-7abe4e07d6d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "98ff5e47-e15b-41c4-ab2f-b892a866df1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73771054-b257-4ed5-9afa-2e8337bc6124",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a93a06e4-af17-484c-9f31-250ac08bf46d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d076d1e8-343d-4f07-b7e1-493b10c74dd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3988c88a-b117-4e49-b035-b2507b422e2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6554a06f-157a-419c-820b-d26e7547ac1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ea256c9-ba31-4ea1-9212-1190de4e0c2c",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "738a005e-9afd-4f90-b75c-628627c7121b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28918e0c-9757-47c4-9dfc-ae8fdc7b46b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14e9b6f9-16b9-468f-bc32-db55a6cda515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "34c4d92b-799f-421f-86ad-82fee2ce7b03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "903d8221-e085-4a64-827d-d918c9b32446",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae232857-aa5c-4514-9c73-ec07221a66a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "189c61d1-4cc6-457a-adbd-dd8371bbc148"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "903e12ed-5f1c-4927-ae7e-6642a7dc8ebd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1f798591-7deb-4333-876a-3c5b83d9fe55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3c55313-86ab-4f04-92b8-d66fd2f06c38",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a862cf4-4678-45ec-abf5-943328bc6eab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9040d237-b941-4f22-8d74-5e0b37a5d169"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a171d07-19e1-467c-9c5d-05dae20f2e28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9cff0aea-f44e-493e-ac76-135887216acc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e66c229-5fff-42c2-9b28-9b4672baa789",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33b61cb9-f442-40b2-a001-8592268fb474",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "feca0f8a-9ce4-48a8-aa05-56ca9df24dd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17c55957-4d8a-4845-b2d3-e690f8e7301a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "692b3480-ace8-43e4-ace7-dddcc2d76a01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a88dc0c0-f549-4f6f-b133-95dfa0de7e2a",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17314c51-0d3d-4b05-b58e-19016980f185",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91915855-2e35-4307-ae67-c5722e0f5c2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77bcacf0-1bab-447b-94d7-37c0ea0acc6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec9c61b2-ee2b-4940-a114-6f78de1c7d39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e91ddbfa-6bc1-4c2d-a630-011308c5e0e7",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf39797b-47bc-4802-a0b2-7ea7c4320912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "379116a1-1ee2-4dc9-b910-ff91f5703102"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "680a8949-bce3-45ac-8ff6-fd8cafbe7cce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d71ac81-8f83-4b4a-a602-9dd2c29988e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb899333-3038-48df-b56b-040cc64fb469",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dacc8908-e0dc-4f3d-bf8f-61ebc27e2c42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "983ae0d2-5bc7-4073-a573-f97ed3afaa3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d53f10e6-6456-4a16-9bb2-e776883b768e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "9aa59ef0-4d09-4169-a52b-f6271a287b1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2eb01ab-b7b0-437e-9e9e-4e865f68a924",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "970197ca-e677-4326-9620-bf8a89aa7ebd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96ceef9a-1b3e-436f-a962-e59cd1f06d7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f18c700-0202-49a6-93d2-425faa196544",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c500b24-3646-4572-a0bb-e0e44240f70f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a938ef3b-015a-4592-b209-bc1111504913",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab6b8b21-eae2-4f37-91c4-ab25046ecbe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1988846e-e3fd-43c4-807b-3111b1a33591"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4394cf3-12f6-47b0-bc58-129d4a5f715a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "24619b69-4fa9-47ad-8064-aa46f99f5f6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42b08176-3344-4fa7-b035-1db9a1d65ce9",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ed8be96-c843-4425-a29c-42746996ed2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d495c324-5b70-49c6-b1a0-374129d956c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "437723c8-8acd-4835-bcc2-acca48517dbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4ec2de4-b732-49c0-973e-41060e0c0a1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b871ee32-8031-4532-8358-33376d8a02a3",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4896a458-61c4-4add-8c4e-c5a11a5cc198",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c10e4135-b786-4db3-8aed-15dc699d958a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2191cb95-cf30-4e21-9efb-8515d8ee5df8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5d70839-b07a-4444-bc57-55a2f9ef1f40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a15b7e2c-4037-43d6-842e-5689a5846904",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2f7d22f-7eff-49fa-95af-1168fe11a04d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ef69017-2920-46ee-89ac-55e7fe000132"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea6197ab-08dc-43ba-b227-1a222534889a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1396a9ec-511a-4f90-a9aa-9e81ecc77bf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5e666ea-ba0a-4e8c-a392-a3e6cd37715c",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79f1857f-cb02-4e5d-8798-cd3910d3376f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "694a83ba-9cb0-49c3-b024-b935a3aecbad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "582c1119-1bc0-41f9-8e43-08fb7489d2b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "75d63de0-42ca-419d-87f6-632a864681ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f67aec94-d2bb-4e3e-8691-957c4d90f08a",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d22c5e6-8801-490d-aa2f-f681719aabf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6b5933d-253e-47bf-84af-e3a3399ba500"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dfed1e3-7ab3-4b66-807f-7b2aede12990",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3d3b8b8-5555-4546-98ee-444ac4167dc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47ec4c5e-807f-457a-8753-21ea9511bbc4",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1362d910-6fe7-45c2-aef0-a8aa1c875278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4086e4e-0383-4b68-8991-d42f661be054"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2ba31c1-a323-4fc2-9b02-7ee71c6c790a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e2f3167-5d0a-469c-9dc8-e3f71f3bcbb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99224887-8dbb-49e7-a90d-b868e2d40a90",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ff9793d-6744-42a8-a0ea-c6c905c9b6a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "713b04f0-8624-4b7a-8ffd-4e5f40cbd183"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c97d2a4a-6a7c-429e-b48c-a0bf3cacf882",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f63d9aa-88a5-4dc9-800d-e7922aedacea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d186acf-91c8-4abb-bcdd-8a1a603e3f9f",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ba9a9f1-d651-4d3f-8735-c6c3c1e2d81b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d644a90-35cc-424d-8f3e-09ec6022153f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab25068e-e033-425b-ad9f-c23c9d8c6fc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba6dacb5-86ee-43f6-9c73-1b67ddd7a9e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fefa15e-9e8a-4877-b883-23108216deb5",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69513291-5f73-40f5-bb1d-4067d24bbb19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e1eca5c-fc38-478f-814e-95f51fcefb6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c6bb77e-5a46-4ed6-9f26-c147ab406652",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d805aa5-e880-43b3-80ff-e87db8ad4dd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65ec9e26-605c-4602-92dd-23f89ee5e057",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60f72e83-b18c-40e9-880e-b78baabf8137",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "282226b5-bd23-4e6c-92fd-fe1ce7c8a271"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4937fb29-4cd4-49ba-b8e3-2bba5b6e380d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b1df418-14b4-4237-88b9-1ba8d2d84f54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba09a86e-66ce-4bb0-a2ef-064432332604",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60897b13-44bd-41ce-a567-284d6c9954c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a01ecbf4-7f7a-4230-ae0c-641599709549"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2746f71f-8b3f-4be5-a1e7-a92a1f1257a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f112112-3516-448e-9c59-112bd83fc41a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fdb6958-1718-4765-b126-23b9a36f1805",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f65cfdf-ef96-4339-91df-81196eda5af6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f809bd5-5724-4de5-b704-86acb1b567c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58272253-fdf7-4f42-aab5-bf0a70c9799d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b054974-fc3a-4bfd-b415-506ef52e406e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9f8e415-16b5-4ef8-8752-894107a2f03c",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "743e6bed-d5ab-47ab-825b-b993e79bdf94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b87fa5bd-60bc-4004-8689-1482ad41b318"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4d365e4-cf5b-4d5f-bb36-47cc457fd151",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed7fc1f3-12c1-4077-9f96-8705ff97f2d1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "49ae5622-d4be-4eef-a5ae-c5b082754c94",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cdcc2717-8a66-4715-9068-89046ed4250b",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f94778bf-cb90-4ef7-b819-448dbaf93e98",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "d7f58903-190a-4b6f-be84-2febfa2c1ea0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3875bdcf-abb3-4aa0-951c-a9d5fe7a6055",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "32aea3b9-1571-447c-849f-b12f3eb04620"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0496c4ad-6471-47a1-92f5-1ea7102c4533",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "577015fd-a7b1-4c19-9fa0-fa651f5aa559"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "878535e5-f0f8-4768-938d-d96de47b09ef",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e3551d41-aea4-4ef2-af1c-83eee6d60532"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c864bbb2-e5ee-4015-ae08-1d2ed45510f5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "870cd7f2-868c-4d02-8900-d387d704bd16"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7795f577-ebae-4ac1-9173-6127ac252b27",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "54642a64-b2d7-478e-b732-df47124d8ddf"
            }
          }
        ]
      },
      {
        "id": "aa2edf9d-69cb-4c28-91cc-06a4dedae972",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "19dcd54a-b2b7-4811-a478-9d8eb796d6cd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "eae2f26f-6d82-4eee-9190-41c1b9b710f9",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f1e0cb28-511c-4ff0-90b7-827fbf2a1651",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7eddd4a-a932-4ee9-845d-95d76130dd80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "042f38c5-f994-46c7-902f-2d87abad0811"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "951bf2b2-43eb-46d3-9579-3b8c45144831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb74bbef-4dd5-4f59-a667-f46ef544893a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "430f0944-4e8f-4a10-aa2f-98adb3ecfe63",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "361ec828-99fa-4d76-956a-a89c9bf935b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f1ca230-9355-424a-8d34-4eee9281a04d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b955e01c-0d1c-4803-9e6c-3cdb4ed58680",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8af192c-b6bc-4c47-a35d-1d63e5470f20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3012f30c-2628-4abb-8f17-2e6613f34698",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db61b314-aedb-473b-a7e4-828379f13e56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3212199-ca37-4e14-8d7f-41f6ddbb5836"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81f00388-e22a-474e-aa45-44c4b664cbb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb09665a-91ae-440e-a92e-3859c8a8a846"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47d331e2-36cd-4485-a683-18dde2c8a2fd",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa22b801-ac35-4ca3-be39-91ff2333d957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "113488a9-605f-4398-85e4-b3b18f3296bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e6b29cb-9c5d-4b53-a14b-42a4e1df2b5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4df42f3-aa12-4b0e-981b-5ea4afa6dfa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ba3a6b2-40cc-46a8-a6ad-271379098905",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "001b9d03-f190-421b-adc8-5f10ef738ffb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77994db4-0b80-4755-8687-ebd0b8e3c05e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e0b2cb1-415e-45d0-9d30-8c9bc3f22673",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dad4dff7-4aaf-4771-b037-d8296cf0cba7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a35dda37-39a6-484a-acc2-8fb36b296d9b",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2be6d5fd-317d-451a-9e15-f3195770169a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fabee973-ff05-4450-8144-7905b34c7701"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee0f5d4f-21e0-4253-9861-b81b91116a6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a3f4c8d0-55aa-413b-83c1-b993d3b039fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62b9cffc-fc37-43c6-87d4-d2f9e806bf11",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d69d8e27-b2e3-455c-ad5a-de44d786a38a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b6f72b8-44b4-4d4a-ae67-e2c727e9525a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eebc7e38-99c7-4c81-980f-287169e14769",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "481187d5-ae3e-4b13-a94f-2ee799801c48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c047223b-6de4-4df4-b9cd-d26e7b359caa",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dc44247-7292-459a-bccc-4f68ea4660fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9daf22e4-be8a-4053-9751-3a58edf9c9a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df342316-fed2-4808-a2e3-0232459f5b52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "52aab6e0-b922-4db0-b0f2-d95f429f0aad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6bbe1db-d671-4d45-b9c9-41132a3b3c2e",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f0219d7-2ca3-4156-b9c3-a04cd82cf181",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "788522c9-f039-4887-b78b-fe6f895d1734"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc641ccc-21d7-4c81-b18c-e5bab82e99ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "52209760-641c-4780-bb95-012cea2c3b0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12ad4082-adcd-43f6-8971-83ba253ffecb",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27b4a84c-ad7b-4705-9a21-9b68f1d30d88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d40664a7-05e8-4193-9686-94f16be35d46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d23e6a8-220e-4228-8638-84180ab5a059",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b713990-311b-483b-8621-0ed243c3e8af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7faafc6c-cb51-4553-9d5f-cb033871b287",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfd5de6f-0006-45cf-8eaf-91c15e016f92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7618aa9a-2fcc-42b7-b61e-66d45927848d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17100a28-6069-4eff-befe-8b895cbf8f44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "24650cfb-50db-4d7a-bf29-73ed4123d42e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40f6562e-9b92-45bc-9dd0-4485f2bc4916",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72ab931e-bbc0-486e-9941-2f214e17f8de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a47ce40a-e7aa-422a-a857-7bf2a47cd0ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "726e662b-4658-4689-9e3f-dc6326387ee7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cd019be4-93ad-4930-8f2c-bdeeafceaf9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3926a6df-1cb8-4552-a9bd-18f9274e456b",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b1cf12f-546c-496d-91e1-929d16796e26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef99a15d-429e-4ca3-869d-6527b5d639c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea0fa630-2510-4766-93c1-032bbf0c8950",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7425f50-62f5-4536-accf-9c91a6d5632e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f9cf90f-0ecf-45cf-afad-e21f215545a5",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1519da7c-115f-43f3-9a6f-abee63333a45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43da32eb-fbc1-436f-a6b8-6b88ae61f82a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2c37377-07da-44b3-9173-5d11a56371a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "32ca760a-1545-42d4-a33a-6602626dce00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1592e55a-f5ec-4998-b2e5-dfb16b019745",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c66acff-4bea-4065-b4f0-7a49116f349a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5eb29105-0f37-492a-86b6-7fdfa11258da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54b84f48-de9c-47cc-a072-1e8d2d8224ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "549aa82a-5b5f-4363-940a-50d118a9e5f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e4644bb-9e37-4d6b-a16a-0c71416a9371",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52cbc058-53eb-4110-97c2-104117bee5e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c1d21d0-1105-4761-8e16-b45069a33712"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f8c31e1-12a2-4be8-8bff-d7598a637586",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "e73edbf4-cf10-47b9-93eb-34a5e61b3d93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16b9cdf0-8674-43c7-99d2-1d745bd1e886",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6248e0a-9b5d-4d56-b152-d2ce9d403f85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3be8f7cd-7137-4b08-a0e5-7a510e50e4c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b707a14e-d788-427a-90a4-1cc0f4595a2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "c580b17f-3ff4-4b96-abca-cf7f19c67569"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c18aa76e-ff7e-4e44-baab-bf9b54ba2445",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ce7577f-bf92-4485-ad51-eb204764c534",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4201aa41-f065-44f9-9e44-c44c6d923c5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1054cd14-2f85-4f8c-97ff-e1b3a72442c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d5bf1fbe-41a9-410c-8401-aaf76c9e7076"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67d02066-d94b-48cc-9108-cf7bdf049757",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a2f37f1-1e57-4a10-bc36-0dd673744b8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea4f2796-cedf-422e-a177-7973ceb87e49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe224837-ce9a-412d-80d9-c722c827bd78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3cc760de-2226-48ff-88db-54ea7f7a2cec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c2a71b3-d8af-45aa-b161-388ae15cb0d6",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a1f3cd3-f895-4005-ad17-723620065bcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a720115-781d-4243-a351-b03471975d08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ef248fe-58a6-4483-9c6e-330db80a4c7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e608a54-ed4d-44ce-a337-d7f3f32c44bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2fedded-c039-4ada-b22f-4ade79a67664",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76b00960-4fe0-439f-b971-c961c6da46bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "346682c2-2dc7-4510-b0e2-26c9176ef225"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c42a3224-f417-4c30-9cb7-a2e77d31eaca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cbff62d4-e8ac-416d-83d9-bd6b8cd3b23e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c90661c-8da9-457b-be9b-8aa303e43181",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b87d038-b602-46e9-a4b8-a8062a3da70e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cc414ed-5239-499f-b61f-77efeb5badc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f15738b2-6491-4b0a-bc2a-e0ef322cefab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "21b765da-8871-437a-89cf-a065d8de0ef6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b84c4560-0c82-47a9-b5dc-a5e4e6edfd0e",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43caf338-0ef6-427f-8ab8-283c06d789b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf6f6698-1369-4493-881e-c99d42c830ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3778bdc7-7a70-40fa-acf9-f064ed6c95cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5bbcb48-38aa-46a6-acfb-3acb4d4d70cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7305f5f5-6259-415f-b918-ec8d590c5bdd",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "feead078-2a32-4b4a-a349-84909d1937e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf672d98-2a92-4905-ac2e-55532cc6857d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2b44316-6a9c-41db-a133-b3ffc1ffde48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "023efb4c-c22a-4989-bdc5-6df83cd47d92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da152e85-c804-4443-9900-8028900249a9",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9194c8b-0327-4c88-9670-0e0f23f28351",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d968348-3e0c-43db-ae85-e52830af43c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f11d2b90-b1d3-476e-8a12-bd57606a04be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "84d51713-196c-419e-a6aa-3db108458d62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc5b2e4f-cdd6-47c9-a4a1-d46b158d4066",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de115487-2be7-460c-9354-f2aab0760422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b386e333-0869-46f3-a555-bc3a3fef8776"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de408d00-ebf2-4313-b94c-a49bc4640f54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d8be25f-2203-4ef0-9084-7e4defafb293"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f194d645-1e9f-405d-b39d-88d47db0085d",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c101f31-c75e-4d49-bbd9-067c635bd944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abacc0ad-5855-482c-9cfa-dee5cbffb17b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62146d86-8f0c-487d-9c63-0ed6101527ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6d33f7d-5e72-40b4-817a-36faf3849b4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c226e248-356a-4073-aba6-f12f28a2c64c",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "975c672d-c8e9-4219-aa37-ad74a764c91c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1cc965a-34e8-425c-a672-a9b1f2011aaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4260a311-b8ba-4a56-afaa-d7dfc2be5944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c89202d9-8b8a-4dd7-9f6b-6625602a397c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4907aaf5-bdb5-4bc2-93fe-b395ac487e21",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b3438a5-6cbd-4dd5-8fc4-2dfa9285b377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "474008f6-1a8d-41f9-9675-c4e4fcd0bdab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d953669c-7e3d-436a-b2d8-1469f3aaecb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bbe54858-ea71-4ae0-93e6-ada07b544cfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f62343f-7c80-45d2-be34-9e90bd97911c",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "994baba0-e36a-456b-b388-97e06b47c919",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "725d7c46-1c44-4aba-b9b6-ed9bc6dfc998"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16cf2204-8c1e-4f27-825d-d9d9dcc05b65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "00e5b3b0-55c7-4af0-a0bf-225514218c73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3339d56d-7485-4827-9963-741d41e759c3",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8a8bed5-f116-4dea-901d-f2bf4f01d792",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ac70f92-4865-4e34-b2e1-1414f007bdf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d8a4907-de70-4660-b11c-ac79dcdf5f5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "db13e8f1-58f1-48d5-931c-ff8cc4c79fb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f6df471-a913-4231-b78f-b2fca7b9f2f4",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31f229e5-a0b3-486f-900b-2333a608c92f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aef5d3c2-8a30-4730-8986-d1e90962dd90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d28edfa-a35b-4d10-898c-52cba87b9dbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b867f27e-f0db-4503-9f5d-92613f513e36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b580b14-a313-4bf0-961c-c4a4ed77fa44",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a7d9ee8-1f5d-4c73-9095-8a580f92ce13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e571f7a0-dad2-43c4-9cb4-5a3fcd4b75a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37b6aa9e-b774-4d18-bb03-38bbac8565a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf914bfe-698c-462d-b284-3ff93b5e26ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fd6d02f-d1a3-4c03-9f78-e77a4d0fc753",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2878398-e854-4a86-9503-dab50e803d66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7437357a-418f-43db-8978-20d0a986da94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d96d99f1-9358-4893-a8c6-7900dc70908e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "94a701b6-6cd8-4af0-afd9-0474bcbb7776"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bf25f1d-135a-4b73-9435-67cd33dc4c54",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c76713e4-9ca9-4721-8909-ebd54f62c678",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebc21d67-bb34-49ed-80a8-6bf06d379044"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34f6c510-9026-47a3-a2f3-89ed5ee21d5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "971b0477-0198-41d0-b569-e867d18ef283"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a394d66-a31a-43d7-a07e-3fbc9b087068",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d172ae4-37c0-43bd-a567-9d7d7958fb12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3571196e-1ef7-4cf9-bded-9c3cfb43e89f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81973dbf-17a3-48d5-88a1-438fc5c8af4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7b57e53-d9d7-4b2a-b852-0c626be0a7b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "690c76fc-36d1-46b9-9aed-c346d224234d",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba14378a-06cb-4b82-b966-01bea63a0de6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3fc6d34-be4d-410a-97ae-9cefb643b2c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6a5b92c-12ab-4d8e-94aa-1f5c0801a14b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b1b6e8ad-4397-4c46-b84f-c7acef3f63b0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "46d281ec-b051-44f2-bc60-bda6bbc873b2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2218b68a-36e6-4e6f-bc12-cd25fb84e740",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adc44ccd-3c11-46d7-be43-f514c453eb47",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "9602d13c-d07b-4aa4-a76a-0c7142c41f31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11e8a841-52fa-4a34-9233-4f1aed1e20e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c1640c55-d14f-411a-a668-28271e875812"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5184d6e2-d938-4374-9fe9-86963baa350b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e2c81a1f-eef5-4e57-a6c4-5a58ee5322a7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "619fcc47-c50d-43df-b08e-81e38c0c922c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9cafa417-5f93-44d1-8b8c-a09daa8cea00"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "be2c7926-2855-4b09-9e59-1c06b791126a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4a365bd6-7dfd-4dfc-8ee1-75fd247ddb8e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e6edc76c-9db7-4a29-a1a3-b9fa4e8d1bf1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "eaac08d1-b538-47d8-9dbc-ce5329d3a39d"
            }
          }
        ]
      },
      {
        "id": "8441a731-4d4a-40af-a926-8323da48b653",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "c72e6013-beac-40ff-b8a1-0b6c428d11be",
            "name": "Negative Testing",
            "item": [
              {
                "id": "50736545-ae3e-4460-b448-adfbd0caac00",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "abff44a5-1a2c-4b89-ad32-1f2cef1fdc97",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfb18240-8647-4d08-abbc-17209cfa6a7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e44c5a04-b4e5-42f7-9e20-1c266befabf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8350a0ef-10d9-4fcf-9b2f-9eb5ba47b3d9",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4594d02-893d-4c26-b6dc-117988cbd636",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "186a3c32-769c-49ea-b202-58913eac2815"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40220f84-f860-419c-8e88-73d69394fbd4",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d175be92-80de-4743-abe8-07619f650abe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c8e69cc-3e92-49be-b813-e2a72b9701a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93909824-e095-4c4c-a4d2-07ad3437c868",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2a968da-faaf-49f5-9c83-b221474f8ce4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfad4e23-fb33-4918-b7de-f92c6b7679e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82b0a30f-ad06-4d76-9907-72a046474ab3",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9503a61-29d8-441c-8462-facce560f63e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6a3592d-9d2b-4953-bbc3-aff802daae0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "839c642f-5ca0-4f67-b5cb-00e93c50a5f9",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6dd2bda-26d3-4367-9750-245822d87719",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "746189bd-f941-48ad-a0fb-8daee88e3442"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95d8cdfd-e2b7-418a-b12c-83e8f6427ead",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35fc472b-2bbd-4282-b13d-9525e82caf12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e71da88-70c2-45e5-a05a-fa843686d8c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e272796-7665-4f54-8ea3-3843d90f07d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5772bddd-4e7d-477b-b36e-90bb8f6f5c48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcc262f4-60b9-42d9-9ba6-3a92276a242c",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce4056f5-ae92-4034-95c6-5afd2415c33c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17933e23-2b84-4b4e-87e3-5ad9968da3ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c50264ed-0097-4834-bcd0-06a05f305d7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c384fcf-6c1c-45e0-b44c-57d552f50415"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a54f8f61-3765-4784-bba3-961294764679",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00b84c19-6d52-429c-94dd-89fc9ad18fed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43facbae-98d1-452c-8c37-958d790fc24b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d893d12-eb4a-47d6-aedb-330eba2bb538",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb41e3b3-d382-4d66-b8e6-7e4a63785a07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "191db9af-7f6f-4c31-9c03-73c23a4d1adf",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61508128-f88f-4a9e-8f8a-e7cac79227b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3accf1d9-7bec-4d3b-9b37-15f89022cf89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dae3d561-f631-42c6-a4af-1d90dc801185",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33556d5a-3843-4641-adb7-042eb9fbaeb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "107bcb38-5875-4e83-b72c-9e84983d6d60",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc92f0a0-593b-4323-be23-fbdeb45d69de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0a6d1c4-e072-4e3d-b05f-ceff8a3bdfb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2651e4a-df12-4a06-a633-ac3e9c09136d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd8ef595-388d-4f4c-85de-9473860eb902"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cc4a705-5c5b-42a7-9a17-c0e58fee1214",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "729b9fb2-cb11-4fa0-9404-dabed6a6032a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6d7d660-61c3-4bdc-bd66-4956e5ee50aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8efbe21b-0b22-4f4f-b008-a9777b643ed6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df398202-5ea4-4161-a0d8-f815f641b429"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dfe1cc2-8773-43af-82a3-67480e093d2c",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "606e9c94-5d33-41df-8f9f-4946566cdef1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f57f3a46-0bf2-4383-aeb1-1637b44d05f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "941b8b61-6ef0-4263-8199-7c475c4c05b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b30baf06-427c-48c2-be5d-e8de24098a10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61ad59ee-52e3-4c1d-8156-46cda279b04a",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a65dea09-903a-4759-8a0b-85acad1a025d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0024bb5c-00cd-4cca-8e09-fdc3d5ee8563"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed9bd923-440a-45a1-b953-4f13e1a9958d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec3ef4c3-9955-4a6e-9779-63808e822214"
                        }
                      }
                    ]
                  },
                  {
                    "id": "003322e4-e58e-4532-9ce0-f8974de945d5",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11ac0286-2f2d-4e1c-9951-442538924cf8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5af7810-617a-4361-937e-39fed23037ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4e31351-99fa-4070-9bc3-4fb3d574b369",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6e72f75-b045-42b4-a033-bc3560f7f9f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68e989d8-16d9-4b2b-8266-a1c274a369f9",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8eefcca-154f-42c9-bd45-2cb77330cc02",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e49d099-b527-48ee-aa55-d1a2c4c843a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7f9eb64-02f6-434c-9a26-01870a083d2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "552ce60e-d06d-40e5-a04b-cea8712df7f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b2b4ee9-80a8-43ad-ba12-437befc860a1",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7f754c0-1b9d-4421-b42a-c8fe8984db40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "209e5f50-45fc-4fb2-94d8-329e814367d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fead2ef1-fd8e-41cb-ac86-f9c6d994070b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27b23e80-d9e6-4da8-994b-75cfe7a2dd57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa501e74-dd62-4b35-9d76-8844331bba40",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89777bfb-26d8-42a4-a482-28cf8e2874e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0918b37-9598-4c00-a219-a25fd539b200"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "257fa9b5-342d-44f0-9728-ca23ee5b3b46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6005dd41-b1de-465b-956a-5810693cc5d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11281eb6-6220-4827-bc5c-45010f440cbe",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8d8f8b3-1547-44b1-bbe3-42fe117e5e1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfea5cd5-0a48-4d3d-ae4d-1b7b8ce6d1c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0b4555e-ec0c-4b58-9dcc-1ba960d338dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "151b541c-9bcc-460b-b37c-b901ec03fd3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "befaecb4-4287-4505-b0e3-59725d2bd5ca",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e0da5f0-16a6-44c7-bd51-594f41f5c8a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b53d16a-d54d-4057-887b-ae1dc57e4431"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f30fa4d0-8363-4ba4-aa96-04abdd24b721",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ea2b08f-188e-4bf1-9770-e011355c0e5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e86a8d7-6052-4d46-a1d9-136efc71b68e",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f35949a-c499-4cf6-be57-66f56db1a0d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "262a5ef3-bc56-4a10-a454-9456df7e9630"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "348156b9-f5f8-41ee-8aad-fd4693459c8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "835a433f-2282-4e84-8944-085303c488c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94a1ef88-6acc-499a-9c83-5a3a92fdd76d",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4057ff6a-c7d0-470b-a775-128aeeacbb37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d63671a-77f4-49e5-ac09-b0a8d647f942"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfd73aeb-58fe-4109-b5c0-4ca358103a9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1da00ad8-deae-458a-92fd-b721c5fd68b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcc616c3-0eb9-4c44-99ad-bad2846361a1",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31aa91a4-4b9e-40b2-9d5b-3a944dba2bd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cccf6544-3277-4576-b6db-1d2d2e3cc8b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce6b5403-64f8-4806-bdbe-fc84d152a0f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bebfc40e-8bec-4ee6-a91b-6ba84ad8918a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fe31102-0b22-4757-9850-5d2d18798483",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21a9b61a-3189-4638-88ec-9ae91cebc1c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb3e8c86-3cbb-4230-a897-aebdb000bb64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8bd20cc-06db-4dd6-863c-016b71c619cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26c165e5-0dbe-41aa-976d-c36997f1a184"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ac0bbba-18dd-430c-aea8-ee60e8df05be",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "153c88d1-c1a0-4dbf-a4ef-f7d6bc39afe6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7aa6de9a-290a-410f-a97e-043bdc88b193"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae10ae52-1ac7-4017-8f89-b21dd666caa6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41de5f7d-32a5-4f3b-bfe1-80ce1c42ed3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07eb13ca-00cc-4a2e-8e17-717ef692a4be",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa2f3e25-97f6-4666-b2a1-c06c1acfe717",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb3766b0-874e-404f-8a18-2592090278a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5929d4f2-1d9f-4458-bb6f-8a0cea25f87d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "328f56f8-3b65-40f7-8187-f3fbd38809ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c8f78b8-57eb-4ffb-a803-e171500ce6e0",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0af4bb64-eb3c-4857-8a1a-018576a78807",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "907b9c6a-dda1-4d2d-8ea4-c306de264cd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bab0d52-9160-49c3-82dd-5b3c796219cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e003ab40-d014-455e-bb6e-c390e3831a79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9efaa37b-0208-4b36-b64b-fb8805226b3e",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1dda86b-bc4c-415c-8ec9-d57181722bd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60b49b92-b94d-43b2-8e2e-bfba636048a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "919773e9-152b-44c1-849c-3675d246fed2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf51a926-035f-4337-a5e2-23cb3cf19278"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e02cd73-361b-4773-84b9-00c9c830d517",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f61c605-53ce-49a8-b78b-47f58b523516",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87cca442-14d1-490b-8128-035ba5e77864"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5af6a6c8-d243-40be-9d37-e39d595fca53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e537af0-fd0d-4270-bda7-51226a459531"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb100c88-b922-48bf-a633-495d3b9e0aa0",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ffa0f4f-fe0a-4cd8-b4a0-84560af03e23",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ea76f07-f5ff-44b5-996c-88ffbf47cbe3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b850942b-57af-4bc7-92cb-b8dbfdd53a1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff1c2288-e54f-4793-b381-02ca3a78c851"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0320da1b-96b8-4f12-b9b1-48a7fcbeef90",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2901031c-e5f9-4a98-806f-b16b53d5f8f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b34c95a2-79a5-40b7-9a4f-44ea1c2f144f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7754aa9d-3d45-4da1-aa5b-a21c1a00c3d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94bff9ac-b3bd-457c-b4fc-2fa4b767d7db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adc1a151-3e29-49c8-a21c-485b1af543ab",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "155e8e72-2bd5-441a-b7d1-960304ac32d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9b7ab03-626f-4aaf-ad23-743765a1b693"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "885e5e2e-ae9d-4b84-97fb-ae646ad0dfcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32c736f4-fef3-4a79-9837-261e8403910d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "616dc119-89d6-47b3-b030-ed72c26321a1",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beb98b58-5cab-437e-8533-3afb291ccd47",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33332908-b75e-41d4-a096-31e9040cc665"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96ff743b-d92f-4c64-a048-1f69f7632ae5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "743d1fe7-25a2-4178-9a4b-fce9a5bd968d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f246c895-31cd-4ffe-8fd9-3a497817d2cb",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "571f602b-bbf6-4ee6-abbc-b3f418209cdc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6155c428-e69f-4d90-a76e-c86b5c0c37e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e668279-dd91-4c1a-85e6-7833648ca130",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "880c5a0b-6d7b-4a37-951e-5c1213b98ed3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "535dd70f-d168-48f8-9b18-d05a82acd040",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea973497-8b47-45f8-beea-9eb99ef774cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcd51076-5d99-41b7-802e-844aa2b4c597"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d434a23-4016-451b-a150-04f914e0260a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09e08965-6681-4a2e-83ad-2cd807a9d88c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27e55c6b-d8e0-4392-b162-3f2d6f1b801b",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41d24931-4403-4e3e-a7a1-73b31969c9a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da6617f8-fce1-447a-b90e-d26e44947db0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba956a34-279d-44d8-b662-e8f76547c07c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac005251-c796-443d-9b94-806ee6fc664a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d992649-5256-4ce8-9d95-f9bb5f2f9fc5",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6efeb6c4-1583-4248-8a6d-bd795b11fd9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6794f60-09c3-487a-9a2d-ea4aeaa15797"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01328963-576c-4355-a578-f12ac3bd90b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b85335c-9d02-48d6-8a07-c63a545fb8f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fbd014b-8605-45e1-9014-5df736da3a54",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e77ee07b-30ba-4794-8693-41b681f95574",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7906770-faa0-4a3c-8951-2ac8d0a64ef5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c319f497-02f0-425b-b3b9-8684867a63e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4288d98-31ec-4b2f-a017-73d3f53233ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "036cf17a-a400-4f16-a164-feba89cccace",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42f47e0b-d15e-4af4-8a86-c565e4ecd5f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb12911b-998f-4626-84b4-664a89a5031a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b6ba0ec-6941-4aa7-802d-61e3ec35f489",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8572c187-c737-4d91-9c76-f2fb05b120a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bc19886-b87e-44ed-815d-a59a4c836f78",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f64055a-e2a3-4e75-a79e-baf345d3e524",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32361a81-5665-4c9d-a384-ec08b8974ffb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30037c40-c640-4ab4-ac7c-9c810f535044",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e99ad56-f347-4916-a329-b91c0aba73aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b7e3e5d-ce72-4492-b359-17f0c1350dcd",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c2de9f0-3c72-4356-b942-9269ee9161ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e458e86-642d-4a95-879d-e8137ea395b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba0ccacd-b032-4ad9-896b-d855aa41e854",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bf6baa1-5a9f-4a2f-9a65-2ab2cdba2109"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d48b0b1-39ba-4aa6-952e-dee267978e79",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b674a7ae-0dbd-4f88-9533-d0f3a2065a78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c29cb38-741e-41ea-9828-d5684f1dd6ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b44d9978-3e87-4277-a46f-0583b0420658",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98acf826-ec66-4837-95a2-12827d4d463a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49c027d3-3eb7-4261-b707-f4260c262dd4",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5b9adda-9986-46eb-bd0f-4723fd699cab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0fb710a-df45-47cf-93a6-ff8779d84be1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e2aa8a6-2e3d-4512-a84b-ba561e66be7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45ae0b2f-3f0e-45fa-803d-5c9c00797d57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed06b2d1-9832-4916-9338-f4a8c5dc3627",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5b6ca68-d40a-4454-a3df-8d0479eae71f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c34d4ae8-0bfa-4b93-9a5c-8f26093af2e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea356ede-e47e-4430-9024-a01a35aa287e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19e9f00a-a083-45b8-9fe3-0aa45d3d1c30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed371e23-7708-4613-b2df-52bfaf460efd",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "019dd943-1c64-4741-b5d3-bfa2711b81ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbcb7c1c-569d-41a3-a62a-bd9641f47b42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49b49d76-6c41-4cbe-b066-5c49b6d36c8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6dfd6af-942c-4c43-9d62-5b381b51bd86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b47c5118-c7d1-4221-b086-25a3b2e46254",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3208d47b-7cb7-475a-9700-e26b26a901a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa1536b5-619c-4395-81fc-14d5f7719dc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cd5bf38-f1b2-4f05-af79-0f0c2563eee4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3275e0ce-f023-4e6d-afa2-d98ed0fef5a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54721196-8871-40c4-a046-1d4301c0b41e",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9f2eb85-977e-47b5-a357-d14ce9b61438",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7ba4d90-d03b-455b-8539-55a4b04600b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1748070-3ca2-4c44-adc7-c5d809cd354c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca698efd-f1dc-4f0a-a10f-d7ae083d844c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cef6bae8-0978-4049-ad58-9ea816c81671",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83208e0d-551a-46b8-91bb-64fbf4021546",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a5a5d76-2102-4a94-b026-bd5fdd6fce9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc3eef53-42db-4917-8fb8-30bbcce8c5aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6230426-d5a3-4af7-bbdc-2365c220fc95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cbfefde-7f4f-426a-91bf-524401d6ecc0",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7c7fb70-35b6-4f37-92e6-272840db81d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34a1e11d-91bf-43e6-a508-219baca02cd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0979f15a-1d13-466e-9ecd-9b16430c9429",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cce8aa5-3732-4d22-a507-c3b9cc54542d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa0f64f9-e7a9-44f7-a3f9-e7a503bc57a1",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33c89834-e113-4fcc-8080-861780ba3859",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "341ee5d7-aacd-4116-96a0-e98e3c013460"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4130c1cc-b9c1-4577-b55a-73a174f3aeaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "700b2fef-3816-4b14-bbb4-00bfddeaedfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3a2e30a-6a84-4a65-b89d-9d578074562b",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91643e99-fd6c-4b8d-a120-4bfa28261b1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77e861aa-2b98-4586-b14e-e22cfc3b7c15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13cd1d4c-9da7-4f08-9053-90996ad5b422",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29556c0e-b161-4704-866c-551cacc62676"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4165722-3614-4b93-9723-f75c9534be62",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4d59bf3-3917-4084-8ef1-f07e5f2ae44d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c3abb88-6087-431e-9deb-b7209920cb33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c1d9f7d-e13d-4856-974d-9453f3d70211",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c22c64e1-ba26-4290-8ec3-4354c795bc55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b79992a-9eaf-4699-8cc2-7219c87aa9c0",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2d60d90-7a93-4da6-b1c8-cf3e3e274937",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "966b3986-66f9-4405-bf85-37ac29839d49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e905a58f-d29e-4c16-a6ba-bd8690593bb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e20cba8-d2b8-4f1e-9c48-826be9a118ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b84c1b6-0309-4b1a-9cae-6c3faa899f3c",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c29b78d9-ade3-4e42-9b09-da90ab1fbe36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f12b9301-a198-4b38-8ccd-f7d70f68a721"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ac9ea38-d627-4cba-a9d6-528af81cdd10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83d598a9-8e27-44be-bc61-36d2d94477ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e64cc78a-d66c-4f0e-b97e-c7ca8ba20718",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac7b6787-148e-4d1f-bd10-203ef14cd75f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edd5e54c-d49c-4724-b034-69e949933772"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cbc3f25-bbc5-4962-b20c-59332c6f49ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f499923-5c0e-4358-a6f3-531bf77bc7cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d72528ab-7b44-4887-93e6-e8be8b972b73",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1e08426-666d-488e-8aad-cba89b03870e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fd1137f-86d5-4f2f-ab87-ae6b22778f78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d40644b-554e-45bd-bb6c-b8d6b028196b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "338896b8-1af8-4033-8ddf-e58a377f1ffe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1eae35c-945e-4c31-b419-761aef267a2c",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc605619-0c0f-4e49-a827-944b42a94c79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a40d350-a02b-454a-9c07-8dcc6cc5a198"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4ca3e13-e0c0-4fbd-b8b2-3c8788513ed0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc7c4da4-59fa-405e-8313-e32fc6551525"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b56c43d-281d-4f7a-9f1b-81c9da420e47",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82273107-15f9-4f83-a60d-650750cda9cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eddce497-2882-4746-9635-e64692129394"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aef14c41-c44e-4213-bb4d-9378717b5798",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9733b4a8-3f1e-46d7-88cd-32b07652942d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13674269-1a40-450a-a1c4-9064647a7cba",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6814a652-98a6-4caa-9666-3974356ca303",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "170df6b1-c26c-4b4a-95e4-7d5082b0846d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3a9f6f2-9959-4788-9599-553c9cd1c9cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4d875eb-24fd-412a-9195-61cac4f5b9a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e798f519-b87f-4b66-87e6-c3a5eb4a7f00",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf075993-d1b1-4d48-8d4c-9c291eeba345",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eed98f2f-b531-4715-bab1-3db224ca8632"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0148e395-3046-422f-80ca-98685c140772",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "077e0ae1-bd64-4886-b837-115b5621f1e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f7493c4-ae20-4ff3-975f-fe24a716555f",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aed6d358-331d-4cfa-bf83-f1c82e8827c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49905a8a-b593-47d1-adf3-10a93a3875e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e7a91aa-c648-4459-a494-702c88a29e00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4648ef17-7caf-41aa-b358-04e8757e9ae2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11ba0980-0cb1-4736-8c59-9828c41afd66",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bc9d109-5f81-4ee4-9c07-28f253c511f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8136264f-c6c9-48c3-8006-aae02347d5fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76c0dd85-6077-4313-b860-702d79d09fc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bb4c727-35a7-463d-ae8a-150ac1da313b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caa854ed-2bf9-4b34-a43f-ef10c2fd3dba",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5fc9f2c-1eaf-4c65-8cac-978e21b2cf45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46a83b3e-c776-4754-9d3f-b05e66521b24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae26ab77-a990-4784-8b6d-6192b2a3d560",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06a8d8d8-231d-40f8-95b0-def6e872d5af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6331f6bf-ea83-42d8-9922-27212e975cde",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c26b883-d335-400a-8321-63cc1499b204",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44a9b4d0-12b6-4e1b-9b47-56aadb62411c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97fb69f4-6e1e-4197-a10b-86f0eac6843d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e0e015b-abde-4b24-b1ef-029968889fca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a05ff43-394f-4f9f-b4e6-9c34e7a0fb3b",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55d4deb6-b3ed-4991-8407-64744d60a999",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48fc14ac-cbe5-41ff-a809-32aa1de89bc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56bd3fd0-2b13-4fec-be6c-6473a93e71f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ca8727d-77ff-4045-a9df-932a8f29cbd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80ae6df9-0ae3-4d3c-9368-ce25219615ee",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c197ab90-bcdd-419c-8dd6-b839209355e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47ebb57c-ddbf-4181-b799-884fc0121375"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e7facdd-5465-48f0-b659-3cc938f68903",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ead97ab8-6d57-44a1-aa08-ad5e27da09ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "798a26fa-2f68-4208-9c72-371264263dfb",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3c8312d-83ec-44b4-91db-1ee152dad3dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b79da6d0-a2e7-4e7f-b9c3-76c409fbac39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c83a71f-f63c-464f-9d95-806d387763cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7d39fb6-0ffc-425f-9900-bd3f2ef620db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6905e194-0107-48e6-8a9e-c91321440bfe",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee1d308d-f11c-4952-9608-a525484a5083",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52e5832e-6059-41c4-b979-f46246cab514"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04b3c9e2-87d2-4149-8570-d65cfb2e66ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9adee258-8a65-47f6-a207-926b5cfc9828"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24052ff5-9915-4718-9e97-20f071a7be62",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2e41e1d-f455-4943-903e-f0ef505a943f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc19c506-b215-4819-b34a-8acaff80931a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a4da69d-225e-4c7f-8d9f-f7a8cd01b6dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65d33e01-8daa-42d4-8f6c-362cc7b4aef7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d76df08-4bdb-45ac-bd1c-b8cecf73c694",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7711541b-b2dc-4d39-915e-513d3a2f60c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00aba004-9c8e-4aa1-a267-399dde1379f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82fd1957-e53a-4d43-8aba-09755bebd2fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5630062d-d28d-441d-892f-039af48c5d45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30cd210c-2b60-429f-bdfc-f14427bdd974",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a0bde02-cee1-45d9-9a47-6d93f0382d74",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7638cb43-4fc0-4b7f-b236-9327057bb67f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef090a3a-d9dd-48a9-8a57-0eaf0b16bf3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3e9867c-b326-4c50-9d03-2dd807c4d20d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f17960b-b1f6-4401-949b-b3a661d52e2a",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aad56a0-2915-4dc4-9414-f5e826580842",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85f1f3bd-d308-4225-b16d-31d0e33ea92b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c7aa1f3-f494-4034-b975-7555c182f623",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dc768ce-f55c-488a-92ce-6a970f84c88e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "029a1645-9ce1-4f38-b4c9-951a7eb2d7f8",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba39bc8e-f7ac-4960-86ba-75c228ec2192",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0e9139d-b0c8-4607-9b1b-040ece895241"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7460d225-620a-49f0-a513-b633899e7d54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f924a309-cacf-4291-814f-8f4d8ab50b03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4be2412a-05da-478f-9e10-f2990c6f73ad",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc6cf2a8-d09d-46fd-acec-7b0e6aa14061",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "556473a4-1d5e-4c4e-b948-d33b71bd4a0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c695851b-93bc-4374-bf24-1ea0d9e4e347",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fcda5f3-9d92-4d2b-a4f2-4248dc3aef8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "069928be-6067-46d5-a894-09a62189ffc0",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ed54fa4-fd98-41f3-9bc5-961a702b145e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49e6ed9f-eb0b-40b6-8128-654b5cb8c7da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1561153c-abae-4d6b-8151-1b53f1336fe3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5162dc9a-4c5f-431f-967e-2d55c65de945"
                        }
                      }
                    ]
                  },
                  {
                    "id": "802ebb57-0abf-487c-a92b-de67fc23f2d8",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a98d4458-944c-4245-a6cf-67c6e0584c85",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da010013-0e68-461b-aac2-0008ac724094"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c3e62ec-35d3-43fe-b858-f0c4391f89d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a523a3c-8a73-45bc-8311-1f2b42122c4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8c480b3-1a8e-4bcf-8d8d-114a77697ec2",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d4d2178-f04a-4526-be57-0e01757df645",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8621e8d0-d407-4d4a-bb06-b55a27f5e998"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1be16e87-7d28-4b46-b5fe-62a2dad22911",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b21a499-834f-4ce2-bdb2-7812aac8884c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bee97d7c-f3b8-4388-9c8c-9d8513ee80dc",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e4e5280-461c-4152-af0e-a4017f949414",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "958022d8-11f3-4f63-b39a-a98a26cdadcf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3f831ea-f1f8-4a8c-b072-57fa41943df4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d305b2c2-a55f-491b-bd22-6dde2e1f544f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2fbe498-3d9d-4586-a40a-21659978f8f5",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0202cb1-7b9e-47d9-9a59-153e66700559",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68ed2d6f-aca8-4cc0-8ae4-c52e1fed23a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "276bfd20-f33f-4ff2-a1d1-649fd6ecc3f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4fee058-2092-4322-8cb7-3181395c66eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a751a630-cca3-44ce-8130-1be994e33e5b",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa4ba0d5-744c-4b2b-8893-32863a6d2fc3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "389b649a-0861-4cbf-82cc-4c2bd71d20ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "718cb192-66cf-4f95-a7c2-49a5f60d6c7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37d209ce-3885-4eec-a3cf-11d290e04fb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e4a1292-60a2-4a92-8f47-7346f486ea55",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f49b5b8-5078-497b-86f1-2162d663ed57",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4c323cf-256b-48d3-8cad-286b3f409c38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "776775f9-9be5-4d44-aba8-b4a9cf2200d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2834af5-59b7-43e3-bb75-0c48b5a8f6c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfd9f907-fc13-4a5c-819b-0dd51c16e288",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "468cb837-0115-4ac4-a004-b4c5a03f143f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "efe6ab4c-e21a-445f-b76e-426cc0fe0ec1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a41d616-0f21-4515-9c1e-e7eead901991",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2be58ba5-aabe-4ed6-8a5d-2ca36c2fedf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e41aa67b-d9d0-40b8-a3c6-d4b348f63175",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0a3f76c-458c-409b-bdb7-743c959dfdcd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01551921-b941-4d73-b61e-b28e73ba98f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c44c63c-cb68-4959-939f-313e2481a9b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c43326b-a7f7-4eaa-99cc-93ba70b679de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "744831c6-b0c6-428e-b20b-786fc2e1c90e",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8517827c-9a6d-44b0-9e2c-d1a11e4181b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c4b7006-21eb-4553-9d49-b7d342535439"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eacde6d-1069-4463-90eb-5dadae07c6f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c083fa0-fc0f-44ed-a3cb-93e7883cc76b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf831de1-a8ed-4775-913c-f031bcc71f67",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbb4fc9a-0574-45d0-984b-7fc8a25ac212",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aefefb2e-3d24-4a52-83b4-1d671218ea49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d66d3f1-03b8-4a84-a834-f1a0e5138791",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf1a6622-36d3-415b-a6fa-b64bb40531df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be806cf7-229b-4442-9a4f-bfc6c2ab8440",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdd5e23a-3e78-4126-9735-3ab7d8b0dafb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b984162-8265-4f45-ab39-3f54628316de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70b0df10-dde4-4a37-96ed-7712e6e9e296",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05ad6da6-240f-4947-8b3a-0c940fdd1d6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4aaca31-a49e-4d75-a7c0-fc0ffcb54f99",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62248270-2404-4c57-9dcb-2abc0fe430f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3fa63002-dc42-4c9e-b771-ffd7d74156cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6de15b5a-7641-4c36-ad70-078a210e759a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38d1816a-6a03-4070-8725-ca42ea32b245"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5753d24-fccb-45fc-b028-06780acf25b9",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10ff3b52-da3b-4b40-a47b-26c2d31d6761",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e7799b2-1339-4d02-82d0-2a8e44614b38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3b87b2d-1518-4f29-9308-bf3d57e09055",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7af65f62-90f6-495f-a06d-ff62ef79ebf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01014157-681b-4ee6-82f0-3647a66223b3",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed953c47-8873-4fa1-bab8-f3e4408382cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "676363bf-f997-41f5-8f21-b15396989533"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2c96861-1f2a-4009-9c83-0001c4dd43d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6be79f8b-a75f-4675-b5f2-22bca2b75ec2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94f1061f-f260-4f22-a6ba-a842e451ae28",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1b3ca9f-da00-4517-a71a-ec943ebf940e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a77fd69a-e41c-4cc3-92bf-c8a12888c14a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3ef21d5-a9ef-49e1-85e6-19a8bf2bbf78",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "324a849a-3e6c-4650-a5e5-b1b201186845"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de5e07b1-caba-44cb-b2f0-77e2e86f1a7f",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c072152d-8cc5-437f-bf00-319ec5b1e2d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dacef70c-13cb-4db9-a238-890a2f4b06d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "481027f8-aa42-408f-98e5-19a259499c04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15cd57bc-3afa-4c11-897a-b4f371cf62a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40a35cab-4103-4d47-b241-1a96e00ac3f5",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "563424db-1876-4368-bdff-d2276b5a9d22",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc24bd8d-cf55-4a1d-b401-42c7d83de330"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b83e4017-6919-4a2a-8715-38ba0e6b6f0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58a0f53f-5d37-4331-9de5-1d475d831dd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "079c4ace-c472-4ca5-98e0-8808b159405d",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "363539ee-33ce-49bf-9a59-94e947145a67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "590b8b03-a04d-4356-9b94-ff26ae5465fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f107c3f-7b0e-4ed6-a970-d150e39910e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf241f29-a3c9-44d5-a69c-83644ae17d4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6db1824c-c8c0-45dd-9a82-0b1ff78eeb01",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb1a05f2-f611-4e95-abff-b64c5c1f61dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a897537b-e827-480c-a946-2d427b729ced"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6287d605-96b2-4608-a414-30ed474df847",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cded42a-419f-470a-8666-ca2f577c65d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b4b1b96-ce33-47bc-bf5e-5b837337e515",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa4c49d5-af9a-4547-ab5b-3ce4e7d89e8f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7a4d151-de4d-4027-b9c8-ce0728e12493"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "845805b3-6d9b-4a63-94e6-8049fe4f5492",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f37dd120-4276-4901-a537-7ca483b480be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "529a028e-d88d-484a-8d51-3398ff9c50b8",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed740809-94d2-40e9-afc5-5f969ad3c043",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2fde5b36-e25a-4ec5-b419-424b5d86f119"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bdae9e4-5341-460f-b6ee-bed0d2f49140",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "935ae356-0178-4b49-b5de-0b37425c8714"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a471070f-98a0-4b76-b6f4-912859619a4b",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "756f6a71-ce67-4743-a6b1-72bec55d0093",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1cde3541-97aa-4462-974b-07b5c273da29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58105938-4ae2-45e7-af8b-e6fbdeaa108d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b07abb5b-dc20-449b-a316-c86545e96be3"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bf8d2e76-aaae-4f27-b63f-c02a5b3ff260",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9d11c169-2351-44b2-b158-714f824ec986"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f75529c6-7e98-4ccd-b778-bd6b38d93f5f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "215c410f-a529-49fc-bc5f-4e90747525a8"
                    }
                  }
                ]
              },
              {
                "id": "0e33ccc2-9770-46f3-8f35-e5005f45a20c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0f0fbeff-e790-4f7e-94a6-60bedcd99302",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42e9387d-d76f-4549-917c-9a2b907b0c74",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "185861fa-661f-4f0f-8f56-3e7cb6e78490"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ab8595b-0166-48b4-8ed5-d43b674bfb37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8d7d7100-3752-4dec-9d61-683f31f0964b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0094398f-5379-433e-8a8f-9a873c0dbaa9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d48da5e9-ee0f-4684-af2c-4ed69a87946f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "185eab3b-788b-4796-af9d-352552e758c5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fa3469c5-79cb-4b7a-85de-5955d33aa1e1"
                    }
                  }
                ]
              },
              {
                "id": "9a01fbd0-7a6c-41c8-b81f-9195dfb87a86",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "b94e14bf-3922-4e29-9c8b-4f720eee20bf",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3605eb0-e942-45bf-b18b-99a48d6cdbf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "85bf2889-83ce-4819-8af0-1b21f82ad223"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c8ae8db-dbb2-4a2c-98f1-a923a0bdbcfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd4ca224-4076-4ffb-93cc-1511935fd9b9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "a9ebaf80-037e-467d-922c-2f84801ae50e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "540a112e-0fbc-4b9e-a7b6-a4c7299a6c7e",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e3448c9b-9980-4a7f-bcba-20782f706778",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "e4aea41b-f163-49d0-83fc-5abd5e20c289"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9c0aeb11-7d26-46e7-8497-dd4d10ec691b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e1470bbd-46ce-4f36-98f4-3be5702922f4"
                    }
                  }
                ]
              },
              {
                "id": "c857896b-4434-4552-9b6e-209f49fab351",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a87da10c-437f-44aa-9a2b-b102f635e989",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "3507da25-349e-45e0-b9d2-f5c2b2e8456f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eaf94d96-688b-4db3-a7f3-c6c86f6f2462",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4279d2fc-9846-4945-aa11-6c74e4999537"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cde783b7-7c86-4dbe-9bc9-7fb9e15b096d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "67264462-910d-489d-bb9c-e196ac883c69"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fa0d862f-d52f-400c-b4aa-a616a1bd323e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cb046a17-518a-4367-837f-e74aba9b0980"
            }
          }
        ]
      },
      {
        "id": "3394a401-1121-42cb-a37c-cc38e3c7f52e",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "fbb5c68b-b10c-4908-a605-727409ccd113",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4c3e24d1-df43-4596-96df-6fbefafaa142",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4361f532-47af-4d89-b8e8-69526c33c1b0",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cab5851-a10d-4f03-8cd5-ca29cc60f584",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "32b54f97-2a76-4af1-85e7-dad4cbe41f90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3a37b93-46e7-4e61-b01a-fbfc463f8316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8f78e193-846a-4f94-b93e-740700d84223"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5a2a5583-fbb8-40a8-9a85-7604ec266c69",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2a272296-f6f7-42ba-99fb-62a682b086ec"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cafd6427-8144-4a29-bc1b-744d76049614",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "63cfcd1a-a77c-4114-8439-05717e92f96a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c12ac31d-4d8b-4100-a252-b8d4122204c9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "5060dd76-1f59-4b6b-aef2-9acfd10bf195"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c8366502-fa72-4c1e-beed-ea6e476b1720",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "47787ee2-0d7f-4514-9d1a-75772191a707"
            }
          }
        ]
      },
      {
        "id": "90faed1d-7509-4743-888d-312686c4de3b",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "2c449b36-4efc-4303-9dfe-639e291bd936",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1203c5a1-5611-4c5d-9bde-ea5b99c6b382",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "629cdb0e-7493-442f-b37f-beb2c40428bc",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac8d6410-2ce8-4747-bca7-2736a9eeb226",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f0b1e4ec-29a9-4b6f-a2b0-f26c1ae63eed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb0469ad-bcaf-48f4-94a1-5a8041953080",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3332515c-ad0a-4d0f-b55b-b697b872707d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a9be718f-78cb-4364-812b-b88353b33a35",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "50652a1c-349e-486d-92b8-4bfce190bd98"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0ccf4607-2646-42d1-b92c-f50f23a58f48",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ae063479-6cd1-4df9-81eb-1b3bcc73813f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8c0d914c-55e8-474a-9587-628380dfd533",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "899b4850-9394-4723-9234-1f5fd61c6de7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ee5576da-32be-46d0-a740-cd5902a7b487",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2b6db515-def0-4778-a331-275b9aabea67"
            }
          }
        ]
      },
      {
        "id": "56d40732-bc08-489a-8b9c-286008389b66",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "3c6e2874-059b-4683-8753-9d06e63b84f8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "17d7d6b7-dbf9-4459-8e67-8c56366b3880",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4ac2d668-d900-46b5-831f-caa3c5703a8e",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f13e1b8b-53f9-4f5f-b094-56050ffdcdf6",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7003f908-a9de-4195-b13c-7c57564f4f6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "499a927d-102d-46d9-a52e-35dc4afd7c97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "88f6b2a8-78af-4ec0-9877-f30fdb70347d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7eeae735-0ec5-4cc7-947a-70af7816e4f3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "19e06152-9ce9-4b81-aa78-5b03c491a16d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6acc071c-a465-4699-8967-852d0624c752",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3a2e76f2-3652-430d-925a-a0ba30bd465d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5dbf3007-f3d2-4f68-b036-45a70ad6539a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "060119fa-3081-4249-ba7a-5e53aa6d7948"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1660949e-bc95-4908-8039-8f4e6af7d298",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "929b0111-2c8d-4fc5-8913-e7481f031bb1"
            }
          }
        ]
      },
      {
        "id": "993f9a13-54ce-47bf-bf97-fdec327a6f14",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2d602e5e-0660-4936-97a8-c891c18c75d7",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3505edd2-cd54-4b9b-a69d-6a77cab563a9",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "f6d95fb4-79e2-4615-a740-5c252ecab631",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1c213be6-4e8a-4c13-b48a-9e3c25d27dd0",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "63a92b90-95eb-4044-aaa5-72a91fe8e8d3",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 571,
        "pending": 0,
        "failed": 324
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 65.43661971830987,
      "responseMin": 15,
      "responseMax": 1543,
      "responseSd": 91.03671019241749,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1688604581393,
      "completed": 1688604612247
    },
    "executions": [
      {
        "id": "2cd4fca9-7c63-4a5b-884f-d4a07c90d297",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "c04e35bc-36bd-459a-bbeb-571fe360bb2c",
          "httpRequestId": "c7055f39-886b-4b19-8bbc-f7720d2f495f"
        },
        "item": {
          "id": "2cd4fca9-7c63-4a5b-884f-d4a07c90d297",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "06416663-9217-4f32-9b4c-ef9ebef748cf",
          "status": "OK",
          "code": 200,
          "responseTime": 98,
          "responseSize": 0
        }
      },
      {
        "id": "9e916bf4-fa67-4b20-82f2-3ecd5e9ee0c2",
        "cursor": {
          "ref": "6e7f3ef0-4d24-40ae-a94f-fc6de21cfc75",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "1b1d6f1e-811f-43d7-a2ee-a5656579f88d"
        },
        "item": {
          "id": "9e916bf4-fa67-4b20-82f2-3ecd5e9ee0c2",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "525f6f42-3100-48b4-b3cd-6786cb7e019d",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 0
        }
      },
      {
        "id": "5bbc4690-a89d-4d92-941d-9a1f929370cc",
        "cursor": {
          "ref": "3fef2be3-fed1-4dca-b7df-18368c61d164",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "efead325-046d-4c2c-8e22-fc96412b4ab8"
        },
        "item": {
          "id": "5bbc4690-a89d-4d92-941d-9a1f929370cc",
          "name": "did_json"
        },
        "response": {
          "id": "8f089111-25ef-4351-a48f-6fe66550e7b6",
          "status": "OK",
          "code": 200,
          "responseTime": 355,
          "responseSize": 1012
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81097def-4a36-4627-af6e-d2c243c3ed1e",
        "cursor": {
          "ref": "2b310ad7-bac1-41de-89ae-f650f54fd8df",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1a4359d1-65d9-42fb-947d-e0c9780ae203"
        },
        "item": {
          "id": "81097def-4a36-4627-af6e-d2c243c3ed1e",
          "name": "did:invalid"
        },
        "response": {
          "id": "2fde217d-5b50-474e-a318-59c6adbd066d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81097def-4a36-4627-af6e-d2c243c3ed1e",
        "cursor": {
          "ref": "2b310ad7-bac1-41de-89ae-f650f54fd8df",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1a4359d1-65d9-42fb-947d-e0c9780ae203"
        },
        "item": {
          "id": "81097def-4a36-4627-af6e-d2c243c3ed1e",
          "name": "did:invalid"
        },
        "response": {
          "id": "2fde217d-5b50-474e-a318-59c6adbd066d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69e0cfa0-0378-49a2-86a1-c73921906fa2",
        "cursor": {
          "ref": "00171526-3b35-45c3-829c-371cd099c74f",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "821f8fa6-1ce7-4ab8-8693-a345d9f49d68"
        },
        "item": {
          "id": "69e0cfa0-0378-49a2-86a1-c73921906fa2",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "fdcb1dd6-58e2-48a4-a360-8c356303c83e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 113,
          "responseSize": 2
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "d3af2d63-5dec-4eca-be56-1c46e771f0c6",
        "cursor": {
          "ref": "5a58d6af-93e3-4deb-a854-2e24fe3376a1",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "cce7550f-a515-459f-9fd3-37b28918120b"
        },
        "item": {
          "id": "d3af2d63-5dec-4eca-be56-1c46e771f0c6",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "a2b0fa4b-fd1d-43c8-aeeb-38bc53bc2881",
          "status": "Not Found",
          "code": 404,
          "responseTime": 72,
          "responseSize": 2
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "24122563-4b71-4abc-92c1-af637d061f05",
        "cursor": {
          "ref": "f45be3ca-40e5-400e-816f-22e2fcfdf879",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "33b431ac-8f28-44f8-8706-32f4d2738aa0"
        },
        "item": {
          "id": "24122563-4b71-4abc-92c1-af637d061f05",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "713d274b-3887-493d-a791-d15f5c803b9d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "ff505234-ea5c-401a-8d71-4d4851fd8b6c",
        "cursor": {
          "ref": "51badfc0-ed84-4f02-b0d3-c5724c970a83",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "501451e8-d21d-4676-a1d9-dc1b841dbe9c"
        },
        "item": {
          "id": "ff505234-ea5c-401a-8d71-4d4851fd8b6c",
          "name": "identifiers"
        },
        "response": {
          "id": "bbfe3d64-6120-448b-a66a-41617dda71a5",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 1137
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.didDocument should have required property 'service'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.didDocument should have required property 'service'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "a2d0b602-6de7-45ae-88ed-b3c1e2696ee2",
        "cursor": {
          "ref": "6c7694a1-f3e6-48c4-9516-71a19b8d44db",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "e7d4eae6-0b8d-4ef3-822f-6a7cc1ceaf84"
        },
        "item": {
          "id": "a2d0b602-6de7-45ae-88ed-b3c1e2696ee2",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "9fbfa9c1-8405-459a-b510-1fa1ba5bd1ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "a0abb10d-359f-4d7e-b390-4208a1ede6a6",
        "cursor": {
          "ref": "b27dd70f-d790-4dab-833c-819d4dbd9b8c",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "febe3b44-c15e-405c-a15b-06b76c12b43a"
        },
        "item": {
          "id": "a0abb10d-359f-4d7e-b390-4208a1ede6a6",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "412c2570-7951-4fe0-bd5a-7526d62966a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 273
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "f5d727be-8868-4bd6-8b27-935220c54070",
        "cursor": {
          "ref": "c96a39db-f0d2-4d99-98e6-1f7db920fe8d",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "cf0c2c0b-d993-4281-8c31-6409ab09d956"
        },
        "item": {
          "id": "f5d727be-8868-4bd6-8b27-935220c54070",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "c3526f1c-7660-4d8c-b414-bc0688d59e0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 273
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "8715a26c-dc0b-4e18-8ae3-2069edd02916",
        "cursor": {
          "ref": "bf4008d1-5cf2-4748-8b02-7a873135d17e",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "a9e71828-3370-423f-8de7-30b428c5b3d7"
        },
        "item": {
          "id": "8715a26c-dc0b-4e18-8ae3-2069edd02916",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "423e61c2-dbd7-4a1e-acbd-15afd07f4f85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 273
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "f1a66756-0742-4f3d-9df9-854399e4df70",
        "cursor": {
          "ref": "ae2b8299-a27b-49f3-99d9-559d77a6c2aa",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "d71cd1b5-ee36-4c80-b1f2-0b14caaefc47"
        },
        "item": {
          "id": "f1a66756-0742-4f3d-9df9-854399e4df70",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "0a481da1-f71e-42e6-8d0a-0020c1401354",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 273
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "bc753019-493f-4e9d-8a9f-51701c7cba41",
        "cursor": {
          "ref": "f44fd0ac-a9e4-4f59-a516-f6c8e4630cc4",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "d996091f-4f14-4d25-a7b9-6bbc995edbbb"
        },
        "item": {
          "id": "bc753019-493f-4e9d-8a9f-51701c7cba41",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "22a5392f-658f-49c1-b7c9-a4d33159c68b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 273
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "adc10f71-6ce7-44b4-81c3-7f0c7c2b9f72",
        "cursor": {
          "ref": "6329dd0f-4f58-4e56-a214-b6d56ddd284e",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "d3ebe7d8-c14c-4646-9bdc-595de6c685b7"
        },
        "item": {
          "id": "adc10f71-6ce7-44b4-81c3-7f0c7c2b9f72",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "0ee39e61-798a-4fb9-9d14-5a4c2ed3026a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 215
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "126de650-145d-4777-a345-25341c37539a",
        "cursor": {
          "ref": "5448c262-2e5e-44a3-ad1e-c52073b9f5d8",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "c0b4300b-b814-4b09-ada2-bf1a9bdcf0ad"
        },
        "item": {
          "id": "126de650-145d-4777-a345-25341c37539a",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "571fd7ea-96d3-44de-b119-5d547b5c5091",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "1e8d0e5e-d898-4dd8-843e-24dfce44d1ad",
        "cursor": {
          "ref": "85bd4c36-05cc-4578-868e-9973b4d947c3",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "92c64578-fb02-487c-9a71-c4a50be09217"
        },
        "item": {
          "id": "1e8d0e5e-d898-4dd8-843e-24dfce44d1ad",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "b77c834b-dd30-43ad-b6c4-6d363655332d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "c38a62c6-f577-4173-bd97-8f83f2249479",
        "cursor": {
          "ref": "1c053d36-15b8-41f2-8ffb-9650400ff7b4",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "88c30131-b94b-4756-ad32-7cf37aa288ca"
        },
        "item": {
          "id": "c38a62c6-f577-4173-bd97-8f83f2249479",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "1c034a05-f479-4fdc-86c2-8f60d32853ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "2c94ae2f-ba4a-477f-9a2a-ca1824f5113f",
        "cursor": {
          "ref": "b4f92755-681e-4554-985b-ddab34b3ebbd",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "e2fe7ca8-5161-4101-bfff-1605c25e11ac"
        },
        "item": {
          "id": "2c94ae2f-ba4a-477f-9a2a-ca1824f5113f",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "f3ff6ba0-da9c-42de-aa9d-d82f48650c56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "45e861c2-3c11-4b82-a312-ab89498bc4b1",
        "cursor": {
          "ref": "60452b20-a21b-4b20-8b7d-4c5ebdd1d8a3",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "fab7a7b2-e895-4927-87d7-443fbf7c42b8"
        },
        "item": {
          "id": "45e861c2-3c11-4b82-a312-ab89498bc4b1",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "91c3f21c-35a4-408a-82fe-ba46f8916f24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "0e11ba76-7d54-41e1-8fd6-0418cb7418db",
        "cursor": {
          "ref": "8fd9deb0-451e-4c25-8045-c4daca98f2d2",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "bf6e88ea-8662-471d-adb3-9a719b8157ee"
        },
        "item": {
          "id": "0e11ba76-7d54-41e1-8fd6-0418cb7418db",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "8b5c7d1a-35af-4ddf-b22c-90188ce94e2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "84d0220f-9ef5-47a0-ad23-bbd515e2fc68",
        "cursor": {
          "ref": "c37b8739-9028-4bd1-87ee-36289208529c",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "68e1a9d4-deac-43a6-9a94-acd67deff869"
        },
        "item": {
          "id": "84d0220f-9ef5-47a0-ad23-bbd515e2fc68",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "e9df336b-8cf8-40c9-bc2e-65b343fb5cdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "49a38d85-c06a-4a69-8d15-f4ed8efff368",
        "cursor": {
          "ref": "00ecb1fe-cfe3-4ace-b59e-63f9178e35a2",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "a6a25ff8-ee69-40d6-8c59-072c5cb421b5"
        },
        "item": {
          "id": "49a38d85-c06a-4a69-8d15-f4ed8efff368",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "f76e9fb8-45dd-4c2e-8a1a-78ba78e10de8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "f9fba881-dbf2-44a4-a932-7647b0c203ea",
        "cursor": {
          "ref": "627a8a12-b29f-43ef-b9c8-bb0e0837aece",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "1248ff20-3e2d-460b-b04f-6da912bc7965"
        },
        "item": {
          "id": "f9fba881-dbf2-44a4-a932-7647b0c203ea",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "da3fffec-b8e5-4781-bec4-fbf42ffffde1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "f891e2c2-f289-4ee4-84aa-5bd1a87f83f0",
        "cursor": {
          "ref": "9d10746f-f96c-4198-9c9e-9bf37c6d42f0",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "54820c7e-6ada-4f9d-886d-6927b160dbfe"
        },
        "item": {
          "id": "f891e2c2-f289-4ee4-84aa-5bd1a87f83f0",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "523e0235-9ff4-4e58-a25d-73b3e9da29da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "32ad5076-95e3-4dc2-8d99-629fea31e4e1",
        "cursor": {
          "ref": "2cc67941-9cf9-493a-91fd-8be413322d87",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "7a210a1e-8c55-4ac1-96fb-fd1a3a9ac94c"
        },
        "item": {
          "id": "32ad5076-95e3-4dc2-8d99-629fea31e4e1",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "d8c677d7-66d7-4168-8e33-7347be44ea7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "e098fee1-84b6-46ef-becb-cbdcb2a3abdd",
        "cursor": {
          "ref": "f86dab44-2892-46bf-b1f1-343d96fde0e5",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "3e98d6bc-d3ab-4044-9d2a-f95b90e8f8fa"
        },
        "item": {
          "id": "e098fee1-84b6-46ef-becb-cbdcb2a3abdd",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "a142cc8c-eeac-47e3-b471-d9d06200f39b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "f590d951-e39d-4672-bacf-52a070c53528",
        "cursor": {
          "ref": "e12e52c2-9806-48b7-8ce8-9e1e395175aa",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "839ac99f-11e0-4ece-b44f-1542d42dae8f"
        },
        "item": {
          "id": "f590d951-e39d-4672-bacf-52a070c53528",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "7c70d052-4de0-448a-ac71-52a2cb072aa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "d2e8ccc8-e615-4959-8810-6917da4ce000",
        "cursor": {
          "ref": "22938f4d-54f9-435f-b823-a324483fb9e6",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "d467db37-b8e6-4b51-96a1-ef3d322e29d3"
        },
        "item": {
          "id": "d2e8ccc8-e615-4959-8810-6917da4ce000",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "469785e2-2e47-42b2-9836-443f1ac6ff6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "f65c844f-83f6-4d31-808d-1d5d2663d99d",
        "cursor": {
          "ref": "ef954b6d-8314-470e-9edf-8ca9d7fb1057",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "748c3c59-f74c-4d8b-a140-695ca44b5420"
        },
        "item": {
          "id": "f65c844f-83f6-4d31-808d-1d5d2663d99d",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "98a5018d-d0b6-4c7b-ae31-d30926b2f5a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "41a55ea1-abd9-47ec-b5b7-ff9c8c2450a2",
        "cursor": {
          "ref": "be5ad864-4354-4172-8470-cc98e7d0fbb0",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "bec9ade7-7406-4664-ab4a-57a3c5fc2ee7"
        },
        "item": {
          "id": "41a55ea1-abd9-47ec-b5b7-ff9c8c2450a2",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "889deb64-3f69-452b-9453-b59ffb5804d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "1ef39c42-40de-4811-a39a-27eabd69089c",
        "cursor": {
          "ref": "3a6e7e83-164d-450c-baf2-fcd8856c1d9b",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "c2e6a01e-abf4-4437-9674-8a9ac05c89a8"
        },
        "item": {
          "id": "1ef39c42-40de-4811-a39a-27eabd69089c",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "e20dd970-a610-45b7-bcae-c446f4e43d3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "d096def5-b4b0-4117-92ed-52c58a91d542",
        "cursor": {
          "ref": "cd7d98f1-2622-4db5-b7c2-f48df1cf473d",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "3c087f08-c25b-4e53-b063-f4fab0e2ed0f"
        },
        "item": {
          "id": "d096def5-b4b0-4117-92ed-52c58a91d542",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "5285a359-616a-4cec-8d30-8d4b8822e014",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "9719ee34-bbd5-45fc-8d21-3d0b27f18ef6",
        "cursor": {
          "ref": "2dfa5591-ab58-463b-a3ee-1e7d22e7e33b",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "c4298107-4711-411c-9cb0-6fd89a492cbb"
        },
        "item": {
          "id": "9719ee34-bbd5-45fc-8d21-3d0b27f18ef6",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "1634a737-9efe-45c7-bc7e-d1a5754a9036",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "f047866a-5188-4ea1-80ee-e2515092d806",
        "cursor": {
          "ref": "a0b7b02a-4d84-44d5-9b6b-022754e144bc",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "6976df5a-63e6-4a26-9410-0bea2fdc73da"
        },
        "item": {
          "id": "f047866a-5188-4ea1-80ee-e2515092d806",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "8764b375-4e25-40c3-8060-a4753a626248",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "58d2dd73-0d89-4a72-9e38-bb7369168432",
        "cursor": {
          "ref": "c2c88e08-7786-44d7-850f-9a2611a41341",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "93df7dd4-83fa-42d4-b3c7-3e337b7d9d93"
        },
        "item": {
          "id": "58d2dd73-0d89-4a72-9e38-bb7369168432",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "6c1e837f-1620-46ff-b31c-e074aff8c1e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "cdbbcd04-81c6-4522-abde-a6559361b768",
        "cursor": {
          "ref": "06feb58c-001e-4dd9-9f17-a9335d0b1d4e",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "2fbb56af-3d28-4606-afd9-0b5787776c67"
        },
        "item": {
          "id": "cdbbcd04-81c6-4522-abde-a6559361b768",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "b8e3dbbb-294d-42d4-a9a9-c520d8a9a9e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "58fd0de2-20b2-4dd1-a0df-43ee08ed376c",
        "cursor": {
          "ref": "968f47cc-3d2f-4439-8383-5876a7caea24",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "8c7776a0-fb9e-4005-bb39-6011e1ecc71e"
        },
        "item": {
          "id": "58fd0de2-20b2-4dd1-a0df-43ee08ed376c",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "f736f71a-7367-4bd6-9998-d01f44dcd502",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "a4716786-7d5e-462b-a083-a21706e6b69a",
        "cursor": {
          "ref": "137bde16-e0b4-48e0-bb07-9c09f27122c4",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "c26da47b-6469-4db2-912b-b8a3f37af3da"
        },
        "item": {
          "id": "a4716786-7d5e-462b-a083-a21706e6b69a",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "c5fd7f0e-4650-4bb1-a152-633da8780637",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "36c05de7-2fc2-49c6-ac76-73b0aa4103f5",
        "cursor": {
          "ref": "9fde061a-ff6c-411c-b9af-543c5169a89f",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "6d7695fd-6935-49c0-be82-b07550880044"
        },
        "item": {
          "id": "36c05de7-2fc2-49c6-ac76-73b0aa4103f5",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "5e23b28a-38d3-4260-bf21-c770593ca83f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "e398e9b9-a6a3-46f1-ae60-47152671cd86",
        "cursor": {
          "ref": "0a5f472b-cd16-43f2-9fe2-7607189bc9c6",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "66ad6e1a-1839-48c8-999e-26aecfbe33d9"
        },
        "item": {
          "id": "e398e9b9-a6a3-46f1-ae60-47152671cd86",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "224daf23-6da0-4e59-8fc2-e8086b585437",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "d54e6350-f91d-41f6-a3f4-381321900791",
        "cursor": {
          "ref": "3cc94df3-3c7c-47f1-baee-6d65c7973882",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "1c9299e7-1877-4737-85dc-cc41c452d2c6"
        },
        "item": {
          "id": "d54e6350-f91d-41f6-a3f4-381321900791",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "7f3325a9-2e77-4780-bda2-aa8cea885799",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "c952d7ca-b269-4259-b05b-4eeba5d2bac7",
        "cursor": {
          "ref": "e5799491-67cc-466d-919e-81f303b148e8",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "bc2de7ba-832c-4877-9a12-dc60394299ce"
        },
        "item": {
          "id": "c952d7ca-b269-4259-b05b-4eeba5d2bac7",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "00da816f-6ce9-4bfb-9cd0-640cae1ddb7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "ee687340-4635-438b-8d24-34a3bb394bd5",
        "cursor": {
          "ref": "26fc2921-51b9-4954-a475-14c0867f8d00",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "dab1a237-faf5-4294-a580-3de24e7fe5c8"
        },
        "item": {
          "id": "ee687340-4635-438b-8d24-34a3bb394bd5",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "3dcc2579-bee5-46f0-803d-63ad87298575",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "40182dd0-4f6b-4bec-a59b-0fb0edda3082",
        "cursor": {
          "ref": "68c1c925-b100-4496-a5dc-9283dc5ebe93",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "f4f31717-818e-4654-a525-a19d4661eb6d"
        },
        "item": {
          "id": "40182dd0-4f6b-4bec-a59b-0fb0edda3082",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "d6dd8643-945d-45de-9b72-207769efb095",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "4d48b27c-03b0-45f8-a24e-c38b74317591",
        "cursor": {
          "ref": "6aa8cc6d-139f-4935-8dc1-79ceabda0381",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "9dc0cb16-0217-4485-8bb5-0387aa6de7b5"
        },
        "item": {
          "id": "4d48b27c-03b0-45f8-a24e-c38b74317591",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "4aea2c80-acd5-4f83-815f-fe597837fedb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "f0ded832-9c21-471b-8720-b3da27190a3f",
        "cursor": {
          "ref": "bbb9be66-488f-49fe-ab86-74197f708ac2",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "31d7fbac-0a1f-44f8-8b49-db165a6b9e0a"
        },
        "item": {
          "id": "f0ded832-9c21-471b-8720-b3da27190a3f",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "ba4b9466-7dcc-4533-9eaf-f538906cb443",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "53c72606-8f16-41a6-badb-0058eaf07139",
        "cursor": {
          "ref": "0ad88f26-9eb3-4d5a-8656-f974a9151cc1",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "21c99983-2eae-4ee9-92f1-1bc4697786da"
        },
        "item": {
          "id": "53c72606-8f16-41a6-badb-0058eaf07139",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "fa79f61c-7a6c-4061-af59-3d8eb38990fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "ce6cacb7-0cc5-42a8-9aef-af84565e85d7",
        "cursor": {
          "ref": "e2c4658c-ef26-49df-9d9b-829d23629ce1",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "6e713c43-b64a-4f74-8e76-df8a202cee6f"
        },
        "item": {
          "id": "ce6cacb7-0cc5-42a8-9aef-af84565e85d7",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "a82a9cef-3797-4d51-b2e4-9f35ad141f9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "eaa2a4cd-4965-432b-9b50-57f1dd9d7b4f",
        "cursor": {
          "ref": "aaa91ce3-a794-4ab8-bf84-2a1f583ecd06",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "a547c9a1-71ca-4a34-b0e0-54bd8ba00696"
        },
        "item": {
          "id": "eaa2a4cd-4965-432b-9b50-57f1dd9d7b4f",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "94626e40-c87e-458f-a1bb-4b7adb410945",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "c3e835b3-3237-43fa-ab0a-b5874a656f2f",
        "cursor": {
          "ref": "2ef0e0d1-e8fc-4a3f-b04f-ede2950bf547",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "eceadc82-d469-4c08-8e99-1012ffcc88bc"
        },
        "item": {
          "id": "c3e835b3-3237-43fa-ab0a-b5874a656f2f",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "e735a532-b6b6-4b8f-9094-e1425aa6657e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "fb6f0740-96a5-4948-bbdb-f8fe40aeb4dc",
        "cursor": {
          "ref": "300b3672-30f9-47ba-8284-0929e68be867",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "8082fa20-c514-4217-90b3-1847c303b42b"
        },
        "item": {
          "id": "fb6f0740-96a5-4948-bbdb-f8fe40aeb4dc",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "58c5e39b-2b91-4d40-a172-56468535643e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "9804848e-9c21-48d5-9c86-3205fb51e8b9",
        "cursor": {
          "ref": "be0eb99e-c870-4cfc-9388-96e2a843f1ad",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "9d86f13a-ac49-46d0-91ba-64212d066817"
        },
        "item": {
          "id": "9804848e-9c21-48d5-9c86-3205fb51e8b9",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "b7f79f53-e594-436b-983f-30aef8bd0522",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "afb08cb3-2128-44e3-9c00-cd12c0b0ec09",
        "cursor": {
          "ref": "9208cbd2-4e6b-4d6d-8797-3f656cb2bbc6",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "316bbc39-1b9b-4f8a-b759-65141c2dfb93"
        },
        "item": {
          "id": "afb08cb3-2128-44e3-9c00-cd12c0b0ec09",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "2a47bbc3-9308-4ab4-b4dd-c4994ab6aff0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "fb23f393-06dc-417d-86b1-27ae838e2788",
        "cursor": {
          "ref": "a4b0aba9-5ba9-40b4-be41-833feb583176",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "f3166496-5e63-440f-8702-43a78981b863"
        },
        "item": {
          "id": "fb23f393-06dc-417d-86b1-27ae838e2788",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "7988ff89-8382-4770-94f1-91a6251718f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "e27c9d5b-b32d-49d5-bd1d-caf4ea7cfe18",
        "cursor": {
          "ref": "fde47de2-5667-4d83-8ad8-20753adfb9b0",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "fd150447-5868-4e98-97c0-22744a24c189"
        },
        "item": {
          "id": "e27c9d5b-b32d-49d5-bd1d-caf4ea7cfe18",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "7b6a47ee-dce6-4aee-9654-3d2e031e1a95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "e55f8a94-93c5-45c8-a9a9-1d3b07cac98a",
        "cursor": {
          "ref": "fa49696b-7b0e-428e-9c00-783c083783e0",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "4a55231d-4a27-46e8-a339-79b822d70b77"
        },
        "item": {
          "id": "e55f8a94-93c5-45c8-a9a9-1d3b07cac98a",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "f66b4cc1-5991-439f-8218-23b9baee036e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "0dac4912-abc7-4db8-9b9b-1343c188faf5",
        "cursor": {
          "ref": "1af53021-a78b-4737-be89-92348bc6c02e",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "9bd0b72d-e351-484d-b23a-5da39612715e"
        },
        "item": {
          "id": "0dac4912-abc7-4db8-9b9b-1343c188faf5",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "6130a13d-4ffe-45be-afa1-4516c2fcf3c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "f6fdcafc-03bd-4fe1-804c-ff7afabef48c",
        "cursor": {
          "ref": "6061fb3e-cc5a-4ed1-b898-42c3ee25ef5c",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "36e88e12-209c-42e4-86b7-6ceefde2be33"
        },
        "item": {
          "id": "f6fdcafc-03bd-4fe1-804c-ff7afabef48c",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "63534094-ebf8-4c09-b3a0-485a15bc9d2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "c4c642ae-cc22-45e0-b9af-111ce458f3b4",
        "cursor": {
          "ref": "0220b7ad-790f-43a8-a0d1-7cf99b37803c",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "38c7631a-0869-46a0-934c-44642174773e"
        },
        "item": {
          "id": "c4c642ae-cc22-45e0-b9af-111ce458f3b4",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "87e1832d-2c38-4c91-9242-a0544f43d59d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "bdd01cc5-9258-418a-bccb-2ef07c5c2b02",
        "cursor": {
          "ref": "6ef9f5cd-fbea-48c4-b80b-2bee7db738ef",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "a79c048d-f47d-417e-ac83-b23524abaa9e"
        },
        "item": {
          "id": "bdd01cc5-9258-418a-bccb-2ef07c5c2b02",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "1b807cd7-d1b9-474f-a5fc-f1abba9f510e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "e1223722-5698-43ef-b21c-b52cbf4ff7a0",
        "cursor": {
          "ref": "1fc8b48c-8b55-41cb-a47b-2b4b1d2d548b",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "53a7d0f2-5b36-472d-87cd-4ded9b6de784"
        },
        "item": {
          "id": "e1223722-5698-43ef-b21c-b52cbf4ff7a0",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "fd0ac8b4-574e-4c8d-b5f5-20c5ca3b626d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "f720c61a-d62d-4090-9067-1f6856c2f7fd",
        "cursor": {
          "ref": "601dbed4-a3c5-48ef-9969-6d70fc5e8eb3",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "d23a7090-1037-4797-ba43-0df87a0227aa"
        },
        "item": {
          "id": "f720c61a-d62d-4090-9067-1f6856c2f7fd",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "48084f63-c145-449d-a1db-67b7fe6f7bbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "089593fb-59c4-4ca3-89ce-66e9181efd6e",
        "cursor": {
          "ref": "ea8e3073-2dce-42c4-a9c4-5103db2e1244",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "18d0bc23-5422-484d-8ea2-2ac1492f18a9"
        },
        "item": {
          "id": "089593fb-59c4-4ca3-89ce-66e9181efd6e",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "3bbf0856-4575-43bd-aa7e-ee570a925af5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "69b4bab6-a012-4e8e-8dea-a9bfe9d2e675",
        "cursor": {
          "ref": "6d31c55a-418e-4ff8-80c7-8295a7263110",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "3a262dd0-79c2-45a8-875c-37803021581d"
        },
        "item": {
          "id": "69b4bab6-a012-4e8e-8dea-a9bfe9d2e675",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "0c2ebf50-d728-4688-bfa7-af5b0651a973",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "2ec472d6-be6e-47e2-8522-17f87d38e886",
        "cursor": {
          "ref": "2725d3d6-274c-4404-8d95-6ed19db41c00",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "0ec15365-5b1b-49b9-bbaf-89ad08aaabf2"
        },
        "item": {
          "id": "2ec472d6-be6e-47e2-8522-17f87d38e886",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "8384872e-fa01-4e59-9ed1-20ff82465a25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "75e65651-1b14-4314-afab-e9c56088f69a",
        "cursor": {
          "ref": "392f5e5c-31bf-4c78-a937-1dc5309fc1bb",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "99609489-687b-4866-b697-87ffed00eb86"
        },
        "item": {
          "id": "75e65651-1b14-4314-afab-e9c56088f69a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "4b2da374-77d9-4c45-be97-a85785b2bd0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "2849fd55-ef06-4fa3-9555-2d405019ccc1",
        "cursor": {
          "ref": "1e7de5e3-0902-4f62-a683-4a85f8badce8",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "ec03d43c-f379-4b9f-8bdd-b89d8b0922f5"
        },
        "item": {
          "id": "2849fd55-ef06-4fa3-9555-2d405019ccc1",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "2f14662f-1045-44d8-a0be-467838e70d13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "1cc09c19-6fb8-4663-880b-47c424f87541",
        "cursor": {
          "ref": "870fd677-8ee8-42d4-88b8-66856a7a7abb",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "ec57ab29-a1ba-4d96-a0b7-76e0195aa0c7"
        },
        "item": {
          "id": "1cc09c19-6fb8-4663-880b-47c424f87541",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "0d47c643-8009-43ed-95f1-89c57d4eaa88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "b546eabc-8a63-4b73-92f3-ee99217c1d00",
        "cursor": {
          "ref": "d07f6a91-9933-485c-aae1-35f51729199c",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "83195e2b-9aae-412d-9522-c6012fd4748a"
        },
        "item": {
          "id": "b546eabc-8a63-4b73-92f3-ee99217c1d00",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "0c5aa4d0-1c5e-4ae8-9de8-0893c79d110f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "b19a6b49-5ab3-42bb-80d5-c6a16c7c08f0",
        "cursor": {
          "ref": "a59b4fe1-2b55-4e76-9d4d-0cf097fcaae9",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "c3c7e12b-85b4-4af3-b1e3-97b894ddd2c2"
        },
        "item": {
          "id": "b19a6b49-5ab3-42bb-80d5-c6a16c7c08f0",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "077e6a68-8688-4af7-8990-88ff72e31add",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "0daeaf83-a547-44cf-b660-ba728da94aad",
        "cursor": {
          "ref": "49e55403-b971-4ddc-ab99-ce57c05c7fba",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "47d2d3b9-e067-4c63-bd5f-dd7b250806dc"
        },
        "item": {
          "id": "0daeaf83-a547-44cf-b660-ba728da94aad",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "a73ec62d-39a0-4728-91e8-7b49e291bbac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 184,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "bb5b5bf1-b0e4-44f8-b912-f199ed216a07",
        "cursor": {
          "ref": "96b3caa9-c735-46f4-8b85-344dfbbd0b64",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "4b143ed8-1c80-4a7c-bdaa-1ee2220bbd02"
        },
        "item": {
          "id": "bb5b5bf1-b0e4-44f8-b912-f199ed216a07",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "159ec2ca-85c7-4d6e-a577-6f6c96b722ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "49e6375b-8663-405e-93ca-b010680574ba",
        "cursor": {
          "ref": "5c265c4e-700c-4e6f-a136-6ab22eac4110",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "36b5ced8-9825-4f7b-adb1-9c23e467162b"
        },
        "item": {
          "id": "49e6375b-8663-405e-93ca-b010680574ba",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "d0fa7929-1a17-47cb-b1bd-2898c8dfbe6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "4c93e218-f8fe-4127-b291-ec0bd9594c9b",
        "cursor": {
          "ref": "586ec544-e3df-48a2-9ad6-8268d2e57103",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "c788a8ad-70e1-4206-91a9-1ee78c9d82d9"
        },
        "item": {
          "id": "4c93e218-f8fe-4127-b291-ec0bd9594c9b",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "53e51325-4175-44fc-87c8-e4b49e78db26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "5afb9673-4ecd-4ed8-a0d0-cea8b5fcd4f2",
        "cursor": {
          "ref": "3c56308c-cb90-459f-b217-3e06af91a294",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "cead0ae5-38f1-4bf8-ab23-4aadbfa914c5"
        },
        "item": {
          "id": "5afb9673-4ecd-4ed8-a0d0-cea8b5fcd4f2",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "d45a03ae-20c4-40d5-9008-9ecebe5314c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "05551c4b-efc3-4d3c-8b68-052014dc9bbb",
        "cursor": {
          "ref": "4f3ec9bc-3354-405b-b9d6-afca12c2b01f",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "23f31ad9-71a8-4735-8960-f9008f99d8ab"
        },
        "item": {
          "id": "05551c4b-efc3-4d3c-8b68-052014dc9bbb",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "9366ba84-8adc-40aa-bc61-dda7e8865e02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "b23eff28-4ea0-4a01-b067-edb5c8cd3589",
        "cursor": {
          "ref": "d552c1ab-6214-4ccb-b84c-8a3b4071688b",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "478f549b-fde3-4d19-9c2f-2b273cb3502d"
        },
        "item": {
          "id": "b23eff28-4ea0-4a01-b067-edb5c8cd3589",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "07e42469-3e28-488b-963f-1d1e73b16d86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "2d614f5b-74cd-44f4-b12a-25b4ef11c6a2",
        "cursor": {
          "ref": "41247277-3d9b-4f00-becf-42eb9996f3bb",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "b6bf9f00-9cc4-4385-a21a-69de24d7f791"
        },
        "item": {
          "id": "2d614f5b-74cd-44f4-b12a-25b4ef11c6a2",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "58ea8a1b-e75b-4453-9e74-6ca8b3176633",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "452fa6a2-608d-42c6-a265-5e52b38f037c",
        "cursor": {
          "ref": "3d8003e4-a05a-4b12-8185-ef06aca48f73",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "3803cb22-7307-4c62-9478-5a2dd3e72f1e"
        },
        "item": {
          "id": "452fa6a2-608d-42c6-a265-5e52b38f037c",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "6a7cbb30-9ce6-40a4-a01c-352513c3b8fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "d3c8b92a-0d02-4e0c-99f7-7456333dadc5",
        "cursor": {
          "ref": "ab9da1c8-1685-4dea-a325-970c4b417774",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "4bb10daf-9959-4c42-822c-3c8e44ba7e50"
        },
        "item": {
          "id": "d3c8b92a-0d02-4e0c-99f7-7456333dadc5",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "758c4b5f-7843-45ac-b1d6-935831033797",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "02996916-074a-42a4-aeca-e255185f6841",
        "cursor": {
          "ref": "4474b13f-57e8-41c0-89e9-311f61349ca2",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "50c55cac-8248-4675-af63-471341445001"
        },
        "item": {
          "id": "02996916-074a-42a4-aeca-e255185f6841",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "33d8aa8b-26b7-48a0-af4f-f6b0a2cc39b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "593e7369-84b8-4994-8ba3-9ca4b89dedeb",
        "cursor": {
          "ref": "16783df6-4306-481c-bb5c-408461193d3f",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "7fa3e9c4-e17e-4c63-a23b-ec73441b35b6"
        },
        "item": {
          "id": "593e7369-84b8-4994-8ba3-9ca4b89dedeb",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "9bdbf0ac-43e1-46f5-a84c-132d8acdcee8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "542739ac-3306-42b3-b6ac-3cec60f34423",
        "cursor": {
          "ref": "244c537b-2222-49dd-a7ee-e54bfae52135",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "19a6d14c-555b-4eb5-b1c7-cfc4fb2e18e1"
        },
        "item": {
          "id": "542739ac-3306-42b3-b6ac-3cec60f34423",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "51e28bc5-8c30-4805-a021-4b7081df8edc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "13133194-bddf-4172-a5ac-e2418a858b50",
        "cursor": {
          "ref": "f3b2a438-6e78-458b-b584-077a1bf0cedb",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "933248fb-3d96-4230-8b19-233cf88a2db3"
        },
        "item": {
          "id": "13133194-bddf-4172-a5ac-e2418a858b50",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "8b2164cf-259a-4652-85be-92d78fd256b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "8ee1890f-cb90-448e-a0c4-ab5959e310b2",
        "cursor": {
          "ref": "b31d5326-68a9-4f3c-9b8c-96ef6064dde0",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "17429be1-eea8-4a0d-88ed-0fa338e77e5f"
        },
        "item": {
          "id": "8ee1890f-cb90-448e-a0c4-ab5959e310b2",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "9a61efdc-4fd7-4cf9-9c9a-ae074b77881c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "41585cac-bc26-4241-87ee-cf06d8c9a0b8",
        "cursor": {
          "ref": "6b2a6e87-695a-49d6-83d9-a6823c8ee8d1",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "cac73637-fff8-4cee-8f6c-af1fa4f6a2ed"
        },
        "item": {
          "id": "41585cac-bc26-4241-87ee-cf06d8c9a0b8",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "a522edfd-c925-4867-8b75-6f4c9a0ee1fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "887bffdb-7d37-400b-9569-c1184bff75ac",
        "cursor": {
          "ref": "463c5b73-bb90-4f56-8a3e-c6c372f34931",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "536dd4d9-1284-4d53-856b-6e1830bb74ec"
        },
        "item": {
          "id": "887bffdb-7d37-400b-9569-c1184bff75ac",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "e559a4e1-0eec-4d71-8e54-0f3dde808f17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "57d3076c-25d9-4c80-8143-5f39024736ea",
        "cursor": {
          "ref": "797b262b-abd2-4de8-8888-c84c859c7f57",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "c12e73db-cb6f-4839-b60f-5ba96805e89e"
        },
        "item": {
          "id": "57d3076c-25d9-4c80-8143-5f39024736ea",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "b4a63c2e-d7f7-4b4a-a293-d0996f8e3abf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "4f112c3a-4161-4c1b-8b03-7b67aca36edd",
        "cursor": {
          "ref": "ecb0fe7c-48ac-4052-9dd0-3494b8e56ef2",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "8d34a1fb-28c1-461a-9a45-345238ad178c"
        },
        "item": {
          "id": "4f112c3a-4161-4c1b-8b03-7b67aca36edd",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "e7157dbb-7596-4df1-b18a-a0328eeb1fcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 195
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "47bbdc0f-8dc6-481a-bf8d-48b333ec5722",
        "cursor": {
          "ref": "acf610ee-b9f9-4220-842f-d44ebf7fef49",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "64243cb6-a156-4b62-a039-b1304a32e1cd"
        },
        "item": {
          "id": "47bbdc0f-8dc6-481a-bf8d-48b333ec5722",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "b5718267-6798-42aa-ab27-de29b11b895b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 195
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "7d03934b-333b-4944-8a75-b6e8115d7742",
        "cursor": {
          "ref": "9bb7254c-db54-4804-afe0-45d50cbcd7c1",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "59a89e06-06bc-4762-88f2-bdb1efffff4b"
        },
        "item": {
          "id": "7d03934b-333b-4944-8a75-b6e8115d7742",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "e2debf46-422c-4651-856a-70477b2f9cec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "8c7e92d4-5676-4f4b-b092-f47b96f51d8f",
        "cursor": {
          "ref": "3778645a-73ed-4abb-9d60-81902b53d79c",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "d213b303-13ad-48b7-b6f5-52429656f57f"
        },
        "item": {
          "id": "8c7e92d4-5676-4f4b-b092-f47b96f51d8f",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "49732bb2-1bb6-4296-9ddf-63bc2d0ae308",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 195
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "62dfb07b-bf62-4a3f-8575-9993ee996024",
        "cursor": {
          "ref": "89831cdf-551e-4ad3-a104-5f73b9fca219",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "46872d69-2ede-40bc-bbf6-bc49be082aff"
        },
        "item": {
          "id": "62dfb07b-bf62-4a3f-8575-9993ee996024",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "83fb95cb-3f42-42e5-a63a-3b78055ce766",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "fe835955-2c00-4016-ac40-167b38574115",
        "cursor": {
          "ref": "d819ff77-44f9-489a-b321-13cf628119e4",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "7aab36cf-4ccd-4c62-89d9-bf8ebc222e8c"
        },
        "item": {
          "id": "fe835955-2c00-4016-ac40-167b38574115",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "f7be07aa-c07f-470d-b4a3-b1907e875fd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "bd1d9ba0-07ec-49a7-b17d-990d3ea7b501",
        "cursor": {
          "ref": "e67ff80c-542d-44c2-90bf-5597e3f3c670",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "0440b04a-9e54-4027-b67f-2c2d836f24ee"
        },
        "item": {
          "id": "bd1d9ba0-07ec-49a7-b17d-990d3ea7b501",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "0b0f3d76-a15d-4aac-bb15-65f2c6418475",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "7025fd7f-3a19-44c2-ae15-ecdb27f3f124",
        "cursor": {
          "ref": "60d21e01-fa91-4f31-aa35-53dc4aad8c78",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "438ac37e-fc8a-4c98-b0bc-fa393be4779a"
        },
        "item": {
          "id": "7025fd7f-3a19-44c2-ae15-ecdb27f3f124",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "52fc6ee9-1f76-4c57-953e-7c41a80adec6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "867bfcd4-d6cc-4ff2-b0ea-c30aa0bc6451",
        "cursor": {
          "ref": "0001b38a-0c29-4d01-9e47-835965edd40d",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "15ebdefe-ced0-4020-b690-7804d41bf90b"
        },
        "item": {
          "id": "867bfcd4-d6cc-4ff2-b0ea-c30aa0bc6451",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "38ef47c8-d250-4666-97db-ca931418bd24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "32d6a278-eb9c-4ca0-8eec-bb519e89a07d",
        "cursor": {
          "ref": "383532b9-6c17-4cee-b5e7-748d0514a31a",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "43704dd5-55e0-47b4-8965-be00d84b5e43"
        },
        "item": {
          "id": "32d6a278-eb9c-4ca0-8eec-bb519e89a07d",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "b332e106-456e-4acc-8d89-d55ce742f9d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "a2d18297-184f-4730-9c12-22ef796fb367",
        "cursor": {
          "ref": "40a79886-d50e-486f-98e4-8887b5c676ca",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "9d90be57-26d7-45a1-8609-ad77ebe7922c"
        },
        "item": {
          "id": "a2d18297-184f-4730-9c12-22ef796fb367",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "88463d12-3f6b-4fe3-ad16-d9c3c3e90e82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "e624fea6-d281-46fc-ae41-cf7fab89b486",
        "cursor": {
          "ref": "2626d3c6-ebe0-45b8-a9d5-ddfa545f246f",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "4dc43121-4ead-4e93-b7a1-276820f6ae85"
        },
        "item": {
          "id": "e624fea6-d281-46fc-ae41-cf7fab89b486",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "3569820a-9527-48ed-961f-f16bc0f7e25d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "5bc7651d-4849-4ea9-8c0e-9129cf060c5f",
        "cursor": {
          "ref": "39fdad52-f0d0-4a7b-8498-e986827503ae",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "4887aa32-0ae0-40de-adf6-7edd30d0413c"
        },
        "item": {
          "id": "5bc7651d-4849-4ea9-8c0e-9129cf060c5f",
          "name": "credentials_issue"
        },
        "response": {
          "id": "47dfb988-c8b7-4334-9670-078baef4123a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:102)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:102)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:102)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 5,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:6:102)"
            }
          }
        ]
      },
      {
        "id": "6433c474-2ac7-40e7-80a3-0d2e9f57c26d",
        "cursor": {
          "ref": "9fa67715-b6f2-488c-947a-e4865a6ac8bd",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "e570447a-2c9b-440e-a131-4b4ca0535ef9"
        },
        "item": {
          "id": "6433c474-2ac7-40e7-80a3-0d2e9f57c26d",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "b340761d-7366-4e6c-8d71-ee72c9f3c8f8",
          "status": "Created",
          "code": 201,
          "responseTime": 1543,
          "responseSize": 749
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should be object",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should be object\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:103)"
            }
          }
        ]
      },
      {
        "id": "e960ce76-3ad9-4f7c-9310-62bbc7da42c0",
        "cursor": {
          "ref": "a1e46a2e-f456-4657-90b1-49e89439395c",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "9bdd1da5-0883-4263-9ef6-e1c0ae3d5ae5"
        },
        "item": {
          "id": "e960ce76-3ad9-4f7c-9310-62bbc7da42c0",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "0a518764-7a89-4295-b293-c784ed4f3d95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "9becf14c-05e8-4865-b82a-ff8b1da64b14",
        "cursor": {
          "ref": "41e360f3-901e-483e-9e8a-d5685807d8d0",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "2882127d-ea27-4376-9012-370fc1d8bf5a"
        },
        "item": {
          "id": "9becf14c-05e8-4865-b82a-ff8b1da64b14",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "eeaa6004-1e1a-4228-947e-d68ca7f60b5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "3915ecd8-ce2b-4813-beae-e4f8ce320ad8",
        "cursor": {
          "ref": "4e8ba32a-65ae-4169-b896-4100cbea16c4",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "9f9a7149-062c-4d9e-ab37-df3ad10dae68"
        },
        "item": {
          "id": "3915ecd8-ce2b-4813-beae-e4f8ce320ad8",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "4e278073-50cb-4053-99e7-38c385421ec4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "1355996f-58ff-45ee-b162-ad2362af0db8",
        "cursor": {
          "ref": "a9db36a6-408c-450c-954b-4fca2ff354ef",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "c8b0693a-0ed0-4da2-86dc-54bbc8939221"
        },
        "item": {
          "id": "1355996f-58ff-45ee-b162-ad2362af0db8",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "cb3f27fb-db37-48b7-af45-66e7bbd2a42b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "id": "04a6042f-42b9-4db4-bb4b-4131cb7194a6",
        "cursor": {
          "ref": "43b62061-6328-42a8-b720-ca5cfa7db9ed",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "629e1810-689b-45bf-9a26-0d299e3bef74"
        },
        "item": {
          "id": "04a6042f-42b9-4db4-bb4b-4131cb7194a6",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "e8cc2be6-2d02-48ed-987e-6776ee54bc29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "84780b67-875d-409b-a924-30281cd9a60c",
        "cursor": {
          "ref": "b9a894d0-33d1-450f-81b3-7d55c5cd3390",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "c77d931b-8e4a-46cf-9de1-3564df7ac1ab"
        },
        "item": {
          "id": "84780b67-875d-409b-a924-30281cd9a60c",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "432bcd7e-001d-401b-a10b-14da501531b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "2bbae757-8b0b-46df-9028-9794f08b4974",
        "cursor": {
          "ref": "5a4daab6-c007-4957-a0cb-4d9ba03b1a46",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "6b6cba80-a12f-46b5-b7d6-bbd1d6a3fece"
        },
        "item": {
          "id": "2bbae757-8b0b-46df-9028-9794f08b4974",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "c6637322-2abb-4123-9420-45416c4fbe70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 178,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "4dd82db4-e56b-4481-b95f-573c80c36827",
        "cursor": {
          "ref": "d9c2f8d0-5ee7-4d65-9ba5-46e56d0f23e3",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "ef9bc42e-73c1-44b2-81cd-b7c0c3c6766c"
        },
        "item": {
          "id": "4dd82db4-e56b-4481-b95f-573c80c36827",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "98d940c1-4d17-4097-8ecb-dc374574c44e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "816317c8-2f67-4d54-ab92-cf95e038f441",
        "cursor": {
          "ref": "b2bf0ac2-5d21-4637-b1fe-5d94405e4d97",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "05616ee6-80ec-4a88-9c79-e983e9714e6b"
        },
        "item": {
          "id": "816317c8-2f67-4d54-ab92-cf95e038f441",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "de559ab4-792e-4bae-9ed6-d4cb37fb5e36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "5fca7d58-64c6-4780-84c8-46887c0b37d3",
        "cursor": {
          "ref": "ff3a0d22-66d1-4148-ad00-6f3e706a64b0",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "a3b59e5a-ed9c-428e-837c-0c4940f88a2d"
        },
        "item": {
          "id": "5fca7d58-64c6-4780-84c8-46887c0b37d3",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "f356cc73-afbc-4a0a-94a9-afdbe8e3c46d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "73a2132d-6f37-4ddf-b4b8-d9cdb93442e3",
        "cursor": {
          "ref": "361b2056-e232-49f1-9b74-d1e86ddf69c2",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "3aecca4f-8c03-4bf8-a776-ce9f34b0b329"
        },
        "item": {
          "id": "73a2132d-6f37-4ddf-b4b8-d9cdb93442e3",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "36962211-41a9-4dff-84f9-3f7ac537f436",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 140
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "702092e4-0bd6-4885-ba64-70c4cdb21e40",
        "cursor": {
          "ref": "aa09503c-50fa-4eeb-82a7-835354c9772f",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "938ab97f-8eb0-4533-90e1-fbd5fd66fff1"
        },
        "item": {
          "id": "702092e4-0bd6-4885-ba64-70c4cdb21e40",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "acc18b0d-2979-4511-9f4c-1283a026108a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "26aa53dd-c319-4e58-ad54-ffd09a65eb18",
        "cursor": {
          "ref": "6cb8eff8-fa2a-4632-9f7b-ef621b5b05d0",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "e528dbda-84c5-4e6a-bf44-58f1503a51e2"
        },
        "item": {
          "id": "26aa53dd-c319-4e58-ad54-ffd09a65eb18",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "11949d69-3496-465b-b7c9-b4142e9dd970",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "73771054-b257-4ed5-9afa-2e8337bc6124",
        "cursor": {
          "ref": "884327ca-f670-4d44-b8f1-128b92325a7b",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "b249a5f8-dc29-4faa-9c22-8c05903e86be"
        },
        "item": {
          "id": "73771054-b257-4ed5-9afa-2e8337bc6124",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "02b823a5-6265-4c9e-b930-b0339008b38a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "2ea256c9-ba31-4ea1-9212-1190de4e0c2c",
        "cursor": {
          "ref": "8ac4ba71-58d5-4378-a7ac-ce89f8601def",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "3f8f3b32-e704-4c59-bd47-70f087961273"
        },
        "item": {
          "id": "2ea256c9-ba31-4ea1-9212-1190de4e0c2c",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "6674418a-15e7-4b18-b4b5-abfd26be1699",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "903d8221-e085-4a64-827d-d918c9b32446",
        "cursor": {
          "ref": "ef31bae3-274a-4ef7-b46f-b0a8151a52dd",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "19f205dd-f07c-40ec-92da-c1513bfd49fd"
        },
        "item": {
          "id": "903d8221-e085-4a64-827d-d918c9b32446",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "885774e9-e211-4481-99ed-5483ba673e4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "b3c55313-86ab-4f04-92b8-d66fd2f06c38",
        "cursor": {
          "ref": "3de584be-26d1-4bec-9c0c-7bfd72ecffdc",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "82d26ace-799c-4e2f-b417-0d864fddc31b"
        },
        "item": {
          "id": "b3c55313-86ab-4f04-92b8-d66fd2f06c38",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "5a867fef-a6e6-4356-8336-d59eba78206c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "7e66c229-5fff-42c2-9b28-9b4672baa789",
        "cursor": {
          "ref": "5adc811c-f221-46b4-a133-e2c61cbaf17e",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "38f4f435-0534-4ef8-a6bc-3f2954fb1e8f"
        },
        "item": {
          "id": "7e66c229-5fff-42c2-9b28-9b4672baa789",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "6bc8c11a-6b54-4c38-8c7f-0452f99cb895",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "a88dc0c0-f549-4f6f-b133-95dfa0de7e2a",
        "cursor": {
          "ref": "fedc73e1-88ab-49b7-bbeb-e4934694f9a2",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "c2def6cb-dfc3-44f6-b6aa-b91235cd0294"
        },
        "item": {
          "id": "a88dc0c0-f549-4f6f-b133-95dfa0de7e2a",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "d9ba6852-b258-45c1-a12d-eef6dc922156",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "e91ddbfa-6bc1-4c2d-a630-011308c5e0e7",
        "cursor": {
          "ref": "43cb1b20-8b6c-4021-871b-6e065fc3215b",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "57ab7679-b976-46db-bcf7-2100edcc0a17"
        },
        "item": {
          "id": "e91ddbfa-6bc1-4c2d-a630-011308c5e0e7",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "a1434754-14c3-4eef-901e-0fa140c4177e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "cb899333-3038-48df-b56b-040cc64fb469",
        "cursor": {
          "ref": "d081c047-1a52-424f-9fe3-2c447580a305",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "f05fbc78-06ac-4711-9d64-ba7653c4b366"
        },
        "item": {
          "id": "cb899333-3038-48df-b56b-040cc64fb469",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "f161ef30-5349-4148-8d7a-7d1951d484f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "f2eb01ab-b7b0-437e-9e9e-4e865f68a924",
        "cursor": {
          "ref": "19f0510a-477b-4300-b2bb-98520fa0590c",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "d0d4c8f4-ce90-416f-bb8e-874e0d3102ab"
        },
        "item": {
          "id": "f2eb01ab-b7b0-437e-9e9e-4e865f68a924",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "cd1b91d9-34ea-434f-ae96-c35dcc65e9a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "a938ef3b-015a-4592-b209-bc1111504913",
        "cursor": {
          "ref": "93a95a07-7b0c-4f1f-856d-df917997e807",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "615f4ede-9324-4237-b3dc-81b68a3df3d8"
        },
        "item": {
          "id": "a938ef3b-015a-4592-b209-bc1111504913",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "a2c9d6e3-987c-41bd-babb-a8badd2b884f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "42b08176-3344-4fa7-b035-1db9a1d65ce9",
        "cursor": {
          "ref": "b7cbefd4-46c8-47d2-8949-4bb4322aad13",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "83f34099-f6c9-492a-9394-06b263af0788"
        },
        "item": {
          "id": "42b08176-3344-4fa7-b035-1db9a1d65ce9",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "645d4498-8cd4-405b-9971-433b431a79e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "b871ee32-8031-4532-8358-33376d8a02a3",
        "cursor": {
          "ref": "f5343b72-f8ff-4c67-9a9e-3dd2c3d46f34",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "a9b665a4-31ee-454c-b582-33a2cd8475c0"
        },
        "item": {
          "id": "b871ee32-8031-4532-8358-33376d8a02a3",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "aa8506a0-be43-45c5-9229-0feec5e71a18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "a15b7e2c-4037-43d6-842e-5689a5846904",
        "cursor": {
          "ref": "6f390b91-59f1-4c60-bdbb-32db8abbac7b",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "a6cf6cb9-d739-461e-a6b1-70ab7f0fb5d5"
        },
        "item": {
          "id": "a15b7e2c-4037-43d6-842e-5689a5846904",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "e653335d-4bc4-4a76-b951-d2bde18af9e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "f5e666ea-ba0a-4e8c-a392-a3e6cd37715c",
        "cursor": {
          "ref": "30d39428-8c0a-4f02-9fb7-e9aa9e13c6c5",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "57c245c9-2ca3-413d-8da7-793f930fc45b"
        },
        "item": {
          "id": "f5e666ea-ba0a-4e8c-a392-a3e6cd37715c",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "675e3cc4-395e-46c7-a3ed-86bb5b76eec1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "f67aec94-d2bb-4e3e-8691-957c4d90f08a",
        "cursor": {
          "ref": "286bc7eb-e22f-45e1-8fa5-aad3da8c6fff",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "f0f79a44-31e3-484b-ac39-53d0be64fc6f"
        },
        "item": {
          "id": "f67aec94-d2bb-4e3e-8691-957c4d90f08a",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "cf245fdc-9004-48f1-8ecb-f06c7db64626",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "47ec4c5e-807f-457a-8753-21ea9511bbc4",
        "cursor": {
          "ref": "a40041ee-a757-4886-bbaa-ba0c2308cb06",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "b034ee91-4124-43d9-9683-faffc56f6bd0"
        },
        "item": {
          "id": "47ec4c5e-807f-457a-8753-21ea9511bbc4",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "b6d685d1-2b67-4988-803a-495d82ebc1a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "99224887-8dbb-49e7-a90d-b868e2d40a90",
        "cursor": {
          "ref": "effbd851-f74d-4bff-aeca-3c931efd26a0",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "e0654d44-74b3-4188-bf34-354f59e732b0"
        },
        "item": {
          "id": "99224887-8dbb-49e7-a90d-b868e2d40a90",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "67b69e6d-80ff-4461-a9dc-51afdb9df3a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "3d186acf-91c8-4abb-bcdd-8a1a603e3f9f",
        "cursor": {
          "ref": "4ce4415b-d021-4e80-b7d6-f05bc46dbdb7",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "2608145c-a5ff-4430-9116-73b0f0ac2e70"
        },
        "item": {
          "id": "3d186acf-91c8-4abb-bcdd-8a1a603e3f9f",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "831b2dc6-2f17-4e76-8c89-80f847f6ced2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "4fefa15e-9e8a-4877-b883-23108216deb5",
        "cursor": {
          "ref": "366afb9a-bcc6-439a-8647-a3c09b1a6045",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "e5e9f1fb-5abb-4cfe-a06f-1a4d63908d95"
        },
        "item": {
          "id": "4fefa15e-9e8a-4877-b883-23108216deb5",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "fb85e92e-d9e0-45be-9080-5055a922a19a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "65ec9e26-605c-4602-92dd-23f89ee5e057",
        "cursor": {
          "ref": "948e7daf-724a-4607-80f4-df0b6cabbc36",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "1e7cf60e-6eb1-4a98-a02a-b9edd47302a5"
        },
        "item": {
          "id": "65ec9e26-605c-4602-92dd-23f89ee5e057",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "17c339e5-fce0-47ab-9e4d-fc9146b583e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "ba09a86e-66ce-4bb0-a2ef-064432332604",
        "cursor": {
          "ref": "df01c0bf-b987-4a09-92ef-93bd33c6a924",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "d20dd5c9-4847-4809-af34-e54c2af515ce"
        },
        "item": {
          "id": "ba09a86e-66ce-4bb0-a2ef-064432332604",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "0e1a5f38-2f29-45a2-a7b1-2c2c54550d6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "5fdb6958-1718-4765-b126-23b9a36f1805",
        "cursor": {
          "ref": "b1a4a813-8f39-43e0-8eda-f19e35da9e36",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "d1347f99-b31d-454a-96f9-36a6023adf99"
        },
        "item": {
          "id": "5fdb6958-1718-4765-b126-23b9a36f1805",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "179ad990-778f-492b-a9f3-d0c75fe27da7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "b9f8e415-16b5-4ef8-8752-894107a2f03c",
        "cursor": {
          "ref": "958563d0-634c-4bc3-b018-572500a613c7",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "d36d7303-e920-469a-8fba-34debc3232d4"
        },
        "item": {
          "id": "b9f8e415-16b5-4ef8-8752-894107a2f03c",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "835c5d58-28a1-46df-99bd-798c987e36c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "cdcc2717-8a66-4715-9068-89046ed4250b",
        "cursor": {
          "ref": "778427f7-4a95-4631-aee9-808516d47853",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "2ee01204-2cdc-474e-a682-0928a89364ee"
        },
        "item": {
          "id": "cdcc2717-8a66-4715-9068-89046ed4250b",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "aa6cd951-1c1d-4380-8130-32986a74f5c1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "f1e0cb28-511c-4ff0-90b7-827fbf2a1651",
        "cursor": {
          "ref": "c94e6fd8-9cb2-4ca2-862a-03386b8203de",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "af7b3308-057c-4552-8cdb-e4dd18f6995e"
        },
        "item": {
          "id": "f1e0cb28-511c-4ff0-90b7-827fbf2a1651",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "edeef2b2-d5d4-4f3c-8f9f-24cf0097e1e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "430f0944-4e8f-4a10-aa2f-98adb3ecfe63",
        "cursor": {
          "ref": "5466e0e3-d010-43f6-afb9-13af2ceb7733",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "ca8d87a8-ac76-4818-810c-298b9f81308d"
        },
        "item": {
          "id": "430f0944-4e8f-4a10-aa2f-98adb3ecfe63",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "1abbd28c-e916-406a-821f-958027e21b5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "3012f30c-2628-4abb-8f17-2e6613f34698",
        "cursor": {
          "ref": "4c2349ee-28c0-4b5d-b41f-f0f1a094c81f",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "fbbd6e9a-d33d-4f21-bd62-23eccdced4d4"
        },
        "item": {
          "id": "3012f30c-2628-4abb-8f17-2e6613f34698",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "d47b5a0e-ca52-4d19-a42e-5f0be07968f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "47d331e2-36cd-4485-a683-18dde2c8a2fd",
        "cursor": {
          "ref": "6711b7fb-cc27-4428-b0a6-46f6c1b0038c",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "e6f7e1c1-0c65-4f8a-947a-97319124bca9"
        },
        "item": {
          "id": "47d331e2-36cd-4485-a683-18dde2c8a2fd",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "85dcb206-487e-4182-bd29-78f11f6396bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "1ba3a6b2-40cc-46a8-a6ad-271379098905",
        "cursor": {
          "ref": "8c28eea0-7ae4-49bd-b664-ca62799aad7e",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "9f43f296-c0ad-4047-ab26-3077dda0560e"
        },
        "item": {
          "id": "1ba3a6b2-40cc-46a8-a6ad-271379098905",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "3c96583f-5824-40d7-ac01-a899e64f764e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "a35dda37-39a6-484a-acc2-8fb36b296d9b",
        "cursor": {
          "ref": "d0fa177e-0416-4b90-97bb-b4c3b573bc49",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "415cb638-4f0b-42c7-a98c-e49dbb91407d"
        },
        "item": {
          "id": "a35dda37-39a6-484a-acc2-8fb36b296d9b",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "60584fbd-081f-43ff-900c-518a7a930623",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "62b9cffc-fc37-43c6-87d4-d2f9e806bf11",
        "cursor": {
          "ref": "5604b08d-666c-4319-a4fe-20597fd4b871",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "4838befc-adb1-494f-aa4a-729412840890"
        },
        "item": {
          "id": "62b9cffc-fc37-43c6-87d4-d2f9e806bf11",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "400403d7-5f79-4527-861d-cd89f755d434",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 140
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "c047223b-6de4-4df4-b9cd-d26e7b359caa",
        "cursor": {
          "ref": "ba62c34c-4462-4f88-862f-c0a94858f52a",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "3a70f70c-e2a5-4531-9bda-ad39ec373a54"
        },
        "item": {
          "id": "c047223b-6de4-4df4-b9cd-d26e7b359caa",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "ab617171-4834-4c81-8864-0349720cc3b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "b6bbe1db-d671-4d45-b9c9-41132a3b3c2e",
        "cursor": {
          "ref": "c37c8640-111f-4f58-b205-01c41694c388",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "704dd5d6-1d2f-46e6-a977-919885a05aea"
        },
        "item": {
          "id": "b6bbe1db-d671-4d45-b9c9-41132a3b3c2e",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "dac51799-b28f-469e-900c-a1243a11866d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "12ad4082-adcd-43f6-8971-83ba253ffecb",
        "cursor": {
          "ref": "6f1ee0cd-ac51-40e7-8aed-413b0b80ebe8",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "79bc0693-d94e-408c-8fea-046b07d654c5"
        },
        "item": {
          "id": "12ad4082-adcd-43f6-8971-83ba253ffecb",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "7571b7be-40db-491a-bdd8-cc6b0761e747",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "7faafc6c-cb51-4553-9d5f-cb033871b287",
        "cursor": {
          "ref": "367ee20c-f6df-4bc5-b1de-3e0ed45d2357",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "fe34ce05-6ab0-4feb-b5b7-b36427b99bcb"
        },
        "item": {
          "id": "7faafc6c-cb51-4553-9d5f-cb033871b287",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "ad13b4db-ff99-4374-a83e-c9721783ae66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "40f6562e-9b92-45bc-9dd0-4485f2bc4916",
        "cursor": {
          "ref": "a07cab2b-face-47aa-822d-e8937643ec08",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "3507ef0e-05bd-41d7-a001-12709ea62d98"
        },
        "item": {
          "id": "40f6562e-9b92-45bc-9dd0-4485f2bc4916",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "6a204a38-11ed-47b7-b48c-1969a7e43443",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "3926a6df-1cb8-4552-a9bd-18f9274e456b",
        "cursor": {
          "ref": "4de26852-fc77-4b88-9f19-9ab6e42015cb",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "00dcdaf7-a8fa-4a12-b512-b864e1c878fb"
        },
        "item": {
          "id": "3926a6df-1cb8-4552-a9bd-18f9274e456b",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "0327ad12-eda6-48f1-8416-6683904253ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "3f9cf90f-0ecf-45cf-afad-e21f215545a5",
        "cursor": {
          "ref": "f8fbd86e-d69b-422a-aa09-547e27712596",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "df3e4c47-b92a-42c8-8d21-a09cd3cc86e5"
        },
        "item": {
          "id": "3f9cf90f-0ecf-45cf-afad-e21f215545a5",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "840ca619-502a-422d-a1c1-ee1d3b77bf7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "1592e55a-f5ec-4998-b2e5-dfb16b019745",
        "cursor": {
          "ref": "3cc53c0b-07fe-49aa-955a-102522f6597b",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "0926bbb8-f841-455e-b989-728d290aeb29"
        },
        "item": {
          "id": "1592e55a-f5ec-4998-b2e5-dfb16b019745",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "930048de-cd9e-4337-a0e1-c0c71ed6e489",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "6e4644bb-9e37-4d6b-a16a-0c71416a9371",
        "cursor": {
          "ref": "c6022944-045e-4a23-8d6d-827def367ff6",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "fd3e6021-57b0-4ca3-a0bf-011cf690a22b"
        },
        "item": {
          "id": "6e4644bb-9e37-4d6b-a16a-0c71416a9371",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "6c918479-1b8f-46ba-814a-55d945312c92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "16b9cdf0-8674-43c7-99d2-1d745bd1e886",
        "cursor": {
          "ref": "195aef21-902c-4d8c-8948-0549b61ce1ba",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "2670187e-eda7-414b-b299-110264a3fc2d"
        },
        "item": {
          "id": "16b9cdf0-8674-43c7-99d2-1d745bd1e886",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "fc6f0c95-aa84-4bce-8970-b83df83a523a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "c18aa76e-ff7e-4e44-baab-bf9b54ba2445",
        "cursor": {
          "ref": "5b0a3e4e-e704-4ddd-9e45-96e488948abd",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "5589e168-db3a-4a1a-aa28-35caac2f35cc"
        },
        "item": {
          "id": "c18aa76e-ff7e-4e44-baab-bf9b54ba2445",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "0af0b65b-8c8b-491e-a15b-e491a1f07f60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "67d02066-d94b-48cc-9108-cf7bdf049757",
        "cursor": {
          "ref": "06436622-def5-4a81-9eb7-5b1d97be7861",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "4afc62f7-dc6d-4c9c-b4cf-c1e9e730525e"
        },
        "item": {
          "id": "67d02066-d94b-48cc-9108-cf7bdf049757",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "8aaf24e0-64b9-47a5-865b-35723877a761",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "5c2a71b3-d8af-45aa-b161-388ae15cb0d6",
        "cursor": {
          "ref": "8e30b868-d4a0-4fcc-aa4d-054223f76ba0",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "74fdf2b2-2d83-4624-b777-74e806670626"
        },
        "item": {
          "id": "5c2a71b3-d8af-45aa-b161-388ae15cb0d6",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "addd6109-7cde-4375-9300-b6bd3f646493",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "e2fedded-c039-4ada-b22f-4ade79a67664",
        "cursor": {
          "ref": "94e8a37a-3241-48e1-9c7b-7f7dfaef0d0a",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "f0ede5cd-6226-4990-b592-5827203e671e"
        },
        "item": {
          "id": "e2fedded-c039-4ada-b22f-4ade79a67664",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "03a5f434-7dbe-48b0-b196-751c36612b01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "5c90661c-8da9-457b-be9b-8aa303e43181",
        "cursor": {
          "ref": "0306ba3c-5808-493f-bdba-1079533c92f4",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "e61f7007-aeea-4ef7-a1da-5e1a54b82558"
        },
        "item": {
          "id": "5c90661c-8da9-457b-be9b-8aa303e43181",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "851ec028-3f00-4d63-9de5-44182c34ad72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "b84c4560-0c82-47a9-b5dc-a5e4e6edfd0e",
        "cursor": {
          "ref": "9bf340d4-97de-4825-b8d2-422451569252",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "8b8b75d9-89ff-4edb-baf9-92a9139aea31"
        },
        "item": {
          "id": "b84c4560-0c82-47a9-b5dc-a5e4e6edfd0e",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "4f9b9bb6-1321-412e-ac36-cf93997d54d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "7305f5f5-6259-415f-b918-ec8d590c5bdd",
        "cursor": {
          "ref": "ac0897e4-a613-4c1c-8ef3-fbd325cd780d",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "52f81c11-a351-4cfb-8fb3-fabf3231639b"
        },
        "item": {
          "id": "7305f5f5-6259-415f-b918-ec8d590c5bdd",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "ddcb7692-46dc-41c3-a9b0-da58d29cc7e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "da152e85-c804-4443-9900-8028900249a9",
        "cursor": {
          "ref": "ef128de7-3e2a-425d-ac9c-becd5cc4d7b3",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "0d2b49e9-fd64-49fb-bee7-5d7332a2420e"
        },
        "item": {
          "id": "da152e85-c804-4443-9900-8028900249a9",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "d307eb13-c6fa-49be-bc85-3fbdeac7e3ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "cc5b2e4f-cdd6-47c9-a4a1-d46b158d4066",
        "cursor": {
          "ref": "2849d4e2-826d-4915-81c3-acba305ebca7",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "b8db5176-489c-4e67-866f-6527743e6a7f"
        },
        "item": {
          "id": "cc5b2e4f-cdd6-47c9-a4a1-d46b158d4066",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "06e7537e-909e-485f-b495-acf052dbcd18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "f194d645-1e9f-405d-b39d-88d47db0085d",
        "cursor": {
          "ref": "784b0a85-2a71-44d0-a530-33d41e0df5fe",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "585c5277-80c8-494d-9e3b-20c1381d4e1b"
        },
        "item": {
          "id": "f194d645-1e9f-405d-b39d-88d47db0085d",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "a5c034a3-9ef5-46b7-b472-6363d84291fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "c226e248-356a-4073-aba6-f12f28a2c64c",
        "cursor": {
          "ref": "c67d2f1d-61ed-4674-9ce1-d2971fe08e8a",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "beaca874-358d-4138-9be6-c58070bd7029"
        },
        "item": {
          "id": "c226e248-356a-4073-aba6-f12f28a2c64c",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "9842e9dc-cca2-4ad3-8b9b-a2794595d272",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "4907aaf5-bdb5-4bc2-93fe-b395ac487e21",
        "cursor": {
          "ref": "a289453f-2ce5-47a6-a281-fa3b2a3c1f95",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "df6ed582-c717-461e-901c-87a5e6afc3dd"
        },
        "item": {
          "id": "4907aaf5-bdb5-4bc2-93fe-b395ac487e21",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "c70de8cc-d14d-49aa-9a08-ba01aba46d70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "5f62343f-7c80-45d2-be34-9e90bd97911c",
        "cursor": {
          "ref": "f18e3161-3d4a-42b6-8824-199f160a2064",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "586e356f-7328-4f92-9339-09b73c39db50"
        },
        "item": {
          "id": "5f62343f-7c80-45d2-be34-9e90bd97911c",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "01f361ca-9cff-4824-8aa6-f56c50dc4a04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "3339d56d-7485-4827-9963-741d41e759c3",
        "cursor": {
          "ref": "5f7c6aa7-f76c-4a99-be78-899b5768649d",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "7d1e4dc6-3733-4f5e-bbe2-47811794526d"
        },
        "item": {
          "id": "3339d56d-7485-4827-9963-741d41e759c3",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "e1e95e79-e73a-438d-962b-49063f53f983",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "1f6df471-a913-4231-b78f-b2fca7b9f2f4",
        "cursor": {
          "ref": "aa85cf3a-2dae-4566-8b33-00c71a14a34c",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "56cf5c7c-af9f-4a27-8c00-0d41a2a991ef"
        },
        "item": {
          "id": "1f6df471-a913-4231-b78f-b2fca7b9f2f4",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "7c200f64-a3b2-4cc2-9761-b34e768d644f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "3b580b14-a313-4bf0-961c-c4a4ed77fa44",
        "cursor": {
          "ref": "ee1659d3-ff66-4d23-b70b-6144b97aef69",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "590f1935-d24d-49ba-a47b-e30d8f49f94c"
        },
        "item": {
          "id": "3b580b14-a313-4bf0-961c-c4a4ed77fa44",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "c9694328-5d81-4c34-b6ee-c4ced2527caa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "1fd6d02f-d1a3-4c03-9f78-e77a4d0fc753",
        "cursor": {
          "ref": "84c93ed1-789e-4ba0-b61f-512babc2d755",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "3a370041-70d4-4fce-b421-c9cfeeb62f05"
        },
        "item": {
          "id": "1fd6d02f-d1a3-4c03-9f78-e77a4d0fc753",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "731cf3a2-50de-48ab-9ebb-172cbc643ff0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "5bf25f1d-135a-4b73-9435-67cd33dc4c54",
        "cursor": {
          "ref": "722525f9-69f4-4875-9481-8fd054856574",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "a49fb140-1aeb-4f6d-8726-a94a335f8df0"
        },
        "item": {
          "id": "5bf25f1d-135a-4b73-9435-67cd33dc4c54",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "14618461-f2c0-457a-ba74-e9effe511122",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "5a394d66-a31a-43d7-a07e-3fbc9b087068",
        "cursor": {
          "ref": "f7a16dc6-d2e3-4068-8220-221ce90ea392",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "f72896b4-3c76-4866-a51e-03f1c7722ff6"
        },
        "item": {
          "id": "5a394d66-a31a-43d7-a07e-3fbc9b087068",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "514bbf81-6bc2-4fc5-9573-ccef2113ebbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "690c76fc-36d1-46b9-9aed-c346d224234d",
        "cursor": {
          "ref": "20c7d091-ab7d-43df-95cf-c511f11c3859",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "2499a3e0-4feb-4c6a-8ae2-af9c3b138b4e"
        },
        "item": {
          "id": "690c76fc-36d1-46b9-9aed-c346d224234d",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "1616e90b-60ab-46dd-8edd-f130b99f2c97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "2218b68a-36e6-4e6f-bc12-cd25fb84e740",
        "cursor": {
          "ref": "6735a949-2eb7-4cfe-a634-a1de92eab205",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "b1b25236-ab19-4c1e-a987-a875ad63d609"
        },
        "item": {
          "id": "2218b68a-36e6-4e6f-bc12-cd25fb84e740",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "4b557f5b-c12e-4f3e-afee-698bf23947fb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "abff44a5-1a2c-4b89-ad32-1f2cef1fdc97",
        "cursor": {
          "ref": "657cc179-dc0d-429a-ad0d-b86840f8c468",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "9aa1a22d-0155-4b1e-b1a2-b4b2716dc885"
        },
        "item": {
          "id": "abff44a5-1a2c-4b89-ad32-1f2cef1fdc97",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "05ccbb4f-fc4a-49c6-b94f-815ae4eb17ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "8350a0ef-10d9-4fcf-9b2f-9eb5ba47b3d9",
        "cursor": {
          "ref": "f4b22079-2a57-4fcd-a2a0-7cbcf9e70111",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "13ed35c8-ed5e-42d1-a4e0-a5fc21e3ed6b"
        },
        "item": {
          "id": "8350a0ef-10d9-4fcf-9b2f-9eb5ba47b3d9",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "b58aa90b-7bdd-4ce4-bace-74942e5afb6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "40220f84-f860-419c-8e88-73d69394fbd4",
        "cursor": {
          "ref": "344d2852-3a68-4022-9f26-8cd6dab5df96",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "196c9372-ac72-4d88-b2c4-eb2d1c79a08e"
        },
        "item": {
          "id": "40220f84-f860-419c-8e88-73d69394fbd4",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "aa0d4d74-ba71-4128-8598-eac90a58cc90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "93909824-e095-4c4c-a4d2-07ad3437c868",
        "cursor": {
          "ref": "863ce0d2-acae-4df2-93d2-f13e8c096ea6",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "5590f9da-10b2-42d8-8b14-a54194f5f199"
        },
        "item": {
          "id": "93909824-e095-4c4c-a4d2-07ad3437c868",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "2c2be71b-0fd5-4e2d-8f7f-5b60f1f52321",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "82b0a30f-ad06-4d76-9907-72a046474ab3",
        "cursor": {
          "ref": "f593c59c-8a82-44de-8515-84bf0f639fab",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "ebf04589-20ee-4dc3-809c-3d46982d285f"
        },
        "item": {
          "id": "82b0a30f-ad06-4d76-9907-72a046474ab3",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "83b9cf9b-dea0-4d4a-9925-2cb0a7a50e63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "839c642f-5ca0-4f67-b5cb-00e93c50a5f9",
        "cursor": {
          "ref": "16662be3-ec1c-4fe7-b633-06f423a416b5",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "92999ebe-c6e9-43bd-8b6f-1eca7a686cbc"
        },
        "item": {
          "id": "839c642f-5ca0-4f67-b5cb-00e93c50a5f9",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "ac623c62-e78f-485f-b051-3964bb98a8da",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "95d8cdfd-e2b7-418a-b12c-83e8f6427ead",
        "cursor": {
          "ref": "1ff2c6dd-39ce-49c0-8dfe-4374b0e29bb2",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "85a19c70-7c12-410d-be14-d8599cc0ab67"
        },
        "item": {
          "id": "95d8cdfd-e2b7-418a-b12c-83e8f6427ead",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "531f0133-d332-4c27-a5f9-c12c3802a6bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "fcc262f4-60b9-42d9-9ba6-3a92276a242c",
        "cursor": {
          "ref": "c26e6e73-8ec8-49ad-9789-ece8abd7ef8a",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "c0a44113-9e0d-4efb-a660-4883e841008f"
        },
        "item": {
          "id": "fcc262f4-60b9-42d9-9ba6-3a92276a242c",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "7c7ac9a6-7d51-4eec-b764-d3eda976af7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "a54f8f61-3765-4784-bba3-961294764679",
        "cursor": {
          "ref": "50d743ef-ade8-43de-9298-1d69e1c5cf03",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "9883552b-6591-49cf-b76f-5bdeb3fe0374"
        },
        "item": {
          "id": "a54f8f61-3765-4784-bba3-961294764679",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "d9f445e5-66fb-43fa-9b18-8fa47385c136",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "191db9af-7f6f-4c31-9c03-73c23a4d1adf",
        "cursor": {
          "ref": "dcc829f8-97a2-436f-a199-7bcb67940a7d",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "e27aeb9d-58ef-4a18-93df-e35ddad04fd6"
        },
        "item": {
          "id": "191db9af-7f6f-4c31-9c03-73c23a4d1adf",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "98ef3c55-5e54-44b4-be32-0824255ed001",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "107bcb38-5875-4e83-b72c-9e84983d6d60",
        "cursor": {
          "ref": "3bccb7ef-bc3a-4e49-b4dd-68b4b8667ae8",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "a7846d7d-e5b7-4ac0-94f1-a61525015236"
        },
        "item": {
          "id": "107bcb38-5875-4e83-b72c-9e84983d6d60",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "52cff6a4-89f1-45ba-b735-6289229ee525",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "4cc4a705-5c5b-42a7-9a17-c0e58fee1214",
        "cursor": {
          "ref": "0d7ab572-62b1-4d74-bc36-7eeb5e36a2bf",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "42cebbf9-8f36-474d-a2bb-05a94df78865"
        },
        "item": {
          "id": "4cc4a705-5c5b-42a7-9a17-c0e58fee1214",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "894ac080-605e-40c1-8748-e1fbf88b808a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "9dfe1cc2-8773-43af-82a3-67480e093d2c",
        "cursor": {
          "ref": "c0a97313-009c-4587-8cf0-cc3c7fce8894",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "f9e1565d-aa4e-4a98-ad1a-0981e6f4b684"
        },
        "item": {
          "id": "9dfe1cc2-8773-43af-82a3-67480e093d2c",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "32eae7ab-0dca-46b2-9de4-9945c7e360e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "61ad59ee-52e3-4c1d-8156-46cda279b04a",
        "cursor": {
          "ref": "8bf0bf88-99f1-41b1-9c40-a71643f58388",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "3474656c-9b8e-4416-b3bb-b6afae80c063"
        },
        "item": {
          "id": "61ad59ee-52e3-4c1d-8156-46cda279b04a",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "7a2e8956-8609-4d36-8978-b463e213a6f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "003322e4-e58e-4532-9ce0-f8974de945d5",
        "cursor": {
          "ref": "ea3b7a95-b35d-4e55-9412-bbdc8a2179ec",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "05a52e03-6fd1-4f3a-abbc-e87586cc551d"
        },
        "item": {
          "id": "003322e4-e58e-4532-9ce0-f8974de945d5",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "93f0a5cf-3890-448f-9d79-87e30ed2a882",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "68e989d8-16d9-4b2b-8266-a1c274a369f9",
        "cursor": {
          "ref": "f628f027-0378-4123-8c3e-a61cf8721bb8",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "0d0263a2-f371-4322-bab0-945ba6fa7e26"
        },
        "item": {
          "id": "68e989d8-16d9-4b2b-8266-a1c274a369f9",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "5f6598e6-c617-47bd-bfed-02fb2ac29e02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "5b2b4ee9-80a8-43ad-ba12-437befc860a1",
        "cursor": {
          "ref": "efb4d2af-89f6-44a0-b8c9-a0f23cb6f20b",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "f2469561-9bc7-41c1-9c2c-d6c4723b2143"
        },
        "item": {
          "id": "5b2b4ee9-80a8-43ad-ba12-437befc860a1",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "8db30c63-ec36-4d1a-b804-7252ae1ac1c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "fa501e74-dd62-4b35-9d76-8844331bba40",
        "cursor": {
          "ref": "e5ee5d92-feb3-4bd9-9c34-77d8f2410260",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "78666b03-00f4-4833-8b9c-0cb3fb112a97"
        },
        "item": {
          "id": "fa501e74-dd62-4b35-9d76-8844331bba40",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "92961b6c-1083-4740-9e11-71989255ee3c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "11281eb6-6220-4827-bc5c-45010f440cbe",
        "cursor": {
          "ref": "49e42469-9f2a-40d5-b43a-2521babcd8aa",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "78c7125a-d764-425a-9a2c-dee20c617004"
        },
        "item": {
          "id": "11281eb6-6220-4827-bc5c-45010f440cbe",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "6725e831-e17c-4b7b-8066-209811dd6462",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 59,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "befaecb4-4287-4505-b0e3-59725d2bd5ca",
        "cursor": {
          "ref": "a11c4500-ef10-45a9-b15f-fbec1cf33271",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "a1e082df-9aa1-4696-adb2-cc8c08a33cae"
        },
        "item": {
          "id": "befaecb4-4287-4505-b0e3-59725d2bd5ca",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "3c89e2e8-0e76-4ddf-9a3d-9e8c2f87e1d5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "7e86a8d7-6052-4d46-a1d9-136efc71b68e",
        "cursor": {
          "ref": "53a92082-fcb4-4d67-821d-8c66d1b7c02f",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "88a99ec7-7c5c-4320-804f-1f09ca9f6a73"
        },
        "item": {
          "id": "7e86a8d7-6052-4d46-a1d9-136efc71b68e",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "e3cfd1b1-fd85-4a52-991d-bcea426c7634",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 98
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "94a1ef88-6acc-499a-9c83-5a3a92fdd76d",
        "cursor": {
          "ref": "81052f19-c75a-4492-88ec-c194d53bfd1e",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "c723a7fb-b776-43dd-8057-9cfd478fc3a8"
        },
        "item": {
          "id": "94a1ef88-6acc-499a-9c83-5a3a92fdd76d",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "37f79ca2-2770-4f94-919a-f892d5114be3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "bcc616c3-0eb9-4c44-99ad-bad2846361a1",
        "cursor": {
          "ref": "1790796a-e24e-4c46-87d0-9d87dc9dd3ae",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "44590cd1-3b31-4003-80c4-50265794fd69"
        },
        "item": {
          "id": "bcc616c3-0eb9-4c44-99ad-bad2846361a1",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "6f8f0b34-ca9d-4c7b-a841-f831faf6dad7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "2fe31102-0b22-4757-9850-5d2d18798483",
        "cursor": {
          "ref": "42d8acc7-2eea-4393-bf5b-45e19396eec3",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "5aed7399-4771-4900-a1d7-69002e822a98"
        },
        "item": {
          "id": "2fe31102-0b22-4757-9850-5d2d18798483",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "7551713c-5805-43fd-95b8-0355b20d1d6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "8ac0bbba-18dd-430c-aea8-ee60e8df05be",
        "cursor": {
          "ref": "406dd0d8-6074-4013-902a-073063f7ad2e",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "a165f1a2-234c-4d19-8a77-4caf026dfd1b"
        },
        "item": {
          "id": "8ac0bbba-18dd-430c-aea8-ee60e8df05be",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "c129d86d-6b0b-4717-94f7-98fbf707e173",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "07eb13ca-00cc-4a2e-8e17-717ef692a4be",
        "cursor": {
          "ref": "73322ec7-6d08-4136-84fa-717bd6cf0e32",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "6d874d5b-474b-4a13-9be1-88210dc999fe"
        },
        "item": {
          "id": "07eb13ca-00cc-4a2e-8e17-717ef692a4be",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "3f639e64-56e9-495e-8a04-5ced37307a3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "1c8f78b8-57eb-4ffb-a803-e171500ce6e0",
        "cursor": {
          "ref": "cfe19b17-545d-4c22-8e0d-6989e965d928",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "87b7f83b-93b3-4402-94f0-7cc479355be4"
        },
        "item": {
          "id": "1c8f78b8-57eb-4ffb-a803-e171500ce6e0",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "73529aa3-ed88-46f5-b203-53cf64783ce8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "9efaa37b-0208-4b36-b64b-fb8805226b3e",
        "cursor": {
          "ref": "1cc06744-c10c-473f-a528-5d711bbc6a37",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "da5f4b9b-ecdf-4006-93e5-751590f9f9bb"
        },
        "item": {
          "id": "9efaa37b-0208-4b36-b64b-fb8805226b3e",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "ebd39ff3-6319-40f1-9118-219192551c36",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "7e02cd73-361b-4773-84b9-00c9c830d517",
        "cursor": {
          "ref": "0a36a3a0-24d0-48e9-8db2-53d517f18d30",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "cc7c0c15-a79c-4b84-8673-8f6557125f8e"
        },
        "item": {
          "id": "7e02cd73-361b-4773-84b9-00c9c830d517",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "9853a253-8db3-423d-8962-58aceb5639b9",
          "status": "OK",
          "code": 200,
          "responseTime": 55,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "bb100c88-b922-48bf-a633-495d3b9e0aa0",
        "cursor": {
          "ref": "bf4a1d0a-c3c6-4fe2-b50e-8b82b4993f5f",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "18bdcbf2-38fd-4811-b4f0-e4fb96ccf515"
        },
        "item": {
          "id": "bb100c88-b922-48bf-a633-495d3b9e0aa0",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "b777d4d5-635d-4a65-9717-c87789313ca9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "0320da1b-96b8-4f12-b9b1-48a7fcbeef90",
        "cursor": {
          "ref": "56ddbc1a-d007-4ac8-ae85-77648acbd78e",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "543e8a1d-812f-4dd5-b45c-04a153d2574d"
        },
        "item": {
          "id": "0320da1b-96b8-4f12-b9b1-48a7fcbeef90",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "70533c0c-6705-4978-a25d-6f84d8e01961",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "adc1a151-3e29-49c8-a21c-485b1af543ab",
        "cursor": {
          "ref": "c4a2a1cd-5b60-46d4-aeb7-4a047db55d9c",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "7a114f59-5848-40ac-9eab-85cced4862bc"
        },
        "item": {
          "id": "adc1a151-3e29-49c8-a21c-485b1af543ab",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "cd35ba52-9aff-4e9e-a48d-58134caea0b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "616dc119-89d6-47b3-b030-ed72c26321a1",
        "cursor": {
          "ref": "ab450a72-e0f3-43ab-8fb8-438432552f69",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "9005f2f5-ffeb-40e2-b8cb-8997076f9559"
        },
        "item": {
          "id": "616dc119-89d6-47b3-b030-ed72c26321a1",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "6842df56-98ed-432a-a7bc-a1c73f0b8dda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "f246c895-31cd-4ffe-8fd9-3a497817d2cb",
        "cursor": {
          "ref": "3f383d8b-ea3a-4a84-a5f5-4168b6adbe90",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "5f6d9c8b-9f8e-4d57-99e4-5b26713c2172"
        },
        "item": {
          "id": "f246c895-31cd-4ffe-8fd9-3a497817d2cb",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "a913787e-8c43-4bd4-9eb1-b0533d9cc33f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "535dd70f-d168-48f8-9b18-d05a82acd040",
        "cursor": {
          "ref": "96b820bd-4081-4a93-8149-184a1aa05b32",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "b9380b78-217d-43e8-93bf-b3f600e6ec8e"
        },
        "item": {
          "id": "535dd70f-d168-48f8-9b18-d05a82acd040",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "2612acb3-af18-4481-8544-65dadc742abb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "27e55c6b-d8e0-4392-b162-3f2d6f1b801b",
        "cursor": {
          "ref": "1a4c7c78-7438-4b5b-9641-ad44d4eb122e",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "ce93baee-5f3d-4d9b-a98d-098945b427c8"
        },
        "item": {
          "id": "27e55c6b-d8e0-4392-b162-3f2d6f1b801b",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "420c2649-dc9e-42a7-8318-c040a0f34f9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "8d992649-5256-4ce8-9d95-f9bb5f2f9fc5",
        "cursor": {
          "ref": "e0dae81f-5f4b-49c9-a689-97f013bd2cef",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "a0b6ccbf-0ccc-42f3-ad70-cfc5ac738572"
        },
        "item": {
          "id": "8d992649-5256-4ce8-9d95-f9bb5f2f9fc5",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "1a9ca897-52ed-4f1d-9845-5f116f0017bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "1fbd014b-8605-45e1-9014-5df736da3a54",
        "cursor": {
          "ref": "12de1c6b-7bcc-4e48-a5d2-db5d8235e1ac",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "4be01856-cbf6-408e-b0a8-2b39699e4639"
        },
        "item": {
          "id": "1fbd014b-8605-45e1-9014-5df736da3a54",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "0630c109-f291-4eae-ba20-a4ff9c24a9d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "036cf17a-a400-4f16-a164-feba89cccace",
        "cursor": {
          "ref": "5655eb93-c237-4c67-9c6d-b7785975d952",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "8bda52a9-31de-4950-8136-7b94c8bdbce8"
        },
        "item": {
          "id": "036cf17a-a400-4f16-a164-feba89cccace",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "47b3f82a-44bd-4f6b-9296-213b297b6909",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "5bc19886-b87e-44ed-815d-a59a4c836f78",
        "cursor": {
          "ref": "08e683eb-a01b-475b-8793-bfd7d591d9e2",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "828e155e-ec54-45a2-a28b-27a51affd5fc"
        },
        "item": {
          "id": "5bc19886-b87e-44ed-815d-a59a4c836f78",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "5a70d1ae-feab-4435-9266-938e42e5cf34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "3b7e3e5d-ce72-4492-b359-17f0c1350dcd",
        "cursor": {
          "ref": "c3006607-bc20-4bf3-8807-c7854d1d8f53",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "9b1caaf9-71b4-45f0-aa7b-e152c0638249"
        },
        "item": {
          "id": "3b7e3e5d-ce72-4492-b359-17f0c1350dcd",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "13c11ccc-4914-4044-9f75-c8ec628e7eb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "4d48b0b1-39ba-4aa6-952e-dee267978e79",
        "cursor": {
          "ref": "95b5622f-9f91-47af-8ac8-ce51c3a7beba",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "a47c5902-0ed4-448b-8f7b-2cf5bc4512e1"
        },
        "item": {
          "id": "4d48b0b1-39ba-4aa6-952e-dee267978e79",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "62ddbed2-da9c-4c5b-a187-67c727df0893",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "49c027d3-3eb7-4261-b707-f4260c262dd4",
        "cursor": {
          "ref": "52510253-af6f-4e97-88b0-6fde70684f51",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "fcce97ff-62bd-46e9-a086-c2aba34978ec"
        },
        "item": {
          "id": "49c027d3-3eb7-4261-b707-f4260c262dd4",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "2793dbe4-649d-44aa-8b65-0e2d02bbf441",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "ed06b2d1-9832-4916-9338-f4a8c5dc3627",
        "cursor": {
          "ref": "b0b71d15-fc2d-4b49-ba6c-3d71f744e4bc",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "6a69de52-07b6-4f59-a26c-2e4fc2cb636c"
        },
        "item": {
          "id": "ed06b2d1-9832-4916-9338-f4a8c5dc3627",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "2118c1bb-a99c-4a01-840d-2ada02a8e788",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "ed371e23-7708-4613-b2df-52bfaf460efd",
        "cursor": {
          "ref": "faf3781c-8c27-4801-8393-d97ba4b85586",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "4ec62ce8-bea4-452b-8ac9-bda5d180eb5d"
        },
        "item": {
          "id": "ed371e23-7708-4613-b2df-52bfaf460efd",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "79633307-7119-4812-b6a7-5246fcf31d24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "b47c5118-c7d1-4221-b086-25a3b2e46254",
        "cursor": {
          "ref": "1f9e572b-47a1-4fe6-876b-6aaa3ce3ae6f",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "ed88b9df-788a-4df0-92be-f0c423620bbe"
        },
        "item": {
          "id": "b47c5118-c7d1-4221-b086-25a3b2e46254",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "a8a03dd5-a0de-4a51-b18a-3fe1351a48e5",
          "status": "OK",
          "code": 200,
          "responseTime": 55,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "54721196-8871-40c4-a046-1d4301c0b41e",
        "cursor": {
          "ref": "5cba6aae-b9cc-40ab-9f07-062c999012e0",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "33a745be-ae5a-4ec6-b79d-4a6da99b0c2e"
        },
        "item": {
          "id": "54721196-8871-40c4-a046-1d4301c0b41e",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "47e26ce5-0dc6-46ee-b445-668defa0b570",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "cef6bae8-0978-4049-ad58-9ea816c81671",
        "cursor": {
          "ref": "023be43c-eda7-42b1-8a83-58462f66a12e",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "cdef2113-53f6-4d09-90b8-a39d8f83d4d6"
        },
        "item": {
          "id": "cef6bae8-0978-4049-ad58-9ea816c81671",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "85f0df4a-8c7a-4cec-b431-13d1e57699a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "0cbfefde-7f4f-426a-91bf-524401d6ecc0",
        "cursor": {
          "ref": "3c9400a8-9961-4fe3-a26e-fbe749e5cf19",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "c5c88b42-c42a-463c-9c6e-f48d816382a0"
        },
        "item": {
          "id": "0cbfefde-7f4f-426a-91bf-524401d6ecc0",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "12ae233d-6e35-4c12-9018-3605a355b7f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "aa0f64f9-e7a9-44f7-a3f9-e7a503bc57a1",
        "cursor": {
          "ref": "3aa97956-1f02-4437-8818-df317a75f6fb",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "3ecb647f-33f0-40d1-a80b-96a3e3ccfefc"
        },
        "item": {
          "id": "aa0f64f9-e7a9-44f7-a3f9-e7a503bc57a1",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "5b72da4e-854b-4417-9a1a-3eca6f3183cf",
          "status": "OK",
          "code": 200,
          "responseTime": 56,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "c3a2e30a-6a84-4a65-b89d-9d578074562b",
        "cursor": {
          "ref": "d75797f2-f61c-4e65-935c-b1b734361e95",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "d8014326-2a0e-4452-a89b-51f6091112af"
        },
        "item": {
          "id": "c3a2e30a-6a84-4a65-b89d-9d578074562b",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "06afc5fa-1d7b-417c-af5b-be8561cc7492",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "f4165722-3614-4b93-9723-f75c9534be62",
        "cursor": {
          "ref": "1bbcd887-1876-407e-8c29-fb5096d56824",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "09263280-3937-41ec-a60a-c839e80d1ad8"
        },
        "item": {
          "id": "f4165722-3614-4b93-9723-f75c9534be62",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "c6037acf-0e9e-4bf7-95aa-a68ba72cfb3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "3b79992a-9eaf-4699-8cc2-7219c87aa9c0",
        "cursor": {
          "ref": "0232e956-732f-438a-b5ae-9ddaaff090f0",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "4a1d6b48-f00e-4a65-946d-bade33cf3799"
        },
        "item": {
          "id": "3b79992a-9eaf-4699-8cc2-7219c87aa9c0",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "2e7fed2c-7263-4825-866e-6949c414e7ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "5b84c1b6-0309-4b1a-9cae-6c3faa899f3c",
        "cursor": {
          "ref": "c38d40da-8ff9-42bc-b91f-55bce866429a",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "9ea0b4fc-c5e2-42f5-a714-eb209510cff8"
        },
        "item": {
          "id": "5b84c1b6-0309-4b1a-9cae-6c3faa899f3c",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "63327e95-8c9d-4a72-8a5c-d7a9396ddd4c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "e64cc78a-d66c-4f0e-b97e-c7ca8ba20718",
        "cursor": {
          "ref": "e89fdea3-6eb1-4b7a-9770-7b768f35f502",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "43e65643-f5ed-4d90-bc92-fbfb93b15fb1"
        },
        "item": {
          "id": "e64cc78a-d66c-4f0e-b97e-c7ca8ba20718",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "fbac331c-2da1-4c24-949a-ece79632882c",
          "status": "OK",
          "code": 200,
          "responseTime": 56,
          "responseSize": 94
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "d72528ab-7b44-4887-93e6-e8be8b972b73",
        "cursor": {
          "ref": "8f945b7b-f872-4f5a-9388-8ca2d07ca0c1",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "52a27742-1d9d-4048-9d42-1abe436197d4"
        },
        "item": {
          "id": "d72528ab-7b44-4887-93e6-e8be8b972b73",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "a9dc3718-e63d-4d44-9c6f-073baa8c7900",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "c1eae35c-945e-4c31-b419-761aef267a2c",
        "cursor": {
          "ref": "c361da1c-ca87-4961-bc4b-804a8cd8c1df",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "3d7da04f-8550-492b-9e11-944b0b8ed66d"
        },
        "item": {
          "id": "c1eae35c-945e-4c31-b419-761aef267a2c",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "873c489c-f2fd-495d-b182-069450be2b77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "5b56c43d-281d-4f7a-9f1b-81c9da420e47",
        "cursor": {
          "ref": "28c1054f-6420-47f1-aaf1-423f304b0ae3",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "572f4d24-4a3e-445b-b744-844e3810c2fe"
        },
        "item": {
          "id": "5b56c43d-281d-4f7a-9f1b-81c9da420e47",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "aaed7b36-c98d-4466-9a6b-be32e072f752",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "13674269-1a40-450a-a1c4-9064647a7cba",
        "cursor": {
          "ref": "72550279-c81e-4c02-8f5b-b7f5519bda1f",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "90a61282-44d8-4f40-8014-c4271e1163e0"
        },
        "item": {
          "id": "13674269-1a40-450a-a1c4-9064647a7cba",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "63fea2bd-be14-46ab-aaf3-d4172ccb7c5c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "e798f519-b87f-4b66-87e6-c3a5eb4a7f00",
        "cursor": {
          "ref": "fc68a30a-0796-4ffd-9cbc-e5fa50c2d3fd",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "a42121aa-53c9-4e16-b951-2797b6f7f7ad"
        },
        "item": {
          "id": "e798f519-b87f-4b66-87e6-c3a5eb4a7f00",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "a9bb2668-12a3-47f8-a542-e5671e9af0f6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "1f7493c4-ae20-4ff3-975f-fe24a716555f",
        "cursor": {
          "ref": "dc25fbd7-efd3-4d4c-b8cd-4acf4e1196dc",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "77c3e93c-78f3-4a9a-b474-16ec70bcc829"
        },
        "item": {
          "id": "1f7493c4-ae20-4ff3-975f-fe24a716555f",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "73bc0f0c-6cbf-4940-997d-edcd425d2651",
          "status": "OK",
          "code": 200,
          "responseTime": 57,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "11ba0980-0cb1-4736-8c59-9828c41afd66",
        "cursor": {
          "ref": "05563889-20f8-4b50-8203-988f0e1fb567",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "c58d0a34-37db-4fde-91ec-b7800efcdeab"
        },
        "item": {
          "id": "11ba0980-0cb1-4736-8c59-9828c41afd66",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "86387807-564b-46d5-b0b3-82bbde8b78b6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "caa854ed-2bf9-4b34-a43f-ef10c2fd3dba",
        "cursor": {
          "ref": "2c22266d-801d-477b-beb1-d2f431a913a0",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "28c008b3-dffc-4e05-80d6-7456373a1a97"
        },
        "item": {
          "id": "caa854ed-2bf9-4b34-a43f-ef10c2fd3dba",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "b9eb5091-adab-4162-b482-d4975b69f1a1",
          "status": "OK",
          "code": 200,
          "responseTime": 55,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "6331f6bf-ea83-42d8-9922-27212e975cde",
        "cursor": {
          "ref": "c3521c63-cffc-41b0-836d-3e80cdd4ddf2",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "3e03bd4e-916f-4454-b905-bfc0d9cc0057"
        },
        "item": {
          "id": "6331f6bf-ea83-42d8-9922-27212e975cde",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "574bfe25-02f3-41f6-aff2-5ae18d8e9b4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "3a05ff43-394f-4f9f-b4e6-9c34e7a0fb3b",
        "cursor": {
          "ref": "900e9e06-1108-4b45-935a-ff0adf4d1ffe",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "27bbde15-e4e0-494b-9a8c-d04c05b16ba8"
        },
        "item": {
          "id": "3a05ff43-394f-4f9f-b4e6-9c34e7a0fb3b",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "edb16af4-cfe9-4810-a865-70d0b6c0860f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "80ae6df9-0ae3-4d3c-9368-ce25219615ee",
        "cursor": {
          "ref": "0e0901a8-c0ad-49d6-9805-09b6f40bdf62",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "466f2e5a-0974-49be-ab12-9ed7fc3a972f"
        },
        "item": {
          "id": "80ae6df9-0ae3-4d3c-9368-ce25219615ee",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "87d6f603-acc7-4abc-ab25-1e2970e1fd3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 128
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      },
      {
        "id": "798a26fa-2f68-4208-9c72-371264263dfb",
        "cursor": {
          "ref": "363e0bc3-e11a-43cc-b058-2f68fec0a12d",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "f8afe064-aefa-49a1-8b82-958cfa7294cb"
        },
        "item": {
          "id": "798a26fa-2f68-4208-9c72-371264263dfb",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "a9cbd9ae-1bb7-4630-a414-7e7705cd1fa5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 128
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "6905e194-0107-48e6-8a9e-c91321440bfe",
        "cursor": {
          "ref": "01b82ea6-5cc3-4de9-ae44-3af3f6393d04",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "4450edac-3f8f-464a-be35-0d09b74298a3"
        },
        "item": {
          "id": "6905e194-0107-48e6-8a9e-c91321440bfe",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "1bce3baa-5192-4eb3-ad11-4136e7369484",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "24052ff5-9915-4718-9e97-20f071a7be62",
        "cursor": {
          "ref": "7c92bb38-7d45-420a-939b-aeb6afbe3120",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "0db78f79-596b-45be-a00e-65dedd8265c7"
        },
        "item": {
          "id": "24052ff5-9915-4718-9e97-20f071a7be62",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "feaf35a4-4194-4b55-9d28-7e8a3334b09f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 128
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "5d76df08-4bdb-45ac-bd1c-b8cecf73c694",
        "cursor": {
          "ref": "832aa2d5-b886-46cf-9ba8-f4f57ff63d8b",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "91bcdb6d-7215-4d95-9938-081832f70c2c"
        },
        "item": {
          "id": "5d76df08-4bdb-45ac-bd1c-b8cecf73c694",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "d358303d-29c4-419c-b511-c2ba5d50c77d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 552
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "30cd210c-2b60-429f-bdfc-f14427bdd974",
        "cursor": {
          "ref": "1165edbc-a6c9-4a9a-9a62-098f4ddfe289",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "fbedd4e5-35c7-4910-a2c9-e0bcc816e7c3"
        },
        "item": {
          "id": "30cd210c-2b60-429f-bdfc-f14427bdd974",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "ef52546a-e77e-4c91-8757-a8f67bd4e87d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 498
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "3f17960b-b1f6-4401-949b-b3a661d52e2a",
        "cursor": {
          "ref": "670ba9bb-4c46-4c68-b805-8e55d8161c25",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "aa8f6bab-18dd-497b-b18c-5ad3a943b96a"
        },
        "item": {
          "id": "3f17960b-b1f6-4401-949b-b3a661d52e2a",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "2bc1584f-8db0-40b8-959d-d7173796e5d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 498
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "029a1645-9ce1-4f38-b4c9-951a7eb2d7f8",
        "cursor": {
          "ref": "715637a6-ed97-4b29-8e10-26079ade18ac",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "5be7653f-6acb-45ab-8888-2e8bd4bbee2b"
        },
        "item": {
          "id": "029a1645-9ce1-4f38-b4c9-951a7eb2d7f8",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "d988f034-73df-45b3-97d0-d0aa0cf056b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 498
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "4be2412a-05da-478f-9e10-f2990c6f73ad",
        "cursor": {
          "ref": "e03bbf7a-fba1-45a6-9920-a673b6b677f8",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "c81784f6-8420-44fa-b2b1-0072aad7ff23"
        },
        "item": {
          "id": "4be2412a-05da-478f-9e10-f2990c6f73ad",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "81218cc5-f319-4cc3-bbaa-dfbcd1f67912",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 552
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "069928be-6067-46d5-a894-09a62189ffc0",
        "cursor": {
          "ref": "1cf3bd3e-4270-4263-8f2d-39b7462b6550",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "341fb73a-54d3-4673-853c-d77eb8f60667"
        },
        "item": {
          "id": "069928be-6067-46d5-a894-09a62189ffc0",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "9f25ebb7-4d42-499c-8d53-4b6a7061c07c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 498
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      },
      {
        "id": "802ebb57-0abf-487c-a92b-de67fc23f2d8",
        "cursor": {
          "ref": "b3d8c6c9-8ee0-4b89-a5b1-fb2f1dcce7bc",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "13b6a0fa-00d2-42ce-8049-2914e7998dc8"
        },
        "item": {
          "id": "802ebb57-0abf-487c-a92b-de67fc23f2d8",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "d785bfa8-c320-4e1a-9e26-94801e9db43d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 498
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:254)"
            }
          }
        ]
      },
      {
        "id": "c8c480b3-1a8e-4bcf-8d8d-114a77697ec2",
        "cursor": {
          "ref": "986eca73-4a7c-446f-9e3b-234b7c59c1ae",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "5481d19b-e192-4f54-9010-1f10f9df6e87"
        },
        "item": {
          "id": "c8c480b3-1a8e-4bcf-8d8d-114a77697ec2",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "929995bd-647d-42b7-8b69-7b4eaa868bd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:255)"
            }
          }
        ]
      },
      {
        "id": "bee97d7c-f3b8-4388-9c8c-9d8513ee80dc",
        "cursor": {
          "ref": "2f3edfd7-4c4f-4f1f-b7bf-5a6ae69c752f",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "f4d2c8e0-c507-4721-ae37-5f8ea6e4cca2"
        },
        "item": {
          "id": "bee97d7c-f3b8-4388-9c8c-9d8513ee80dc",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "493a082b-4e2f-4649-bc63-2e000aaedbcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:256)"
            }
          }
        ]
      },
      {
        "id": "f2fbe498-3d9d-4586-a40a-21659978f8f5",
        "cursor": {
          "ref": "5134ab96-bdf8-4a7d-8dc5-5966f8b679ae",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "8cc7a380-93f8-44fa-ab97-4884ccf18424"
        },
        "item": {
          "id": "f2fbe498-3d9d-4586-a40a-21659978f8f5",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "3e131c32-8491-4b39-aa47-7c9fa61d6aef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:257)"
            }
          }
        ]
      },
      {
        "id": "a751a630-cca3-44ce-8130-1be994e33e5b",
        "cursor": {
          "ref": "879f830d-b604-4ec0-a5dd-f81d7a404543",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "2aa06add-cc3a-4130-a57f-fa27c99e1c73"
        },
        "item": {
          "id": "a751a630-cca3-44ce-8130-1be994e33e5b",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "c99a5ddd-ddfa-4099-8092-648bb53b1f90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 183
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:258)"
            }
          }
        ]
      },
      {
        "id": "2e4a1292-60a2-4a92-8f47-7346f486ea55",
        "cursor": {
          "ref": "f5dc04a4-38ae-420d-acbb-9266ad556c7e",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "3660b8a3-96e7-460e-821b-3e1ddf7ddb49"
        },
        "item": {
          "id": "2e4a1292-60a2-4a92-8f47-7346f486ea55",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "2ef5504e-5d93-4895-b856-07a5940c9666",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:259)"
            }
          }
        ]
      },
      {
        "id": "cfd9f907-fc13-4a5c-819b-0dd51c16e288",
        "cursor": {
          "ref": "0db39d2e-95f7-467c-bb86-3b36f7991fdd",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "866cbeae-0cc6-4b7d-be88-ad44eb2281cd"
        },
        "item": {
          "id": "cfd9f907-fc13-4a5c-819b-0dd51c16e288",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "d8cb2a4a-5b04-4314-895f-9c8e6caf4ac3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:260)"
            }
          }
        ]
      },
      {
        "id": "e41aa67b-d9d0-40b8-a3c6-d4b348f63175",
        "cursor": {
          "ref": "2853b869-b974-4953-8351-6d60d4bf0f81",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "1f6c58e2-aacd-48cf-8171-bf4c87d3bcd4"
        },
        "item": {
          "id": "e41aa67b-d9d0-40b8-a3c6-d4b348f63175",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "5f28c200-cde6-44a0-a950-029c58c3ded2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:261)"
            }
          }
        ]
      },
      {
        "id": "744831c6-b0c6-428e-b20b-786fc2e1c90e",
        "cursor": {
          "ref": "3828fc43-9fb8-46a2-b564-9e3ac0c76098",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "c4b4b191-601d-4728-879a-32b394df993b"
        },
        "item": {
          "id": "744831c6-b0c6-428e-b20b-786fc2e1c90e",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "4e284442-c018-4fe5-a2f2-b95a1f35f35f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:262)"
            }
          }
        ]
      },
      {
        "id": "bf831de1-a8ed-4775-913c-f031bcc71f67",
        "cursor": {
          "ref": "2eeb2ae3-4f74-45de-aa14-bcfb69299c82",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "7e0bdf47-cde0-48b6-8e50-803eb341c9d6"
        },
        "item": {
          "id": "bf831de1-a8ed-4775-913c-f031bcc71f67",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "286a2baf-a1b0-4c8b-bb4f-a367c7f11293",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:263)"
            }
          }
        ]
      },
      {
        "id": "be806cf7-229b-4442-9a4f-bfc6c2ab8440",
        "cursor": {
          "ref": "db06c4e8-a3b3-444e-bfcc-8f784fa99412",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "257c2395-963a-4fe9-8ddd-18778f5d11cc"
        },
        "item": {
          "id": "be806cf7-229b-4442-9a4f-bfc6c2ab8440",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "5b766e9d-d6c1-4e78-9c96-e4e6c0a318c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:264)"
            }
          }
        ]
      },
      {
        "id": "a4aaca31-a49e-4d75-a7c0-fc0ffcb54f99",
        "cursor": {
          "ref": "e8129b15-8083-46b2-839e-48dc2c19f0ad",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "caa290a6-d600-4f89-add3-d096ba50a4bc"
        },
        "item": {
          "id": "a4aaca31-a49e-4d75-a7c0-fc0ffcb54f99",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "015b2057-446a-48cd-a370-4d70ac3d8956",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:265)"
            }
          }
        ]
      },
      {
        "id": "b5753d24-fccb-45fc-b028-06780acf25b9",
        "cursor": {
          "ref": "1a297a4d-3949-4fce-9ba9-bc08078034cf",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "fa6633b5-bd4e-4a30-b38e-64535eb1b3d8"
        },
        "item": {
          "id": "b5753d24-fccb-45fc-b028-06780acf25b9",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "8239e5b6-2ead-4845-9e90-10ecd986ff3a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:266)"
            }
          }
        ]
      },
      {
        "id": "01014157-681b-4ee6-82f0-3647a66223b3",
        "cursor": {
          "ref": "b4dd63f8-8d22-4975-9e1b-e1bbc4036dc3",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "0cf07ac1-4c5c-4c46-b63b-a65777e88451"
        },
        "item": {
          "id": "01014157-681b-4ee6-82f0-3647a66223b3",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "8d5cfb41-3da3-43e1-b374-8d858fab7cf7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:267)"
            }
          }
        ]
      },
      {
        "id": "94f1061f-f260-4f22-a6ba-a842e451ae28",
        "cursor": {
          "ref": "d6e9a9f2-638b-4165-a725-9f7843a6784e",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "19504406-cef5-4e73-8b6d-41a1fd772d26"
        },
        "item": {
          "id": "94f1061f-f260-4f22-a6ba-a842e451ae28",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "3adafacd-f113-41c9-a0c1-2a69e20c4483",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:268)"
            }
          }
        ]
      },
      {
        "id": "de5e07b1-caba-44cb-b2f0-77e2e86f1a7f",
        "cursor": {
          "ref": "6fdb7d57-2121-4ddd-ba64-79947d2b9363",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "016e10a4-9a30-4f5b-9186-c1cc8e734178"
        },
        "item": {
          "id": "de5e07b1-caba-44cb-b2f0-77e2e86f1a7f",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "d32e2d35-8e48-4754-a1b1-ad4bb95c0dfb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:269)"
            }
          }
        ]
      },
      {
        "id": "40a35cab-4103-4d47-b241-1a96e00ac3f5",
        "cursor": {
          "ref": "b7fbd3e3-38b4-4d8a-8ff3-3aef2ccd9b88",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "c4652391-faac-4d00-84fd-a534254d15d5"
        },
        "item": {
          "id": "40a35cab-4103-4d47-b241-1a96e00ac3f5",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "3cd92f34-48e3-4c4a-a881-92d0cf6a5e97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:270)"
            }
          }
        ]
      },
      {
        "id": "079c4ace-c472-4ca5-98e0-8808b159405d",
        "cursor": {
          "ref": "c3afe344-fde3-472a-b468-f914ca0fd7ec",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "7db38c52-045a-4a55-b42b-11f183fd07c1"
        },
        "item": {
          "id": "079c4ace-c472-4ca5-98e0-8808b159405d",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "4d375412-658e-497a-947d-9f0fd8c8dd08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:271)"
            }
          }
        ]
      },
      {
        "id": "6db1824c-c8c0-45dd-9a82-0b1ff78eeb01",
        "cursor": {
          "ref": "700589f9-a5cc-4fde-bc24-9a45043f0638",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "604c6f3b-47e6-415d-81b9-6491375e7e77"
        },
        "item": {
          "id": "6db1824c-c8c0-45dd-9a82-0b1ff78eeb01",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "ce828d44-22a4-4cf3-9c55-01301f2c4ffa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:272)"
            }
          }
        ]
      },
      {
        "id": "5b4b1b96-ce33-47bc-bf5e-5b837337e515",
        "cursor": {
          "ref": "9741e15a-a2f8-4c2a-8a44-98940dcda42c",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "53c5aa1e-6eb6-462c-b0f7-02ecd8dac216"
        },
        "item": {
          "id": "5b4b1b96-ce33-47bc-bf5e-5b837337e515",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "07ce0c65-fffd-4c78-8c63-956273f52586",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:273)"
            }
          }
        ]
      },
      {
        "id": "529a028e-d88d-484a-8d51-3398ff9c50b8",
        "cursor": {
          "ref": "4c5ff1b9-74f3-47a7-b4d7-967948a88098",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "bace2e7b-607d-4b53-9b07-84dd4ffd82ab"
        },
        "item": {
          "id": "529a028e-d88d-484a-8d51-3398ff9c50b8",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "ee5a8413-4fb6-4940-99b0-c4e0c67bfde9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:274)"
            }
          }
        ]
      },
      {
        "id": "a471070f-98a0-4b76-b6f4-912859619a4b",
        "cursor": {
          "ref": "533e84e1-8703-4b53-b472-53053facdee9",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "b4f46248-2d33-45a0-a4ff-ede8d1e34939"
        },
        "item": {
          "id": "a471070f-98a0-4b76-b6f4-912859619a4b",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "729df9fd-8ea5-4a79-a65c-ffb128cb35f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:275)"
            }
          }
        ]
      },
      {
        "id": "0f0fbeff-e790-4f7e-94a6-60bedcd99302",
        "cursor": {
          "ref": "3b9a83a0-c697-4446-a56c-eda1561b065e",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "ed251aac-a13d-42df-84a1-1d6835f6dae9"
        },
        "item": {
          "id": "0f0fbeff-e790-4f7e-94a6-60bedcd99302",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "9615e452-1a9e-4673-9c4b-99584c5d9dfb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:276)"
            }
          }
        ]
      },
      {
        "id": "b94e14bf-3922-4e29-9c8b-4f720eee20bf",
        "cursor": {
          "ref": "5aac8def-03b2-4a76-9fd6-b92e189b5bf2",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "b5864c49-ad69-4ab1-84f4-a12f3c791b7b"
        },
        "item": {
          "id": "b94e14bf-3922-4e29-9c8b-4f720eee20bf",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "5e150b53-7d32-48d9-ba38-4a371e5a0731",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:277)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:277)"
            }
          }
        ]
      },
      {
        "id": "540a112e-0fbc-4b9e-a7b6-a4c7299a6c7e",
        "cursor": {
          "ref": "5321b71a-e80f-4191-8cc3-92ed314863c2",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "41a35033-aaba-44b4-9f5c-6fb001e2c142"
        },
        "item": {
          "id": "540a112e-0fbc-4b9e-a7b6-a4c7299a6c7e",
          "name": "credentials_verify"
        },
        "response": {
          "id": "8209683f-9e1f-4aa0-a47b-c50aaf2c96cb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "c857896b-4434-4552-9b6e-209f49fab351",
        "cursor": {
          "ref": "71524db5-2ef7-467f-b149-ce2171630a0d",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "8fbd1b91-dac8-4936-8883-cb2692f6fd32"
        },
        "item": {
          "id": "c857896b-4434-4552-9b6e-209f49fab351",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "c292fafb-4036-4453-b173-e3584d4d918b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "4361f532-47af-4d89-b8e8-69526c33c1b0",
        "cursor": {
          "ref": "4c2c8230-b0de-45a9-b462-2c773a4865d8",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "f2b3a230-4034-48b3-b550-5bb50bc889d7"
        },
        "item": {
          "id": "4361f532-47af-4d89-b8e8-69526c33c1b0",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "60395ced-0cff-469c-b119-2c76a6c0f72a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "4361f532-47af-4d89-b8e8-69526c33c1b0",
        "cursor": {
          "ref": "4c2c8230-b0de-45a9-b462-2c773a4865d8",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "f2b3a230-4034-48b3-b550-5bb50bc889d7"
        },
        "item": {
          "id": "4361f532-47af-4d89-b8e8-69526c33c1b0",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "60395ced-0cff-469c-b119-2c76a6c0f72a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "629cdb0e-7493-442f-b37f-beb2c40428bc",
        "cursor": {
          "ref": "aa833355-484c-44e5-8b74-e80b7ce8fbde",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "7ba6e302-9ea4-4aa1-a0bf-ea736f0a0f57"
        },
        "item": {
          "id": "629cdb0e-7493-442f-b37f-beb2c40428bc",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "5111b939-1238-47cd-9c73-57ff2a41fa83",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:281)"
            }
          }
        ]
      },
      {
        "id": "4ac2d668-d900-46b5-831f-caa3c5703a8e",
        "cursor": {
          "ref": "0cfc98d9-728a-4042-aee6-26f31b83c9f7",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "0f04520e-7a87-4b94-92ba-b85aae58d778"
        },
        "item": {
          "id": "4ac2d668-d900-46b5-831f-caa3c5703a8e",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "79a0db7a-700b-433a-a132-3a6c6927fa4d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:282)"
            }
          }
        ]
      }
    ]
  }
}