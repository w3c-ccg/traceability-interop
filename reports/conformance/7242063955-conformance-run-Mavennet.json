{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "f71694fc-5afb-40e0-96cf-e87d3e21a258",
        "name": "Clear Cache",
        "item": [
          {
            "id": "856503cb-660d-4920-a3e7-fbc3bfa1e85e",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "401b9a6a-888f-40ba-9cb3-b8f0a6510c16",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "0c479db0-4ae2-45c8-99c7-b4772baff0d6"
                }
              }
            ]
          },
          {
            "id": "dcd148db-7869-4926-ada4-d630086b4058",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4d07816f-4876-43b8-948e-ac8c3ad20ee2",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "89de4aa1-f24c-4449-86a0-ea5f02f37744"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "73bf69ab-0f47-4fe1-bb81-abd4557941bd",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "12eef097-271a-4b56-907e-dec879dc2eb5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "70dc1a33-da47-4034-989e-3e474ae461ad",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "21c8c448-fae3-490c-877b-a7567269cedb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9b6fd5be-5534-49e2-8558-f803a054a486"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5b6a5b07-cc40-4382-b40a-b59ce7fd48df",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "420df107-d09b-46a7-97d4-84542aaef6bd"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "13a5ad0b-7d0d-4f23-a134-01a621fbe991",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "72982a37-02de-4e9d-a0f7-363a507d86a0"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "759c3370-7123-43a3-a120-a1488ac1b657",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "6512c466-1b36-44ca-816a-2207bb3cd14c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e85fad7c-05f0-435a-bdc5-72fd527dbf17",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "289b4d22-bfd0-4df4-8ead-8439d6a3695e"
            }
          }
        ]
      },
      {
        "id": "58475228-5b4e-48a0-b92a-fb3e560bbead",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "b5a28004-7651-4750-bbe8-b3e2e6e80fc0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "28da8af2-4f0e-4175-a172-18b7090f67ba",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "871d4aa2-629b-4e7e-af22-c5b023e92c95",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6af529ae-0c49-4a50-908c-07dde863259e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fb533f15-96db-4dcd-bcfb-cb169ab84850"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ade2cf9-28ea-42c3-8f7a-b00948ed5d06",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53e13308-c517-4f27-acc6-ae0a6e124d5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "65370f27-37d4-4b9b-abd0-f7e0f739e90e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9edca3a-f207-48b3-bf17-773e4661b900",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9352ade-6b51-456e-9960-7d280d3a9bc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "33dba900-cdbd-49a2-8cc1-994aac30a123"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4026875d-c070-4c3c-af02-1581b8d18bfa",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6d1f3597-dea2-471e-b591-863fdc2b25dd",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89c27f95-ea6d-4e43-a33a-e69f1be7a077",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6d7b7b6e-ed86-4a5e-bc0a-4a43bce42a44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c96c40a1-a8b6-4538-8fae-ab8c3187de08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bae2dd4-87fe-4c97-8ae4-c164271adbeb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "45d8755f-eeb4-49a4-b910-4e94a852a49f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6184e91a-8237-46d6-bbb4-0a6ee088a0c7",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8d6c6a86-d978-4aa8-9338-c8bc4673308c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "f6261344-8726-462c-9d7d-d9660251005b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ee039ca4-0913-42e9-820f-2461fb7e6acd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "a7980ab5-5098-471a-b2ce-b7eaed12a12e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b2d5aad2-f3e8-4448-9235-6512684a2594",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "50f1d23a-dd1f-4433-ab92-f2293a98d8bb"
            }
          }
        ]
      },
      {
        "id": "ccaac3da-d0c3-42ca-965e-662726a4b643",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "bb7e9989-7a19-4814-8d82-d54a36493dc6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "55548e87-491f-4fc6-af31-ecc600ee79dc",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "da4ccc9a-3d09-4805-9f55-5e6ffa1071d6",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01f9f720-6617-49f8-ba32-5e6956df4734",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80f3aa4d-924a-440d-8509-329dd1a9964f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bafe5404-e445-423c-bd85-d8073f7b52c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c9a086d9-2269-4b05-9f67-b96bda965a85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77be45de-34e0-4572-aa82-178b313925b4",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c5e0a28-001e-4286-b4f6-8bed243ba67e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd8dd779-cbaa-469c-9050-0b06ac43480f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c303015-376c-4605-820e-7d90096ac730",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "73c42de4-f9d0-4349-bb87-6524608446c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c03045e8-ad5c-4091-9d3e-2dc7fae60c48",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c9ef7bf-025b-456f-a9da-69df47561223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52866fa6-dd6d-478b-974d-e0fe4e0a9d7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c69b0725-ba77-4006-8db0-56c7ac4474ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d2607e67-ffe4-4a5b-9c57-0020b00ca8de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "373c8f52-cb25-4a6f-b239-f9f1737f9345",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad4d740f-a6a7-4534-b12d-b0782c77c5ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9420e1ea-1bf7-4110-8a1d-eb0f4ad63a3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56622003-a143-4393-abd4-3dbf76359d67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e3aeae4f-923f-458b-91c5-6798c4b852a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e63f9d48-6e11-4058-874b-8510d6e4f163",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29743b38-819d-488a-9bc9-a80634a9fb89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f422f0a-2feb-45e3-87a7-c572c5e8f436"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2769481-a65d-4286-b64f-584b3752dd51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0f42e4b1-80fd-4b49-a698-26917b5fbd5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ab5333e-0231-45fc-8c4a-f3243508106b",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2e3910a-54d6-44a8-be50-68467a5df8c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cdc834f-20f3-46dd-9fcc-40cee708d1f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b183b74b-bac9-4e78-a68d-104ad992269b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "91571986-4e47-4221-b746-2625ae1cf344"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6bf8ecf-bbdf-4270-8021-557941de119d",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b48625f-a75d-4cce-9cf6-98af3215c1e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6675409-e73e-4d02-8513-9d858dfddd6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fb4d580-0d77-4b19-baab-6f41942f519b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d679317b-778a-4297-a517-43a44829b76d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9739cef-f6f9-4665-9491-e9a84f255a26",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab8e43e0-c816-46ae-ac9c-f372a57c7a10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a9044ec-332a-43c6-9b66-dae37792c72f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f746f4b-44ef-4994-b614-9b765f97b60c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6eb86560-a3e5-4f5b-a4dd-d17c51164e7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac762361-f3c3-4d34-99f6-5e642bb95502",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e1a2e5d-4a48-474b-a8ab-c00aa05fc77f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3bd311f-45ce-4239-96e0-676a4223fe25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4de65ad-ce5a-4547-929f-a99f817e77eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c1c22324-ad69-4324-a3ca-8500328befcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7125cd7-168f-40c4-845c-33ffaabcbec3",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5769fa3-1198-4f42-9ce7-a450b90a26df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a8a3a53-d5fc-4185-b6e3-0e69df9309cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be5198b4-37c3-40ad-af04-cbd752f28b14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "831c5f41-090f-4313-8715-b44f4b2698fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0a10ea5-1d80-4036-9e37-95d72a8d53a8",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc744e4f-199c-47aa-b802-99fdfe2b0e55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "baea7023-abea-4b46-87a8-cf707d61949e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5af1673b-346f-48f5-97b1-338bda72000e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8e80f1aa-6f32-47cf-81ad-9ec4bb3e90d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1142dbf-ccda-4f03-9f58-714c69e62c58",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a83b376-d5e4-46a2-b1c1-b7f606d093c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b927ad8c-e91c-4467-b764-6c7be536d704"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5af335df-89fc-4dd7-9158-f4cc7a031955",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dd03909c-0506-441e-acc8-047e2550d583"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de13f740-c42f-43cb-b876-3e767b75e134",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ea2173a-4609-4caa-be4f-f5c452de0847",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86e0be00-0659-400e-84c4-ca5bedf8abad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4253e110-941a-4952-bdcd-29952d766602",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "74d8da05-17a4-4d5e-9e73-8e87cd99c8ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b237efe-9910-4b4d-8d3a-6be85e090f8d",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ba2f9ef-1817-4d1a-9f15-6c08294c73dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49489611-e6ea-4078-a205-012b6d1fb073"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "140e7127-aa76-43aa-8c2e-922ca0579842",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cac6b355-6110-4a52-9397-92b575d5a12e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76ba5d07-fb33-4e63-a957-3da31120a20e",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6c11754-c512-4830-b57e-3163688a1fcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3309fd3-089e-4d89-aedc-fbf0c3b107a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60ec54ce-234b-4151-b167-8314ead23964",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "24c292a3-ca29-4fca-b382-8da2cb2d8a6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaf941df-012a-4128-b59b-6983e6d7910f",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44677529-e382-472f-ad9e-d278afae3379",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c441a19-bc65-443d-8541-cd886a651bca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca12b49f-0581-4053-8b55-175a4c413c59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5f3982b4-f217-4adb-989f-4e5639191b72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd19e55b-feff-4968-81eb-9f5ff1681cec",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57622df1-8dcb-4569-b294-bd9c5b47d71c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70561627-b9f1-4298-ab33-56d23f929705"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0f3bc51-078b-45e7-88ed-f185630afd17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "65bbef50-7e15-4357-a787-ac9fa0a6b929"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6338bff0-e656-4cad-b9b1-1e5dcd36108c",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8842a083-a97d-4360-bb5d-c7f0ab4c8814",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cae368c1-d711-4acc-9499-4c0b16d975e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c49b8a69-1ba7-4bad-b72d-10d7b80e3845",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c77b431-0444-47a8-9c53-f327df37ad33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90a6c799-a1ce-4ba5-9405-7f35d235c7d2",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a987e10-9507-4cc8-8290-9812bf9351df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54f0bde0-1c96-40dc-8c43-6edadc1ac523"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0121cc8-c38b-4125-be64-fb03bdcee7bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b65266b-3665-444c-921e-6cdf8ad07546"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9dd8bd3-8161-475e-8d7c-b11ca9dbabde",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61ef9b34-4696-468c-8d49-8d3c2c659895",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36088d45-3481-4a45-b6cb-dbd37207898e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b031e7c7-d740-484d-abba-e16bd74a570d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "23a78664-23db-4aef-a6e8-01dc32dd0bd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "819c53f1-7fb9-4ef6-9b97-3bcc61185ade",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e302c2f3-0300-4e54-87c9-336e811a35c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a18e83c-f664-4ca0-91f2-bb37257fc112"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83eb0a8e-45fa-4712-a5df-ab7ac36eb53b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "61b9e326-dac9-44b0-9292-09b9332d41b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "897e2799-f130-4bfc-8938-a18ebdf6f6d0",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a704977c-3687-4aa3-8993-29d42f4c8cbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea75f7c3-818c-4399-8d88-cccf2b934256"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e578c07-782b-4467-a62d-af10f9223f06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8ff9d566-2372-4fb8-9e56-000f4a942f86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f91e210-9f6b-4fb5-b0af-52a9411e0ec3",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb110281-7136-464b-b0a6-43e83e779e8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b829fa7-3888-4c0a-8f4a-991b380bf2d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b264d8e-703b-4d8d-b3d3-50e7b8e7551d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4387d708-d993-4832-b6cb-556ec6ec1b7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf2adc22-c01b-4f97-91be-09f7352d096c",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50d4c6f6-c30d-4de4-997f-04c18407743f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd92e2f2-d507-4051-8604-059622f70441"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4c98add-955b-46fa-a3b3-3d5c96a31928",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b1129d5-db9a-4d6b-a651-c2937ea2e66e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b9aa62d-1afc-47d2-9456-8f700ab3baba",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f059fe5-603c-4278-a8f7-5142b098a7da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2bcd31a-9d14-4e20-b091-236ec661ce8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4de4a16-be32-4ec9-b0cb-3fc3bfdc9222",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d7b02a8-0e58-4c52-961d-0c59f48d333d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec6496ea-9867-4e67-a745-19becee1cdf9",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4c13213-09e0-48d6-b5da-7f761860ec61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5206b207-4f9b-4085-a339-b46e2699098e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76cfbaf8-fd7e-44ea-803a-66f8bed445ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a69af7b-ee35-478c-be22-db269a7cf6a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8aa13a28-ed62-47c9-b6a2-665b019a778b",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2e1067d-6e95-4df6-8cbf-f1f1b59cc597",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "186a11a2-5bca-44d0-adb8-cd8a6c91434e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74c7f536-0c59-45dd-87b5-5e97d1733ceb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "42a0421e-6296-47e9-951d-1c16bea19e2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cf85081-19e8-4477-a5ae-f1edb7bf351c",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8421e7e0-f85d-48f7-8640-26d988ab6c7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11e9b16c-daf7-452d-a5aa-3d81c4981230"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5371f0d-5838-4ca4-a3f9-f7acba9a090c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "732168c5-142e-41e4-98d0-026d18c99fa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "138cd0a7-3377-4182-a267-b275e780b32d",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d057229f-e6f5-4b8d-b1bf-ed489868161e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49a61ea4-6da9-41ae-b2c7-f8bc150e56b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d891b2e7-129d-4717-887c-1d11d8366bfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "19cc43dd-c3b0-4774-84ce-f41dd805fbd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "097ead16-210c-44c3-a47c-b8b19b1ad980",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f13a9b2-f3d0-4710-9b82-f4f131a18e2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b00aa30-0ae1-4cca-892d-c6cfe2fd382d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a63d2ef5-49c5-474f-8ca1-39bc938c85fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "d631afc9-b032-4d17-ba31-3301b4f0dd98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f02ff9cd-92cc-4d32-b8dc-c845f990c997",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7809030a-4caf-4a96-ae3c-5090eedf701b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5c441f7-f76a-4cc1-b692-844a8d18b9c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "015606a6-6dc5-4e1a-8842-8ed71c9c830f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ebe82d63-e6be-46c8-8b5a-edae1a1bdbea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bc393f9-106e-4cf9-9a68-ddedbe8cfd2c",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad5865dc-8a5f-4a6f-aa86-6f18d1805999",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e406a558-810c-443e-af33-cb2f74a1f09b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcd36565-e352-4f58-8f6a-89d1ccfd6d88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec921fc5-b7a7-4d7f-875c-5ca84b864a47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0572c956-5813-4310-a90f-ec89cf1e0ba3",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c369c32-7538-4dce-bac6-5bad7203e606",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "977cc74a-85cd-47fb-99bf-4b168ac6aeb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b412a4d9-2499-4863-a60a-c476b9566ea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b0e703e-f20f-4053-9f3c-838dc4f9a148"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5a76f80-4268-42c6-8ed2-cd4e778637af",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "550a5099-42c8-45d3-ab97-1088c041e1bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2bf98c3-d9d3-4656-bb8a-8faa9e6b8629"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0245125-450b-4258-ab9a-63089aa6ed10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d3ffa5ee-4e28-4621-b40c-efad160c737e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efb3cd10-9ef8-4c19-ac69-74cf319aa2fe",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdd9e664-befc-4aa6-a1d6-28e9f74a9214",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ce272a8-a78b-41a0-90f6-d76e5c404451"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcf3c805-42bc-4e49-92cc-153fbc711402",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "9769141c-7302-4117-afe1-478d9b4be110"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48478ab8-c098-4b63-8e17-8aeb6f02cfbd",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56ceb989-06d2-407a-8c70-09976ffc9cc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ff710e6d-372c-4749-b912-f47a20df31ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed2b349b-a0f6-474e-8bf5-b8e40111e7e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "047884de-bec5-4e69-b8ac-0b67546fefa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "410f87bc-b51a-4b96-abcb-abbf71c69ff0",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bdcf889-af0c-4231-b530-a4f2c83efa09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53929860-8de8-4faa-a467-fa3523357591"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c3c661c-de26-4ba1-8c22-5384e67f8efc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "23a2441e-f929-4acb-a632-57ef9cd71c73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b7d7083-7d12-4656-aaa9-027eebb94819",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc9af10a-01f8-4e50-8664-9e00ac16fa3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac48dab6-b7df-4e3d-9a7c-ddf56e3ec2cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80ea9db0-2bb6-4635-9a16-c32c8ae8db69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8ea786a5-d42b-447f-9c51-f1f2178c32d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c85241f-f962-473d-a3f5-f095c9bd2f2e",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08788ba6-b907-44bd-8ee5-b06b13a0c0a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "422513cb-d6e7-47c4-9b84-e6506ca74b6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a5fa8cc-2e79-4de9-bc99-09240d868a3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3a69316d-44b0-46b2-8db7-632a1834567a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d84c8354-c099-4404-b945-3c725284cb81",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cb5955e-d401-4245-bb39-7d4560cd4ba8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9790dda9-e1fb-4028-b8f9-7a8e97367511"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e26e8230-40e1-4670-aa0c-37043fd8d347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "02f10c2f-5add-4d29-8e0f-990688415988"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5b0596c-5b8c-4edb-b505-880cede95e12",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e06824b8-6930-4b94-a58f-827d16f0e919",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bf9845d-4b2e-4305-97d0-7352585b8b86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2877a36-7187-4af8-8e1f-b8922238c358",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ad40a7b3-2ff6-4846-b056-95a530a3bfb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e445ea2-66dd-4506-91c3-8bd87eeea243",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59dd95e6-1be4-458c-9157-67e8b654ae3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c94282f-d928-4227-843c-4c265bc0816c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b1c09ca-dcf2-4a85-8fb9-2aa1881704a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "b52958b0-655d-48ec-a724-81ea5c7accad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "676e0b37-5209-46a3-be20-075f1b3fc871",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "985304e8-b0e8-4161-bcd5-d73f616e0056",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5886bd59-ab50-4073-a98c-c729fbf0d726"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0902c99-9f96-4adf-92f0-ee3126644d7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "9762b14e-8bcd-4511-baed-2b0b01d9f81e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efd55fda-ddd1-4162-b875-e99a1f540bfe",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6160b853-96af-42de-a526-eec6e35e19dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bda57bd-bca3-4799-9c4b-bfaf68301542"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "966f1d7e-7905-4054-9eca-c03f4191fb78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "77280d96-4a5f-42a9-8e76-b314ffb5bf4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82b14dbd-cb2d-4ab7-a793-992fefbe82c6",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18dfd9f1-2466-4017-8908-f45db1c7ef90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42a1c752-e90d-4e08-97e0-65f7fd77bcfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "139c51d6-6f97-4cfe-9b6b-1a9a8f9d2f0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a0e8e22a-6d7f-41b3-9f0c-d8b1fe736d19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3c7d475-a34d-41fc-91e9-e3c1083cc3fd",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4b5e45d-7de1-4d71-9ec8-288764e01666",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "274a96e9-2ee3-4be7-8b06-5e292dff3d1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4957e873-d19f-4a16-a764-b35f1c7637f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "895b4136-e39f-47f4-ae0f-d4b19bdd7461"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73049c51-19cd-4f73-88e9-adbe3753384c",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "feea99a6-01cd-43b7-aab4-041d808709f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44898446-0736-4b22-95ad-de38114b0ccf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5be0621-01bc-4e7f-b496-39b685005f1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0a4fee9-2f22-4fbc-ae0b-6ec7e05abb04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfe25b25-9ee5-4498-abcd-ef9450f77ae4",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96312b15-405d-4077-932c-92c48b02a4e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98b413c4-44f5-4c56-b34a-6de00206a306"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9021c448-52e7-44c2-aa5d-5092db8212f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5fee274-39b0-450c-9ab4-03d5c7427fc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7b83954-bd27-47ed-a872-af861065ab33",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e687020e-5ffe-41da-949f-1f27b1e72de7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d53b220-36cb-4d93-9230-c6dd80524c3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deb97634-5f4c-4d2e-bca8-03904b073672",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "17578b6b-10c2-48a5-9fdd-1ad49054f0b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f209707a-1520-4bad-9f11-c5b2fcc3b7f1",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "274daa7c-7a2c-4a43-8f60-1062e49671f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1633578-7290-4824-bff5-6f95d7072caf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1ec96c2-bf40-4f42-8325-f3fd0abbe480",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8fce10a7-e5c5-4c6a-bbfb-a59b065b8d87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f94ec720-5b4a-4fcd-8282-e567862162f8",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ebf7871-d264-4c77-9674-9c20ddd48065",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e29e5a1-ccd2-4310-9b00-7cc0be60e404"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9c4cb7d-5817-4427-99a5-543ce4b7a5f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ff218b8-4d6c-4737-8775-5b54f83bc190"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9d87053-9ce4-4a8d-a622-807f6a6ccbd4",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13a8f59b-1300-4c4e-bd22-d4b42bd5e590",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8bd8b7b-dc61-4f85-896a-2c90c0b793c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd6179fe-f757-40fe-b72d-e78d6bc4ec88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d58bf239-b1d8-402b-a063-1e241c8dacba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54e8a71c-f0a3-4748-8967-8fdd8c4cef1a",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c023586e-1fd5-430f-a71a-aa2d648b9dee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63f58fde-d2cd-446c-8157-d248cd4d59d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63703c96-d099-4312-884d-c273d7ee5035",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0cb7900e-a031-40c1-bf87-951d43d08b1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dc41ba9-d87b-4b60-a93c-ff1578f8786e",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5730c754-c2ed-498e-b777-28a58d724e56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44fbf05a-34e8-4c9d-a448-7e0bf1e85155"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98a515f6-61e5-4dc4-a68c-e444db5fabb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "258d027a-9c86-4f97-9ea2-9cd750cb268e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03562e2f-12bd-4a41-9057-cfcd82f27689",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e0d2e3e-218c-4862-8625-8eabeffb14f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa0a8363-2a2f-42e6-9e55-f0c1c95041cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eff6d8a-0256-40c4-b306-9fda9c6396d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5059770-77b0-445f-99c6-0b6658697b71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d64b0971-3f1a-4024-b0d3-6ffea3c8590a",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8e23806-9c80-47eb-8a6b-2c8d3fbbcc1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b23025b-6a32-4f54-8ceb-edace329525a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73d76f96-b5d5-4ebd-80a8-0b79cf05f26b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "91c4514c-7dc8-4727-9d5e-32785b36115a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f2de733-1649-4eff-ae77-1aebe17fe287",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2aa1edf-cd3d-48b6-a0f2-1ec087a5a88c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9f75091-2c5b-4e9f-aa1d-9a24c8d1a7a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2723306c-1277-497e-903d-91e2ae518cf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "fc11efac-e727-43fb-9df3-1a26229b1ee4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3adb1e64-ff8e-41ba-aa0d-fb2981d479b9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14df29a2-c6e4-405e-8cbc-f2f075a454e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75da795c-cb50-4973-ba39-4b1a666a33ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b12609ea-d161-4179-8ee6-2640129dfc52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3aaafc2b-7042-4e2a-bd41-4069402f141e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "230b279c-5a3d-4790-8a3a-a989293cb86f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8ab5fc9-0a16-4d14-9b04-785419041782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14e81ff4-a3ac-4e8e-919c-41db0f4d9f83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d8e218a-e876-4cae-99de-1b254ca1937e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "46923e46-54e6-4fe9-a6f1-7fadf427bb48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4cb6c9b-782d-40ee-b92b-28e7e1504251",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03eda397-4bef-4385-9baa-64f9362b3dbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46ea7767-d4c3-40b6-a191-34caeac99aa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53827983-4354-4b8a-84ce-ab325e8c40bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "eaddb4e8-fdd9-44d9-8f19-9cb5dfada4a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aef42d53-259d-4dbf-bc5c-d7f2bad56024",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b917ff99-1104-4c3f-8cdc-15b7b477ccc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb667a98-3dd9-4fc8-8b17-a0131ae56151"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "636a336c-babc-44e8-9e51-f4e0bc0b1c03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "9d0dc14d-9329-4ad7-90f1-cdab411f3377"
                        }
                      }
                    ]
                  },
                  {
                    "id": "639a2ca3-2b04-4d64-af39-bbbc3e3469a7",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be00df5f-ed3b-458b-a2a1-0360e4945c67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fad0122a-0a48-4be2-904e-1df997ccef27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a957d42-476e-4ee1-bf99-e6c9b4cdd4b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "22842d65-1017-49c5-85e4-6a307a40868d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca879520-a59e-469b-8d3d-d5260161d749",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8cb794c-6201-4cbe-93f2-98744beb3e86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c33d30ac-9ad5-47c2-97a2-bfaa713e4e77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbf8d942-01b2-4f38-b842-37a54361217b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "de1a3491-17c3-48f5-aca4-5ce0fc21b65b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b762366d-25e3-4519-a0e8-caf24cfc9324",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a677c443-6822-4bc1-a3da-8833addb4ee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1aedf3c5-c87a-4626-9b5b-d8c5a9d8539b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eda62f6-31e3-4ab1-9f78-68a8bd07a5b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0791cbd4-d7a4-4f79-b14f-34a8cafa7c60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9032f64-1c11-4df3-a674-a75461f9606d",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79a54fcb-2840-4400-8684-5e1c149843c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2c2006e-f831-4611-88cb-834eb1a90f21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "407b1283-9e95-4941-8993-04f2afb00e47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "11dd8b31-fb4b-4678-8de2-a12ac5c0c4e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f2dae1c-c596-4e15-b989-0f1ef979ae64",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c01b8d1f-c7cc-4636-b561-eb6a27df3efe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1abf790-3a47-4eec-92a6-1dae29433359"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5f2542b-f170-4fa8-84ae-b11bad1ff0ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dcb4919b-a35b-4495-9a6f-c18a87ef5d93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27b5fbe6-8e4d-4ce3-9fe6-a1604718c40d",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a02346be-d8ba-465c-a26b-a509163b1afc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edbf9403-ce98-4586-a053-567c4b955cc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21b4da19-51e7-4434-b04e-237eaf7f9fbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6402f4b4-ecd2-4b30-a158-fd1d8bb461e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e04f00ed-d386-4902-aa61-d7fb6c7fcf8b",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c752acd-8500-4e89-8d28-5708ec4d4bd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cff3540-fb26-4c71-9cc0-67c25d3aea92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0af5dd6c-0484-441f-8734-f6442eaf2fe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "5480c817-656a-4d22-b873-1429ccabc872"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e9461cb-cfa5-4b2c-bcf9-638fa27f91fd",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "453d120c-e2b5-4e26-b880-416d0fe1b2a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d20a889-b1e3-4ac7-8d25-05c6c5b961e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ffd953c-c6e2-45d6-9e7a-6d164be4dd79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "cfb0c4a5-1c00-4ba7-87c9-91720fb48a51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f7079e1-e92c-4f38-aec8-5c6abf0bc4d5",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07191fcb-e91d-402b-9236-56054d312390",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fa74c5e-5d31-46a7-98e7-fdea7bfcc685"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c519b05-f2fe-48dc-8050-d3ff1f394b08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f596dd12-7c13-4ca3-9688-0475aeebea0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8d258bb-bb18-4a63-bc2e-88e46f760f25",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7516f05-ebed-494c-bdd0-fc0882743c2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b3cb9be-9695-48c6-9c75-1a27d6926a3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c306bb94-45be-4440-ac01-edf1ba5a9cff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e376e01a-0521-434f-97c7-9066b1babd58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99ca9697-afc4-4a62-8c7e-42a4674957ad",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "438323fb-606f-46b6-ae92-09688317abce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a7a26f7-0abc-4daf-8abd-1cfca5f429b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a59ed2f-3c40-432f-8b78-49dbc8eabcbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6cd3adeb-448d-403e-a76e-5e7040d31c15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ad54fa3-a7df-4099-af02-9940e33c205a",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "beb01932-d654-454d-83e4-ac78c5d4fd79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cce8446-221a-44da-921f-cc0ea61d6c5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df6e9993-6e87-4ba0-82c3-9e335e619a0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5f3447c2-2240-4dc2-bbe1-112cd40b46b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5e23dad-6107-46ac-a09f-692e19c95b30",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c515460a-696d-4fee-8cf5-6dcd075bdea0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25e98b76-d9ab-4662-9fcb-0f2ce8ac0eba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96958e8f-5461-4e47-a769-db73930bc318",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "91ad851a-cd8c-4b94-8266-2256cd31fa51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9818572d-037b-4e1a-b5e2-7a8b9c97d9d1",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f007ec29-7240-4e99-98c1-5143c4767583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "921b10f2-3207-4cc1-96a1-3e4e5072f6eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2b7b0ac-d41f-455f-a9f2-6e848ba5e1b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3049e26f-6559-4755-957b-ff74ae0e9267"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e32fb802-45eb-4b57-83f8-ddb3f34ef0b0",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40b2aa92-e734-406e-abad-8427f9b985fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dee43225-053f-4373-8123-c1963be999f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bfdbc3f-17eb-46cc-b16c-085347c9ff26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b049db49-8e0d-4c54-b12c-a072766ff0c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f01c1523-d9bc-467d-8c33-453cf36fc6c3",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a0ebcd2-ce3a-432b-ae1b-1a912beca090",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71839129-e2c0-4211-91f3-cea561e5ca66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a1412fc-7c86-46dd-952b-b463a7368600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a111bc5e-5950-4c80-adb0-fdf9f0998443"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc3dc3a2-81b6-4631-babe-f0263309d444",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2fb344c-3c62-4d07-b5f1-c5c2404879a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1793c1d4-4287-4334-b1d7-82b70ad1de9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1e3313a-5f8c-4f00-8292-b1c67b75ed13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7fb229a4-322f-4030-a72f-886bb8dc9953"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8d39a64-4cd6-4bca-b6f2-41fbc8ed098b",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ac49d36-49e3-4dd7-8614-e461b16bfc7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94b60cd1-8330-4547-b2b4-6ed270b0877d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efb3e450-9daf-4213-80a8-0792547030d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "85548945-d2d8-471d-b7a6-fa9b08520f96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3b76a5b-9aac-4eac-a6bb-85f4db685209",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2687fa8c-f2b8-473f-bc13-6de03419da97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1c27445-a1bd-4913-9aef-d6f5d64b51ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db0590ed-fbd6-4805-9c8b-7e95544cb884",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f061f511-a404-4bb1-803a-73132531d346"
                        }
                      }
                    ]
                  },
                  {
                    "id": "729a4106-c7a3-4f62-a776-cbdfda674ccc",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03a86c45-dee9-43bc-a885-8746cea79d76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "167a0ac5-b846-477b-9123-ed6e2e56e5f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "709bf32d-8a99-486f-a046-49c3c307776b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9bebdb9a-d451-48bb-afbd-e89ac4baf41b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c276b16-2c9d-456f-8e37-a813db47be04",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f367c9a-adee-4e9d-a2c2-e773a1eb5461",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b4280c6-9fc5-48a3-9be0-c687040cad9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76100b6e-1892-4a3a-892a-4700a3c45b6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "150e39b4-1848-44dd-99a6-df693bce276d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2db295a1-ed6a-4bd8-8093-d525a69bcb39",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c666cd8-4839-4adb-ad75-8c2451e26b2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60b5984e-8ffd-484a-9063-ad88e3f6928b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "511ddfa2-ddd1-4bf8-a41f-184f830f972a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e3dc7643-671c-4621-af0e-cffe0a9664e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f9c8cba-ca07-4cce-a25c-ec73a615688e",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f0f0690-a6ac-457f-93bd-0564f613dc5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5d647ee-fd8c-420b-982c-73e91fb8a6af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85db7a7d-dd7e-46df-bf8f-64de2fb85d2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "74247384-08e6-493d-bd40-eb0fca7ab347"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b770714-b016-4fe3-b272-be520c0cee8e",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc2c37b1-1a10-43b9-b69c-362a568003b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50a15a85-ff57-44e0-85e5-4ba7b86aee16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "296f007a-92f3-469f-8a22-1fffcc458916",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0a216b66-5dab-4430-b182-aa02b5254a76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da820d0e-f4cc-4eed-9e63-225f99bab50a",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a17c031a-7c95-4cfb-b447-82e9e1fde9e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3352756e-a8d2-47a8-b130-d3e066fcb379"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a91dda91-fc09-4341-a945-698b2418f3ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "13a0076b-8aeb-41dc-945b-2d9a92f17e83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afffa1f5-e98b-4f54-8f07-e0118225b614",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65870711-e8b0-4c87-8775-94dded90cc2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81bc5b7d-b820-4872-b70d-30504ed99ef6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cbb9f06-bfc9-499a-a4e7-278469233941",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a5fcb5cd-1d9b-4e63-8d21-df16f57ba7a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca34a5b5-cefa-4776-acd5-239ee12c8aec",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad59a946-a28b-470c-b230-b056bd9ad905",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6f15a6a-98de-4074-9eb0-6ca8b265d3f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6ae543f-86fa-4768-9b68-13af34483519",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5af743f5-a4c5-45a9-9ef7-7812020b94d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37ab5045-0d09-4fa3-9a92-cc293bfc9fcd",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d74cc27-4104-4807-b6e2-f3a80ea988ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aaeef7f7-26d9-47c8-b05b-aaa903166264"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "050ecbdf-15b9-4f43-97f5-0f008b9ce719",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "092649bb-da5b-4960-9414-2d4475fa6c18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "056ab783-2aca-4691-b820-8d90304eb96f",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "328a3d11-527e-469a-a48c-ddbb545f3633",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d3836e6-4f1f-445d-b82f-24363f91ff59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22467192-187c-47b3-bcdc-aefca24f7281",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "147c0306-256f-4532-9c15-10d63008f7b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df7244b5-9c01-4043-8237-cab346d5e1b9",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00a3664e-4170-4fdf-bb08-ce3b2821d4e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "652c9f82-4c9a-4a0c-ba34-deed3e32a21f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ed2800b-8b18-45d9-93d7-7cf79bf4505e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "aa2bf8c7-453c-4588-b3d9-059fb7abc69b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "151a4bc0-8beb-4738-b884-578a7515f2d6",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fd0a6ec-bba0-47ec-acbd-b9e599c9e783",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "bf7f682d-df63-4cf9-8f31-94bbc4492379"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c32e0bb-ca47-44c7-977c-88462ec2e2f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "11c419e4-ce1b-4e52-aca2-9ccdf07ee4d4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e24aa642-721b-46ad-8cd3-0659e24b8fd5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1a7930c7-c7e1-4b8a-9c6f-2b638183dabd",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e12285e4-9821-45e9-a6a2-fc6f68c5fff1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b089b54e-d1f6-4854-9fb4-e31b20d2f14e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "397bdf5a-9b8e-446a-85a8-2a540ea95203",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "355b1cda-d71c-45b8-8c0c-a80e21465e82"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ab3a43ca-5082-4dfc-be74-e000a167184c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eef4b5a3-f6c3-43af-8e82-7e0ba05f88f8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e2c88653-8228-4a53-a5f6-f88fe7de3bf1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "35955c20-3a3a-4451-804f-16b8f7a437de"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f9a7efa0-d0d2-4cca-bc02-82de92c26850",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2d3336c8-f35a-4f84-8bbe-4b9d83fd5303"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "59928a6e-c46a-4cab-b0b9-e80a3c0c7236",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4c184382-b072-4d65-9679-41e466cd60ad"
                }
              }
            ]
          },
          {
            "id": "37192c16-3ded-4e91-acf5-6fa4d939d44d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "70a0925b-d753-4e31-ba17-a4a48d8b66ce",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "66eeb5f1-847f-48f3-b178-81ec5894a4bc",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3be6c9ff-d91d-4297-be25-420522b3fc13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "c14329c5-1600-44aa-aaff-46256a565e00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6866e3b-be3b-43f0-a611-1f32c15f6b63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9326a096-3cba-418f-8a9b-a710962876b7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "af94969f-0c61-4a6d-b527-df6c0e5b202f",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8b690636-d2fb-4d89-8d32-847d6043283d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6104294f-7606-4138-8516-8c7d48175a4a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2b3bb643-2cc2-4205-aa83-85444475ffe5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ec827752-673b-41cc-a2aa-3b4033562d10"
                    }
                  }
                ]
              },
              {
                "id": "8736ad97-5c42-459f-b00a-9237c4620182",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9ec3ab61-bd6e-48b0-8e36-043d617792e7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b48aa0ba-897d-449c-89f6-ea4172da65c4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "70d907a3-05e4-448d-937d-62e055830ba2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "58ab9a8c-ed80-4fea-8332-e7f9dc7c870f"
                    }
                  }
                ]
              },
              {
                "id": "e606c6a0-c65f-466c-b3ca-22219389c5de",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "aad0ec19-b659-4997-b9f3-417093bd4263",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "13321cf5-0391-46c6-8242-c8ce1148797b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "392e0c38-1dde-48f1-87bb-cc132eb73765",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "42f0bfee-dca9-44ac-85d3-ada8dcebcd2d"
                    }
                  }
                ]
              },
              {
                "id": "4f1d94f2-e3b8-4ba8-a00f-b535fa86b327",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c640744d-6b57-43ee-ac1e-b795fd106299",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "40ec2968-c1f4-4bb7-8b98-095d7b3327ca"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "03568cc7-3c62-411f-a4e6-59ef66fae6b3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "97f95369-1d73-4a97-9264-14fbb983d24b"
                    }
                  }
                ]
              },
              {
                "id": "c08e2451-0990-4f6c-86d4-5f573bac5850",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "76e6689a-cac7-417b-bcd1-bcae87226412",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "77077571-ef53-49ea-90c7-6b58272cd8fc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1e8e2e13-9cd3-420e-b45c-25347e11a618",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "c3276662-1374-45c2-998b-5716920667b9"
                    }
                  }
                ]
              },
              {
                "id": "36d8bfae-f9a6-45d5-8a1f-4d59a01e1581",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6376fed2-10a5-4639-ac2e-e933f5100ca8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3e9ea613-a139-4a78-8c9b-0b38042b385e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bfcc259b-6936-4a67-9beb-8502f88d98e6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "39f2902d-fc45-4404-9046-e4711b503785"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "962a8047-515e-44de-aa24-c6b8408247d1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "83eb8ff2-4844-48c6-a62e-cac3308ca75e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "03106405-ad07-4ae5-9143-0838c38b54c8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4be90eff-ac1b-4967-b75b-47757f48f9a7"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e06fdd68-04ef-4389-8006-5adf68222b56",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "fc6c74ef-6985-42ea-b1b6-f874e1d71353"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fa7c1145-e537-42f7-a016-e2d0508a6a25",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "35ec1d27-dc03-43a2-9ebf-6704a5e1a5b2"
            }
          }
        ]
      },
      {
        "id": "2b65045a-19d3-4477-9814-9f2e65e6c61e",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "4e8bb752-e794-453f-9eb3-e31d1123e067",
            "name": "Negative Testing",
            "item": [
              {
                "id": "64fbf6dc-e425-493f-8008-32caf8c533c1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1578e03b-ded4-4375-9d87-5ca0f3f71339",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9cc601d-9600-498b-9ad9-e8ad568274cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e84ac913-0dff-4ceb-a7c6-7c167d2f607a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a42ef40-9cf6-45b6-805d-e25d9f62ebd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "45b9c3d9-9b33-4ee7-961c-690e5b760ee7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c517247e-b994-4991-9d84-a6c09fd6415c",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e4957b4-6269-447b-8ef8-4e1cf01a1e19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fc6aa3b-e401-46fc-a2a4-c518cd2fb8c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acb8120f-6351-46e8-b257-0db9275c18f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4181201d-1a79-4d72-a7c8-7c4c686eb5d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60cf538b-2539-4fdc-867a-c34195ddc07f",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09031382-8ee5-45f8-a2c4-b8700dc1173f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54f4d25d-9ed5-442f-9ca8-b7a215e48ec7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c40c57ff-c1be-44e8-93fe-58d722f6253a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e2b4269c-848b-4d5e-a465-b06828e348c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a94dd160-4df9-43fc-b7c6-7fdd42b59c41",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39e1959a-c84b-4480-a929-940a172360dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbd13c2c-8b35-401d-86aa-b255ebfba958"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f69c2202-26aa-4c78-ba8a-16eb37839dd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "edc283c6-bf14-4f00-b35d-76b7672d0d58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bbf43aa-295f-4238-be30-56011b1c684d",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed752ebc-bd6e-4000-ae5f-96e5b61e9824",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d4410ce-8c3f-4359-b1c0-e0b09d70ca8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c13283f-949f-440a-8642-bd38de210cb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f6a809e0-355f-47da-8e9b-3f4ca3e71c1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcfebc4c-db66-4edb-8022-60ed17e9be73",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "387d5984-3d9d-44a4-b9cf-b366fc9c70b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86b39ae3-5254-475f-95e4-823110660e17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "611e8dc1-35c1-4e38-a218-3cfbe99672dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6cef1be1-adda-409c-a7f2-b429a5aaf9bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b2abec6-7bfb-44ee-94e0-5da4cc6f17ea",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89fc92b1-970e-42e3-a72d-03a77eac0dc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09d7edfd-a89f-4f72-8b1c-3d86b863fb13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff10dad9-522e-4201-92ee-ced6d7fbfe5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "b766f529-2fe7-431c-8700-e47556a5c383"
                        }
                      }
                    ]
                  },
                  {
                    "id": "691871b8-0776-4612-8491-8f060907c3f7",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfd4c496-6a46-4685-a793-2e1bd161281a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa28c414-ef2b-4b8b-9777-8e0fd1a1d4b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e4fb2e3-0a84-4ee7-9c84-7b341bf50861",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "02495a36-2b3d-425a-8d63-0e1b9c1f01f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc6ed237-0b65-4e74-9672-73884e7d07a3",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "200d3f23-8e48-4239-8788-896617f5a6d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b515af91-fccc-49e1-8e52-5c28e20e6f3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d879951c-5520-4bd8-b84d-0a2d3793aa6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9466b71c-9dd5-4175-8de3-4b942bc39cb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4006398a-65d5-480f-90be-11c273e169f5",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6343a2eb-f1a2-4ab4-ad7c-e4815f68485d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2e71ce9-c41c-41a2-bc34-5e4eb3455095"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34248482-6a4b-4fc2-af8d-8825a07af69f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d509ac6a-2013-48da-958a-f0872d5aa62c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38a35e7a-b2e7-40b8-bd16-2c898b7780a8",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b16f8492-45c0-4418-96ef-aa8e9d0f761b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66843896-9325-4006-a75f-c3a9bcd93e7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55057e2e-fb5b-4dd7-8b56-c0a9f0586b0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "f5d7a1b1-ac80-40eb-9c76-3db5f4f164f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05aa3e74-7554-4231-8ac9-6be3b0852f55",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c05e17ad-692b-42a6-bff0-c043891bf85b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73fbbf2d-ec4d-40bc-8df5-5803237fd5b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38559259-e563-49fc-8151-431f272cd7b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7d9219e6-2183-4a1b-8cb5-9920a0eaa0d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fde23194-65f2-481e-9d3f-1309cfc38ddd",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65654889-32ff-4a8e-9968-8423d4a692c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48968c7f-194b-4b61-97fe-0906b932c8c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "383f323c-89a9-413e-adbe-0f25622b1259",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fafd9507-c834-48d6-9a4c-073d23251b82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4bff738-5842-4424-bd19-0ce9766422c1",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6632099e-0101-458f-957a-562c842686f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca556956-1118-4558-9149-0b836694bab6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1791d915-2c5f-4d94-9159-7c3c8c38e3c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "4aabea71-3a60-4c1a-b84a-e8de6112fe99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6029c4d-5106-44f1-9553-3717fafe8806",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bffec8c3-8e15-44d8-a060-55e75efef3d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e5e75ea-e693-4a37-8d15-1295491c537a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb71eabb-1c14-4396-8912-ec5970e0563b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "ffabed20-15f3-483c-a585-f214ca2133d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b5b0065-ea54-4c8e-8bc4-b7b004c29838",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "492ba8eb-47c4-4dfc-b948-f18903394363",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d12470c7-3519-412f-a943-063c226360d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bd3803d-21c3-42a9-9404-9ce8fe64ff7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "35a4cad5-33a7-4469-aa42-dcffb0c17407"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65daefc7-5bbb-4b81-88e9-8ac451ad19b7",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a06c9ab-f585-4e41-83f6-b1eb0aff9bd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b28f31c-2593-4e99-8df8-ab0b9f121c39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b39747dd-cd9b-4256-ae04-0847ca41a0a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9c0b66c-7232-4ba9-b328-af72bb5374ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d40b385d-476f-49ba-8655-4036e2e30fdd",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31623ab6-81df-48e5-8951-8d675b2ed01e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3a4fe01-2cf5-48e4-b86f-5fb7030301c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a28ce7f-76b4-4174-849d-290e7e756925",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5460aeea-f5cf-4c17-b2bb-8cdec0940cbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98d1799b-8561-44aa-b6f7-06ad3f066aa1",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35d48a0f-d439-46bb-84c9-a93ee576302b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b467316b-2b3f-4055-ae9b-316b419b867e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c45cc741-5e86-4834-aa5f-d85e0a81d1ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f597db72-368a-4dfd-b574-a6d0707cce60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56db5ab1-fab0-468a-8c97-6f7b7f10d90e",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18ff9365-dc8f-469e-9101-1a3b621afe06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab24835d-c39a-4682-9989-fd57a23bf7ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36096912-2a38-4a9d-bef2-29d4874e7816",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "84f2679a-daf3-4e0c-b3e0-297814123ea4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2e0fc9c-e87b-49eb-84b0-93606f91f56b",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f8f3f68-7013-4938-9a16-39fa9cf15900",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3d02464-afb8-4258-8f0b-cc7b839a5d42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2091986-8886-47d6-b7b9-fe2aa6a64018",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "617641b1-ebcb-410e-8c77-49113a6bb79c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19ef3e32-e21e-4014-98ae-b19a63cc4660",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c575447-5e0d-45e9-a933-2d59e6bf44f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddb20780-2f32-428d-a54c-fb3a6c7df8bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eff8364-d582-405c-8547-f8a5087f1aab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8075938d-053a-453c-a013-7b9f47293d20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bf7859a-d95c-428d-9114-0810d19176aa",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4e4a369-2a9d-475b-927d-5ce4098f9827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e64c37f2-32da-4dbc-a449-6ad93dcbc8ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "909748a1-8fb0-4316-8492-5006b5989b9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5718a30f-c3fa-4df5-96b5-281e00df2f3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d72028a0-3f3d-4c87-9496-af593d744493",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cf1c8a3-b029-4c09-8c65-2e903df84826",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98d24acc-75e7-4431-b854-f13ff2be5aa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f24fbf3-8652-4a09-9d06-209dea1105c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ffac8d1-6198-4da3-b66a-eca1b4ceb5e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9ff40db-922a-4442-851d-f6d9e995b0e0",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccfcf6a1-2059-4049-81cc-bea3b3ba3eba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "687907c1-9900-405b-8901-5fbea8ea1b64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfa7134e-7095-46fd-a790-2d77b634b683",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ffb936e5-f2fb-40af-a4a3-b18257bbb25e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c849306b-b41e-48a4-ac28-b53a5854d8f2",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8096287-2519-4818-b13b-1899955c913a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5deb3e98-d202-442e-af6e-997dfcf98fa9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "052b59be-8941-4a80-8259-f1927e81dbc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "340b753f-a98e-4799-aaa1-73f17eb12400"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c31f40a7-efe1-457d-bd5c-3ff26fa9efe5",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d944e37e-97ea-4add-9613-1f620a3c49b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77743f54-b0d2-418a-b038-b7c05b05cf07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00b4806b-278f-4cd8-ae2d-742f9cfd1203",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed6bd337-3e37-4340-be8e-e66cd256fccd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79e55520-176c-40ca-b08f-3aa85fa6b60d",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efcf20f7-5b80-4bac-83b7-0cdda0821dbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ded572b-6701-4244-bbb1-6e79c5888895"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e896ad56-3d36-4938-b651-53aac80cf9a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c5ac9b1-57b6-4291-ae87-e2734cf2aa2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8cfae93-9ac9-4f4f-8c89-5941eea7d758",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da51939c-9ad5-4e06-87f2-f7a3392b994d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29d485d2-c589-4e5e-9058-15770543635a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1736d8b6-c531-4a68-a31d-d365b0b5b254",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "031ca292-a731-41c5-afc1-520ae586f3ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d90bb7ab-4ee3-4151-9a0b-da1219a31dcf",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07143156-abd9-48f7-8ef8-2cd8c6d5c76a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1c5a643-687d-4e3c-bdca-3c54d16e1f06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52822026-8569-45f5-854d-ac5a62c4a4f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b90247f4-7ad1-43b5-b56a-5f63be90e89c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b00382f4-b5ac-453f-bded-3066a6cfef9f",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07082b93-ebb7-4623-9a51-04aa1c494392",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2dea916-a03b-4e99-a530-bd64f7ed163b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37b34e16-4bda-4281-8a3b-114d14144ab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6696cce2-f0e1-460e-9133-79fa4c3bdda0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "488b3a83-fa6b-4702-8b46-cb82a9c53aec",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a86282d-c763-4074-8038-ba807bcfabb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ece22526-d49d-4f5e-9b10-90844f9c028e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee17adca-0fea-4b0d-8091-e56eb1f3c242",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e8eb54b-f912-41d2-bfc3-8e39a2cf93f2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ef71403d-4ffd-439f-806b-74d5c87ce818",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c6577ff6-107e-4112-996b-331a7c166001",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faf5543b-ddb8-49be-8804-9be70b8a2f7f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "4bc4a559-3ed6-4c09-8bc4-d30eb63beb07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48d5456d-58b2-42b8-b04a-496d11a662a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0a2c70a2-1f41-4fe8-8787-ea91920c4473"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0f36e663-30cd-4045-bd7c-b913df86a515",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "25793b53-6b93-4e8a-98e1-33724efc62f2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "061b7664-196c-43db-bbbd-5b0846e81df7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dd001925-50b3-4dee-8b8b-532ee47668fd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e78ca02a-b152-484a-96a3-6b4c1993d4d7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8a98d662-fe3a-4cdd-a218-d173e5a76a06"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6e491afd-7f1e-43aa-8d02-124fb4dc34cc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "163397fe-45d8-41ff-adeb-12e033557a9b"
            }
          }
        ]
      },
      {
        "id": "389af3a8-3476-452c-9e6b-b7020693db5f",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "48d1c6de-c1f5-4f73-9db7-486bcd17bf8a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1e3f9317-b70f-400b-82e2-584c48e27977",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "69408f1d-b011-4017-bdde-89a61e5385ed",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40a0e249-f1f4-4fdd-a79b-dbe695c31b01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f369da3-f366-4ed2-bb38-fd24278d35c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab9f19b5-7f78-476e-8aa5-9f3e682863e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "f86ed0ed-f3d6-403b-8ea5-cfeef56d5cde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c82c8f35-0c15-494c-9c10-1bc7140a10f8",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57c029d7-09b2-4f74-8c68-c6d6e52e5ced",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09f95342-1e37-4614-b3ef-d7a7e4c282ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5026c9b-afa4-4625-8262-b030e54e9ab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5eda1ee8-3ae2-4e1b-8bea-592d9922baa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "727fb824-61e8-4281-b300-6b91014389ef",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e197f37b-5bd6-44e1-bda0-f321204e6b66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46d0bf1f-a97f-4acb-9758-be134c9c2e24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "676cbecc-5779-45b7-8a7d-1b8bf4784d91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d020336-7e21-40d2-a586-a6443949096e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b5f1cf8-0223-4d24-8996-0c46fad330be",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f3ff4fc-5b26-4d45-8758-bd3e3c11f756",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84215226-f979-448a-bea6-6011e267120b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1debf42d-e1b3-4811-bbdd-0a6cac0aa8b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e298e370-3b3e-4e94-968d-4453f8cd93aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da346776-ee29-4736-8f1d-4a971e4fff7a",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a96d6b67-fc25-4703-98e0-8882f9780c53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a6c5b52-3985-4ac4-b6e8-70b7b28dcae3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1f0cafb-e36a-4218-b758-07bf410a3d55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cbd9ac80-926e-4430-9f9d-3b5869ab7f26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baa5c238-a8c1-4bf7-bd41-e724de15aa68",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "545f6444-6143-4552-bcf1-4db2cba34af2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddb27acd-1b91-4bad-bd86-af5ecfcd9421"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41dbf6b5-9a0a-4005-a018-11f6ae294356",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ba68ea68-b45e-4b70-8040-1870d2f3e355"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4bd6ce9-0ab7-408d-9ab1-18996f5968f7",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50af8259-5b26-4ffb-8551-721e31fb729f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33bd9239-ca32-4654-918f-84bf3fa51f5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8efb5e0d-aebe-4328-819f-718688a5ddd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b247dfd-3f15-4c7d-9888-0499de60f1cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3332c0d4-e021-4a1c-953e-b922506bad9f",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "159dd21c-f260-4fbd-97e1-ac93628354aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de197fa8-fc9b-4a20-b66f-2b78bf2730a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e0da4d4-0546-43a9-9bbf-2dc28f221e71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7b34d7f-ba1d-4a46-82db-737e1e54f3ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cdf2853-22aa-4d97-b167-fce1c65f644b",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "922c3e32-e75e-4a79-b483-74a74638e7f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c1002e9-d674-4a09-a1c0-d0b18610e802"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea9d92bb-9f8c-44e4-89b1-25bb5c28e800",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "19299e9f-ed09-474a-b94c-3c079d4d2287"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f857ec2-c535-4d2c-9f4e-4382bcba489d",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb613294-c6dc-4bc5-834a-2d723ace77ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dd6c3d4-ee4d-4cba-8a6d-c46d1175ee3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29e261f1-0320-46f8-8ce9-01d14f2d4a6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dee52dd6-e030-49f1-9f2e-37a404f3b3a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b283693d-3540-470a-9bc4-589729485150",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93271a69-e5e1-4237-8651-829f86c07d36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ded806f-0473-4d69-bba5-21081b1b0e63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14dc5355-744e-4d00-a6f8-19e3d00f7db6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "55c2ac71-e564-4fad-91e8-23b840ce3f66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0e46514-cbef-4859-9356-eb99fef1e690",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a7b9827-a6cb-461f-872c-b66e8ea6acc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55382e7c-383c-4519-8203-ed7af762c0f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e80dc75-5afd-4625-b8c0-52b111181c20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f87f1f61-6e34-40b8-ad0f-d61108657cdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5213f9d1-6ab5-4570-958b-bef4234d183b",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "344d7884-a017-4491-874e-6247b8908d24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07556bec-e902-4b87-8481-f42bbfc4df54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc439809-f427-4835-927e-9f8d62b0501e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "026d2969-959e-43ff-865e-df06f2954bab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d93b1786-cc05-49a7-b7e9-571b5e7e20d3",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0d8f92b-5f69-4204-8dbe-2ee9d00ddc91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c51ce597-7d7b-44a5-9eb9-c40411a91a42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd04053c-0c51-4ac9-a304-ddc26bfe207f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ac4a5a1-c6b7-4d1f-8098-3818d63162d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ddddcdc-68ba-4bf1-a36b-132632c4c9c6",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12bae371-0781-46f8-8204-7e44606bb7d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29e6a68a-1ba8-45b2-a983-2bdea4a9ae2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dd22b56-84a3-42b6-9153-d0fd2608b800",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f971b5f-522b-44bb-a056-822b4321067a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59e2dc72-0e61-4e03-8d1a-f5405b8b33a8",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4c60bc6-3135-4d01-9b5d-a6998c1c1684",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ad78827-4cac-4f34-85cd-4ec380ec78a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f98c356-e0f8-46b0-a493-1cf6aa9520c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "e5d385b8-aebb-4d18-9eb6-4d42729ac0c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81459e23-82b4-4395-a0b4-924e7b3192b1",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aec1a553-1824-4705-9dff-34539818f9ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d313cba-b9d2-44f4-8fd6-c17db408ae90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c73c565-1075-407c-8b5f-746a5578aa5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e9067a2-728c-4125-b9d5-d5a46e1008cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f77da769-430d-4fa8-abcc-1b4b9061041e",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20447c02-2db3-4f01-a4e6-70051139b3c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "853c12fc-8e47-4285-a8ff-06366bb7a732"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80f13492-f85f-4c7c-8aab-c9842a042f14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c963c5dc-2ab7-4355-81e3-5e86bd91d6cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c08c99f-7c17-4d37-972e-d6c00f2e41d4",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2201d90-1dc2-45f6-9cc3-e1faf228cade",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f31429c2-b2f3-4022-bc70-3f7d126145b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71eed0d3-facb-4443-9342-da992b7f5653",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "34d45f6e-00fe-421d-9017-013f7bb0de5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6032021e-c145-4553-bd28-6d9b9e5b3313",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcd3ed02-ca5c-4120-ad98-8f5e444e9f7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d821b791-a548-4add-b24a-900be240eb58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97bad139-554e-4852-962f-354db8b45539",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b1c00103-10d3-4abf-b6fb-7919c558e137"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5eb3a0c-236b-4414-956e-86135c6895f6",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a51e6ead-2eec-4641-83c1-2167fa571d2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf9be4f4-748d-4d4e-8449-33dc5a3af675"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6095f4cd-400e-4133-a7c4-993d07695512",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "182c668c-7051-462c-a8c6-39add73bcb3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e336b86-f7ec-47ac-9c58-24231731c37d",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1690ddfb-0961-48f0-9aa3-4146b6b378b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "699964a6-14f8-4c0b-becb-f14a2dd7a515"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23ebecd8-e9f3-4112-8daa-14c5a6112e4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0f99a6d-4e8d-4bc1-8015-6775609a2f00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5482cead-3397-45c1-adbb-47e552ffae08",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b681d618-c65f-48d2-80d2-a4a5ec02d10f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d853445-0f36-4f4a-af5f-e338c206da33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "452c1a6b-2914-445e-93f5-c692645c4f31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b89a95ff-0343-4e7e-a151-be79169056c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf8fb50e-9181-4748-9a35-7d997aecc8ae",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb18bff6-c955-43e9-9f27-1b61645cb531",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "511d18b0-37e3-4e71-a6fc-deff23ceb610"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d12d6489-4d75-4721-a7f5-122737008f01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "33ab39a0-cf9e-443d-9fb9-e68b9a935307"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d0e9ff2-031d-4dae-82c5-c9c508ed26c2",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b2f0a22-b575-4503-9389-9da9b4444947",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7052cc36-42eb-4ab4-bfd7-ef918fc5961d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05f106e6-389a-463e-8ea1-b7f4379cdf57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6c45eb5-5252-48c4-95b4-799d1bccbd38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5bb538e-f6b7-42c6-9d32-2deccebff082",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15fe4fc2-958b-4c21-be76-fe69fd6a6706",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff620c3c-ddf1-468c-bb89-03c08df1ae52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98e4d427-44eb-476f-bba4-32d05c17a029",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8589f625-37cd-457c-8935-f3480e9f21f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c48e83b-0cc7-4d0b-b3f5-7467a17ab5eb",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5959f04-b6d2-4e81-b593-40efb2ce69b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bc54bd0-e350-45e1-9405-0623fb6fed5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56ca74cf-410a-4345-a5d2-b601a961c5ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a495dcce-698d-457e-b943-91b3aa2b99bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78192159-f329-4509-b2f5-685a1c354325",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95264e35-653d-4f10-af13-f4be80b38507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7346f750-591b-41c0-99a9-3ece1759aa6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aebdda6-bd37-49dd-96dc-f8e3562a3269",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "01416dff-c8ab-4b18-bf65-9819167bf868"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da0ab45b-f23e-46e1-b5bc-401ad9b1f475",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d992b346-5953-4898-8832-cbb78f1f944a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d729714-c62a-4594-b128-8ed70844ea08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f635df76-021c-4583-9e5b-aa536a46824b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b0a0848-056f-4246-881c-7f0f5d181288"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8520bd1d-d743-4f3e-a3d9-a4f4754c97c4",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "992ad0ac-9e3a-41b1-a36a-a9223a14652d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19413d48-6f49-4cd8-bcf4-bf8d09be7cd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4d50c14-0bc2-4f7b-a0af-9f4d973f7b22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d27d71ba-31fa-460a-be95-8397548a98c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1026aac7-b923-4c61-86ea-69470c8cc0bc",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fab4ab48-542f-4153-bd42-428fa981a640",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bae5ae7f-cb2d-43e3-a2ee-156573fffd31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebd2dac9-c15b-42cf-b768-4b2c0d00d812",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "621077c9-f7da-4f38-a334-77268839befe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bb86cf0-2162-4732-b247-3867e5bc825a",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14cecf8e-453e-4289-ae28-6d311dd04e39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0802c8bc-68a2-48d8-9238-a610c713d580"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b10722a-622f-4491-9fa5-4c40938c8f85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4dd8a149-0d08-4e94-a460-c0c25f453586"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7179a597-9c85-4901-8f02-41722917f4a7",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98610da0-5e9f-4b3b-bcff-80642cda2c10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19f67d93-df32-4bd8-91ae-84f97fe98942"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9d90c2d-c26e-4910-8a80-c7bb3d9a8684",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d3240bd-3abe-48ec-a84f-0f9a2a45804c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d8738dd-2699-4ef3-be9b-068849483881",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "152343b9-72a2-4ccf-a14f-28b81caec6ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24d07cf1-1dfc-45de-b742-2988dc797c94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55381495-c803-4f19-a23b-34ff2cfe55b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d4f966f-5278-4840-a680-c88897ed86e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40b318a1-d207-4958-8efd-a1a860e395f9",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29dc1b57-9bd8-4e3c-84e5-b9930b284257",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df8abfbd-f904-4d7b-bf4e-e2608d461d91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e56a320e-50f6-4046-bbd3-5c322b1d4901",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4b2fcf8-0c1b-43ea-b7fc-2151fc8984f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd6e3e27-a13b-4534-aa67-ff200f0b5654",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7369227d-269c-4960-8cbc-d4808af51741",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "423e58f1-6d5c-452f-8ebf-2b6260d88b65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6011359-7143-42c1-b6c6-cba332bb06a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "224af304-9c6d-43f2-9d44-835d5d5d3b4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87df18f5-d9cf-4ee8-b71f-73c0a1ea40a1",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd1cc633-1a22-4583-84c9-8ba855f505f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a4fcaee-999d-4718-8bbc-69a35faf7c84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8957b7cd-7e46-4a0f-a38a-c67c52044be2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff284abe-b618-4ef0-9a0a-d26d9d2290c7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "45089c94-f320-44ea-b601-5b30f954a55f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "354ae00c-a088-4ed5-a98e-98361cb75914",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96b953ab-442b-4c00-950b-afcde55cc192",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "9001ad97-9c07-40ec-8c2b-3d543449d273"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e14bef19-e29f-4dec-8af1-4d8f193b30aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4320408a-519b-4793-9fd8-3f3899ad02c5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "98c82d67-d5b0-4a36-8046-b7bb40edb206",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5842f912-46db-4941-9982-b8f842e4b724"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ed93e1e2-e45c-4f1b-8dc3-62f41f947bca",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "83e3007c-cb54-4022-a61c-18c4610211aa"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2fc4f7df-4e39-42e4-9467-07db3bd5bb9d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "90d70417-112d-4478-ad38-ffbe9a4d5894"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "313d3a57-8b63-405b-aebf-c44f143d364e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ff5cf27f-92a1-4bf4-9bb8-f39935eebf56"
            }
          }
        ]
      },
      {
        "id": "36dce68f-900a-4c24-81d5-90f7a383cc41",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "7546e159-b3c3-45ae-a129-eb4b4cd14496",
            "name": "Negative Testing",
            "item": [
              {
                "id": "941a90c5-1e8a-44c0-ab9d-57894357c993",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4ee914eb-736b-44ed-b1f4-57d8d887fff9",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f4486bc-f396-470c-845f-fade14dc53eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d73bfe5a-6583-4865-a32d-3ccad325bf69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fb23619-bd3e-4e42-8596-f7fa25190613",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36a73eaa-a690-4179-af59-094e8d1ac588",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55d9cc3e-fdcd-4ee7-9ee4-493b0a556f10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79f32b94-832e-4bf7-8f71-ab91a0dfd05d",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2ae01d6-90db-4ec3-a743-4df51949ae93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08c6c724-da51-4bc2-8035-fa01d98534e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5fb94aa-726c-4eee-80c7-637d6475fdf7",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b8fdcc8-9322-46d4-9fdd-60c0adeb2171",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e011c9d-1a6b-466c-966d-8858cce41fc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35e9f9bd-e9bc-48b7-992b-b61181b82087",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e40cf5c9-6547-4d40-9313-1fd30f1331e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70b34329-c3b2-467f-8c3a-7f43f085e885"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09c07554-69e5-49ba-a75b-ab466fcd922c",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "327ac7aa-59e9-441c-bf95-bf1478ad0f1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a9bb93b-52bc-4247-b5d1-73377ea71839"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b92e33a-16dc-45bc-8660-175721e15a7f",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5521179-dcdd-492f-9c2b-a6c8ada26d8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba518808-5a01-4ddc-a50a-c171cef3d05d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aedaca5a-320a-424f-be16-ea3a6d6c36fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17c75262-d28d-4fe6-bbf4-9a4bd487eca3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d47088a-3872-401a-8f82-8ed58b2e9da5",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "352ad08e-2774-49bf-a96b-1f02f31ec894",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81db1e79-3218-41c0-a7a9-36cd7273e180"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cade19f-3be4-40dd-ab7c-167f9ee999f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ed76c49-767f-4b28-8a8b-b2554496057f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ac59748-00f3-43c9-b1c0-ab724c9e211d",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01fd2300-30e2-4d7e-a491-a24e994ca4c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cde8308c-03f1-4d2a-afd8-533d4a3eac80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42ee3e4c-8259-4365-8226-26bbbdd852e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fe8fd98-22b9-4008-9409-f490627f3da2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06e1a07e-a881-4c39-8936-63264cfea88c",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "214369da-15a5-430c-9e3b-ab23d14dd107",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a0d1469-dec1-4c7c-8619-f46f1638ca5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffe4f287-9dbc-4948-b7b3-a9a55bdfb625",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dfd72f0-d52e-49f7-956f-d9ce9b6fff80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46f96aba-de96-4d09-a31e-c3d2ce3e8871",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cded12e-ad6b-4d66-9c14-677a693849f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c91d3f5-31dc-4603-bb9e-7a24d5b52632"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c9893b8-8a11-40fc-9897-0c7088828956",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67f625fd-bc09-4a94-bd8f-58d2ec2951ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a985e00-db2d-432f-953c-2de0834c4155",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "557c0cda-30aa-417a-8bf4-c6568006dcdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "427ebf58-0b1f-4fb4-94a6-30eda30fcacf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd35e439-7469-49f1-ad89-2947a19ff511",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ad6b2cb-be4a-46d6-8e27-bd335d6217cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcc19ea1-2e64-4ff1-be21-c1b60a690d09",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c2fda83-c47a-4101-b38e-db2345b51efe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32cc6272-0c3a-4662-91b5-67a8ca0ca728"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1d58407-42ac-4ddc-a9d4-291a54e1af4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a98c1c1c-988b-4b02-8043-b425301f43d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee1be94e-b678-47be-8bc2-44e6ffb0c0ab",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9ed3eea-44b6-4fd1-9c84-97a43da7b7b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e764ae1c-4022-4acb-a0c1-6cf1c605087b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "913bbb42-6317-4b96-b6d3-d5e218c82393",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1327c585-0d0f-4a58-a794-8b36e98afb1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bff1060d-ccab-41ed-9e43-ee123cc5291d",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f866be50-dc9c-4efc-bb3b-b1feb6b132e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5910d42f-c19c-471d-a077-47f920bd6f90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f94ac4cf-5e73-440f-ae50-29fb7aec5240",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab0486a3-b8f6-4e7e-ba3a-95be3cb88327"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8be8fb9f-bdbd-443f-a1c1-f3117a4470e7",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13311d4b-8fc1-4606-8bc6-c21e2ef3002a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8c915b4-fedc-4052-8cf0-b259f83c629a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a6327a1-6bc9-451e-b13f-22e1072433f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cf9ea14-518a-4819-a38c-624793b73ef6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a7e7beb-d6e3-43ce-a4e6-eb4282e21831",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61c664a8-de24-489d-bb25-ee95dc6daaa3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5a9d2d4-c6bc-47e3-a403-6d57ce5c30a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1edf064e-a178-4589-9265-e36b87e7205a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66f9dcc3-5e85-4be9-a63d-cfef21fbd58a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e7963dd-6ef9-4827-9189-1016365a199c",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e6e90a6-d22a-4cbd-b277-0720adea91e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04c85b40-705b-41b1-a4c2-46c08b15829e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9516d1ac-a73e-4911-bd8f-0766eff1bf04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "190ea72f-353c-4938-9870-f98fae19640e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "074b555b-c0a8-4842-85da-af9f8f1bcf0c",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fac69c2-7be6-48f8-b96d-9c0b9a86adda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7c8cc64-9b6c-431d-bb0c-0e4d5555167f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eae7ed7c-8515-4f5f-a14e-38457d365f00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "823a9505-197e-4059-a86a-054f14702060"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b75b3dca-4c93-48b0-a0f0-f9ac408e5b15",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab457ae6-88d9-4499-8dbb-474543a83063",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75aa4c3f-763f-47f8-80fd-f269101061c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ae31f49-3965-4e00-9b40-30fd390b8d96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fda2e406-24fa-44c0-a645-fdd2d1c0b856"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb64e84d-8c8c-4377-aba3-76a54eb29638",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11ac57e7-9170-42da-96ab-43f991282175",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97650d6b-288b-442c-bc10-566b58c4ede4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba24bebf-ef4d-4e7f-aada-671bd8392bcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa9fab32-ccda-496e-8102-e5c6e6c721e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fc5600e-44bf-44e8-8590-58249aa6189c",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71b5b6b0-ed7b-445b-ad42-dabd33d163fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c059869f-df5e-48ca-b61a-78a35b73faff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e3d2dc8-b580-4303-a795-cd55ff834134",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25dd7203-f885-4ae5-988e-e6fe66237c93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28b62f2f-5004-48e0-a592-577bf5b143b1",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84248ebe-c8ba-4e1b-a3e4-86c0a7c5a763",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17d74f9c-bb29-44f9-9db6-1e4445fd51e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3166c40a-68da-4729-b0b5-24c0cb63bfc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6d48ce4-21a7-448b-b099-b6d882585c78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b194636b-1615-4bb3-93db-f43a4ef78f31",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a123cb29-707b-4043-bab6-2f25be9543a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b504e2a4-233b-4419-8e8b-33bc0e9e3688"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ff499da-871e-47a9-b038-7681c4ed4f6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "902f05f1-59cb-4f80-af6e-5a4ed4fb1432"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfe8ac64-a338-4d67-b7aa-90b2ef376fb8",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f9799cf-24e6-4792-8474-1a519b38cfa9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b1ffa2a-4960-48a0-ba54-016f56e09b04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "330cd855-1a68-4b6c-923d-ae6f5fe4eb22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fe00fc7-1d2d-4283-b104-8120248bf1fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b9e8fa1-e410-4aa1-bfee-916494724d5a",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dd9bb82-3025-472f-934f-f2d2a17848b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1af17e31-0e59-4d02-a011-aeb5f394a015"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65e362f2-5726-441f-8720-32b6d1d78611",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bdbca81-8baf-4aa9-a871-697336326e79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98ef95c5-db6a-4ace-857c-0e65fad6e326",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "072c1148-e3e4-43fd-949a-329d51497c84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f81c6c4-4881-4890-bc81-55d12f5d1fa5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02033811-f904-4e1c-b3fa-33a9505cc347",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0fe7db3-3548-4942-bbf7-80f81fe88701"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44df754e-6b2f-4dca-bdd5-1ab23cff3603",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3204e9bd-b6f8-410c-80f8-002ef53d25b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b4e9e75-d427-4d5e-9dc0-ac374216a836"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d670e7d-8780-4886-9a60-1d9a69630fc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "377d3442-aaaf-46a7-b158-5fa0c2c2837a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cace70cb-7257-4cb4-b929-f01f304293f5",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0fd2f23-c2bd-48d7-a47f-d7c1d432501a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec97ba93-706c-4531-8628-2bb8cf4c84f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "178066d6-860c-4037-914a-8f7f9829fbe8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f87f986-ca57-4529-b5e7-729a3abad22a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85d4e21f-623d-4ee1-8ca4-e5a24fa5424e",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76e5b8af-5a8a-4e80-adf1-998190384674",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9669c2e-a405-4a0e-a273-6e5d30a76cea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae1d036f-ffe0-48c4-a885-e1545f71ed89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da660c0c-ae42-4bec-bd50-c59f73991c75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4605713c-177e-48d2-8396-7ad1eb98a60c",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edef5847-910e-45c9-a74b-c7da1d6cd76b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a5f8975-db53-4be7-a10f-76205369b25a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e290c6a3-db1c-4207-a5e4-f6aea6e99bce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a1297e2-ff05-455c-8413-446cc9d9ffae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7006e75b-e0cd-46d8-a06d-ab644ab3c289",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90955314-690b-4a39-b6d7-a27b84c5907d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6087ce6-ad33-4270-af09-ffa9c7d56ec9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20b9ef6e-a064-41ca-b868-df02bf0a4c66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d36e812-99d7-4df3-9bf0-ac65ffc23bf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11a7d05c-82c0-4ffa-8df5-0ef63c7a6b9d",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7218c4bc-c689-4c86-88de-8b87b52a79ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2c5384b-433c-4c63-a386-25b8f4e035ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4284c658-c733-4521-bb85-c7702ef4c214",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15a3e95f-877d-4e26-9d91-bdb6f73d41dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16104e51-db24-4a95-a7d7-67e9178ce961",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc1c6223-58b4-40fd-8bde-610e2df3150a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0dea3fd4-bd63-4193-9b28-427544f16e26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c70b860-24c1-4388-8768-dfc4ad2b0112",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00dbd019-81d9-4615-90f1-154bf53f32ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c60077d8-5c29-4d26-8c47-0260cc60ba48",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "632de54c-303d-48ed-bc78-67c4fb7c380b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2563323-2604-477c-9f81-d752c7b46994"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69e2c45e-9752-43cd-8b51-97af32f71ceb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3592373c-8a5c-4079-91e5-e8ccbfb32ea8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44131642-29de-4cbf-abc5-7c3f7049749b",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56765327-160c-4f80-acbe-eef1b9c8a735",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fad6a6dc-f8b6-4abb-aa6b-fd48209ad7f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c250e52e-8ba5-40d4-b221-dc509f318402",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7e23a1f-8002-4366-8c74-1f18a596c5fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0268f449-0dd6-47c9-b5c4-b8352f068378",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a990df41-f7c9-48e2-8730-9bbadadcb7f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd42263b-262a-4eff-b15d-b3b89654e254"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef0887ed-efd4-435e-9eb3-61850498c6e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e611493e-9a11-4306-a20d-75b9601bb16d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0462a209-6a62-41be-9d2a-9f6e346de915",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8af3ed4-df97-484c-8248-abac50a85cf0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5ca4905-e2f7-4131-aa95-1fde9572b8c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2b8cf8a-5af4-48cd-9de6-e0ce50c72796",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d861ce30-38c6-411d-bd10-dc2ed40e26d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c021754c-33ac-4e71-b85b-968ee005e930",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4520ee25-7f15-46c1-9d50-7c57d1627abe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "428aded7-4c22-4baf-9945-8ed3831b513a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a96d846-958c-4b12-84b4-f6105347d015",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c543fe65-742d-4fdd-8162-1f63a2a6ed32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00eb69b1-cfe3-48c9-82b6-6e6a47b3884f",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3e0a166-3f3f-4160-bc84-1a52bb9a35e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "472acb31-d96b-4f53-afda-8c32d97ac41f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77699642-df0d-4a0c-9521-7e3c3c05dc3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79d43ec0-1112-4d73-ba3d-96e900e677ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae5346ba-cd17-4bf6-b0be-702a2a7dfcce",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf58f9b8-902f-4e26-a2d5-57358e00df3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "671888a9-bf7c-43b7-a828-6aa1caad6bb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac07c3f8-0fc3-45af-a0ed-f7d6f07d5a7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d15e926-193c-477b-aed3-1330f508301d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "985bbd32-a0a6-4e1c-8f4c-49e333b8c9a1",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "042a88fa-af30-42a3-8b7f-5b6c41cf0f56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff21cd4f-d824-49ff-9cee-2ded6d9708d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b865df1b-daed-4594-98c0-58aec7cec9d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e4d3313-88ae-4b7b-a96c-c490f75698de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b782efb0-84e3-4e7f-ad6e-1ad0c5666221",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec4969d9-9b6d-4681-b434-75c6882a4ba2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf449d4a-9a9f-4292-ba87-10581fdef3a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f6b41fa-3be2-4140-8a99-4a2473b9729e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "742adfaa-8556-440f-9da1-bec8fa2ba256"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84906a33-a98e-44dc-9a44-de22f34f9e1a",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7968c636-72a8-439e-bf6a-cbae80e41f28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7052907b-5d27-4779-bfe4-e322fe4e8076"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e68b8f7-a3a7-4136-ae63-9c98c19badaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2708571-96ba-4c30-88c3-efeb0992645a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dc9325f-58c3-411c-a5d7-97d85a92fd6a",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdc6bdf0-01fa-4316-9415-c218474d5544",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aed94937-7823-4efb-8609-4edafd5952bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "082624b4-755d-4ccf-b9af-70ea3640a8e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2272100-a7a3-4e9e-aeeb-96f5c5815241"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cf57375-e3c9-4b47-967a-98ab5984b289",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfd59d72-e935-49da-963c-4d150acc09b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36dcbcbe-8dc1-48f8-a3f6-4001eac49461"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72d07438-0103-4d11-973e-d0be06a4edc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e407079-5475-4320-a85c-862bfe824e8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1ffce33-db7e-4059-a2ff-35bd27412206",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f83bb5d3-5461-4814-9973-47c9fbdde4c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7be03af2-5aa3-4a83-b6aa-326afcfbd121"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fd38de6-420a-44c7-a8e2-afc5852d1157",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09faec09-5ce0-44de-b0a1-797105f8f501"
                        }
                      }
                    ]
                  },
                  {
                    "id": "207d2adf-7063-400b-ac5f-1d525bd1b7c1",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53fb3acf-1ce6-4138-875b-07579124242a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d978c6dc-81ee-49fc-aeca-ab911b17c76c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3752ae59-e404-4958-aec8-03c16da675dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fab47cbd-b801-4d48-bc53-22f940cd3178"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dadf4157-bed5-49e7-b91a-219f52a9c35d",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a39f480-ae93-42e4-b397-0e5dccc694b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a30697ce-bffb-472b-8f5d-3d0d6fb79e0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a17ea39-f7f3-4dce-b29a-e873ffad8a4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33c90f1d-b1bf-458d-a495-a11a7ebe0df9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eb81f53-5efd-4dbf-a409-d8e78002b17f",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c742f8fe-6d4b-47cc-ad2d-931f17feefb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "769cc7e5-bae3-4306-ac45-69dcaffc91d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07beb4dd-bc53-4f73-9d7b-de63b67de928",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45f3b275-421b-4184-a812-d47e45866e9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "586bab43-d3f0-44bc-8631-6c878cd117df",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ec60abf-09ad-49cd-b3c4-5e6c61aca764",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bba7929-86d9-4094-b23b-827c8159c60c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a391838-6a42-4f7a-8c94-9eb1d15a5bef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80753811-b275-4730-bc11-df02cc2a0561"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2adc4ad2-1707-46f2-902d-ed068c361509",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f68afc5d-2520-4827-9db7-57ea9fab30df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b56dba6-b4a1-4ec8-b4c4-211c6ef67102"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "936a66b7-d7dd-4ce1-9569-c0409cd6d859",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "888f18fd-c58d-4b63-b8ff-edb3ae45b5b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36e1aa16-4bad-4c95-8a90-65ea7a2fd178",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92c790a5-f8d4-4d9b-b9c1-40b20a5002f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1bd2688-0c13-48ed-9ca6-40cb9002d04e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d376f28e-6e2f-4190-b371-3667dc551bf4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c306187b-6471-4a79-9f66-948c3fcc0508"
                        }
                      }
                    ]
                  },
                  {
                    "id": "072dc7be-a121-41a5-82ed-714f0d4384ea",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64c834ce-5fdd-440d-a492-e4cd6c8f87b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ded63001-6eaa-4ec2-875d-831cc357b2e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03b928d0-9ad6-4e82-9d35-c800a7a4f973",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4f91e4d-e220-4228-9957-f26a50559a93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e4df4ef-b4bf-4392-9832-a1d78edc0937",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5a0d076-5e33-484e-b302-97c277b9c6f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96bb84ce-059d-437a-9f0a-01ca5af7d886"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "534893ed-142b-40b8-915e-3564250377a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "714cd5e1-857b-4572-88d0-c08d12edf039"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc0bfe46-fa9f-49c2-a588-03edb0b7ead9",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6e563e9-c88f-4dbd-af08-43cdbc1ab8e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "377a57a3-1548-4413-a96a-3561eebcb546"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fd91543-a168-49d1-a4be-b176b3ee8106",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdbd56b4-9847-4193-a949-82226874405c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "867f87d3-3dce-4c27-8443-7c874dd6b798",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f71a41a7-662a-434f-bc48-4d7d6d3ab508",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f03fcdf-e68f-46ba-8c85-5ee0ffb235a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b17258da-09a1-434e-8e4e-a8ae12413fbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2fe17ca-ef23-48a8-9a91-0dbe4cb4d4e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "119fae14-c588-410c-b4ab-ebdcceab65af",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "153bdb48-113a-4a43-88da-eff49e18e706",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8f4d765-adff-48bb-bcf9-b5030ae0a6a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fb8eab6-0a09-467b-9d24-b827666e4453",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c41c059d-4429-4885-bda0-7a5d09e18b28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "892c468f-6afa-425f-a9dd-671d3608bed6",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2190fad8-a03e-4fcc-b1ec-ea744dc8429d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b34b696-7906-4026-b0d5-40def9c57b7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93575a52-f8a0-46dd-8069-567d76c17d86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49f7c759-57cc-4649-8084-4c95336f7f8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6704d783-1437-4b76-a614-fd5320d423ee",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e5f0247-48ad-4170-89dc-9a1901df8e06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50561384-4207-4b5e-b6b2-5404c1df4e16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1698ab2f-35a9-49e2-8d18-808216564e29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "995ffc6e-1cc5-4684-b1dc-e9d0d901e7a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48aee5ce-4fa2-40d4-abe3-e3ce5ab0b9d9",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c04638b-fb36-4ca7-8acd-adad7d3180d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26e06bfc-f116-46d2-98a5-0ab39a6977f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e0b2d5b-c177-44a1-9cec-677b37fcbd57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e7580e6-5560-4ff2-b74d-d4d76185ee59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbf539fd-3689-40d6-8eee-1f67340e9327",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "275c6578-b1c1-45e7-8dae-fb3c75cb378d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d1d1f41-4365-400c-842a-ada44f65ffa5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "280e180a-ce06-456c-a3a7-5034d9cc7a2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd499ff8-307a-4bc2-8efb-8628cbf077a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e563589-ba0d-4996-8933-90f9eb07ff67",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ce41898-55a3-49a1-bf95-dd7d2a7a6979",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d256ba4b-166c-4f35-be16-347ce774c055"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13ac8d34-461b-4421-b437-c6a3a15501e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0dcc785-fc22-442d-bb38-be8081c8c056"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c7472a0-683f-4a65-ac5d-ccdce93f2f65",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04a507b8-89e0-4c04-b9ff-164bb1823571",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2bebf6af-8e40-4ea9-8ce8-b032364826f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1901331b-23b4-4996-a3c3-aedb6a9c28f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "091073c9-4fa1-4b49-8779-67b57646ef99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9f954da-5309-4e26-b2ec-b81c298d2b19",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78ed3f24-e011-42ed-a389-7ed9ab72d0e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b14112f4-5683-42c9-a54f-830e916670f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4494aecd-46bf-4959-be0d-8a97e4286337",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c42b94b-530b-4255-9cfe-6c3213c5deb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf1ca9c0-0593-4a0e-b3db-df9a96443182",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b2d1479-1a7d-453b-85b1-5adbd52c01db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a852d482-634a-4d0e-85e8-7c860033aa6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5757fec3-53cf-481a-ae7b-181f4d9027b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6560e52-1d67-4e82-b3a5-d57b7451d429"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99e57bab-cd92-4042-811e-505ffe720ad8",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2df5287-5209-4f76-9f7f-810426b8d780",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0de89ad5-840a-49ed-9116-2b0e44923944"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a88c9710-db3e-413f-97fa-223878151614",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "add21de5-132d-4f69-840f-1e014b8ef564"
                        }
                      }
                    ]
                  },
                  {
                    "id": "454fc2e3-d882-43b5-9f37-e5bd7337909b",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df600ed7-1d63-4963-bd6a-fb61fb64fd0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36d8a99c-198c-4a78-9b4b-77aba6cdbb44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e21b6531-4c16-4788-bbc7-e19b86ccd02a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "842866b0-f470-45cd-bb9e-210372eed4cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1a3c5cc-0f00-4313-a045-52ebd1ef45c1",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29f7e3ae-3e76-4f85-80e7-0c1d8e03e536",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97b94578-25c8-4456-81f8-8ae7846ca2be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d8a99cf-3abf-4f45-b146-d55c2dc56292",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c92425ab-7c1c-4d67-9c48-b5a9cf337e9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11df7a1d-d287-4b7a-8337-2c8430c4c10c",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0741dab-d007-4c9f-a58c-3f4bb8178d6c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18634be6-c7f1-42de-b8c6-5349e7ec8cf1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57289782-8c1c-4b78-808f-8b131dfcec76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d710f184-b83f-4ef6-a856-7f1b4342c4db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08544d53-be58-4d13-a151-5412e6b70db1",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94b8f92f-cf01-4f5f-a452-abf2e45f355d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e521b9b-0f06-4978-bdab-19123d59bb59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdc8843f-9b7e-4a10-b1fc-4fb3deb2c803",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc4c05dd-afdb-43ad-8dfd-a74d25014f4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5fd3769-17cf-4aca-873e-a9696d229ef9",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e299b574-47ff-4a92-98f8-2cb5eb95bbd9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54a3b89b-cd8a-4170-aecc-d0521069c082"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2d549ab-5f5c-4171-8d27-b6deb579328e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5aff5b49-3477-40c4-9767-afb7a122bb33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c0daefc-dbc0-4752-940d-15b9e74da80a",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e733d85d-2bcc-47d1-ab13-704599002e89",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da956c57-b996-486d-9216-6bd7515b67a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf664a4f-53b2-42c5-a4e9-923f091cd38c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "519e9810-75b0-46b6-ae7c-67f60f4ae157"
                        }
                      }
                    ]
                  },
                  {
                    "id": "772769c0-79b5-4398-a750-099f2c0ddfa8",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d4c6528-5d4c-4364-afda-b6bed8792fe5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2836f014-4a4e-479b-a5f0-a5a0c5f3b78a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "039f23ea-d87b-461e-8a81-8a1d6cde26e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f45ce21e-8ebd-4c20-8719-978ec864926a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d322b2cb-a821-4830-a5a6-1933f332f2b7",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "412adb76-9bf2-48f9-81d0-36ea9d1687c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b109ba8-a9b6-4516-8c12-8e416313620b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3104f220-cec8-4a7f-a416-482d4ef0bf7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eec20827-2730-4c61-8704-9fb9b36745db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53a1f7ab-64ba-474a-848c-fa5ab45050a4",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d7fd02d-6f41-4337-9c34-68f62173fe78",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82b23042-ab92-4d1f-ad73-f8708203934f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "116de622-1603-43e0-a414-66f903d3f671",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e29ffd6-41d1-43da-9189-1f93dc8bf550"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55b5d743-2d81-48af-bb25-366f02917ea6",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5a504ae-10eb-47bf-a759-5737c18cc679",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f39b8a14-c073-48c9-b1ad-d961eb5af6c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f145246-e6ce-4593-a4d5-70248ab52821",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0a2dd60-886f-49c8-82da-bb54c2accda4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ade6f3b7-34aa-4c58-a65f-304c19d14717",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d930284f-eb43-473b-a530-73684cc9caac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d51483c5-17d3-46ed-998b-78316f341363"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e19d1466-fa07-40ff-8a30-d132438a3a02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a87670e-3d53-497e-a877-10e3ebb225d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99e3433a-9f8c-4960-a13f-a45a9ac7864d",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6dd493b-ec47-4b3b-8ef9-6acda42086c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44226178-d653-4ed8-9e9f-6e2bb528abfb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d98c45f0-886c-4b14-91aa-5cf03e8639ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "307151bd-e701-453e-8bd1-75e6bde21035"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05132866-2833-4f68-86ca-8343b270390c",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "141ce4e4-910b-4663-8ce5-5a8b73ac7e96",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91577926-017e-4084-abe4-eaa49c9a47a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aafa0136-ca70-447d-82c8-d72e6d6f8eda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39f082ed-6e4d-4c2d-840f-a7373e522503"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e34316d-927a-4867-b316-f4c6941860a2",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dfc0432-21cc-4f3c-8d37-6d8556157743",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9d3c42f-30ee-42ee-92ad-efc4c187fddf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57a84ac0-4855-4a10-9545-d91d59a1f620",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65ccbe63-3e08-44d8-94c8-a1e1fa1efa84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d911509-6319-469f-8198-80a64b752166",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad30f806-ba61-47fc-be87-845c62d3ae55",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f633ef3e-ae7c-413b-89c4-12fa63045b39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf7cb7d7-16e7-49d4-a0b7-000005c18036",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fff5952-3a36-4d56-8fdd-25b91461e235"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10fc7ad0-38db-4a4c-95ae-eee16c998e06",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "523ba1c4-71be-42f4-8396-9506cc030804",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "522397af-2d24-4769-bad4-00a1f242667c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da41641a-9bc2-4724-b9b8-85bbd56fdb52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fb412e7-79ba-4487-b35b-690c601712c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88f14e9c-122f-4b79-a31a-9e523b2db859",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20540d18-cc8a-4332-bc82-0236cc2e8abc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a543049d-ed7f-4b5a-9005-83cf20bf92b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbb95791-8411-41fd-b095-40f8a7a17418",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "395b6937-cb43-4dde-8a9d-b7b042939843"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec949665-088a-4c61-80c6-d5457753fa3b",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2024dd16-bd3a-426e-9d4f-dd4bbd6d2e53",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29795b40-44ac-44ae-8bb8-0e72f60bc045"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dcd301c-5ceb-4694-be8f-2d72d5c25e4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc742cf6-7d0a-48e8-a94f-a5717d620cfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e90be05-3384-4658-a385-7c733f146e68",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5060685-1f77-46d7-a202-ee58c7f51e02",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f3a7ae4-1e4a-4c92-8d3d-d376d72268e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a800e02-1dab-4eb0-9d71-d7b91e26b0c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc1cae67-432d-41cc-813d-4281dc21248f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7c8ab30-a0aa-4d32-bf5d-1344cbf33763",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09bcb739-6db4-479a-8d81-d405703842b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9a6d2c2-eced-45d3-83c3-5f76418095fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d082b78b-1ef6-440f-8b39-45563773a16d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b24f075-4be7-4c82-b3b5-4e95273718a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "136fea3e-a2a0-4702-aacd-bdc38c919d28",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2281012-9862-426d-8c3f-2c3629eca762",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73738260-7fb3-486d-82d6-4486741cc93e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e88d8c36-54bd-4fe8-bd55-dc2882ad4e00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13ef8863-5798-4b67-9301-6f719a4f571c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c377032c-10cb-4b3c-a125-5b33dba69711",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "328f3a2c-be5c-4bf6-840c-f7853e3398d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4af5acf0-30a8-46da-8bd8-6a07f224a7fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ebc8ff7-0d48-43f6-93b5-c70311918688",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c79ae7ac-ce7d-4374-a5ed-3a8e05af999c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d99af5a1-f522-4e5d-b084-b9e54e6cf232",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd3effe1-5649-4744-8084-3f8d4512f299",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e25ac22-b81d-4cbc-8c78-a68e78c45d08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d69ebcfe-6c0b-4061-aa53-55d66286991e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dd0fcf6-048c-478d-95c1-542c41b78d5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92f64d62-f024-425e-8993-a16c61ea2c97",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4291c75f-89df-4a51-9a41-eb7611d8c311",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5902fc2e-8c18-4bf7-9f1e-839ea74da375"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfff7c64-6067-40b5-bce9-ce20d2470bbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dbebef6-8ee3-49df-b48c-32e81d5b4dcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de31ce2d-0b13-4f64-a9fc-c275ec85c198",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fc70a64-f0bc-4ce9-a2ac-85bac27fe385",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9800ba72-70cf-47e5-819e-809a83ea5b2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "facc3226-2c74-4be7-ad37-111970093aa3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc2902b3-5ff8-40e2-ad8d-e523d9bb3e1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ceab2d0-5910-4d86-9413-bcd3acd6869b",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e87241f-80a9-44f8-be00-24ba347b7cb4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f230d034-0657-4a71-a7ab-589448edfff4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d24b315-04c6-4f12-81c0-6873b7f8f3a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b85d853e-d786-4c5b-a8ab-25bcb7116551"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2445d81-d9b3-48b7-ba81-0ac7c200ca67",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7a521cd-215e-4125-841e-0715f9057c73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f6d692c-2176-44d0-98ae-6b0a9e171fbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bec54531-20ac-4c3b-8010-c3235e55f2e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ade2339-34af-4f93-b15c-e16d99a63d88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "890dd586-b247-4143-8933-07059d085877",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9366bd2e-cfd5-4fb1-98ca-e061e47d0cb2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4bf5d05a-27fc-4e88-b82c-c779d978dd13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd52deb3-e13c-4d0c-aeb2-3e7083e4a6e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abcc9f8d-13ec-4ddb-8517-ee2f6b00b933"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79b3193d-e174-4739-b6e0-7ea419209418",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "140124cb-ffa9-41ab-97cb-75a5c76e0860",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4fee407d-e3b5-4d65-a3b1-dee86512b7da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b7a379b-12c9-4fb2-bd4f-b31aa65dd265",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f073a5e-5bc0-4802-b03d-6970012722b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "892f4e0b-8806-4760-b2e4-3ebe993e9adc",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb9f3684-81f4-40dd-9f04-d2816325d6aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f567a111-e9e6-4a1c-8eab-96ac9bcc321d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a9c2070-66d7-4ced-b59c-6e4316e66056",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86fcf29e-33fc-4c3d-8a9a-d193503a91c0"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "676bca09-e533-4e8b-a2ff-27a9024b5d07",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b1618b07-6daf-49e9-a10d-7f696cfcd309"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "38ca755d-ffba-4e46-a75f-0bedec6208d3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4786d073-b546-4171-b5b4-c37c7fcc004f"
                    }
                  }
                ]
              },
              {
                "id": "677df439-a22d-4040-a663-4eb8c544d203",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7059c301-990f-47f8-9518-f80f838acbca",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0d958d6-ebb4-4cfa-b1c4-ed696438ed80",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "323ad8d4-7320-4ee9-9ecc-c8ab54516c83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5590260-7566-4fa1-a82c-be316a96bcf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "80bd61a9-5131-4342-a220-3ff45fdce910"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "71c60e1c-37bc-440b-bbe3-32cf5896b507",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b7f1db74-a11d-40f5-b57f-0f28b09869e8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1e57f47b-6316-4425-bc25-9ade03148afe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5d9e3241-0795-4e66-9383-35a26b44ddc4"
                    }
                  }
                ]
              },
              {
                "id": "c3f4d090-cbf7-44e0-91cf-f990607149af",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "70bb60ff-2360-47e7-ae12-c1f3a613d0bd",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8693f5e-47ab-4ee7-be96-c6b1e94b914b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "e3964284-1577-4d96-8cb7-2f4583032e43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46a3d7ae-16d2-458b-bf2e-1e7c602824f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71d9612a-1a92-47cf-96ac-6064970747a9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "1e5280cd-7705-4858-ac98-1e75e80c79ae",
            "name": "Positive Testing",
            "item": [
              {
                "id": "efaabc90-b582-47f7-87ac-171e22bdb8b7",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "123e838f-9d0f-4ad8-ac5c-b613884efd87",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "55dc3da0-3c3c-42f1-b3c5-52b9832a0f5f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e14b8d3c-4656-48a2-b82a-bc9efe69b4d9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d32a1534-1179-4d08-8e6d-da372b9dd961"
                    }
                  }
                ]
              },
              {
                "id": "1559e992-8e56-4e2c-8721-d8acceff89e6",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c95b1e74-39ca-4a54-99cb-ec4c77bf8bb7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "3680d78c-ab14-4a3d-b241-49e07ff8f46c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1ec470ed-40c3-4c79-8734-4d1037a84376",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "59224d12-fc16-49a1-9be4-4c2c5d218a37"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "532c9b11-7364-4df1-9a2d-513a87455454",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "74d0b064-8126-4037-b3bd-189e561402d5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b9ba4bd2-6fea-4ea2-931b-76e90a8d902c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "39f7ee70-949e-427a-a3f1-ee7296e4081e"
            }
          }
        ]
      },
      {
        "id": "2498f2fc-b135-4235-99ac-cde6311ae09c",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "03e57d15-47ed-423f-8168-a3600ffe0ca9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4c7f8d43-20b2-47f0-bc04-dcaa07cc330f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8541eca5-4936-4bcb-90ef-fcabffeddb5f",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad11a97f-f21b-45f1-a314-45f2e48d19c1",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ed5491ba-b77d-4633-9572-d000bcbcb637"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a096a9af-2643-4222-ab15-57abda89cbf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f6a9ae07-1df7-4021-8ed2-4eeae33223ce"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dc2c57af-2657-44b8-a6bd-3bb4053baace",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ff472c92-aa01-47b5-9e15-16d11d8624b9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "576e6fb2-49d7-4007-86d4-136b8505df93",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "50ec01aa-ed5a-47ae-8970-6872a1abc30a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3e539b28-f875-4423-8d51-359e17dafda7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "29d8baea-d5ac-46b6-b600-96c0736150a8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fff3ca6a-e034-44a1-94da-21405d970463",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f17e7609-1756-4aec-ae77-44dab756a58c"
            }
          }
        ]
      },
      {
        "id": "db5676aa-7fd6-47c3-bb08-06388039b271",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "4def4746-3d9b-4b6f-bb19-f1b1e17f4cf4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2817cac4-3449-48df-bd65-e495a42dea25",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8ac148f9-7324-482d-ab46-28eca0859db9",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf752ed9-edba-45c6-ad05-afbd995c1650",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1efac1b6-e086-439a-8572-46fb60faa0cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fee03be-f745-44ae-add1-eb4f9bbb61ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1f258486-7335-4054-a6b0-3e48cf24af66"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4d06ff5f-95f0-4d5d-8765-70ec73ab77d6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cae4b8ab-a4f4-440b-b10d-fc14cc0999e9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "510daad2-7e9e-423f-b336-8fc9795f7d5a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9e70583f-545c-4982-be6b-1a2b3ec90ae6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4d1e17c0-e714-409b-a13b-bd754827d215",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "99560241-e67d-45e6-9b88-ce2f4e954a82"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "325c0fe4-18b9-4370-bb9e-ad094c1a7a64",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "97b8bba3-960d-4a12-b3f1-f6a9e3107f46"
            }
          }
        ]
      },
      {
        "id": "fda9f160-c510-4b72-ab44-5d9d8479cc40",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "e20974c5-c0bd-4e3a-95ca-873f71bd3c6f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "efaaaab6-1dea-4292-aae1-02d59412d29f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2a8738ff-4bbe-47fb-a6b6-f3131df8652a",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bf944ff-9f37-4139-89c2-378b564215a5",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bd33f27c-3a98-42c1-8316-c937589a8ca8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f89820f-30a4-46f4-ae79-81eefdd792bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "faf3fde7-f070-4f17-bc1d-6861d001b6bf"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b474e24b-dcc2-42b0-9714-c0471fe40f9e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6f18a928-55c3-43e9-aeea-747dc7a87c04"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5c36192e-bb99-47a1-a75e-5bd652689480",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f9a028e2-338f-4df0-afc6-fb1a94b0aa2a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e8b3d897-e71b-4e7b-9399-a0e4829bf5ab",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "9448f5dc-835b-4592-b295-2cdd402c2413"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "92c66671-ad2f-4edc-b83a-aad89b26d6f8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a598f5ce-f443-4c06-986d-a11db7c5bdf5"
            }
          }
        ]
      },
      {
        "id": "38e049b7-4818-4f0e-82b9-220af600fe77",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "87f23702-7151-4d8c-a88b-ee310ef947dc",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1fdb8927-9de5-49a0-b0c6-5ce596e7a02d",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "2f8b38d3-dddc-4046-8d65-3ba7437d09e3",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b283a229-5dec-4d5e-9083-e4452d4b1a01",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "045d2d44-eac5-4b35-ad88-1cd1b2077976",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 101.54035087719298,
      "responseMin": 20,
      "responseMax": 611,
      "responseSd": 68.36493371078762,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1702859819127,
      "completed": 1702859857480
    },
    "executions": [
      {
        "id": "856503cb-660d-4920-a3e7-fbc3bfa1e85e",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6bbb6b14-05c9-4f97-8cd7-b112cd206977",
          "httpRequestId": "70f8e7ea-b208-4dee-9ec5-f329aec18597"
        },
        "item": {
          "id": "856503cb-660d-4920-a3e7-fbc3bfa1e85e",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "e6d192fc-db23-4c54-ae54-278ddbd7a45f",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 0
        }
      },
      {
        "id": "dcd148db-7869-4926-ada4-d630086b4058",
        "cursor": {
          "ref": "9aab0126-6199-47d1-9a8a-2f5b71f52971",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "83294ce2-2994-4e48-997e-6b0a4356a568"
        },
        "item": {
          "id": "dcd148db-7869-4926-ada4-d630086b4058",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "6ed78da1-87cf-49a9-a234-3c4b428bfbbf",
          "status": "OK",
          "code": 200,
          "responseTime": 20,
          "responseSize": 0
        }
      },
      {
        "id": "70dc1a33-da47-4034-989e-3e474ae461ad",
        "cursor": {
          "ref": "4aa23696-a3f4-47d3-ba6a-c92987c2a128",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "7bd61773-7c4f-48e0-a7dd-ffc15fb1f07a"
        },
        "item": {
          "id": "70dc1a33-da47-4034-989e-3e474ae461ad",
          "name": "did_json"
        },
        "response": {
          "id": "b8709a50-2450-4e65-97d6-97667415c968",
          "status": "OK",
          "code": 200,
          "responseTime": 611,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "871d4aa2-629b-4e7e-af22-c5b023e92c95",
        "cursor": {
          "ref": "340884bd-0478-4ce0-9cff-e0056ce0e7b5",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "6bcf34e3-14d5-4d91-9875-a5e52556facb"
        },
        "item": {
          "id": "871d4aa2-629b-4e7e-af22-c5b023e92c95",
          "name": "did:invalid"
        },
        "response": {
          "id": "5c949322-2af5-444c-89d8-98881474d182",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "871d4aa2-629b-4e7e-af22-c5b023e92c95",
        "cursor": {
          "ref": "340884bd-0478-4ce0-9cff-e0056ce0e7b5",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "6bcf34e3-14d5-4d91-9875-a5e52556facb"
        },
        "item": {
          "id": "871d4aa2-629b-4e7e-af22-c5b023e92c95",
          "name": "did:invalid"
        },
        "response": {
          "id": "5c949322-2af5-444c-89d8-98881474d182",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ade2cf9-28ea-42c3-8f7a-b00948ed5d06",
        "cursor": {
          "ref": "d0c6b6f0-baf2-4e36-8b84-2f8527aa5187",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "8f0e8c59-a491-4eb3-b684-324d60e227a9"
        },
        "item": {
          "id": "1ade2cf9-28ea-42c3-8f7a-b00948ed5d06",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "9eb6e562-2d4f-4061-8234-a0eb39481810",
          "status": "Not Found",
          "code": 404,
          "responseTime": 134,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9edca3a-f207-48b3-bf17-773e4661b900",
        "cursor": {
          "ref": "b818e1f3-51d2-4733-a61d-794328b3b63f",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "b960136a-6b57-4e80-8446-297fd5d41f17"
        },
        "item": {
          "id": "d9edca3a-f207-48b3-bf17-773e4661b900",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "a186095b-ae8e-4dd0-8e26-c6e85b7165e8",
          "status": "Not Found",
          "code": 404,
          "responseTime": 95,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d1f3597-dea2-471e-b591-863fdc2b25dd",
        "cursor": {
          "ref": "4ab437dc-f32a-4b3e-8d28-4275fc1f2343",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "0756049a-22a8-4728-b951-0b36462ca8b8"
        },
        "item": {
          "id": "6d1f3597-dea2-471e-b591-863fdc2b25dd",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "08d6f19c-a5e9-4269-a66a-71b2be9c7153",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 68,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6184e91a-8237-46d6-bbb4-0a6ee088a0c7",
        "cursor": {
          "ref": "c214bd35-8dd9-4596-a7fd-a1ac74171c4b",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a9e2a37e-2077-42c2-b200-ee170602bce0"
        },
        "item": {
          "id": "6184e91a-8237-46d6-bbb4-0a6ee088a0c7",
          "name": "identifiers"
        },
        "response": {
          "id": "a53a5e7b-701b-4a4c-b5d5-a58d8290e5b0",
          "status": "OK",
          "code": 200,
          "responseTime": 115,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da4ccc9a-3d09-4805-9f55-5e6ffa1071d6",
        "cursor": {
          "ref": "aaffc6e2-2d06-44fb-a3a4-2ac23cc8aefc",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "916dca3a-3121-4bde-8252-e483ac94264f"
        },
        "item": {
          "id": "da4ccc9a-3d09-4805-9f55-5e6ffa1071d6",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "0ac2d7dd-b07d-4e4c-8209-540f16c94ff1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77be45de-34e0-4572-aa82-178b313925b4",
        "cursor": {
          "ref": "56c8ed6d-7dfb-4103-9536-1bd310ca1325",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "11481587-4ddc-408f-94c2-d795004117fa"
        },
        "item": {
          "id": "77be45de-34e0-4572-aa82-178b313925b4",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "fea714b6-f13e-4a6b-9275-85869112a8dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c03045e8-ad5c-4091-9d3e-2dc7fae60c48",
        "cursor": {
          "ref": "746d9353-afa6-460c-a307-614a033e8c5c",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "1874a693-3d94-4077-bdfa-171550d0e9f6"
        },
        "item": {
          "id": "c03045e8-ad5c-4091-9d3e-2dc7fae60c48",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "3c092f71-61f4-4092-88fb-7fd1bc1dc4cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "373c8f52-cb25-4a6f-b239-f9f1737f9345",
        "cursor": {
          "ref": "03c0a98d-5a1a-4b75-9640-c452e17ecdfe",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "60b3ea36-8ced-490f-a6cd-c6707d5aec6e"
        },
        "item": {
          "id": "373c8f52-cb25-4a6f-b239-f9f1737f9345",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "7e86e4ed-ae9c-40a0-89b1-1e293b8c2f18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e63f9d48-6e11-4058-874b-8510d6e4f163",
        "cursor": {
          "ref": "1452055b-1765-479a-b4b2-a760050554a9",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "278644a0-ab02-42cc-8692-fb751e9a65ef"
        },
        "item": {
          "id": "e63f9d48-6e11-4058-874b-8510d6e4f163",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "fed40fc4-debc-4c8d-8575-397828385ad0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ab5333e-0231-45fc-8c4a-f3243508106b",
        "cursor": {
          "ref": "6632fbc3-d162-4f3c-8ae7-5b3f2d55cae8",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "1b07dfd3-a21c-4524-9347-0a4fdc586f09"
        },
        "item": {
          "id": "6ab5333e-0231-45fc-8c4a-f3243508106b",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "3167a8cd-5bd4-4573-bb3a-32975a2b5447",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6bf8ecf-bbdf-4270-8021-557941de119d",
        "cursor": {
          "ref": "13f27164-9a7b-41cc-9614-5a877c7ad121",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "84e14c58-4dff-4f86-8661-a4721c0ee163"
        },
        "item": {
          "id": "d6bf8ecf-bbdf-4270-8021-557941de119d",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "8535c3f2-d9e8-41d3-9f4a-d6900c28f362",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9739cef-f6f9-4665-9491-e9a84f255a26",
        "cursor": {
          "ref": "7ea0ccab-08e4-4b4e-96f4-50197dd7030c",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "72e2a83a-c6b5-4a99-80af-fe128b3e1dde"
        },
        "item": {
          "id": "c9739cef-f6f9-4665-9491-e9a84f255a26",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "6ccc3198-7c2a-4269-a312-bc9b74a0b8b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac762361-f3c3-4d34-99f6-5e642bb95502",
        "cursor": {
          "ref": "de46b4a5-ff4e-45f9-bb01-f21434d5831b",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "49e69ae3-7ad4-4395-b25e-1e512f124633"
        },
        "item": {
          "id": "ac762361-f3c3-4d34-99f6-5e642bb95502",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "0e4d3043-d423-47bd-a414-dc2bb32c352c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7125cd7-168f-40c4-845c-33ffaabcbec3",
        "cursor": {
          "ref": "0b5c15df-6500-4539-80b4-2664e7dd00cc",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "6e4204c9-fe3b-45b1-8737-dc5f0fd079a7"
        },
        "item": {
          "id": "f7125cd7-168f-40c4-845c-33ffaabcbec3",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "c1b2f96c-ca4f-4fb9-90a7-77d9a2ae7aac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0a10ea5-1d80-4036-9e37-95d72a8d53a8",
        "cursor": {
          "ref": "a3004450-2197-4ef0-a8ed-445853a8db97",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "a0c4db03-2ee6-4e8f-83fb-e4acc6010e4e"
        },
        "item": {
          "id": "d0a10ea5-1d80-4036-9e37-95d72a8d53a8",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "d427fcf9-6f4c-4319-8487-02f01ed35219",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1142dbf-ccda-4f03-9f58-714c69e62c58",
        "cursor": {
          "ref": "417fe4a4-4722-483b-a05f-0505776d2825",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "46e0ccb3-0459-4047-91d3-b010552d5722"
        },
        "item": {
          "id": "e1142dbf-ccda-4f03-9f58-714c69e62c58",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "f7697372-6b19-4b69-92b1-4a50e69799e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de13f740-c42f-43cb-b876-3e767b75e134",
        "cursor": {
          "ref": "291da1e4-672f-4d43-8353-0cb3f1737d7e",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "273cea11-7177-4e48-9f13-70cdceafd460"
        },
        "item": {
          "id": "de13f740-c42f-43cb-b876-3e767b75e134",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "c1f69f0e-1745-4ca4-97dd-b2948f1e0712",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b237efe-9910-4b4d-8d3a-6be85e090f8d",
        "cursor": {
          "ref": "b635bd61-3e1c-49e9-b85b-4075bd279e59",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "c2138349-e2e9-4c23-a9dd-3cb14881ca16"
        },
        "item": {
          "id": "6b237efe-9910-4b4d-8d3a-6be85e090f8d",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "a99b5630-8416-427b-9fca-654999645ffe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76ba5d07-fb33-4e63-a957-3da31120a20e",
        "cursor": {
          "ref": "bc3c37f2-cc57-4db1-91bf-6ea14d37e568",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "5a5a828f-91f5-429c-942b-04742b2a1016"
        },
        "item": {
          "id": "76ba5d07-fb33-4e63-a957-3da31120a20e",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "078ac7ad-1c06-4da4-b329-f3113809c51c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaf941df-012a-4128-b59b-6983e6d7910f",
        "cursor": {
          "ref": "d0af3852-e800-4caf-a4f0-4cc9367f98f0",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "c94b4bde-76c3-4408-b387-93a3429ccb74"
        },
        "item": {
          "id": "eaf941df-012a-4128-b59b-6983e6d7910f",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "2861bf17-dde2-4c16-88ec-2ba2a23f5b6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd19e55b-feff-4968-81eb-9f5ff1681cec",
        "cursor": {
          "ref": "48485158-806a-4190-9630-c34a590d5f52",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "a4fd486d-4560-49d2-b5fd-60e910ecfbff"
        },
        "item": {
          "id": "bd19e55b-feff-4968-81eb-9f5ff1681cec",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "e8ae979d-cf3b-4033-810d-d68c3f38a9fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6338bff0-e656-4cad-b9b1-1e5dcd36108c",
        "cursor": {
          "ref": "855d305e-0792-41f9-863e-f2f5830d9a14",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "07343d84-beb8-45ee-964e-34dbd42e78a8"
        },
        "item": {
          "id": "6338bff0-e656-4cad-b9b1-1e5dcd36108c",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "37944ed4-73fc-46f0-b40f-e24fc859f3f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90a6c799-a1ce-4ba5-9405-7f35d235c7d2",
        "cursor": {
          "ref": "31f25201-5894-4988-8ec1-08deddc2be76",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "8ae5e46d-0631-419c-992c-6fc554686841"
        },
        "item": {
          "id": "90a6c799-a1ce-4ba5-9405-7f35d235c7d2",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "ac16ad78-07e4-4802-a182-b24e60cc4585",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9dd8bd3-8161-475e-8d7c-b11ca9dbabde",
        "cursor": {
          "ref": "40b63b5f-14c8-488b-9265-356c92063a1f",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "851dc3da-0cfc-4d03-a985-4589f6497124"
        },
        "item": {
          "id": "f9dd8bd3-8161-475e-8d7c-b11ca9dbabde",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "ffc0e4ca-bef0-4b4b-b8c7-331a9de9c6ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "819c53f1-7fb9-4ef6-9b97-3bcc61185ade",
        "cursor": {
          "ref": "9af73229-7d00-4382-a5a8-5249578439be",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "3eaaf175-31c1-4e52-84ad-381ca7d3a26a"
        },
        "item": {
          "id": "819c53f1-7fb9-4ef6-9b97-3bcc61185ade",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "7428c050-0b7f-40be-8592-b11b8b4d5218",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "897e2799-f130-4bfc-8938-a18ebdf6f6d0",
        "cursor": {
          "ref": "2e69b44a-7974-478c-8478-6c4735dac182",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "8394afab-a53b-45e3-9d1c-668509e0b1ae"
        },
        "item": {
          "id": "897e2799-f130-4bfc-8938-a18ebdf6f6d0",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "b9fb2474-b556-4b67-b780-0c4128e728f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f91e210-9f6b-4fb5-b0af-52a9411e0ec3",
        "cursor": {
          "ref": "f64c725b-fef8-462b-87ad-4c6cc9439cf6",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "64c9eb36-073e-4b9e-85ae-afe2a14e680c"
        },
        "item": {
          "id": "5f91e210-9f6b-4fb5-b0af-52a9411e0ec3",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "5b6a634d-5123-48ba-911e-58ef3575d5a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf2adc22-c01b-4f97-91be-09f7352d096c",
        "cursor": {
          "ref": "eeef588c-f656-426e-a5af-56812d313c47",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "ade08432-0467-4c09-b5d6-88f2dc9515aa"
        },
        "item": {
          "id": "bf2adc22-c01b-4f97-91be-09f7352d096c",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "bdb3afbc-234a-465f-9f23-b03f9fffb9ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b9aa62d-1afc-47d2-9456-8f700ab3baba",
        "cursor": {
          "ref": "c0086353-73b3-42fc-9ed8-ee7528d1e245",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "21bcb8d0-c93a-4186-bd47-30568422280e"
        },
        "item": {
          "id": "6b9aa62d-1afc-47d2-9456-8f700ab3baba",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "80b95e48-f1c5-42db-b24d-f250f6c9b41e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec6496ea-9867-4e67-a745-19becee1cdf9",
        "cursor": {
          "ref": "e7eee201-b183-40a0-bd01-8b503f99ac5e",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "51597909-b4c3-474b-b39f-cdb2072115fa"
        },
        "item": {
          "id": "ec6496ea-9867-4e67-a745-19becee1cdf9",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "b6fce6df-8085-423f-8407-c8ca63044d9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aa13a28-ed62-47c9-b6a2-665b019a778b",
        "cursor": {
          "ref": "6ea3b797-92da-4114-bc1c-bf4a76fa8367",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "45c2d6b0-88d5-4206-b29b-9c1990a20f69"
        },
        "item": {
          "id": "8aa13a28-ed62-47c9-b6a2-665b019a778b",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "5c6b3f59-a811-4f7e-bac7-c1a47c09f449",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cf85081-19e8-4477-a5ae-f1edb7bf351c",
        "cursor": {
          "ref": "ece0e475-3a3f-4892-8fcd-840a2e86e793",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "12e0e8a1-6457-45b0-b8ab-2b0de68dd57c"
        },
        "item": {
          "id": "1cf85081-19e8-4477-a5ae-f1edb7bf351c",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "3974d7ca-c386-44d2-8493-89cf9106097e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "138cd0a7-3377-4182-a267-b275e780b32d",
        "cursor": {
          "ref": "0eb85563-06a8-4b69-baf0-1e4293008417",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "bcf52858-9c52-404a-ae8b-1f2dcf29bb8a"
        },
        "item": {
          "id": "138cd0a7-3377-4182-a267-b275e780b32d",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "b99fc78b-59b6-4656-bf75-6ac9288601ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "097ead16-210c-44c3-a47c-b8b19b1ad980",
        "cursor": {
          "ref": "1d4a7f58-ba3c-4d72-942a-7b1f875b173e",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "9957638b-f496-4ecf-96b7-fe981cd202e0"
        },
        "item": {
          "id": "097ead16-210c-44c3-a47c-b8b19b1ad980",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "eb9a4060-5993-4adf-a463-011cb0d35712",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f02ff9cd-92cc-4d32-b8dc-c845f990c997",
        "cursor": {
          "ref": "33dea6e1-5f49-428c-a8c6-9a611639caeb",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "c2bd63d3-8083-4cee-8693-dabdd11b08d7"
        },
        "item": {
          "id": "f02ff9cd-92cc-4d32-b8dc-c845f990c997",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "e8c16ae5-7b2e-40a4-bd08-352888d6cb67",
          "status": "Created",
          "code": 201,
          "responseTime": 541,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "2bc393f9-106e-4cf9-9a68-ddedbe8cfd2c",
        "cursor": {
          "ref": "fc809c28-97f6-4148-96bc-013f6ed2bbf7",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "eee71278-3a86-4d5e-b04f-ae54e9e1d549"
        },
        "item": {
          "id": "2bc393f9-106e-4cf9-9a68-ddedbe8cfd2c",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "e91ba481-b0eb-4466-93ce-5905c22821ff",
          "status": "Created",
          "code": 201,
          "responseTime": 261,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "0572c956-5813-4310-a90f-ec89cf1e0ba3",
        "cursor": {
          "ref": "0beaeba0-46c4-4868-95f8-b78584910a38",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "f4f9b1f4-9efb-409c-b708-c39a3725f8de"
        },
        "item": {
          "id": "0572c956-5813-4310-a90f-ec89cf1e0ba3",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "c4f42e3f-4a51-4fd1-bacb-fb3df3693a1b",
          "status": "Created",
          "code": 201,
          "responseTime": 248,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "c5a76f80-4268-42c6-8ed2-cd4e778637af",
        "cursor": {
          "ref": "20cd0cde-afa1-4657-a5d6-c035a03e9ebf",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "9789794b-15e8-42c3-8c24-b58b5622685b"
        },
        "item": {
          "id": "c5a76f80-4268-42c6-8ed2-cd4e778637af",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "cce3b0c5-bed7-45d7-9770-615312a0d399",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efb3cd10-9ef8-4c19-ac69-74cf319aa2fe",
        "cursor": {
          "ref": "66686712-1cd3-4266-bcd8-ad283b9a8203",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "3bce66f3-5648-4d95-b15d-4aca83e0a518"
        },
        "item": {
          "id": "efb3cd10-9ef8-4c19-ac69-74cf319aa2fe",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "57b9f783-1201-41d2-a511-df2d903bc7e7",
          "status": "Created",
          "code": 201,
          "responseTime": 250,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "48478ab8-c098-4b63-8e17-8aeb6f02cfbd",
        "cursor": {
          "ref": "340801c4-864e-4705-920d-5fc05f873909",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "668a0e86-638a-4909-8098-e884a9ace210"
        },
        "item": {
          "id": "48478ab8-c098-4b63-8e17-8aeb6f02cfbd",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "fa4c84a7-823e-4217-bf8c-eda616356b2e",
          "status": "Created",
          "code": 201,
          "responseTime": 269,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "410f87bc-b51a-4b96-abcb-abbf71c69ff0",
        "cursor": {
          "ref": "f985aac9-df7a-47cd-8b97-06a68dbdf5e3",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "a68624b5-561b-46b6-88a7-f6819a5c7d92"
        },
        "item": {
          "id": "410f87bc-b51a-4b96-abcb-abbf71c69ff0",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "243423b9-7c4b-46f6-be52-29f25a4eae13",
          "status": "Created",
          "code": 201,
          "responseTime": 253,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "5b7d7083-7d12-4656-aaa9-027eebb94819",
        "cursor": {
          "ref": "87510563-5a1b-4ef0-8eb1-ee824dc1c5de",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "a54a8804-c588-4075-aa83-ac8465271705"
        },
        "item": {
          "id": "5b7d7083-7d12-4656-aaa9-027eebb94819",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "66a4af74-456c-4367-81da-19fe0466808f",
          "status": "Created",
          "code": 201,
          "responseTime": 242,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "1c85241f-f962-473d-a3f5-f095c9bd2f2e",
        "cursor": {
          "ref": "67960639-f907-4c34-96b2-2ced77cbaf26",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "4ae25d7a-2955-4f24-8a99-2da49cdbc6f1"
        },
        "item": {
          "id": "1c85241f-f962-473d-a3f5-f095c9bd2f2e",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "ca982ec7-3ce2-4f9e-80f3-94b3773dc1fc",
          "status": "Created",
          "code": 201,
          "responseTime": 250,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "d84c8354-c099-4404-b945-3c725284cb81",
        "cursor": {
          "ref": "3c1fcedb-b0db-40e1-a037-a6b162826763",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "febd78e0-fda0-43aa-a8e7-3da154f2f7d5"
        },
        "item": {
          "id": "d84c8354-c099-4404-b945-3c725284cb81",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "d5848b7b-ccec-4bad-b3be-bb2b57a3efe2",
          "status": "Created",
          "code": 201,
          "responseTime": 307,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "c5b0596c-5b8c-4edb-b505-880cede95e12",
        "cursor": {
          "ref": "bf86b729-4b23-4ed2-a530-b7b75c3ac1cb",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "8ea02661-5f43-46de-92e0-324ab37b709c"
        },
        "item": {
          "id": "c5b0596c-5b8c-4edb-b505-880cede95e12",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "d9abc4da-7a1b-4507-bc61-21d9c1e9b56f",
          "status": "Created",
          "code": 201,
          "responseTime": 264,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "5e445ea2-66dd-4506-91c3-8bd87eeea243",
        "cursor": {
          "ref": "ba76a86d-2624-4611-842b-0b7985aeac16",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "c270a37f-f3f8-4b7a-9824-9d6446868f9b"
        },
        "item": {
          "id": "5e445ea2-66dd-4506-91c3-8bd87eeea243",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "b7c4f307-6e69-4877-a360-6951c34600bc",
          "status": "Created",
          "code": 201,
          "responseTime": 303,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "676e0b37-5209-46a3-be20-075f1b3fc871",
        "cursor": {
          "ref": "c4834700-6d41-4708-921f-e33af7c75376",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "93778b11-4e46-4b5a-863a-fe9ba33dab04"
        },
        "item": {
          "id": "676e0b37-5209-46a3-be20-075f1b3fc871",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "b646bfca-fc1c-40cf-9c28-26ffc9dc51b0",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "efd55fda-ddd1-4162-b875-e99a1f540bfe",
        "cursor": {
          "ref": "e5717e74-542b-43d9-92d9-2778afd8cd02",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "197e198d-1ee0-4b33-88d0-8b62513b935e"
        },
        "item": {
          "id": "efd55fda-ddd1-4162-b875-e99a1f540bfe",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "3ade3dc7-3beb-4350-af71-5abf0371b53c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82b14dbd-cb2d-4ab7-a793-992fefbe82c6",
        "cursor": {
          "ref": "af4ee95f-6f0a-4007-9c24-85f29e9d0b53",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "4ddff22b-2411-47a3-95db-d52660694e19"
        },
        "item": {
          "id": "82b14dbd-cb2d-4ab7-a793-992fefbe82c6",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "81be72af-4935-43a6-a72a-4b6dd9a317ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3c7d475-a34d-41fc-91e9-e3c1083cc3fd",
        "cursor": {
          "ref": "7f14bfe6-70b5-466e-bf41-3e322abf51f2",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "804a2252-a848-4834-8bd8-09a2e4ab18c2"
        },
        "item": {
          "id": "d3c7d475-a34d-41fc-91e9-e3c1083cc3fd",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "2b8dd18d-6777-42bf-87ae-df01313e1686",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73049c51-19cd-4f73-88e9-adbe3753384c",
        "cursor": {
          "ref": "c82cc037-e460-4e42-bc90-c3cab286722e",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "2fe13a48-1eca-4d4b-8d32-d0693ee43796"
        },
        "item": {
          "id": "73049c51-19cd-4f73-88e9-adbe3753384c",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "41ba37e7-23f9-4038-8e69-6ea9652e1dfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfe25b25-9ee5-4498-abcd-ef9450f77ae4",
        "cursor": {
          "ref": "056c28ad-0679-46cf-92ed-1ad342f001a0",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "30c4e8fe-aa19-4678-91d2-50852628d558"
        },
        "item": {
          "id": "dfe25b25-9ee5-4498-abcd-ef9450f77ae4",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "a20cd5e3-e51f-4045-8eb0-e3041c3eadd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7b83954-bd27-47ed-a872-af861065ab33",
        "cursor": {
          "ref": "c5b8c379-7376-4be7-890b-64878e3a4531",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "e80d8964-825f-4fa7-a858-a55c181440bf"
        },
        "item": {
          "id": "e7b83954-bd27-47ed-a872-af861065ab33",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "f87967d6-4714-4772-a165-65af8a83dd1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f209707a-1520-4bad-9f11-c5b2fcc3b7f1",
        "cursor": {
          "ref": "93165578-a5d0-4f13-831e-23377372662b",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "82e40f0f-5408-42d6-ab26-5156b03afc07"
        },
        "item": {
          "id": "f209707a-1520-4bad-9f11-c5b2fcc3b7f1",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "ff1fc553-6a06-4ecd-b482-da7611d02016",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f94ec720-5b4a-4fcd-8282-e567862162f8",
        "cursor": {
          "ref": "3dc232a9-4c82-4ba6-8994-2c51100be6d6",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "26adfd4d-624c-4652-a5bf-d08df5dd05f3"
        },
        "item": {
          "id": "f94ec720-5b4a-4fcd-8282-e567862162f8",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "8dab549d-6fd9-4205-a328-9523530dd03b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9d87053-9ce4-4a8d-a622-807f6a6ccbd4",
        "cursor": {
          "ref": "7f44a22a-43e1-4a16-bca7-8767ba3a8a4d",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "0463192a-250f-4257-865b-2ba67979984b"
        },
        "item": {
          "id": "a9d87053-9ce4-4a8d-a622-807f6a6ccbd4",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "505343d1-a7b0-4902-a7fd-332fa26a11b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54e8a71c-f0a3-4748-8967-8fdd8c4cef1a",
        "cursor": {
          "ref": "4ffd57cd-ab9b-4508-b06f-0c810e927cb7",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "143ae883-e990-4afa-9c43-0daadf929239"
        },
        "item": {
          "id": "54e8a71c-f0a3-4748-8967-8fdd8c4cef1a",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "819be923-cb70-4c40-bf9a-cfb7e629bf37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dc41ba9-d87b-4b60-a93c-ff1578f8786e",
        "cursor": {
          "ref": "3087deb9-8991-4f92-87e1-26630e8a6c42",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "8ead301c-db7e-47ab-9033-f5d3f5fdd892"
        },
        "item": {
          "id": "9dc41ba9-d87b-4b60-a93c-ff1578f8786e",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "70f12c8e-f8fc-4e8e-89bb-b3dc70a13432",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03562e2f-12bd-4a41-9057-cfcd82f27689",
        "cursor": {
          "ref": "ac40f5b6-91a4-47d9-827c-b5eeaba6b905",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "0f2c9206-277f-4631-9fca-7a66e6fca6c0"
        },
        "item": {
          "id": "03562e2f-12bd-4a41-9057-cfcd82f27689",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "dbd98c03-07b4-475e-a4c9-bcbcef9dc542",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d64b0971-3f1a-4024-b0d3-6ffea3c8590a",
        "cursor": {
          "ref": "1c9eee0c-36da-4034-95d5-643246aa244c",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "0531af0d-63cc-4929-b491-0fea1660e0b7"
        },
        "item": {
          "id": "d64b0971-3f1a-4024-b0d3-6ffea3c8590a",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "05cd07ee-ce00-4bb8-ab6c-e8aa9b49b8dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f2de733-1649-4eff-ae77-1aebe17fe287",
        "cursor": {
          "ref": "33694574-b4b8-4349-b8c7-45fc3403163f",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "01f583c2-793e-4b77-858b-554e9125dc7d"
        },
        "item": {
          "id": "8f2de733-1649-4eff-ae77-1aebe17fe287",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "b0d423df-6a8c-4a5c-8dec-71cab2601b25",
          "status": "Created",
          "code": 201,
          "responseTime": 372,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "3adb1e64-ff8e-41ba-aa0d-fb2981d479b9",
        "cursor": {
          "ref": "64769365-ee88-473e-b959-6e8218d1205e",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "2b0ac228-f102-4996-904e-e01848c285ec"
        },
        "item": {
          "id": "3adb1e64-ff8e-41ba-aa0d-fb2981d479b9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "f75d78fb-be80-494f-b508-7f03e434c37b",
          "status": "Created",
          "code": 201,
          "responseTime": 268,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "230b279c-5a3d-4790-8a3a-a989293cb86f",
        "cursor": {
          "ref": "1c21dad4-f8f8-4faa-8476-5a7ad63dc61a",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "9c9ee288-94ff-4107-9cb2-c5648fd1c3dc"
        },
        "item": {
          "id": "230b279c-5a3d-4790-8a3a-a989293cb86f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "dafd4758-cc3f-466b-afa7-1289c5b19b8c",
          "status": "Created",
          "code": 201,
          "responseTime": 275,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "e4cb6c9b-782d-40ee-b92b-28e7e1504251",
        "cursor": {
          "ref": "89f12df9-0d3a-472f-acd9-bb41b2a40b23",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "af4e58c5-8b13-4594-b172-049d89b740a6"
        },
        "item": {
          "id": "e4cb6c9b-782d-40ee-b92b-28e7e1504251",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "8ff76172-644b-45a0-af27-5f41943c6986",
          "status": "Created",
          "code": 201,
          "responseTime": 267,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "aef42d53-259d-4dbf-bc5c-d7f2bad56024",
        "cursor": {
          "ref": "b985bb2c-c7cf-4900-81fc-9a29d8d018bb",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "7ba88841-8a19-41c0-a735-10dfd7140513"
        },
        "item": {
          "id": "aef42d53-259d-4dbf-bc5c-d7f2bad56024",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "719a2cdd-7a45-417c-bcb9-31ae78ed1004",
          "status": "Created",
          "code": 201,
          "responseTime": 258,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "639a2ca3-2b04-4d64-af39-bbbc3e3469a7",
        "cursor": {
          "ref": "eadcfe7e-020b-4702-9f0e-a2eb045ae571",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "10ddd1dd-4b2e-4ef8-96c8-3946f3139c02"
        },
        "item": {
          "id": "639a2ca3-2b04-4d64-af39-bbbc3e3469a7",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "dd38cedc-2ebe-4a32-b215-b42c836b4f33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca879520-a59e-469b-8d3d-d5260161d749",
        "cursor": {
          "ref": "b773df6b-3847-4560-bd98-3e535b1a4079",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "70d37507-5eb0-4ef0-a013-b25b50278b09"
        },
        "item": {
          "id": "ca879520-a59e-469b-8d3d-d5260161d749",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "ac9ef1ac-ba04-4680-adaa-cc0cc7bfcb56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b762366d-25e3-4519-a0e8-caf24cfc9324",
        "cursor": {
          "ref": "08b8cb09-a0e5-4f9c-a691-5b95d29f01e6",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "97536ffe-8d08-4ce6-aa11-00182361c4aa"
        },
        "item": {
          "id": "b762366d-25e3-4519-a0e8-caf24cfc9324",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "7a1bd32e-98ed-477d-94a5-1e05e6a66bc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9032f64-1c11-4df3-a674-a75461f9606d",
        "cursor": {
          "ref": "b14d98eb-c255-4119-bd33-e20a4e800cb6",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "45e7348a-78b9-448c-bcb7-2c947ad68c35"
        },
        "item": {
          "id": "d9032f64-1c11-4df3-a674-a75461f9606d",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "c9123d82-3a08-4adc-8de0-2ef21450e2a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f2dae1c-c596-4e15-b989-0f1ef979ae64",
        "cursor": {
          "ref": "d134c044-cbe2-46b6-b6f6-58a6878ad11b",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "85b433d7-239c-4cd8-b6e5-31554fa79988"
        },
        "item": {
          "id": "6f2dae1c-c596-4e15-b989-0f1ef979ae64",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "cb80318e-3f50-4645-ad29-818464558b1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27b5fbe6-8e4d-4ce3-9fe6-a1604718c40d",
        "cursor": {
          "ref": "0c64a707-d0c5-4400-888e-0220aee7e23f",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "3c078788-b73a-46bb-8a35-e811c5204b7f"
        },
        "item": {
          "id": "27b5fbe6-8e4d-4ce3-9fe6-a1604718c40d",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "03e21d59-0405-4317-950d-7739efe50fc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e04f00ed-d386-4902-aa61-d7fb6c7fcf8b",
        "cursor": {
          "ref": "99b0abbe-0886-49a7-9b5c-a0eeb7b4b765",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "828ef684-8de4-4e10-a6b2-57175567354f"
        },
        "item": {
          "id": "e04f00ed-d386-4902-aa61-d7fb6c7fcf8b",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "e21fdddc-df62-4063-b317-e6e168c858db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e9461cb-cfa5-4b2c-bcf9-638fa27f91fd",
        "cursor": {
          "ref": "6b5e84b4-bf44-4247-8b0f-9db241c9ec8b",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "a65d4d14-5bbb-4402-9f4a-edb33d493181"
        },
        "item": {
          "id": "7e9461cb-cfa5-4b2c-bcf9-638fa27f91fd",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "a7ff6259-fb28-4342-b0ff-89f6e970b018",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f7079e1-e92c-4f38-aec8-5c6abf0bc4d5",
        "cursor": {
          "ref": "a475a35c-512f-40a6-a9e5-f5992b35522b",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "d1bb327b-eaa3-41df-8c1f-e3140eab9446"
        },
        "item": {
          "id": "3f7079e1-e92c-4f38-aec8-5c6abf0bc4d5",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "089a9805-9d85-4a88-90c9-45e1fbede39f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8d258bb-bb18-4a63-bc2e-88e46f760f25",
        "cursor": {
          "ref": "61ce8f9e-c078-4869-b9e9-fc305f6f09ff",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "de99329a-0d2e-4874-84da-176052f556bd"
        },
        "item": {
          "id": "f8d258bb-bb18-4a63-bc2e-88e46f760f25",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "0aaf92a7-cdc7-440a-812d-10096ee4d4b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99ca9697-afc4-4a62-8c7e-42a4674957ad",
        "cursor": {
          "ref": "c2d9515a-d277-47b7-a233-1b0b9c9e37c0",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "4654e8cb-e963-4a7b-b96c-a98899495282"
        },
        "item": {
          "id": "99ca9697-afc4-4a62-8c7e-42a4674957ad",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "2d023078-e76e-41a7-a8d4-6ec518c4a1dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ad54fa3-a7df-4099-af02-9940e33c205a",
        "cursor": {
          "ref": "621ba33c-4c47-4ee3-824e-ae29c08ff586",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "b0f68892-4e3b-40a6-bf25-5d46b6141056"
        },
        "item": {
          "id": "7ad54fa3-a7df-4099-af02-9940e33c205a",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "efeebfb6-ccac-4d42-bed7-acd8a13977e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5e23dad-6107-46ac-a09f-692e19c95b30",
        "cursor": {
          "ref": "ba5796cb-15b3-471b-84f9-61c6c00be7bb",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "22dee9c5-eac0-4c3f-be12-9eb2ecff2b5e"
        },
        "item": {
          "id": "e5e23dad-6107-46ac-a09f-692e19c95b30",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "5239d9c1-2220-40b8-9c49-a39a2c37f8e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9818572d-037b-4e1a-b5e2-7a8b9c97d9d1",
        "cursor": {
          "ref": "45e20042-e92b-4fe9-a292-fe5592fd3791",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "5b453ec6-6b14-4605-8af8-7965dac32257"
        },
        "item": {
          "id": "9818572d-037b-4e1a-b5e2-7a8b9c97d9d1",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "bf6ea6a9-940f-4dcb-93e9-fe2c21e5ac72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e32fb802-45eb-4b57-83f8-ddb3f34ef0b0",
        "cursor": {
          "ref": "bfffb371-f227-4925-b3bc-1dc4936b837c",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "305a216b-5dbc-4b99-b07d-346b378109ce"
        },
        "item": {
          "id": "e32fb802-45eb-4b57-83f8-ddb3f34ef0b0",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "475c9832-df23-4e23-8456-16dbf32cde0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f01c1523-d9bc-467d-8c33-453cf36fc6c3",
        "cursor": {
          "ref": "d61d1090-da06-4540-ad2e-8e850162aa80",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "7aa0842d-3870-4e64-a4bb-6f1c3f0c9b17"
        },
        "item": {
          "id": "f01c1523-d9bc-467d-8c33-453cf36fc6c3",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "0f807b71-9aa4-4f70-9728-0ed02c9b9e0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc3dc3a2-81b6-4631-babe-f0263309d444",
        "cursor": {
          "ref": "4c0b7881-2115-4457-8808-e9e012159611",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "538d139a-7395-4f52-8bfe-c3f96e71835e"
        },
        "item": {
          "id": "fc3dc3a2-81b6-4631-babe-f0263309d444",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "8b52b134-7169-400e-acd8-9eb0cdb264f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8d39a64-4cd6-4bca-b6f2-41fbc8ed098b",
        "cursor": {
          "ref": "77a54851-00d2-40fb-a26c-761437b9015b",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "8b05e0c8-f84a-45ca-9aa6-65447bc59e79"
        },
        "item": {
          "id": "d8d39a64-4cd6-4bca-b6f2-41fbc8ed098b",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "40780bad-ae46-4595-9ac7-f04152045551",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3b76a5b-9aac-4eac-a6bb-85f4db685209",
        "cursor": {
          "ref": "9c96447f-8df1-49df-83f2-3bfc384d7c52",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "e741b859-ac62-41a2-a257-687243491eb2"
        },
        "item": {
          "id": "c3b76a5b-9aac-4eac-a6bb-85f4db685209",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "284e9825-7174-450e-836f-8c5ed6026ae1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "729a4106-c7a3-4f62-a776-cbdfda674ccc",
        "cursor": {
          "ref": "8684c8e2-5e3a-43b8-9f24-8b096ade1205",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "ad7adde4-c17a-4b0a-b690-57e8a871cf0e"
        },
        "item": {
          "id": "729a4106-c7a3-4f62-a776-cbdfda674ccc",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "d8da5a01-42df-447e-93ce-5a2482fd5dd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c276b16-2c9d-456f-8e37-a813db47be04",
        "cursor": {
          "ref": "7305ccd1-3251-4b9a-8c11-1240e22d3872",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "7298eb04-3cae-4424-bff6-97122f8af5e0"
        },
        "item": {
          "id": "9c276b16-2c9d-456f-8e37-a813db47be04",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "cd90189d-0e2c-4b05-be71-8d5eaf995476",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2db295a1-ed6a-4bd8-8093-d525a69bcb39",
        "cursor": {
          "ref": "b4cf4be2-e990-4fcd-8c8d-4c853d78b465",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "505e7d95-dda9-47dc-92b3-ccdc7cac73c6"
        },
        "item": {
          "id": "2db295a1-ed6a-4bd8-8093-d525a69bcb39",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "e4810c72-4246-45fc-82de-574ee90587b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f9c8cba-ca07-4cce-a25c-ec73a615688e",
        "cursor": {
          "ref": "98c17762-9285-41b2-b974-9d4d2d50646f",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "5dc81cda-9792-4259-baf6-738bc2225c23"
        },
        "item": {
          "id": "7f9c8cba-ca07-4cce-a25c-ec73a615688e",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "8c50f2bf-9fda-4038-9517-ae4eabfc88d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b770714-b016-4fe3-b272-be520c0cee8e",
        "cursor": {
          "ref": "e4242ea6-ce00-4002-b423-627b6df12f33",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "e4a4541c-f6d1-4fc8-9b34-f87ad631c8e0"
        },
        "item": {
          "id": "7b770714-b016-4fe3-b272-be520c0cee8e",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "c346fe95-a7a5-40fb-b5db-de45311f3420",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da820d0e-f4cc-4eed-9e63-225f99bab50a",
        "cursor": {
          "ref": "aa0484f9-6843-4303-942d-cb4269965445",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "e930ed39-3439-464a-a688-8efceb7e3fc1"
        },
        "item": {
          "id": "da820d0e-f4cc-4eed-9e63-225f99bab50a",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "b9b895c4-6eae-43c2-9685-23daeb78fade",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afffa1f5-e98b-4f54-8f07-e0118225b614",
        "cursor": {
          "ref": "d343ab49-8ef8-4570-ae03-c7d9c622bec9",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "d2b452dc-05ef-43d6-8811-ab9229ef51b0"
        },
        "item": {
          "id": "afffa1f5-e98b-4f54-8f07-e0118225b614",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "c983ff2a-3852-466b-9caf-6cb962b6bc4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca34a5b5-cefa-4776-acd5-239ee12c8aec",
        "cursor": {
          "ref": "5cbafa9a-206f-44cc-bca2-dd89261797c9",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "2bc14ba5-77ce-464a-ad0b-46343e96fc70"
        },
        "item": {
          "id": "ca34a5b5-cefa-4776-acd5-239ee12c8aec",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "5bf47c45-fae0-4e21-a18b-b1905414165e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37ab5045-0d09-4fa3-9a92-cc293bfc9fcd",
        "cursor": {
          "ref": "ec6753b9-4125-4b7a-b9c7-0c07f8adee77",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "a0784556-7862-44bd-9153-5d57b656646f"
        },
        "item": {
          "id": "37ab5045-0d09-4fa3-9a92-cc293bfc9fcd",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "9a4180b4-3347-4dc0-a582-9dcb518e7e73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "056ab783-2aca-4691-b820-8d90304eb96f",
        "cursor": {
          "ref": "ce8a732b-232b-4bb7-8e2e-9393e35a3c2b",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "8e2a3473-3265-434a-89f3-1ef6408419e3"
        },
        "item": {
          "id": "056ab783-2aca-4691-b820-8d90304eb96f",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "e51cb1f5-eb8a-4604-9d7c-87cc1d882a52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df7244b5-9c01-4043-8237-cab346d5e1b9",
        "cursor": {
          "ref": "b85271a5-b5a4-4134-a6dd-c1eb1828265f",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "d8476154-e061-48ca-bc36-29e93a35e3cf"
        },
        "item": {
          "id": "df7244b5-9c01-4043-8237-cab346d5e1b9",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "945ecda6-543a-4fd9-9158-c6023df53a0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "151a4bc0-8beb-4738-b884-578a7515f2d6",
        "cursor": {
          "ref": "9de01044-7a25-40af-9efa-7e8ba1ef31ec",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "2625b39d-5ab9-48d8-9574-349d02e67f4e"
        },
        "item": {
          "id": "151a4bc0-8beb-4738-b884-578a7515f2d6",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "82f99013-d884-43ab-b211-05c2ce6f4245",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a7930c7-c7e1-4b8a-9c6f-2b638183dabd",
        "cursor": {
          "ref": "3efe16b9-50d5-46cf-983e-f9c658823269",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "b4f4b466-5561-4c85-bcb1-636276ca656b"
        },
        "item": {
          "id": "1a7930c7-c7e1-4b8a-9c6f-2b638183dabd",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "1b079052-2030-4071-8a01-1b1de36fa0d5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66eeb5f1-847f-48f3-b178-81ec5894a4bc",
        "cursor": {
          "ref": "11240dc7-a08a-4912-b38e-667925480cee",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "0945ed5c-de84-46d5-b16e-61c5e53b56ea"
        },
        "item": {
          "id": "66eeb5f1-847f-48f3-b178-81ec5894a4bc",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "0ab8fcdc-4290-4733-8cb9-578015381730",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "af94969f-0c61-4a6d-b527-df6c0e5b202f",
        "cursor": {
          "ref": "670e2b7e-0a90-43d1-a774-a4da4531617f",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "142ae71b-ca6c-4967-a704-91406d8384c6"
        },
        "item": {
          "id": "af94969f-0c61-4a6d-b527-df6c0e5b202f",
          "name": "credentials_issue"
        },
        "response": {
          "id": "386554d4-625a-47e6-abc6-ea406c5968db",
          "status": "Created",
          "code": 201,
          "responseTime": 286,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "8736ad97-5c42-459f-b00a-9237c4620182",
        "cursor": {
          "ref": "5cf8a3c2-2c31-4952-a8e5-db1b3a7aedaa",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "7c19fee9-b0ce-43fc-8e83-79fbbf31db09"
        },
        "item": {
          "id": "8736ad97-5c42-459f-b00a-9237c4620182",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "65a8125f-aeab-4f33-9410-23417a28c830",
          "status": "Created",
          "code": 201,
          "responseTime": 287,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e606c6a0-c65f-466c-b3ca-22219389c5de",
        "cursor": {
          "ref": "a4296eae-221b-4a59-a15b-50fa044ee656",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "32d6bf68-a552-4917-ac95-b11bfd9e89a9"
        },
        "item": {
          "id": "e606c6a0-c65f-466c-b3ca-22219389c5de",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "d989c586-acf3-472e-8c1e-a2421409136e",
          "status": "Created",
          "code": 201,
          "responseTime": 263,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f1d94f2-e3b8-4ba8-a00f-b535fa86b327",
        "cursor": {
          "ref": "94efc8d3-a2fc-4dd5-8c24-dcbda1bb233e",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "41b6dc19-62ba-4636-9462-c22da1d59b32"
        },
        "item": {
          "id": "4f1d94f2-e3b8-4ba8-a00f-b535fa86b327",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "52a59135-4e77-4fac-a293-86b31da7f86c",
          "status": "Created",
          "code": 201,
          "responseTime": 271,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c08e2451-0990-4f6c-86d4-5f573bac5850",
        "cursor": {
          "ref": "8ceb3e07-17e5-41b5-8f77-9c2b1b922d81",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "e5aa4929-dd87-43f5-8d89-ffe65bfb3acc"
        },
        "item": {
          "id": "c08e2451-0990-4f6c-86d4-5f573bac5850",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "61942e07-e72a-4281-89ad-acce6ec791a3",
          "status": "Created",
          "code": 201,
          "responseTime": 286,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-12-18T00:37:16.721Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-12-18T00:37:16.721Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "36d8bfae-f9a6-45d5-8a1f-4d59a01e1581",
        "cursor": {
          "ref": "78822bc4-b41a-4952-98fb-258c755d019c",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "4960ca28-db58-4e29-aa97-e637b17b4f08"
        },
        "item": {
          "id": "36d8bfae-f9a6-45d5-8a1f-4d59a01e1581",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "da9cd06f-17cf-4770-b603-d43a4597f85a",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1578e03b-ded4-4375-9d87-5ca0f3f71339",
        "cursor": {
          "ref": "a506bcb7-e077-4412-ac39-cdc3e7b2642e",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "2e2b6727-6515-459d-bf73-e5b14d586937"
        },
        "item": {
          "id": "1578e03b-ded4-4375-9d87-5ca0f3f71339",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "f41882c6-349c-4d06-bba0-62ec285109aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c517247e-b994-4991-9d84-a6c09fd6415c",
        "cursor": {
          "ref": "f87f2ad5-7216-4f55-a168-f01099a79949",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "c4cac2c7-39d0-478a-a9a6-91bbff7a00c2"
        },
        "item": {
          "id": "c517247e-b994-4991-9d84-a6c09fd6415c",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "6019b3c8-6af1-4efb-b520-5168bd3dceb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60cf538b-2539-4fdc-867a-c34195ddc07f",
        "cursor": {
          "ref": "395b7267-2d4d-49a4-bbde-31c2e206e43a",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "396e131f-f70c-41d0-ab69-73caca1ee494"
        },
        "item": {
          "id": "60cf538b-2539-4fdc-867a-c34195ddc07f",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "7369e298-5ce1-48a6-af23-6d19420cde78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a94dd160-4df9-43fc-b7c6-7fdd42b59c41",
        "cursor": {
          "ref": "3d3a7668-2818-4110-b6f5-b5ec417336ff",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "15286ff5-79eb-42a8-882c-65334c0d395d"
        },
        "item": {
          "id": "a94dd160-4df9-43fc-b7c6-7fdd42b59c41",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "7112ffa9-7d9b-421c-9cc5-5084550043c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bbf43aa-295f-4238-be30-56011b1c684d",
        "cursor": {
          "ref": "81cee3bd-82d1-40fe-a743-1afc480fbfec",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "d5fb84c6-b51d-49ba-9879-2730230f21f2"
        },
        "item": {
          "id": "3bbf43aa-295f-4238-be30-56011b1c684d",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "a6b3275e-fc71-4e56-bb89-ea82312b8b5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcfebc4c-db66-4edb-8022-60ed17e9be73",
        "cursor": {
          "ref": "b2f36d42-5985-4df8-8c75-6cc9671e9bfb",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "88d08f65-a875-4fea-ab90-21588fd0028e"
        },
        "item": {
          "id": "fcfebc4c-db66-4edb-8022-60ed17e9be73",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "42812c7d-e3e5-4d7b-8364-e84aecb03213",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b2abec6-7bfb-44ee-94e0-5da4cc6f17ea",
        "cursor": {
          "ref": "9347544f-1b3d-4f49-9294-82b00237b41e",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "c05a01b7-d1f0-47ae-bb93-dfdf7a66e09e"
        },
        "item": {
          "id": "4b2abec6-7bfb-44ee-94e0-5da4cc6f17ea",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "74c75f00-cd52-4457-b844-06eec68090d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "691871b8-0776-4612-8491-8f060907c3f7",
        "cursor": {
          "ref": "64fdc406-e79b-45c0-9361-2a13904b07f9",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "903e344e-842a-4524-850f-bffc4d74540b"
        },
        "item": {
          "id": "691871b8-0776-4612-8491-8f060907c3f7",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "9ff3acf6-649b-490c-bfed-0fdd5a8782b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc6ed237-0b65-4e74-9672-73884e7d07a3",
        "cursor": {
          "ref": "74925824-337d-47da-a24a-04b4ac002cee",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "660ec49b-18d5-4f7d-9040-2fcd3e45c8bb"
        },
        "item": {
          "id": "bc6ed237-0b65-4e74-9672-73884e7d07a3",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "36e202f2-1970-49a0-9791-4742a5d66fc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4006398a-65d5-480f-90be-11c273e169f5",
        "cursor": {
          "ref": "e0597bf7-1fa7-4ad9-9bbf-e0d77d4bdbaf",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "6f06fdb4-d3cc-4626-8e9d-42aaa74fc1a4"
        },
        "item": {
          "id": "4006398a-65d5-480f-90be-11c273e169f5",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "a7415c16-2e16-4948-aab9-f1c67dacf601",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38a35e7a-b2e7-40b8-bd16-2c898b7780a8",
        "cursor": {
          "ref": "c27d330e-482d-4eed-9954-c9e6709dfc31",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "f33f55d2-b920-481a-b97c-d8b97a693adc"
        },
        "item": {
          "id": "38a35e7a-b2e7-40b8-bd16-2c898b7780a8",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "62e0d9d8-5e75-4c10-83e4-0d3a2c5efd0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05aa3e74-7554-4231-8ac9-6be3b0852f55",
        "cursor": {
          "ref": "6c1a55f5-e0fb-40f1-bdf6-6cbada1717e6",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "cfd4bc1a-ffbb-4dab-88a9-7d6d893ea313"
        },
        "item": {
          "id": "05aa3e74-7554-4231-8ac9-6be3b0852f55",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "2036a922-cc0d-4a88-9d7e-35593e1526ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fde23194-65f2-481e-9d3f-1309cfc38ddd",
        "cursor": {
          "ref": "6c7938c0-89a5-492a-a69f-c0f4ec800eb7",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "7d0614cf-39ee-45e5-a98d-99299c1e400f"
        },
        "item": {
          "id": "fde23194-65f2-481e-9d3f-1309cfc38ddd",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "608f7f34-e48a-4097-b67a-272e0bf2296a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4bff738-5842-4424-bd19-0ce9766422c1",
        "cursor": {
          "ref": "8db65e9c-0ceb-41b1-a67d-0edf574aa8ac",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "5769beb2-99d4-4765-a9d2-63e2694ef010"
        },
        "item": {
          "id": "f4bff738-5842-4424-bd19-0ce9766422c1",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "ce527ca7-d7cb-4190-9985-4efe0fd3059d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6029c4d-5106-44f1-9553-3717fafe8806",
        "cursor": {
          "ref": "c30f6969-b5ed-43b9-9fe3-bc51630e71c8",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "36adf8f2-eb80-40ff-9c1c-42f10eff4047"
        },
        "item": {
          "id": "b6029c4d-5106-44f1-9553-3717fafe8806",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "85f00488-b578-41e6-82ab-cf6c04ba79b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b5b0065-ea54-4c8e-8bc4-b7b004c29838",
        "cursor": {
          "ref": "84d1094a-8850-4f2d-9a23-89af3025a7a2",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "d6c74b44-9eb4-40d0-9805-5888f432f772"
        },
        "item": {
          "id": "9b5b0065-ea54-4c8e-8bc4-b7b004c29838",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "e6f2f89c-38b5-417a-9f17-c89f38d72963",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65daefc7-5bbb-4b81-88e9-8ac451ad19b7",
        "cursor": {
          "ref": "4c67ca71-f68a-40ce-a9b7-177d08e2a126",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "0bac5f3d-74d4-4f87-8cf9-04f70654bfc5"
        },
        "item": {
          "id": "65daefc7-5bbb-4b81-88e9-8ac451ad19b7",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "0f33642b-d274-40fe-a9fa-6fbea1cd5cfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d40b385d-476f-49ba-8655-4036e2e30fdd",
        "cursor": {
          "ref": "8f6363e8-2c90-44a4-bf1b-63d94c76be0a",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "822f77ef-8437-417c-91c0-801eceb29f2e"
        },
        "item": {
          "id": "d40b385d-476f-49ba-8655-4036e2e30fdd",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "41cfd764-9b0a-418f-a8d1-661e97898ac0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98d1799b-8561-44aa-b6f7-06ad3f066aa1",
        "cursor": {
          "ref": "7c3e3e92-19b3-449e-8e39-079ae709d8b9",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "2483ccf3-9948-4475-9532-aae729fa8ebc"
        },
        "item": {
          "id": "98d1799b-8561-44aa-b6f7-06ad3f066aa1",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "001cc55f-2bba-4363-93d4-3ed18f745008",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56db5ab1-fab0-468a-8c97-6f7b7f10d90e",
        "cursor": {
          "ref": "3ba3ec64-9949-424f-ad01-64e48880cdf7",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "f31b8d06-37aa-4a66-b832-683a806ecd24"
        },
        "item": {
          "id": "56db5ab1-fab0-468a-8c97-6f7b7f10d90e",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "600af062-b6fc-4d8e-90fd-0950db0fc623",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2e0fc9c-e87b-49eb-84b0-93606f91f56b",
        "cursor": {
          "ref": "8ccd2a2c-c05d-4282-8a78-6410047645fe",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "848095f3-6f63-4e07-9de3-61cdca813079"
        },
        "item": {
          "id": "a2e0fc9c-e87b-49eb-84b0-93606f91f56b",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "af5fa595-eb2f-47bc-862d-72e434993185",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19ef3e32-e21e-4014-98ae-b19a63cc4660",
        "cursor": {
          "ref": "e103d077-100f-4d87-b2d5-0cd71d95b336",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "96c84a95-a487-4c8c-9531-c93c1c0da162"
        },
        "item": {
          "id": "19ef3e32-e21e-4014-98ae-b19a63cc4660",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "9dc771e8-2c8e-478f-b4e1-eb5e3360c6e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bf7859a-d95c-428d-9114-0810d19176aa",
        "cursor": {
          "ref": "5cb5246b-65ff-4053-9960-3843e04adcfc",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "fac5a10f-0895-42c1-acc9-79254dcf3a71"
        },
        "item": {
          "id": "5bf7859a-d95c-428d-9114-0810d19176aa",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "edc164d8-30d5-453f-8a31-f395055ece25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d72028a0-3f3d-4c87-9496-af593d744493",
        "cursor": {
          "ref": "0df1715a-b100-4ec3-a3c8-ed5541564faf",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "41e9cfb8-3a00-4f67-9f7b-231486818661"
        },
        "item": {
          "id": "d72028a0-3f3d-4c87-9496-af593d744493",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "323347ad-0c6f-495d-8a22-a865039d6116",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9ff40db-922a-4442-851d-f6d9e995b0e0",
        "cursor": {
          "ref": "de0232b7-d9a4-4d05-8e8f-b747f1eb72fa",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "2747ccf3-acdd-4ae7-a5cd-86c650b9af1a"
        },
        "item": {
          "id": "f9ff40db-922a-4442-851d-f6d9e995b0e0",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "45afa6e1-27de-445c-9632-06a5fe2379dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c849306b-b41e-48a4-ac28-b53a5854d8f2",
        "cursor": {
          "ref": "93c275f5-d1f6-41e7-b853-4e368f7b7ff9",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "cd8555a5-a2a7-419f-99aa-2a75603bf63c"
        },
        "item": {
          "id": "c849306b-b41e-48a4-ac28-b53a5854d8f2",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "a0e82b0f-9293-4ad0-8a54-7e1a110e4adc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c31f40a7-efe1-457d-bd5c-3ff26fa9efe5",
        "cursor": {
          "ref": "d8d4300e-385a-42d4-bbd7-3d351b0af532",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "c2e10425-81a0-47ed-9ce0-6d9bc6f85ccd"
        },
        "item": {
          "id": "c31f40a7-efe1-457d-bd5c-3ff26fa9efe5",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "98d46550-e999-453a-9883-e5d7b62072a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79e55520-176c-40ca-b08f-3aa85fa6b60d",
        "cursor": {
          "ref": "9be2d5c1-970a-4031-9e94-ff1a33748e6d",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "1fa19cb7-d167-4e66-a7a9-8e253a95f81f"
        },
        "item": {
          "id": "79e55520-176c-40ca-b08f-3aa85fa6b60d",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "3f2aa210-ceb1-4155-aa52-6be1e767b850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8cfae93-9ac9-4f4f-8c89-5941eea7d758",
        "cursor": {
          "ref": "a2110d35-30e7-4bc6-a83c-e9db9675524e",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "3a94bd9d-5e6e-4c0f-9289-1ad2cc2d3f0c"
        },
        "item": {
          "id": "e8cfae93-9ac9-4f4f-8c89-5941eea7d758",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "7474bb25-c06e-440d-905c-4d337f228c3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d90bb7ab-4ee3-4151-9a0b-da1219a31dcf",
        "cursor": {
          "ref": "d14f2848-afa1-4b59-a3a1-9e34a7dab28f",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "918415a4-146c-4ee0-9d80-7af37f32be4c"
        },
        "item": {
          "id": "d90bb7ab-4ee3-4151-9a0b-da1219a31dcf",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "278d8356-9725-464c-9dec-d76e7c3c8de4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b00382f4-b5ac-453f-bded-3066a6cfef9f",
        "cursor": {
          "ref": "65557273-e3f5-42b6-a957-35418da04733",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "566ba4cc-4d13-4b2b-a87e-5d2916b8d414"
        },
        "item": {
          "id": "b00382f4-b5ac-453f-bded-3066a6cfef9f",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "36b77a7b-8125-47e7-bea2-8a868130fdf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "488b3a83-fa6b-4702-8b46-cb82a9c53aec",
        "cursor": {
          "ref": "2933f5d2-5422-4624-8b44-af73d79ade8c",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "cf79a2b2-5114-472e-92ea-896e6f2622ad"
        },
        "item": {
          "id": "488b3a83-fa6b-4702-8b46-cb82a9c53aec",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "0f80295d-68cb-4822-9fab-7ce30fa148bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6577ff6-107e-4112-996b-331a7c166001",
        "cursor": {
          "ref": "7157cd9f-f184-4264-af52-124ec29451af",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "e639b390-ba41-48d1-8587-905375030f44"
        },
        "item": {
          "id": "c6577ff6-107e-4112-996b-331a7c166001",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "96999403-617a-4f6b-847a-a9507b6d8ab0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69408f1d-b011-4017-bdde-89a61e5385ed",
        "cursor": {
          "ref": "6f623649-ea49-43fa-962a-ae5a32451a3a",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "2c2f3054-aa47-4c3c-ba5f-c45383b8dfab"
        },
        "item": {
          "id": "69408f1d-b011-4017-bdde-89a61e5385ed",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "6b5d7049-9503-4a58-a36a-92338b24d859",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c82c8f35-0c15-494c-9c10-1bc7140a10f8",
        "cursor": {
          "ref": "59465824-37ab-4b43-a0ae-b6a8e1781345",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "f808c57b-f6ef-4f52-acbb-bd6b742575a4"
        },
        "item": {
          "id": "c82c8f35-0c15-494c-9c10-1bc7140a10f8",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "03b07a6f-d023-4dd0-be3f-9d2f81c6df66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "727fb824-61e8-4281-b300-6b91014389ef",
        "cursor": {
          "ref": "6da2de00-3a6e-4a47-a298-719db08bc962",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "ab0e73d7-dd11-47e8-bbc7-dce1d0afb85b"
        },
        "item": {
          "id": "727fb824-61e8-4281-b300-6b91014389ef",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "4515e224-9d21-4a0d-8ebd-d5064224e11a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b5f1cf8-0223-4d24-8996-0c46fad330be",
        "cursor": {
          "ref": "c0a10135-aa8a-4610-b7a6-94287adf8a74",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "58088f59-4922-45f0-8206-b7787d4280c1"
        },
        "item": {
          "id": "4b5f1cf8-0223-4d24-8996-0c46fad330be",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "9a45fa1c-6208-4bec-ad25-ed7130be91e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da346776-ee29-4736-8f1d-4a971e4fff7a",
        "cursor": {
          "ref": "f773f371-fd9b-4298-89cb-08e8a183253e",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "30316d4a-8d6d-4239-b81f-94337f5a3d78"
        },
        "item": {
          "id": "da346776-ee29-4736-8f1d-4a971e4fff7a",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "88d32efe-9178-4808-96f2-39b770c646d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baa5c238-a8c1-4bf7-bd41-e724de15aa68",
        "cursor": {
          "ref": "55fe5505-41d7-47d5-8812-4d5b9c1b9006",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "bfeef229-d319-429b-8d06-7a3ce6f2ed33"
        },
        "item": {
          "id": "baa5c238-a8c1-4bf7-bd41-e724de15aa68",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "352a8317-2c84-4a9a-bb7d-2299baa7ae10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4bd6ce9-0ab7-408d-9ab1-18996f5968f7",
        "cursor": {
          "ref": "5af7426e-15d0-4479-a611-81f16d2e28d4",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "11dfa213-c589-4039-a617-86026cde2c95"
        },
        "item": {
          "id": "d4bd6ce9-0ab7-408d-9ab1-18996f5968f7",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "21d17242-bdf7-4b77-bb80-bd7c8664f15a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3332c0d4-e021-4a1c-953e-b922506bad9f",
        "cursor": {
          "ref": "717db60b-ad0d-461f-8813-d063d9831b6f",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "d96ec676-6f6d-465a-9fdf-9c9560881395"
        },
        "item": {
          "id": "3332c0d4-e021-4a1c-953e-b922506bad9f",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "e6ba7687-9a15-4ac4-a017-72b2577ce89e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cdf2853-22aa-4d97-b167-fce1c65f644b",
        "cursor": {
          "ref": "53edc01f-3bb8-4af6-a0b1-a40210b70119",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "4c851be0-efa8-4a1f-8511-228838ef261b"
        },
        "item": {
          "id": "0cdf2853-22aa-4d97-b167-fce1c65f644b",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "c5dc5317-b3c0-4fe0-a086-e6c903d11775",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f857ec2-c535-4d2c-9f4e-4382bcba489d",
        "cursor": {
          "ref": "63d2dc7c-c5a2-41ed-b095-3f01ed316a74",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "fc1bdd79-6295-4314-88a3-818fbcbe0dfd"
        },
        "item": {
          "id": "8f857ec2-c535-4d2c-9f4e-4382bcba489d",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "b8330acf-5fb0-4f75-83c1-3eb9ead5405b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b283693d-3540-470a-9bc4-589729485150",
        "cursor": {
          "ref": "fd7867cd-a746-4d7d-8110-78141e4194fb",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "abe69d47-0637-4e65-9ef7-49a1e1328f50"
        },
        "item": {
          "id": "b283693d-3540-470a-9bc4-589729485150",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "aa3d5ba7-d613-4b2e-9033-8b906371d9a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0e46514-cbef-4859-9356-eb99fef1e690",
        "cursor": {
          "ref": "f0d6cd3d-c31c-4b4b-8aa1-55b95c973308",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "1da87fba-4305-4484-9ec0-64e54b76e535"
        },
        "item": {
          "id": "c0e46514-cbef-4859-9356-eb99fef1e690",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "68ce9f57-dc2e-4b2f-8e60-4996170cc6ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5213f9d1-6ab5-4570-958b-bef4234d183b",
        "cursor": {
          "ref": "e19767c7-dda1-438e-bedd-f1f6eae47686",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "5fdc580d-8ec8-48df-9bd3-e7dece8d6947"
        },
        "item": {
          "id": "5213f9d1-6ab5-4570-958b-bef4234d183b",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "cf3c9ac7-e46d-4af5-a004-815c7938ed11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d93b1786-cc05-49a7-b7e9-571b5e7e20d3",
        "cursor": {
          "ref": "85a2d8d9-1c2c-46a2-bd60-82ad47d58186",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "cfddd2ac-cbf9-4de9-af97-371d36763e15"
        },
        "item": {
          "id": "d93b1786-cc05-49a7-b7e9-571b5e7e20d3",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "8b2ffadd-1539-4f1b-8b8d-80eeda606351",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ddddcdc-68ba-4bf1-a36b-132632c4c9c6",
        "cursor": {
          "ref": "1a1d6ea6-f757-4b73-9389-a614fdd24d6e",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "1cf7acbb-e22e-433b-bd98-6e11868df36f"
        },
        "item": {
          "id": "6ddddcdc-68ba-4bf1-a36b-132632c4c9c6",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "74c4849f-0de3-4f62-85fc-fc9f1130498c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59e2dc72-0e61-4e03-8d1a-f5405b8b33a8",
        "cursor": {
          "ref": "e9e6852a-06df-4188-97ac-0d6c961866d9",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "e360d534-0ecc-4908-9494-693fc64bce49"
        },
        "item": {
          "id": "59e2dc72-0e61-4e03-8d1a-f5405b8b33a8",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "6588ffd3-8a88-46c0-9fc3-33cdf1790b4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81459e23-82b4-4395-a0b4-924e7b3192b1",
        "cursor": {
          "ref": "34736055-812b-41a7-8007-e3374653f130",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "5369ad07-a1e6-494c-aa43-72c6291a19a5"
        },
        "item": {
          "id": "81459e23-82b4-4395-a0b4-924e7b3192b1",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "8bb46d75-8985-4c00-aad8-e46252d17950",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f77da769-430d-4fa8-abcc-1b4b9061041e",
        "cursor": {
          "ref": "e3109ba2-7597-4381-91e3-4edcadfe4fae",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "da7b7c77-9557-4771-8a45-3ebe56a4e431"
        },
        "item": {
          "id": "f77da769-430d-4fa8-abcc-1b4b9061041e",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "be4fa0ae-2946-4839-a01f-9d03c932d259",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c08c99f-7c17-4d37-972e-d6c00f2e41d4",
        "cursor": {
          "ref": "27384f1b-b332-4075-a304-481c12eef13f",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "53606348-e8d2-4b64-aef7-7b8c175e7313"
        },
        "item": {
          "id": "1c08c99f-7c17-4d37-972e-d6c00f2e41d4",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "e9f44507-904e-4e5a-9721-ba02ae43dd0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6032021e-c145-4553-bd28-6d9b9e5b3313",
        "cursor": {
          "ref": "c582c010-9b48-4144-a435-1a8b6346d216",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "f784741a-b48b-41a1-a09b-04db6402f8d9"
        },
        "item": {
          "id": "6032021e-c145-4553-bd28-6d9b9e5b3313",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "22aa360d-55c4-4bb3-897e-9568a5ead24d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5eb3a0c-236b-4414-956e-86135c6895f6",
        "cursor": {
          "ref": "f8f22bdb-e626-4414-8f18-2daf942b03e7",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "3474e380-069b-4211-91fd-bc8834066496"
        },
        "item": {
          "id": "c5eb3a0c-236b-4414-956e-86135c6895f6",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "4d03d751-5d6d-4db5-940c-b14fa5e4c3c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e336b86-f7ec-47ac-9c58-24231731c37d",
        "cursor": {
          "ref": "a7927629-b557-49aa-be15-4ab3c839d91a",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "f39990b8-c2e8-463e-8cdd-b9a55969b341"
        },
        "item": {
          "id": "9e336b86-f7ec-47ac-9c58-24231731c37d",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "465f02c9-7eab-4c7a-97c1-f5bd2be2710e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5482cead-3397-45c1-adbb-47e552ffae08",
        "cursor": {
          "ref": "09eed129-58c0-4439-9f30-a1ee60d78f3c",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "beeb82eb-4c9e-4ffe-a1d5-20e6e68e0c91"
        },
        "item": {
          "id": "5482cead-3397-45c1-adbb-47e552ffae08",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "0bd9c577-98ac-4b77-a03d-39b5e6ad9990",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf8fb50e-9181-4748-9a35-7d997aecc8ae",
        "cursor": {
          "ref": "32cc5fc0-994d-4287-8e53-70b8f0243f62",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "eaa30403-389d-47e8-b545-921289948bd1"
        },
        "item": {
          "id": "cf8fb50e-9181-4748-9a35-7d997aecc8ae",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "bdbf8826-d665-4ae5-906b-99e70ba861ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d0e9ff2-031d-4dae-82c5-c9c508ed26c2",
        "cursor": {
          "ref": "3ca8fba5-2cfa-4bfc-81c4-b8de4056930d",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "d84ef19f-8cd7-46e6-b58f-740ce4838226"
        },
        "item": {
          "id": "1d0e9ff2-031d-4dae-82c5-c9c508ed26c2",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "a09393cf-152f-4540-b6b3-cbb5342f18d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5bb538e-f6b7-42c6-9d32-2deccebff082",
        "cursor": {
          "ref": "38263d37-6251-4917-89b4-7d43c37beb4c",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "24ccc3cf-385f-466f-8ab4-8b78e49c0126"
        },
        "item": {
          "id": "c5bb538e-f6b7-42c6-9d32-2deccebff082",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "0026af8c-e811-40d9-a593-90e2e54959ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c48e83b-0cc7-4d0b-b3f5-7467a17ab5eb",
        "cursor": {
          "ref": "79377c45-15ae-47ab-a7ee-dee2767ff889",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "c77d05db-06b1-43ee-a636-7140399303c8"
        },
        "item": {
          "id": "6c48e83b-0cc7-4d0b-b3f5-7467a17ab5eb",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "1d47660a-d870-451c-8955-96ce897bad41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78192159-f329-4509-b2f5-685a1c354325",
        "cursor": {
          "ref": "e00af8ae-f45a-449d-9430-840442286aca",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "45b3634f-796e-40c6-a108-d9ae23eac315"
        },
        "item": {
          "id": "78192159-f329-4509-b2f5-685a1c354325",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "78dca4aa-41ad-4b99-aaf2-423907b009b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da0ab45b-f23e-46e1-b5bc-401ad9b1f475",
        "cursor": {
          "ref": "7e94009c-695e-4e0c-952e-46e7635c7337",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "0b8fb18e-a49d-49bd-b24f-7828661cfb33"
        },
        "item": {
          "id": "da0ab45b-f23e-46e1-b5bc-401ad9b1f475",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b68648a3-c299-461a-a53e-91ce0d805cc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8520bd1d-d743-4f3e-a3d9-a4f4754c97c4",
        "cursor": {
          "ref": "08d1e2bd-ff5c-422f-933e-f6e5ea0b4587",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "8fcb88ca-5ac1-4925-ac0b-24be85a87d56"
        },
        "item": {
          "id": "8520bd1d-d743-4f3e-a3d9-a4f4754c97c4",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "b0cd45fd-2483-49dd-bcf9-6acd5e86a127",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1026aac7-b923-4c61-86ea-69470c8cc0bc",
        "cursor": {
          "ref": "e15011e4-0a35-4c4e-82a5-8f1811382c8f",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "989d07c4-9fc8-4b8a-962f-c99583b9bf49"
        },
        "item": {
          "id": "1026aac7-b923-4c61-86ea-69470c8cc0bc",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "85c3c424-bdeb-4e44-a860-66fbb04457a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bb86cf0-2162-4732-b247-3867e5bc825a",
        "cursor": {
          "ref": "8ee28906-1d90-4f57-b2ed-1d775ecdb822",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "6287c281-c296-438a-ba79-bd669c132be1"
        },
        "item": {
          "id": "9bb86cf0-2162-4732-b247-3867e5bc825a",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "d5758590-f4b7-4d27-b33a-d4b3e9eec383",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7179a597-9c85-4901-8f02-41722917f4a7",
        "cursor": {
          "ref": "032d70aa-6eec-45bc-a036-b2b41fe1e847",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "a227a7a1-78da-4b1e-b6ba-ec11ffa07a65"
        },
        "item": {
          "id": "7179a597-9c85-4901-8f02-41722917f4a7",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "7805447e-a9bf-4348-a1ee-2d69740e543f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d8738dd-2699-4ef3-be9b-068849483881",
        "cursor": {
          "ref": "f1e70977-edf2-4b83-bf81-1371772b0b5f",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "c63e7963-1c9f-4416-abbc-63c1da8477ff"
        },
        "item": {
          "id": "0d8738dd-2699-4ef3-be9b-068849483881",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "7d95884e-cf24-4dde-8487-924c1a2034a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40b318a1-d207-4958-8efd-a1a860e395f9",
        "cursor": {
          "ref": "195d3c94-6a0a-4aed-b683-1074d067d1ce",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "4d9b389b-ef79-449e-8bed-54a9f80b5b6a"
        },
        "item": {
          "id": "40b318a1-d207-4958-8efd-a1a860e395f9",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "2953a96d-77ae-4846-a1f8-08643d8da3dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 156,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd6e3e27-a13b-4534-aa67-ff200f0b5654",
        "cursor": {
          "ref": "6cc8a8ec-0a90-411c-b1ef-a77c4483b7ab",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "13adb5a2-0e44-4408-8dac-7a4f6dafb41a"
        },
        "item": {
          "id": "fd6e3e27-a13b-4534-aa67-ff200f0b5654",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "357a93dd-4760-4a0d-bbb1-272b3d5878b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87df18f5-d9cf-4ee8-b71f-73c0a1ea40a1",
        "cursor": {
          "ref": "12f88426-2946-4d0a-bc4f-0980e8d47e72",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "0a7ee291-532e-49e4-8906-ec03e1ddc7db"
        },
        "item": {
          "id": "87df18f5-d9cf-4ee8-b71f-73c0a1ea40a1",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "ff9d1f38-deae-4078-ba8f-b083e7815025",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "354ae00c-a088-4ed5-a98e-98361cb75914",
        "cursor": {
          "ref": "82509a31-2b13-4467-80f2-ff41f8b362ac",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "b2801a75-8399-4144-80ee-c15afc5ac9b7"
        },
        "item": {
          "id": "354ae00c-a088-4ed5-a98e-98361cb75914",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "09fa20ee-25a2-425e-a30c-d197955a2647",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ee914eb-736b-44ed-b1f4-57d8d887fff9",
        "cursor": {
          "ref": "73b1020a-ff87-42d7-be65-900edc6f9fd9",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "ecadfd3f-fe8a-4cb6-a18f-531846584ea1"
        },
        "item": {
          "id": "4ee914eb-736b-44ed-b1f4-57d8d887fff9",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "e36492f1-68ec-42ff-9dcf-2d27c4667dd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fb23619-bd3e-4e42-8596-f7fa25190613",
        "cursor": {
          "ref": "989dc995-7a2a-4206-a118-98c6e0d223f9",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "2686b435-6330-4e5a-8020-19d2a595b7bb"
        },
        "item": {
          "id": "8fb23619-bd3e-4e42-8596-f7fa25190613",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "e83f1338-88ed-4408-bac1-6ae3a99c53c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79f32b94-832e-4bf7-8f71-ab91a0dfd05d",
        "cursor": {
          "ref": "49004bde-e6de-4cb4-82a5-42a650cc8bde",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "ca34f92a-bbe5-4c2c-be62-11c1e379afca"
        },
        "item": {
          "id": "79f32b94-832e-4bf7-8f71-ab91a0dfd05d",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "af235107-ed41-44d3-8d13-f1c71418e45c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5fb94aa-726c-4eee-80c7-637d6475fdf7",
        "cursor": {
          "ref": "f876a620-a8bb-415f-b465-f3097c80475a",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "adfbbd0d-2371-4013-848f-f9ce1681748d"
        },
        "item": {
          "id": "c5fb94aa-726c-4eee-80c7-637d6475fdf7",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "3dce94c5-7d6c-47e4-8010-13bf407017d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35e9f9bd-e9bc-48b7-992b-b61181b82087",
        "cursor": {
          "ref": "88f7e7cc-2b93-4044-927e-645cf6cd8264",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "473bc605-b778-468c-b11b-e8468c96d05f"
        },
        "item": {
          "id": "35e9f9bd-e9bc-48b7-992b-b61181b82087",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "bec6c6e2-0273-4024-995e-8b9e63b83cfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09c07554-69e5-49ba-a75b-ab466fcd922c",
        "cursor": {
          "ref": "c9fd9371-4067-4558-9597-8f21ba19c8c7",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "0ede631d-f39a-4d2e-ad7f-ce5f4b7d87ba"
        },
        "item": {
          "id": "09c07554-69e5-49ba-a75b-ab466fcd922c",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "04af5740-2a88-426f-897d-d3ce20071209",
          "status": "OK",
          "code": 200,
          "responseTime": 127,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "6b92e33a-16dc-45bc-8660-175721e15a7f",
        "cursor": {
          "ref": "1fb2d688-9c15-41f5-9300-0e61dcb74c07",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "7933f9ad-a713-4694-b636-7c9f46b5c749"
        },
        "item": {
          "id": "6b92e33a-16dc-45bc-8660-175721e15a7f",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "d817ca15-fcc0-40f5-8089-23eb8f799546",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d47088a-3872-401a-8f82-8ed58b2e9da5",
        "cursor": {
          "ref": "a052f61c-cc4b-46b4-9bdd-e1dc3459561b",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "fed61096-9b2a-451b-afec-f9f2c4249980"
        },
        "item": {
          "id": "9d47088a-3872-401a-8f82-8ed58b2e9da5",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "fe96b272-03be-4d71-9f7d-ed9e6840f120",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ac59748-00f3-43c9-b1c0-ab724c9e211d",
        "cursor": {
          "ref": "86573283-d2c5-4ce1-9806-f8f8d613b8c3",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "3f222be6-881a-411d-ad5f-bdfc7ae8f177"
        },
        "item": {
          "id": "9ac59748-00f3-43c9-b1c0-ab724c9e211d",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "ba5128a2-f1bc-4af9-8b82-cc7ed8c20974",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06e1a07e-a881-4c39-8936-63264cfea88c",
        "cursor": {
          "ref": "d383ed23-f9a8-496e-b426-6a2cbadf2f3c",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "8a2921fa-04a1-4270-968b-e51f50d8f1e4"
        },
        "item": {
          "id": "06e1a07e-a881-4c39-8936-63264cfea88c",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "521abe25-7549-4b0e-98ee-800730249c60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46f96aba-de96-4d09-a31e-c3d2ce3e8871",
        "cursor": {
          "ref": "22e044b9-0bed-45cc-8c3a-ca3f729a0bde",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "94f4fd08-3199-4683-8f2b-199c3cea8288"
        },
        "item": {
          "id": "46f96aba-de96-4d09-a31e-c3d2ce3e8871",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "9036561b-dd16-4e98-98d2-89bac5f0898d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a985e00-db2d-432f-953c-2de0834c4155",
        "cursor": {
          "ref": "43e360da-c000-4ec3-8481-aa7e0d6ff5b0",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "5866a5ef-e8f5-4630-a9db-7a36c6f54cbf"
        },
        "item": {
          "id": "1a985e00-db2d-432f-953c-2de0834c4155",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "a40e3d43-2251-46d7-81e4-9a8e3ef18e9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcc19ea1-2e64-4ff1-be21-c1b60a690d09",
        "cursor": {
          "ref": "65be63c8-09b4-4c54-a641-f2201dbe5325",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "91bc0eba-8d73-4aad-8bf7-aca87d5b455c"
        },
        "item": {
          "id": "dcc19ea1-2e64-4ff1-be21-c1b60a690d09",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "1ea4bfae-4fe9-4aff-a2ff-8fd638380d4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee1be94e-b678-47be-8bc2-44e6ffb0c0ab",
        "cursor": {
          "ref": "fc7bcb78-690d-492e-ac39-c0d88f7e5c29",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "5752e10d-b7ae-40e0-8064-83a81057b66a"
        },
        "item": {
          "id": "ee1be94e-b678-47be-8bc2-44e6ffb0c0ab",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "62fc33db-0ab7-4e1f-9be5-064962889810",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bff1060d-ccab-41ed-9e43-ee123cc5291d",
        "cursor": {
          "ref": "d390c59d-372b-4470-8457-c8e2da30f43f",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "c29f0f24-798b-4759-bb7f-a57a9ab6d3ea"
        },
        "item": {
          "id": "bff1060d-ccab-41ed-9e43-ee123cc5291d",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "2a5943fa-631d-4d07-b0ea-64af363b2a19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8be8fb9f-bdbd-443f-a1c1-f3117a4470e7",
        "cursor": {
          "ref": "baf262d6-d202-47c7-b500-b5b89dc03448",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "dbc95490-8ca9-45f5-a01b-ca32f4997f45"
        },
        "item": {
          "id": "8be8fb9f-bdbd-443f-a1c1-f3117a4470e7",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "bac9d41a-7e18-47fc-a2b8-5e530c0e6091",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a7e7beb-d6e3-43ce-a4e6-eb4282e21831",
        "cursor": {
          "ref": "f0193b96-4124-48db-8811-2c9ef7e35f3b",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "648b6955-e4e5-4d3a-9dbb-0e761b059d9c"
        },
        "item": {
          "id": "1a7e7beb-d6e3-43ce-a4e6-eb4282e21831",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "54f8317e-edc3-4d51-9868-7b9b9eac4369",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e7963dd-6ef9-4827-9189-1016365a199c",
        "cursor": {
          "ref": "67f2607b-574a-4799-b6c6-dc976ff09d83",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "f191f1e4-fea7-45a8-8c8b-aee31a82cf45"
        },
        "item": {
          "id": "3e7963dd-6ef9-4827-9189-1016365a199c",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "41876880-d457-4408-902c-25284be3c432",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "074b555b-c0a8-4842-85da-af9f8f1bcf0c",
        "cursor": {
          "ref": "e0a079db-1f61-4fb5-961f-be25cc469bac",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "58552d59-1bdb-43a0-b25e-dc19d044a259"
        },
        "item": {
          "id": "074b555b-c0a8-4842-85da-af9f8f1bcf0c",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "03bc4042-80bd-4ef3-8cf0-547bc799b346",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b75b3dca-4c93-48b0-a0f0-f9ac408e5b15",
        "cursor": {
          "ref": "9b74fdbd-58ea-4a24-b854-cd860401e873",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "57bd6b0c-fc48-4941-a1c5-07c8ce711909"
        },
        "item": {
          "id": "b75b3dca-4c93-48b0-a0f0-f9ac408e5b15",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "07458191-7ad3-4249-a59e-c739292bc9ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb64e84d-8c8c-4377-aba3-76a54eb29638",
        "cursor": {
          "ref": "a863c729-adb8-4438-9964-78c37f5996c3",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "d45c2d74-d64c-49fb-b862-1ba047ae06be"
        },
        "item": {
          "id": "cb64e84d-8c8c-4377-aba3-76a54eb29638",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "4d23d894-5974-4816-853d-10408a4af4f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fc5600e-44bf-44e8-8590-58249aa6189c",
        "cursor": {
          "ref": "b795ba61-24b4-4240-9ba2-655c69dcedff",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "5e50495a-0f04-4373-80b8-462e7e0109f6"
        },
        "item": {
          "id": "3fc5600e-44bf-44e8-8590-58249aa6189c",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "aae36e6f-71ad-4297-88f8-7f725daf2b96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28b62f2f-5004-48e0-a592-577bf5b143b1",
        "cursor": {
          "ref": "7f3e85a2-60e9-4bbe-bb30-03e2a0d06eaf",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "eaf163e6-d14f-49cd-8dcb-811b031288c1"
        },
        "item": {
          "id": "28b62f2f-5004-48e0-a592-577bf5b143b1",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "7346aed0-85f0-4e2f-9ff1-0d6b1e8bd750",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b194636b-1615-4bb3-93db-f43a4ef78f31",
        "cursor": {
          "ref": "57a13c8d-7c56-497d-81c1-d75f82a47009",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "391277c0-86cd-48dd-b275-aa2e75a808ec"
        },
        "item": {
          "id": "b194636b-1615-4bb3-93db-f43a4ef78f31",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "3d5ebe78-1c9c-43b9-93fc-2d7460d5d1b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfe8ac64-a338-4d67-b7aa-90b2ef376fb8",
        "cursor": {
          "ref": "64893af2-8c85-4ae5-bf19-3a4be3d76bc4",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "2d22338b-57ee-4e37-93ee-e01f36bbaef2"
        },
        "item": {
          "id": "cfe8ac64-a338-4d67-b7aa-90b2ef376fb8",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "a36b8422-dfa0-48f2-88c1-dc9a42bddb98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b9e8fa1-e410-4aa1-bfee-916494724d5a",
        "cursor": {
          "ref": "03d55643-31b8-44a8-ab15-986d927248eb",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "a14779a8-4b5e-47be-b78b-96905aa98647"
        },
        "item": {
          "id": "4b9e8fa1-e410-4aa1-bfee-916494724d5a",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "790e4fef-3a3a-4324-a90a-9adb0857a67a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98ef95c5-db6a-4ace-857c-0e65fad6e326",
        "cursor": {
          "ref": "0386ca62-5a2e-4a6b-b707-04aaff90d036",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "49286bd1-3b58-4a15-8a5a-8839fca23acd"
        },
        "item": {
          "id": "98ef95c5-db6a-4ace-857c-0e65fad6e326",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "8d87252b-86b0-4937-89d9-92d44604f219",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44df754e-6b2f-4dca-bdd5-1ab23cff3603",
        "cursor": {
          "ref": "43e34cdf-42e1-46c8-9390-8267769cee40",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "19d0bc49-e9a7-46bb-88ad-f7ec5632cc31"
        },
        "item": {
          "id": "44df754e-6b2f-4dca-bdd5-1ab23cff3603",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "101669cf-8780-4a49-a410-1d21366063b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cace70cb-7257-4cb4-b929-f01f304293f5",
        "cursor": {
          "ref": "aad677e3-b57c-47ed-9d81-2557ec0dd470",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "56c59aba-7ed6-4098-addf-662be0c80bcf"
        },
        "item": {
          "id": "cace70cb-7257-4cb4-b929-f01f304293f5",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "c134f37c-ed84-49ef-a099-2b82a2d49c3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85d4e21f-623d-4ee1-8ca4-e5a24fa5424e",
        "cursor": {
          "ref": "c1a3c8b4-7c99-4f23-965e-7aa922486155",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "75c8dc30-6894-4ed6-88fe-1de6d56b82c8"
        },
        "item": {
          "id": "85d4e21f-623d-4ee1-8ca4-e5a24fa5424e",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "a706244f-7cf2-4836-aafc-2aa7598c0b7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4605713c-177e-48d2-8396-7ad1eb98a60c",
        "cursor": {
          "ref": "5b5beeb9-edac-4bfc-9133-469a5954f7bb",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "032e8801-aaf2-47e9-996c-6e6765b76a5c"
        },
        "item": {
          "id": "4605713c-177e-48d2-8396-7ad1eb98a60c",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "fdd731bb-bc95-431a-a4ae-f950e06a5739",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7006e75b-e0cd-46d8-a06d-ab644ab3c289",
        "cursor": {
          "ref": "db0242fd-4869-48dd-b9e1-37c5c146f7b2",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "3e150865-6baa-4674-96ab-8ec2fd5694ef"
        },
        "item": {
          "id": "7006e75b-e0cd-46d8-a06d-ab644ab3c289",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "a681f7f4-48c3-4cf6-9065-7d78b2ffff8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11a7d05c-82c0-4ffa-8df5-0ef63c7a6b9d",
        "cursor": {
          "ref": "8c1d0e19-dd50-4091-bfac-168acc8a5bca",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "59e7d4fa-a8ad-404e-ace2-7d4c25b0dd1f"
        },
        "item": {
          "id": "11a7d05c-82c0-4ffa-8df5-0ef63c7a6b9d",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "bbb5846f-3dfa-4331-86b3-9eae374ef387",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16104e51-db24-4a95-a7d7-67e9178ce961",
        "cursor": {
          "ref": "896d4e6a-ba65-4679-8ab4-e0a8e5db983c",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "9b33656c-c23f-4948-88b3-bca3bd82bc93"
        },
        "item": {
          "id": "16104e51-db24-4a95-a7d7-67e9178ce961",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "31e4ab3a-d333-486b-bc8d-3e36300bc83c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c60077d8-5c29-4d26-8c47-0260cc60ba48",
        "cursor": {
          "ref": "5f90c127-6450-4755-b67c-1ece03045b46",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "78611aee-fd43-420a-9cf9-d1f7131ccb01"
        },
        "item": {
          "id": "c60077d8-5c29-4d26-8c47-0260cc60ba48",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "a447b5c1-5099-42eb-b9b3-d764614498aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44131642-29de-4cbf-abc5-7c3f7049749b",
        "cursor": {
          "ref": "ae48d3cf-c02f-4c9b-9db2-92e0818cb114",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "129cbb05-fe0f-4d33-b50f-1db3138bf6e7"
        },
        "item": {
          "id": "44131642-29de-4cbf-abc5-7c3f7049749b",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "30d8e90a-f10f-43bb-b59a-b266262f8441",
          "status": "OK",
          "code": 200,
          "responseTime": 130,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "0268f449-0dd6-47c9-b5c4-b8352f068378",
        "cursor": {
          "ref": "f9ba449d-3904-4332-b581-0917ea908de3",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "405fb540-21bd-4d1e-a92a-e914ef9a8298"
        },
        "item": {
          "id": "0268f449-0dd6-47c9-b5c4-b8352f068378",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "ce7d6e55-e336-4339-b732-f879615a1f75",
          "status": "OK",
          "code": 200,
          "responseTime": 119,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "0462a209-6a62-41be-9d2a-9f6e346de915",
        "cursor": {
          "ref": "0257eef0-cc50-411c-b19b-2694f7c3ae4b",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "4760f00c-3fb7-433b-b29e-505060c99b0d"
        },
        "item": {
          "id": "0462a209-6a62-41be-9d2a-9f6e346de915",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "e63c5d71-8e42-4934-8a65-3dcb5000e776",
          "status": "OK",
          "code": 200,
          "responseTime": 127,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "c021754c-33ac-4e71-b85b-968ee005e930",
        "cursor": {
          "ref": "423d24d1-4b11-4bb5-b25b-3fa6efd3aeb0",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "fb3f173e-e7b9-419a-84f2-294882514733"
        },
        "item": {
          "id": "c021754c-33ac-4e71-b85b-968ee005e930",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "00bf6cc4-bcc0-402f-9035-dedd1416f83c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00eb69b1-cfe3-48c9-82b6-6e6a47b3884f",
        "cursor": {
          "ref": "ee76dae6-0a80-4f89-b72a-22081624f399",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "09664be7-c82b-4b4f-b605-86152e6d2565"
        },
        "item": {
          "id": "00eb69b1-cfe3-48c9-82b6-6e6a47b3884f",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "0af3fe80-86bd-4e19-a668-d1ef46831e50",
          "status": "OK",
          "code": 200,
          "responseTime": 118,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "ae5346ba-cd17-4bf6-b0be-702a2a7dfcce",
        "cursor": {
          "ref": "c9d48384-8751-44a3-94b3-d18e186801dc",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "1e36bd7f-c32d-449a-91ee-84d47f07e7ef"
        },
        "item": {
          "id": "ae5346ba-cd17-4bf6-b0be-702a2a7dfcce",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "e3a587db-4429-43b6-821a-ccd7f9fe584d",
          "status": "OK",
          "code": 200,
          "responseTime": 131,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "985bbd32-a0a6-4e1c-8f4c-49e333b8c9a1",
        "cursor": {
          "ref": "ca23f780-b607-4025-a894-c1863e86c8f9",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "29f1342f-3741-42dd-876e-8f620f10e927"
        },
        "item": {
          "id": "985bbd32-a0a6-4e1c-8f4c-49e333b8c9a1",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "a093499d-0ea7-4da0-9e4c-e4c429d7f239",
          "status": "OK",
          "code": 200,
          "responseTime": 125,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "b782efb0-84e3-4e7f-ad6e-1ad0c5666221",
        "cursor": {
          "ref": "cd6ebac7-b73a-49bf-a6ac-a844f32d250f",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "bbc9d102-9310-4b39-b609-164ed2a3f69a"
        },
        "item": {
          "id": "b782efb0-84e3-4e7f-ad6e-1ad0c5666221",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "1cd7605a-df31-4b6d-b3f6-b3e24379352e",
          "status": "OK",
          "code": 200,
          "responseTime": 130,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "84906a33-a98e-44dc-9a44-de22f34f9e1a",
        "cursor": {
          "ref": "b6f488a2-bf98-4b82-a394-4b52e73be03a",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "6d21a7be-3a80-438a-9c30-01361993d27a"
        },
        "item": {
          "id": "84906a33-a98e-44dc-9a44-de22f34f9e1a",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "06c852aa-204e-42d2-9063-2c8cfa173ee8",
          "status": "OK",
          "code": 200,
          "responseTime": 140,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "3dc9325f-58c3-411c-a5d7-97d85a92fd6a",
        "cursor": {
          "ref": "4eb93443-f481-4ebf-b14c-cd1c0aa98665",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "180db7fe-2809-47e6-b65c-bee293938d49"
        },
        "item": {
          "id": "3dc9325f-58c3-411c-a5d7-97d85a92fd6a",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "5c1f89db-adae-4152-8b0f-96681b080431",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "9cf57375-e3c9-4b47-967a-98ab5984b289",
        "cursor": {
          "ref": "4ad7b72d-4b42-46e2-8115-602d3d3d4239",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "8605987c-7127-45c6-99d2-e091c7ef7d74"
        },
        "item": {
          "id": "9cf57375-e3c9-4b47-967a-98ab5984b289",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "e3deb401-acd7-41b8-bca5-f29f05a81b0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1ffce33-db7e-4059-a2ff-35bd27412206",
        "cursor": {
          "ref": "34f81180-3af8-423b-ab9b-cb613c29bf18",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "4f920816-448d-4dd2-a8af-7aa550cf076d"
        },
        "item": {
          "id": "f1ffce33-db7e-4059-a2ff-35bd27412206",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "9a1515a6-28f5-4d94-a9d0-e85877b60fc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "207d2adf-7063-400b-ac5f-1d525bd1b7c1",
        "cursor": {
          "ref": "8cfeb727-3c6d-4e0a-a091-185329e6c2d6",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "b750eb21-bbd3-4976-a6e1-44e54552a0fa"
        },
        "item": {
          "id": "207d2adf-7063-400b-ac5f-1d525bd1b7c1",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "fc246ab7-1dc6-4e3e-826a-629d94905bb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dadf4157-bed5-49e7-b91a-219f52a9c35d",
        "cursor": {
          "ref": "10657e85-05ca-48b8-8205-c6fcb89f49e6",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "e8c01921-f9c4-4fe0-8142-11b42c710c48"
        },
        "item": {
          "id": "dadf4157-bed5-49e7-b91a-219f52a9c35d",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "ee663f80-7799-466c-b5f2-8a4643635533",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2eb81f53-5efd-4dbf-a409-d8e78002b17f",
        "cursor": {
          "ref": "b075331d-1ccf-4db6-9d93-a2074b37364a",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "2fc2330e-50ac-49c1-b80a-cffa60ddeab4"
        },
        "item": {
          "id": "2eb81f53-5efd-4dbf-a409-d8e78002b17f",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "8487289f-194a-4be4-8878-ecf69cbdfbed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "586bab43-d3f0-44bc-8631-6c878cd117df",
        "cursor": {
          "ref": "da450fa2-d8f9-4906-932a-8ef42714a659",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "98ac6465-f670-4153-9416-c2267e7db1e4"
        },
        "item": {
          "id": "586bab43-d3f0-44bc-8631-6c878cd117df",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "48880e2d-b6cc-476a-bb30-85ddf9c6c798",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2adc4ad2-1707-46f2-902d-ed068c361509",
        "cursor": {
          "ref": "9c8f8cc6-8632-497a-9799-c1630b023783",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "fd5ce02b-ab54-41fe-8d8e-18cb98346d41"
        },
        "item": {
          "id": "2adc4ad2-1707-46f2-902d-ed068c361509",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "b993b6be-3f8f-4571-bba1-009d1edcdff3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36e1aa16-4bad-4c95-8a90-65ea7a2fd178",
        "cursor": {
          "ref": "b71f42d1-7cff-4cc4-83b2-67c842a68c14",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "f885eb86-c4e9-4083-88ab-3a838229469a"
        },
        "item": {
          "id": "36e1aa16-4bad-4c95-8a90-65ea7a2fd178",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "a112ba36-686f-4b89-a8e4-61428b9ee5c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "072dc7be-a121-41a5-82ed-714f0d4384ea",
        "cursor": {
          "ref": "0671f5f6-7341-46bf-b062-0d5cf4428c62",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "1b27c826-39a6-4487-a8e9-98150d933d27"
        },
        "item": {
          "id": "072dc7be-a121-41a5-82ed-714f0d4384ea",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "a934f672-8048-41cf-ad75-910ae5f1e52c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e4df4ef-b4bf-4392-9832-a1d78edc0937",
        "cursor": {
          "ref": "bf13ade8-7eb8-4dee-aaf5-56400ebc5152",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "e2386aab-40f8-40b1-8afa-0fd3d85ffc1c"
        },
        "item": {
          "id": "2e4df4ef-b4bf-4392-9832-a1d78edc0937",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "c7c11fe0-714c-4d83-8715-66e4835d056e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc0bfe46-fa9f-49c2-a588-03edb0b7ead9",
        "cursor": {
          "ref": "031ba79b-d65e-44bf-a40d-2e9a5c025347",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "3aa31338-22d6-4486-aec9-20a3a1b86168"
        },
        "item": {
          "id": "bc0bfe46-fa9f-49c2-a588-03edb0b7ead9",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "59c7b475-ee19-4fcc-8ec8-fa21fa2aa7dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "867f87d3-3dce-4c27-8443-7c874dd6b798",
        "cursor": {
          "ref": "4329b936-8f95-4dfa-b4bb-c6a1ffb90dbf",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "b052ac0b-b11a-4349-9fcf-fbc7d046a90b"
        },
        "item": {
          "id": "867f87d3-3dce-4c27-8443-7c874dd6b798",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "5bfe4ec7-1c4f-4099-ba28-62a5bdaf99fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "119fae14-c588-410c-b4ab-ebdcceab65af",
        "cursor": {
          "ref": "e89fdfdf-8cc3-4eaf-9d0a-7be13804b3ec",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "6e27c452-d22c-47a7-957d-039f202cabcf"
        },
        "item": {
          "id": "119fae14-c588-410c-b4ab-ebdcceab65af",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "3c3b4317-bf85-42f0-9e3e-abbc4ef5cf3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "892c468f-6afa-425f-a9dd-671d3608bed6",
        "cursor": {
          "ref": "eb98e786-51e8-4590-b021-733f5a63f42d",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "ea1b9f78-3577-4d3c-9c26-195ae922f712"
        },
        "item": {
          "id": "892c468f-6afa-425f-a9dd-671d3608bed6",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "b3b9b6f3-80fe-4cce-888d-8253f0980070",
          "status": "OK",
          "code": 200,
          "responseTime": 131,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "6704d783-1437-4b76-a614-fd5320d423ee",
        "cursor": {
          "ref": "a975267a-e938-43c5-90af-20a45e357c48",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "43943f2b-25a7-4ce0-bcad-656d46bff547"
        },
        "item": {
          "id": "6704d783-1437-4b76-a614-fd5320d423ee",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "3754322a-628c-48d7-ba5f-5e057b28a6a8",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "48aee5ce-4fa2-40d4-abe3-e3ce5ab0b9d9",
        "cursor": {
          "ref": "61b53111-2b2c-4812-9fc6-a0b90178a004",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "b4343615-e6ed-4c27-b39e-22ef1066ae8a"
        },
        "item": {
          "id": "48aee5ce-4fa2-40d4-abe3-e3ce5ab0b9d9",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "e25b7e19-6dce-49cc-9931-19208bd244c3",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "bbf539fd-3689-40d6-8eee-1f67340e9327",
        "cursor": {
          "ref": "60330d1e-5598-41d7-be36-9bcb8954d220",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "08cf6bb4-9a9c-4c36-8a86-5543754f4ea6"
        },
        "item": {
          "id": "bbf539fd-3689-40d6-8eee-1f67340e9327",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "b25f0f9c-f5f7-412d-bc3c-0932c8f85213",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "9e563589-ba0d-4996-8933-90f9eb07ff67",
        "cursor": {
          "ref": "0a373bd0-f341-44bf-b2b1-45758fd59ead",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "431a9b13-d31b-49ac-8b2f-a2d7cf9e4b55"
        },
        "item": {
          "id": "9e563589-ba0d-4996-8933-90f9eb07ff67",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "5e252302-0811-4f42-90bb-167c484ec3e1",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "4c7472a0-683f-4a65-ac5d-ccdce93f2f65",
        "cursor": {
          "ref": "84f2351a-60a1-48dd-8be9-8cc2a822b2e4",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "2657ed7b-2a75-48a0-8329-aea0de5fbb8e"
        },
        "item": {
          "id": "4c7472a0-683f-4a65-ac5d-ccdce93f2f65",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "16be2924-7dc6-4a66-828f-f22b995e0b97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9f954da-5309-4e26-b2ec-b81c298d2b19",
        "cursor": {
          "ref": "77a65a2d-ef28-4d16-822e-d6c9751f1291",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "50ee9119-528f-4a15-b89b-6f5771c51979"
        },
        "item": {
          "id": "c9f954da-5309-4e26-b2ec-b81c298d2b19",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "ba4b1771-0fce-476b-b31d-95dc55905ae1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf1ca9c0-0593-4a0e-b3db-df9a96443182",
        "cursor": {
          "ref": "8fd1bc11-d54d-4a7e-9b8a-b3d22876ac9d",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "3ab2cbb3-e039-4f65-b2ef-4dfec781ca83"
        },
        "item": {
          "id": "cf1ca9c0-0593-4a0e-b3db-df9a96443182",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "4e09e3f2-faa7-4512-982f-929ff443fef7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99e57bab-cd92-4042-811e-505ffe720ad8",
        "cursor": {
          "ref": "33fb65bf-ba2a-482b-b0e3-bedacdc2266d",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "6ff09312-96d4-427f-bb8a-76e0f0adab53"
        },
        "item": {
          "id": "99e57bab-cd92-4042-811e-505ffe720ad8",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "cb343f77-5225-4938-b221-19dc7fc10e6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "454fc2e3-d882-43b5-9f37-e5bd7337909b",
        "cursor": {
          "ref": "d34f5d5e-e0db-4ea9-8ba4-992aba80a478",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "1de99855-45f8-4f91-a587-922e416d4a8e"
        },
        "item": {
          "id": "454fc2e3-d882-43b5-9f37-e5bd7337909b",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "ff621ee9-ed3d-4572-acdb-a483abdd04cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1a3c5cc-0f00-4313-a045-52ebd1ef45c1",
        "cursor": {
          "ref": "2437c1a3-0380-4fd5-a273-4e27d0e10b0f",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "cec2575c-5f8f-4e48-8745-fbeb772a1a0d"
        },
        "item": {
          "id": "c1a3c5cc-0f00-4313-a045-52ebd1ef45c1",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "e69667e8-38b2-4dd9-9a19-c8863aca4df4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11df7a1d-d287-4b7a-8337-2c8430c4c10c",
        "cursor": {
          "ref": "c02523db-e086-4057-9a24-b5374cf7d8d5",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "75c6b954-1014-45a3-af28-9e60a412345f"
        },
        "item": {
          "id": "11df7a1d-d287-4b7a-8337-2c8430c4c10c",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "8004d35b-f1bd-4ca1-8dbb-bd84d3bef88c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08544d53-be58-4d13-a151-5412e6b70db1",
        "cursor": {
          "ref": "69e2c43e-aaff-408e-888d-d5ef7af3c488",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "7160b7c7-88d7-4070-be37-a025a49b1440"
        },
        "item": {
          "id": "08544d53-be58-4d13-a151-5412e6b70db1",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "13122155-1c30-4f91-a521-d51098616274",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5fd3769-17cf-4aca-873e-a9696d229ef9",
        "cursor": {
          "ref": "1f6c7938-4cdc-4ab6-abff-e40ee6d00228",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "048e8d5c-c74f-42e5-8bd6-56cfb543c017"
        },
        "item": {
          "id": "e5fd3769-17cf-4aca-873e-a9696d229ef9",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "3599bb1d-b68d-40f4-83a2-fb2ad3337220",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c0daefc-dbc0-4752-940d-15b9e74da80a",
        "cursor": {
          "ref": "0e2390d6-1e17-4adb-a832-6aac34f3b101",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "46ecacd5-6e8e-41e1-94a2-c08ec65d02eb"
        },
        "item": {
          "id": "9c0daefc-dbc0-4752-940d-15b9e74da80a",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "953b8e0b-8b6c-4d1d-abc3-2bcabed582f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "772769c0-79b5-4398-a750-099f2c0ddfa8",
        "cursor": {
          "ref": "0b29d676-52ce-43ee-9fee-06590f60dfb2",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "7ce0248f-68c9-40f8-9eb0-89e68ff44bd1"
        },
        "item": {
          "id": "772769c0-79b5-4398-a750-099f2c0ddfa8",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "613c2994-6462-4280-912d-a5fbd6e70d55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d322b2cb-a821-4830-a5a6-1933f332f2b7",
        "cursor": {
          "ref": "acc9928e-f417-4ce7-8144-79a9051c3bb1",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "e710919b-ecad-4bef-a5a6-9cb2c962961a"
        },
        "item": {
          "id": "d322b2cb-a821-4830-a5a6-1933f332f2b7",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "c725d133-9d2b-42f6-a65d-0e09ae187840",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 166,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53a1f7ab-64ba-474a-848c-fa5ab45050a4",
        "cursor": {
          "ref": "2ef75ec8-6a28-43cd-8f3a-ec20badc0796",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "e6ed4b0f-81db-420b-98bf-8f010b9b9e0f"
        },
        "item": {
          "id": "53a1f7ab-64ba-474a-848c-fa5ab45050a4",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "8d4daab0-36ec-47da-8469-0a75e797f916",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55b5d743-2d81-48af-bb25-366f02917ea6",
        "cursor": {
          "ref": "2143ddcf-8f09-44df-a5dd-31d2c0860d25",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "0a8a5045-baf8-4b75-ac7c-490c9666bb9a"
        },
        "item": {
          "id": "55b5d743-2d81-48af-bb25-366f02917ea6",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "25def089-f7db-4516-bca0-998f6e7acba8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ade6f3b7-34aa-4c58-a65f-304c19d14717",
        "cursor": {
          "ref": "f2502974-c4bd-4315-b6e4-213af629e49b",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "9986e17d-7707-4c8a-906d-dd5b519ca8f2"
        },
        "item": {
          "id": "ade6f3b7-34aa-4c58-a65f-304c19d14717",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "90b4c79e-593a-4595-90f7-429b3732bc03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99e3433a-9f8c-4960-a13f-a45a9ac7864d",
        "cursor": {
          "ref": "c882d4f6-4f29-48d1-bb12-d8a4de08910c",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "0a5b4125-5a39-42dc-b5fe-282de1a3a42d"
        },
        "item": {
          "id": "99e3433a-9f8c-4960-a13f-a45a9ac7864d",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "d1c47858-fe5f-4382-a707-d5ed796d451a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05132866-2833-4f68-86ca-8343b270390c",
        "cursor": {
          "ref": "a97a43e0-4af5-44da-9bce-936642664830",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "3c50b8a9-ee52-48c1-a869-46f59ee45377"
        },
        "item": {
          "id": "05132866-2833-4f68-86ca-8343b270390c",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "6401a927-1de8-4bbc-8ecc-dc502684cdd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e34316d-927a-4867-b316-f4c6941860a2",
        "cursor": {
          "ref": "c0933f0d-0b76-4abd-910b-fb1daacb52e5",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "d6b99491-dddd-43f6-8370-13281a00d7f3"
        },
        "item": {
          "id": "6e34316d-927a-4867-b316-f4c6941860a2",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "7fef3174-7631-42ec-afa4-283382cbb71b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d911509-6319-469f-8198-80a64b752166",
        "cursor": {
          "ref": "d1d39ef0-95c4-4119-8b18-1783d999274f",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "7bd932f1-74ab-4b93-a98e-06cceb2ea832"
        },
        "item": {
          "id": "8d911509-6319-469f-8198-80a64b752166",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "36dda078-d242-4260-aa4b-aa4df788d640",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10fc7ad0-38db-4a4c-95ae-eee16c998e06",
        "cursor": {
          "ref": "11264389-2aaa-41fa-874c-7626a8821b6d",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "88499814-eb6d-431f-b29c-9553ea00789f"
        },
        "item": {
          "id": "10fc7ad0-38db-4a4c-95ae-eee16c998e06",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "4e48bf99-9154-451b-b4ea-f9c12e5f2fa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88f14e9c-122f-4b79-a31a-9e523b2db859",
        "cursor": {
          "ref": "d1ade773-a734-40e0-b31c-fae9bcff999f",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "18aba3ca-3bbc-4229-9431-287e0793f761"
        },
        "item": {
          "id": "88f14e9c-122f-4b79-a31a-9e523b2db859",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "4637f42d-d1a9-4066-824d-83e91faf8ece",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec949665-088a-4c61-80c6-d5457753fa3b",
        "cursor": {
          "ref": "25941d49-2795-400f-bff7-d132c94a53a4",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "a5fc2a60-06e5-477d-8102-bb99dd77bcef"
        },
        "item": {
          "id": "ec949665-088a-4c61-80c6-d5457753fa3b",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "47882d2a-6cf9-4b98-99b1-f2f09d3a7e78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e90be05-3384-4658-a385-7c733f146e68",
        "cursor": {
          "ref": "eb098736-8f06-4416-a164-784d0f861c7c",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "1625d39d-a39d-45c2-ab3f-c143e704af87"
        },
        "item": {
          "id": "1e90be05-3384-4658-a385-7c733f146e68",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "a968e20c-ed0a-47f4-a0a2-bbb85c7e02fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7c8ab30-a0aa-4d32-bf5d-1344cbf33763",
        "cursor": {
          "ref": "76059e3a-f363-4b56-bb7a-07b3063b1f4e",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "ab80f061-f853-48d0-8ccb-9605fefd410a"
        },
        "item": {
          "id": "f7c8ab30-a0aa-4d32-bf5d-1344cbf33763",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "c4bf4c78-0f86-4d99-83dc-7cfc7320c72f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "136fea3e-a2a0-4702-aacd-bdc38c919d28",
        "cursor": {
          "ref": "0421358c-7d35-4d11-a51e-60ff09579915",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "7eee4f17-ef9a-45a7-b3a7-580400e28863"
        },
        "item": {
          "id": "136fea3e-a2a0-4702-aacd-bdc38c919d28",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "00270fd4-e21c-4a30-90ab-504a24b0f529",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c377032c-10cb-4b3c-a125-5b33dba69711",
        "cursor": {
          "ref": "fd70d633-5e32-4f7d-aa62-73d66fa127c3",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "b7d5fa36-6137-43b1-97c6-1b51218148c9"
        },
        "item": {
          "id": "c377032c-10cb-4b3c-a125-5b33dba69711",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "8e0ce65a-c4dd-4b93-929d-8cbe4e10d702",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d99af5a1-f522-4e5d-b084-b9e54e6cf232",
        "cursor": {
          "ref": "de63f07f-1308-4025-b629-2fb182cbd748",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "fa19810b-7e13-41b1-b7f3-fcc29b1354ba"
        },
        "item": {
          "id": "d99af5a1-f522-4e5d-b084-b9e54e6cf232",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "70fecdcf-3148-4b59-9503-0a99208e4330",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92f64d62-f024-425e-8993-a16c61ea2c97",
        "cursor": {
          "ref": "20ff2d01-2764-43ff-ab6d-d1a5d7f82dd4",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "abe2d034-44b8-404f-85a2-70dc1763eca3"
        },
        "item": {
          "id": "92f64d62-f024-425e-8993-a16c61ea2c97",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "f641a02d-a577-462c-9ec6-d78de8a5de4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de31ce2d-0b13-4f64-a9fc-c275ec85c198",
        "cursor": {
          "ref": "3eceb835-ffc7-4895-aedc-2fd7ab44dcd5",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "f9f5a68f-121c-4454-8189-7ed2874aebb5"
        },
        "item": {
          "id": "de31ce2d-0b13-4f64-a9fc-c275ec85c198",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "1bc0e0b4-4c46-480e-a25d-8f8936f6b934",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ceab2d0-5910-4d86-9413-bcd3acd6869b",
        "cursor": {
          "ref": "9828d115-dffc-436a-b80a-a52743a315f1",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "ac15ff8c-6db6-4c97-a5b9-375def97d0ba"
        },
        "item": {
          "id": "4ceab2d0-5910-4d86-9413-bcd3acd6869b",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "05ddc27c-f3df-4462-a5bd-4d5acad28d65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2445d81-d9b3-48b7-ba81-0ac7c200ca67",
        "cursor": {
          "ref": "76d5f37f-3985-455f-a8e6-33f29a65002e",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "b3f2c54f-7268-4c56-9eb2-23834cefbd00"
        },
        "item": {
          "id": "f2445d81-d9b3-48b7-ba81-0ac7c200ca67",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "846b6265-67ca-436b-a107-24f02be2aab8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "890dd586-b247-4143-8933-07059d085877",
        "cursor": {
          "ref": "ea9becf7-430b-4080-afee-9d15db34e2d7",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "ccb68a08-080f-49a7-b174-4d23435fa0ab"
        },
        "item": {
          "id": "890dd586-b247-4143-8933-07059d085877",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "79e2fc5c-66f5-44be-9cf1-9e08a5721f54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79b3193d-e174-4739-b6e0-7ea419209418",
        "cursor": {
          "ref": "67435b32-6451-4a14-83dd-d87679c812bd",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "874663ae-f19c-4ecd-9cc0-e018ce1fca9e"
        },
        "item": {
          "id": "79b3193d-e174-4739-b6e0-7ea419209418",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "1769669e-575b-474d-bdb8-9544d3791793",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "892f4e0b-8806-4760-b2e4-3ebe993e9adc",
        "cursor": {
          "ref": "1645725f-fd63-4d91-a08e-7cabf69a6434",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "40d28990-2357-449a-8135-e1f8f3eb6d71"
        },
        "item": {
          "id": "892f4e0b-8806-4760-b2e4-3ebe993e9adc",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "08e445e8-a189-4070-8908-6fef1d84a1e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7059c301-990f-47f8-9518-f80f838acbca",
        "cursor": {
          "ref": "989794c0-b974-4a8c-9c01-0322dba1863d",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "f1d94d62-762c-430e-b2c0-4676324ca430"
        },
        "item": {
          "id": "7059c301-990f-47f8-9518-f80f838acbca",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "0de3df04-e58c-4391-85b7-401b0263129b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70bb60ff-2360-47e7-ae12-c1f3a613d0bd",
        "cursor": {
          "ref": "2e9c3a23-750d-4379-9d2c-6c31e60deaf9",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "70e6e7c3-bc02-4ec3-9c79-11da263a7555"
        },
        "item": {
          "id": "70bb60ff-2360-47e7-ae12-c1f3a613d0bd",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "199b6c66-1453-46df-af44-1a3f254057e3",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "efaabc90-b582-47f7-87ac-171e22bdb8b7",
        "cursor": {
          "ref": "fb90513f-be39-4c96-964c-81b722f179df",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "39b86ff2-8a6b-48eb-b020-bc4a6aa0b0f6"
        },
        "item": {
          "id": "efaabc90-b582-47f7-87ac-171e22bdb8b7",
          "name": "credentials_verify"
        },
        "response": {
          "id": "0f989d3a-80ac-433f-845a-fe9cc350a970",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "1559e992-8e56-4e2c-8721-d8acceff89e6",
        "cursor": {
          "ref": "7356e14d-154c-4a31-af31-ab52d5ece237",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "c8f56a84-3e83-47a5-946b-74f8f1119105"
        },
        "item": {
          "id": "1559e992-8e56-4e2c-8721-d8acceff89e6",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "de9fb8c7-caf6-4e12-a041-6407e4dc1634",
          "status": "OK",
          "code": 200,
          "responseTime": 124,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "8541eca5-4936-4bcb-90ef-fcabffeddb5f",
        "cursor": {
          "ref": "cb697efb-3542-458c-b893-7ba10af7be71",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "d5c14fa0-7be5-4e16-82a8-75a50c3de6b7"
        },
        "item": {
          "id": "8541eca5-4936-4bcb-90ef-fcabffeddb5f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "92a690b4-7609-4294-a351-cd6d656355a7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8541eca5-4936-4bcb-90ef-fcabffeddb5f",
        "cursor": {
          "ref": "cb697efb-3542-458c-b893-7ba10af7be71",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "d5c14fa0-7be5-4e16-82a8-75a50c3de6b7"
        },
        "item": {
          "id": "8541eca5-4936-4bcb-90ef-fcabffeddb5f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "92a690b4-7609-4294-a351-cd6d656355a7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ac148f9-7324-482d-ab46-28eca0859db9",
        "cursor": {
          "ref": "fe3a085d-6cac-48d5-b022-ddf4254f670b",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "dc40f433-0bb7-456c-98c1-cae93560627d"
        },
        "item": {
          "id": "8ac148f9-7324-482d-ab46-28eca0859db9",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "a1b31346-38ee-4bd0-978b-2aaf295ef0d7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a8738ff-4bbe-47fb-a6b6-f3131df8652a",
        "cursor": {
          "ref": "c8f1fd2c-004c-445f-87ce-589c042c2e76",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "047addf9-1233-4e3c-aadd-e0485ad57e63"
        },
        "item": {
          "id": "2a8738ff-4bbe-47fb-a6b6-f3131df8652a",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "7d5945c9-241a-4bbe-b3cd-208457d0b4e9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}